{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About Dasharo is an open-source firmware distribution focusing on seamless deployment, clean and simple code, long-term maintenance, professional support, transparent validation, superior documentation, privacy-respecting implementation, liberty for the owners and trustworthiness for all. More about Dasharo Dasharo homepage Dasharo is registered trademark and product developed by 3mdeb . Compatible hardware Refer to the Supported hardware section. Community Dasharo Matrix Workspace - general Dasharo discussion, support and other open-source firmware related work. Dasharo OSF vPub - 3-4 times a year we organize online party to discuss recent achievements in open-source firmware, open source hardware and open instruction set architecture. Feel free to check the website about recent vPub plans or subscribe to newsletter. Discord server Dasharo Twitter account","title":"About Dasharo"},{"location":"#_1","text":"","title":""},{"location":"#about","text":"Dasharo is an open-source firmware distribution focusing on seamless deployment, clean and simple code, long-term maintenance, professional support, transparent validation, superior documentation, privacy-respecting implementation, liberty for the owners and trustworthiness for all. More about Dasharo Dasharo homepage Dasharo is registered trademark and product developed by 3mdeb .","title":"About"},{"location":"#compatible-hardware","text":"Refer to the Supported hardware section.","title":"Compatible hardware"},{"location":"#community","text":"Dasharo Matrix Workspace - general Dasharo discussion, support and other open-source firmware related work. Dasharo OSF vPub - 3-4 times a year we organize online party to discuss recent achievements in open-source firmware, open source hardware and open instruction set architecture. Feel free to check the website about recent vPub plans or subscribe to newsletter. Discord server Dasharo Twitter account","title":"Community"},{"location":"glossary/","text":"Glossary After years of providing services and products on firmware market we recognize that it is poisoned by incorrect and confusing terminology. In following glossary we would like to explain most used terms from Dasharo Documentation. We try to refer to standards, literature and community best practices to keep content added by us minimalistic. Embedded Firmware We use definition explained in first chapter of \"Embedded Firmware Solutions\" book by Jiming Sun, Marc Jones, Stefan Reinauer and Vincent Zimmer. Firmware is \"layer of software between the hardware and the operating system (OS), with the main purpose to initialize and abstract enough hardware so that the operating systems and their drivers can further configure the hardware to its full functionality.\" Rising complexity of hardware initialization and need for its manageability created need for BMC (Board Management Controllers), EC (Environmental Controllers) and even more specialized one like USB Power Delivery firmware. What may make that firmware also covered by above definition. Dasharo Hardware Compatibility List Report Dasharo HCL Report dumps most important information about platform and backup SPI NOR flash. Gathered information can be used for future analysis, debugging and recovery. Optionally scripts upload dump to Dasharo HCL Backup Server, so Dasharo Team can improve open source firmware product line and support customers in case of issues. As temporary solution we use 3mdeb NextCloud as Dasharo HCL Backup Server. Dasharo HCL Reports are also used during open source firmware port feasibilty analysis, so if you are interested in Dasharo support for your hardware, feel free to reach us . Please note Dasharo HCL Report may contain sensitive information like serial numbers. Please do not make this information public. Dasharo Team respect your privacy. Dasharo Blobs Transmission Unfortunately, some hardware platforms cannot be fully functional without binary blobs in the firmware. Some binary blobs have no EULA or any other license discussing redistributability. To avoid issues, Dasharo Blobs Transmission scripts extract blobs from SPI NOR flash backup and patch Dasharo open-source firmware distribution before initial deployment.","title":"Glossary"},{"location":"glossary/#glossary","text":"After years of providing services and products on firmware market we recognize that it is poisoned by incorrect and confusing terminology. In following glossary we would like to explain most used terms from Dasharo Documentation. We try to refer to standards, literature and community best practices to keep content added by us minimalistic.","title":"Glossary"},{"location":"glossary/#embedded-firmware","text":"We use definition explained in first chapter of \"Embedded Firmware Solutions\" book by Jiming Sun, Marc Jones, Stefan Reinauer and Vincent Zimmer. Firmware is \"layer of software between the hardware and the operating system (OS), with the main purpose to initialize and abstract enough hardware so that the operating systems and their drivers can further configure the hardware to its full functionality.\" Rising complexity of hardware initialization and need for its manageability created need for BMC (Board Management Controllers), EC (Environmental Controllers) and even more specialized one like USB Power Delivery firmware. What may make that firmware also covered by above definition.","title":"Embedded Firmware"},{"location":"glossary/#dasharo-hardware-compatibility-list-report","text":"Dasharo HCL Report dumps most important information about platform and backup SPI NOR flash. Gathered information can be used for future analysis, debugging and recovery. Optionally scripts upload dump to Dasharo HCL Backup Server, so Dasharo Team can improve open source firmware product line and support customers in case of issues. As temporary solution we use 3mdeb NextCloud as Dasharo HCL Backup Server. Dasharo HCL Reports are also used during open source firmware port feasibilty analysis, so if you are interested in Dasharo support for your hardware, feel free to reach us . Please note Dasharo HCL Report may contain sensitive information like serial numbers. Please do not make this information public. Dasharo Team respect your privacy.","title":"Dasharo Hardware Compatibility List Report"},{"location":"glossary/#dasharo-blobs-transmission","text":"Unfortunately, some hardware platforms cannot be fully functional without binary blobs in the firmware. Some binary blobs have no EULA or any other license discussing redistributability. To avoid issues, Dasharo Blobs Transmission scripts extract blobs from SPI NOR flash backup and patch Dasharo open-source firmware distribution before initial deployment.","title":"Dasharo Blobs Transmission"},{"location":"newcomers/","text":"Newcomers If you are new to Dasharo, this section is to help you get started using Dasharo firmware and possibly contributing to making it better. coreboot If you have no prior experience with coreboot, it's highly recommended to visit OpenSecurityTraining2 and finish these courses: Arch4031 , Arch4021 OpenSecurityTraining2 provides other great courses related to firmware, which are all freely available here . Docker coreboot needs a specific toolchain to be built, hence why it is usually built inside of a Docker. In case of Dasharo, all images are built using Docker, so you will make sure it works properly on your system. Follow these two links: Install Docker Engine on Ubuntu Post-installation steps for Linux Once you have Docker set up on your machine, you can pull docker images from coreboot/coreboot-sdk (keep in mind that some platforms require older docker images). To pull a Docker image, use: docker pull coreboot/coreboot-sdk:<tag> The typical procedure to build a coreboot image is as follows: git clone https://github.com/Dasharo/coreboot.git cd coreboot git checkout <platform>/release docker run -u $UID --rm -it \\ -v $PWD :/home/coreboot/coreboot -w /home/coreboot/coreboot coreboot/coreboot-sdk:<tag> \\ bash cp configs/config.<platform> .config make olddefconfig make Dasharo Contribution All code review and all issues related to Dasharo are resolved on GitHub . An account there is necessary to contribute and report issues. All Dasharo repositories can be found here . When you have an account on GitHub go ahead and configure an SSH key . It's also highly recommended to configure a GPG key before contributing anything. Instructions to do that can be found here . With that your account should be ready to contribute to Dasharo. Since Dasharo is based on coreboot and edk2, it's best to contribute directly in the upstream if possible. Refer to these documents: contributing to coreboot contributing to edk2 If for some reason you can't contribute your change in upstream repositories, then consider contributing directly to Dasharo. Before doing anything it's best to get familiar with source code structure . To create a patch: fork the repository which you want to edit, in the forked repository: git checkout <platform>/develop (make sure to start from the correct branch), create a new branch: git checkout -b <platform>/<feature> , commit your changes: make sure to sign your commits by using git commit -sm \"<commit_message>\" , <commit_message> should be: path/to/file: Change description , one commit should be one logical change, create a pull request from a fork . Do not forget to check whether patch has been reviewed and changes to your contribution (PR) are needed. If so, remember about answering to each addressed thread with information about change in the commit template: Fixed: <link to commit> example: Fixed 0a2a4ee Dasharo Matrix Space Matrix is a communicator used at Dasharo. If you want quick answers it's best to join our matrix space and talk to us there. Dasharo Matrix Space If you've never used Matrix before, you will first need to get a client. Available clients are listed here .","title":"New? Start here"},{"location":"newcomers/#newcomers","text":"If you are new to Dasharo, this section is to help you get started using Dasharo firmware and possibly contributing to making it better.","title":"Newcomers"},{"location":"newcomers/#coreboot","text":"If you have no prior experience with coreboot, it's highly recommended to visit OpenSecurityTraining2 and finish these courses: Arch4031 , Arch4021 OpenSecurityTraining2 provides other great courses related to firmware, which are all freely available here .","title":"coreboot"},{"location":"newcomers/#docker","text":"coreboot needs a specific toolchain to be built, hence why it is usually built inside of a Docker. In case of Dasharo, all images are built using Docker, so you will make sure it works properly on your system. Follow these two links: Install Docker Engine on Ubuntu Post-installation steps for Linux Once you have Docker set up on your machine, you can pull docker images from coreboot/coreboot-sdk (keep in mind that some platforms require older docker images). To pull a Docker image, use: docker pull coreboot/coreboot-sdk:<tag> The typical procedure to build a coreboot image is as follows: git clone https://github.com/Dasharo/coreboot.git cd coreboot git checkout <platform>/release docker run -u $UID --rm -it \\ -v $PWD :/home/coreboot/coreboot -w /home/coreboot/coreboot coreboot/coreboot-sdk:<tag> \\ bash cp configs/config.<platform> .config make olddefconfig make","title":"Docker"},{"location":"newcomers/#dasharo-contribution","text":"All code review and all issues related to Dasharo are resolved on GitHub . An account there is necessary to contribute and report issues. All Dasharo repositories can be found here . When you have an account on GitHub go ahead and configure an SSH key . It's also highly recommended to configure a GPG key before contributing anything. Instructions to do that can be found here . With that your account should be ready to contribute to Dasharo. Since Dasharo is based on coreboot and edk2, it's best to contribute directly in the upstream if possible. Refer to these documents: contributing to coreboot contributing to edk2 If for some reason you can't contribute your change in upstream repositories, then consider contributing directly to Dasharo. Before doing anything it's best to get familiar with source code structure . To create a patch: fork the repository which you want to edit, in the forked repository: git checkout <platform>/develop (make sure to start from the correct branch), create a new branch: git checkout -b <platform>/<feature> , commit your changes: make sure to sign your commits by using git commit -sm \"<commit_message>\" , <commit_message> should be: path/to/file: Change description , one commit should be one logical change, create a pull request from a fork . Do not forget to check whether patch has been reviewed and changes to your contribution (PR) are needed. If so, remember about answering to each addressed thread with information about change in the commit template: Fixed: <link to commit> example: Fixed 0a2a4ee","title":"Dasharo Contribution"},{"location":"newcomers/#dasharo-matrix-space","text":"Matrix is a communicator used at Dasharo. If you want quick answers it's best to join our matrix space and talk to us there. Dasharo Matrix Space If you've never used Matrix before, you will first need to get a client. Available clients are listed here .","title":"Dasharo Matrix Space"},{"location":"ways-you-can-help-us/","text":"Ways you can help us Please consider the following methods to support us if you value what we are doing. Join Dasharo Matrix Community We have created Matrix Dasharo Space, an open-source online community, inviting you to join us. Matrix Dasharo Space is a place where you can find solutions to many problems, and if not - our community will gladly help you. We encourage you to troubleshoot your open-source firmware issues there. Here is invitation link . Inside you will find multiple rooms. The main discussion happens in \"Dasharo - General\". Join Dasharo open-source firmware vPub We encourage you to join us at our vPub parties, which we hold 3-4x / year in \"Dasharo OSF vPub.\" vPub is an alternative to live meeting for those who can't or don't want to meet live. It also served as salvation in times of COVID-19. Our goal is to have a platform for open-source firmware, open-source hardware, and open instruction set architectures discussion in a casual atmosphere. For more information please visit event website . Write a Google review Google reviews help us attract new customers that can sponsor open-source development and provide value to the community. Please follow Google review link . Follow us on social media Follow us on Twitter: Dasharo , 3mdeb Follow us on Mastodon: Dasharo , 3mdeb Follow us on LinkedIn: 3mdeb Like us on Facebook: 3mdeb Join Reddit communities: Dasharo , 3mdeb Contribute through Github If you have a GitHub account, you can help us in multiple ways: Follow out organizations: Dasharo , 3mdeb Give a star to repositories you like If you want to contribute, refer to dasharo contribution Report issues, your test results, and feature ideas in dasharo-issues Donate money A donation of any amount motivates us because it means you care about our open-source firmware mission. It is straightforward if you don't have time for other contributions, and there are multiple options - feel free to choose one that works for you. Become a Dasharo Entry Subscription subscriber Buy the Dasharo Entry Subscription for Desktop if you own/use/buy a machine running Dasharo firmware: 1-year subscription for Desktop 2-year subscription for Desktop 3-year subscription for Desktop Link to all available subscriptions Or buy the hardware including the Dasharo Entry Subscription from us, e.g.: MSI PRO Z690-A DDR4 motherboard with Dasharo Entry Subscription MSI PRO Z690-A DDR4 with Dasharo Entry Subscription \u2013 Full PC Build or other platforms As a Dasharo Entry Subscription subscriber you will get: The latest Dasharo Entry Subscription Releases issued by Dasharo Team Special Dasharo Updates for Dasharo Entry Subscription subscribers \u2013 Community receives one update per year, but Dasharo Entry Subscription subscribers are not limited to it. Number of updates depends on the number of Dasharo Entry Subscriptions sold and the availability of other funding (e.g., NLNet, corporate sponsors, community donations). Dasharo Primer Support through invite-only Matrix channel where we often gather Dasharo Entry Subscription subscribers' opinion and share exciting news about Dasharo direction Insider's view and influence on Dasharo features roadmap \u2013 you can have a real impact on Dasharo development If you are interested in other market segments than Desktop, please get in touch with us with the specific hardware model you have in mind PayPal Transferwise (aka Wise) Donations in USD TransferWise (ACH/ABA: 026073150) IBAN 8311535451 SWIFT: CMFGUS33 Donations in EUR TransferWise Europe SA IBAN: BE11 9672 7712 7548 SWIFT: TRWIBEB1XXX Bank wire Donations in USD 3mdeb Sp. z o.o IBAN: PL 87 1160 2202 0000 0005 1576 2206 SWIFT: BIGBPLPW Donations in EUR 3mdeb Sp. z o.o IBAN: PL 94 1160 2202 0000 0005 1576 1304 SWIFT: BIGBPLPW BTC and other crypto coins Our company does not currently support payment in cryptocurrencies. While we understand that cryptocurrencies have gained popularity and recognition in recent years, we have chosen to retain our focus on conventional payment channels. Firstly, we prioritize financial compliance and adhere to EU regulations. Managing cryptocurrencies would require extensive knowledge and resources to ensure compliance, which we are not equipped to handle at our current stage of development. Moreover, the uncertain and evolving nature of cryptocurrency regulations introduces significant risks and potential vulnerabilities. These factors could potentially lead to fiscal audits that could hamper the operations of 3mdeb and impede the progress of Dasharo development. We believe that by adhering to established payment methods, we can ensure a consistent and reliable payment process for our customers. This allows us to maintain a high level of security, accountability, and regulatory compliance. Technology Commons Trust If you are concerned about the privacy of your donation as well as the fact how we would spend the money, then please consider Technology Commons Trust Open Firmware Fund. Addresses: Bitcoin: 1GUm6FF7Fon6Umrt5CSi3AxxYg8dM2NKvV Monero: 89eBqUwoCpnPoUKD367kJm3Gsw639EUSdG3xwUyQmDroKHWHPyhYmJ63uP41ArHfPsBihNFTYjASpRUGaeSyp3JS9BmtjpQ PKT: pkt1qyv4gmnvvg2vfyj89e63thzj68jf2y9k7ssee7v If you want to contribute to other cryptocurrencies, please visit OFF website for details about contact information. We are pretty sure the Technology Commons Trust team will find the way. Open Collective You can donate by using 3mdeb's Open Collective page - a legal and financial tech platform that enables over 300 groups to raise and spend over $13 million dollars a year in full transparency. Purchasing merchandise We're excited to offer a range of Dasharo merchandise products to help support our open-source firmware distribution project. By purchasing items such as t-shirts and mugs, you can support Dasharo and help us continue developing and improving the firmware. Our online shop makes browsing and ordering merchandise easy, and we offer fast shipping to get your items to you quickly. Whether you're looking for a new t-shirt to wear to events or a mug for your morning coffee, we have various products. Head over to our shop and browse our selection of Dasharo merchandise! Can't see your option? Contact us contact@dasharo.com For OEM/ODM: Join the private-beta program We created Dasharo private beta program for OEM/ODM to improve quality and the efficiency of platform firmware development and deployment. Program benefits: Early access to the Dasharo roadmap reflects the most recent market trends and covers future hardware support and features. Early access to information about firmware development funding campaigns. Early access to source code and release binaries. Dasharo Tools Suite for seamless integration of value-added features. Dasharo Marketing Package helps explain the value that Dasharo brings to the product. Professional support at all stages of the product life cycle. Vertical market integration support. How to join? Please send us an email to contact@dasharo.com .","title":"Ways you can help us"},{"location":"ways-you-can-help-us/#ways-you-can-help-us","text":"Please consider the following methods to support us if you value what we are doing.","title":"Ways you can help us"},{"location":"ways-you-can-help-us/#join-dasharo-matrix-community","text":"We have created Matrix Dasharo Space, an open-source online community, inviting you to join us. Matrix Dasharo Space is a place where you can find solutions to many problems, and if not - our community will gladly help you. We encourage you to troubleshoot your open-source firmware issues there. Here is invitation link . Inside you will find multiple rooms. The main discussion happens in \"Dasharo - General\".","title":"Join Dasharo Matrix Community"},{"location":"ways-you-can-help-us/#join-dasharo-open-source-firmware-vpub","text":"We encourage you to join us at our vPub parties, which we hold 3-4x / year in \"Dasharo OSF vPub.\" vPub is an alternative to live meeting for those who can't or don't want to meet live. It also served as salvation in times of COVID-19. Our goal is to have a platform for open-source firmware, open-source hardware, and open instruction set architectures discussion in a casual atmosphere. For more information please visit event website .","title":"Join Dasharo open-source firmware vPub"},{"location":"ways-you-can-help-us/#write-a-google-review","text":"Google reviews help us attract new customers that can sponsor open-source development and provide value to the community. Please follow Google review link .","title":"Write a Google review"},{"location":"ways-you-can-help-us/#follow-us-on-social-media","text":"Follow us on Twitter: Dasharo , 3mdeb Follow us on Mastodon: Dasharo , 3mdeb Follow us on LinkedIn: 3mdeb Like us on Facebook: 3mdeb Join Reddit communities: Dasharo , 3mdeb","title":"Follow us on social media"},{"location":"ways-you-can-help-us/#contribute-through-github","text":"If you have a GitHub account, you can help us in multiple ways: Follow out organizations: Dasharo , 3mdeb Give a star to repositories you like If you want to contribute, refer to dasharo contribution Report issues, your test results, and feature ideas in dasharo-issues","title":"Contribute through Github"},{"location":"ways-you-can-help-us/#donate-money","text":"A donation of any amount motivates us because it means you care about our open-source firmware mission. It is straightforward if you don't have time for other contributions, and there are multiple options - feel free to choose one that works for you.","title":"Donate money"},{"location":"ways-you-can-help-us/#for-oemodm-join-the-private-beta-program","text":"We created Dasharo private beta program for OEM/ODM to improve quality and the efficiency of platform firmware development and deployment. Program benefits: Early access to the Dasharo roadmap reflects the most recent market trends and covers future hardware support and features. Early access to information about firmware development funding campaigns. Early access to source code and release binaries. Dasharo Tools Suite for seamless integration of value-added features. Dasharo Marketing Package helps explain the value that Dasharo brings to the product. Professional support at all stages of the product life cycle. Vertical market integration support. How to join? Please send us an email to contact@dasharo.com .","title":"For OEM/ODM: Join the private-beta program"},{"location":"common-coreboot-docs/checkbox/","text":"Checkbox certification software usage (Ubuntu 22.04) Introduction Checkbox is a flexible test automation software. It\u2019s the main tool used in Ubuntu Certification program. This document describes the usage of Checkbox on Ubuntu 22.04, but it can work on older versions of Ubuntu as well. Prerequisites To run the maximum number of tests, it is advised to connect as many peripheral devices as possible. Before running the checkbox, connect peripherals to available connectors, such as: External: card reader USB ports display ports Ethernet ports headphone and microphone jacks Thunderbolt ports power supply and battery PCMCIA or ExpressCard slot Internal: DIMM/RAM slots SATA ports PCI/PCIe slots M.2 slots TPM header other slots Set up the testing environment For the tests that don't require any interference after their startup, perform the following steps: To stop the screen from being locked on suspend, open the terminal and run the following command: gsettings set org.gnome.desktop.lockdown disable-lock-screen 'true' To execute all sudo commands without a password, open the terminal and run the following command for a user: echo \"user ALL=(ALL:ALL) NOPASSWD: ALL\" | sudo tee /etc/sudoers.d/user To set up automatic login so that a password is not required during testing reboot, power off etc.: Press the SUPER_KEY , type in Users and click Enter. A window with options to change should appear. Click the user name you want to enable automatic login for. On the top right side of the window, click Unlock ...` button. You will be asked to enter your user password to continue. You should now be able to toggle the Automatic Login button to enable it. Restart your system for changes to take effect. Download and install Checkbox Disable Secure Boot. To do this you can follow the steps described in Secure Boot test . Disable Secure boot is required to properly download packages. Open the terminal and type in the below commands to install Checkbox and all its dependencies: sudo add-apt-repository ppa:hardware-certification/public sudo apt-get update sudo apt-get install checkbox-ng plainbox-provider-resource-generic \\ plainbox-provider-certification-client plainbox-provider-checkbox \\ canonical-certification-client Run automatic validation Start checkbox. To do this, open the terminal and run the following command: sudo checkbox-cli After using the above-mentioned command, the following menu should appear: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ( X ) ( Deprecated ) Fully Automatic Client Certification Tests \u2502 \u2502 ( ) After suspend Dock Cert blocker tests \u2502 \u2502 ( ) After suspend Dock Cert tests \u2502 \u2502 ( ) After suspend Dock Hot-plug Cert tests \u2502 \u2502 ( ) After suspend Dock Hot-plug tests \u2502 \u2502 ( ) After suspend LED and oops tests ( using special sleep key ) \u2502 \u2502 ( ) After suspend LED and oops tests ( using special sleep key, cert. \u2502 \u2502 blockers only ) \u2502 \u2502 ( ) After suspend automated USB 3 write/read/compare tests on storage \u2502 \u2502 devices \u2502 \u2502 ( ) After suspend automated USB write/read/compare tests on storage \u2502 \u2502 devices \u2502 \u2502 ( ) After suspend reference tests \u2502 \u2502 ( ) After suspend reference tests ( automated ) \u2502 \u2502 ( ) After suspend reference tests ( certification blockers only ) \u2502 \u2502 ( ) After suspend tests ( discrete GPU automated ) \u2502 \u2502 ( ) After suspend tests ( discrete GPU manual ) \u2502 \u2502 ( ) After suspend tests ( discrete GPU ) \u2502 \u2502 ( ) After suspend tests ( discrete GPU, certification blockers only ) | . . . etc. \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Select test suites ( SPACE - select, ARROWS - navigation, Enter - go to the next test suite), which you want to run. Marking the first option starts the full automated check. After selecting the first option, all modules should be displayed and you can manually uncheck some modules, which you don't want to test. \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 [ X ] + Audio tests \u2502 \u2502 [ X ] + Benchmarks tests \u2502 \u2502 [ X ] + Bluetooth tests \u2502 \u2502 [ X ] + CPU tests \u2502 \u2502 [ X ] + Camera tests \u2502 \u2502 [ X ] + Disk tests \u2502 \u2502 [ X ] + Ethernet Device tests \u2502 \u2502 [ X ] + Firmware tests \u2502 \u2502 [ X ] + Graphics tests \u2502 \u2502 [ X ] + Informational tests \u2502 \u2502 [ X ] + Input Devices tests \u2502 \u2502 [ X ] + Memory tests \u2502 \u2502 [ X ] + Miscellaneous tests \u2502 \u2502 [ X ] + Mobile broadband tests \u2502 \u2502 [ X ] + Non-device specific networking tests \u2502 \u2502 [ X ] + Optical Drive tests \u2502 \u2502 [ X ] + Power Management tests \u2502 \u2502 [ X ] + Suspend tests \u2502 \u2502 [ X ] + TPM 2 .0 ( Trusted Platform Module ) \u2502 \u2502 [ X ] + Touchpad tests \u2502 . . . etc. \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Press T to start the testing procedure. You might be asked about the hardware in your machine. Just tick it truthfully and press T again. \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Does this machine have this piece of hardware? \u2502 \u2502 An Ethernet Port ( X ) YES ( ) NO \u2502 \u2502 Camera/Capture Device ( X ) YES ( ) NO \u2502 \u2502 USB Storage Device Connected ( X ) YES ( ) NO \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 When testing ends, a menu with test results should appear. Press R to rerun test cases, or F to finish. After all, paths to the test results should be displayed in the terminal. By default, they are placed in /home/user/.local/share/checkbox-ng . Additional options run lets you run a particular test plan or a set of jobs, but it does save any results. Example of running one test plan: sudo checkbox-cli run com.canonical.certification::smoke launcher command lets you customize the checkbox experience. To use it, you need to create config_file.ini and start running the checkbox like below: checkbox-cli launcher config_file.ini For more details about these (and others) commands visit checkbox-cli . Troubleshooting When somehow the checkbox stop working you can resume the previous session. To do this, open the terminal and run the following command: sudo checkbox-cli If at least one incomplete session is present on the machine, you should see: Do you want to resume session 'session_title-2022-07-06T13.09.22' ? r = > resume this session n = > next session c = > create new session d = > delete old sessions [ rncd ] : Type in r to resume the stopped session. You can also create a new session or delete an old session by typing the appropriate letter. What do you want to do with that job? s = > skip that job p = > mark it as passed and continue f = > mark it as failed and continue r = > run it [ spfr ] : Decide what you want to do with the last test and type the appropriate letter. After this, your checkbox session will be resumed.","title":"Checkbox certification software usage"},{"location":"common-coreboot-docs/checkbox/#checkbox-certification-software-usage-ubuntu-2204","text":"","title":"Checkbox certification software usage (Ubuntu 22.04)"},{"location":"common-coreboot-docs/checkbox/#introduction","text":"Checkbox is a flexible test automation software. It\u2019s the main tool used in Ubuntu Certification program. This document describes the usage of Checkbox on Ubuntu 22.04, but it can work on older versions of Ubuntu as well.","title":"Introduction"},{"location":"common-coreboot-docs/checkbox/#prerequisites","text":"To run the maximum number of tests, it is advised to connect as many peripheral devices as possible. Before running the checkbox, connect peripherals to available connectors, such as: External: card reader USB ports display ports Ethernet ports headphone and microphone jacks Thunderbolt ports power supply and battery PCMCIA or ExpressCard slot Internal: DIMM/RAM slots SATA ports PCI/PCIe slots M.2 slots TPM header other slots","title":"Prerequisites"},{"location":"common-coreboot-docs/checkbox/#set-up-the-testing-environment","text":"For the tests that don't require any interference after their startup, perform the following steps: To stop the screen from being locked on suspend, open the terminal and run the following command: gsettings set org.gnome.desktop.lockdown disable-lock-screen 'true' To execute all sudo commands without a password, open the terminal and run the following command for a user: echo \"user ALL=(ALL:ALL) NOPASSWD: ALL\" | sudo tee /etc/sudoers.d/user To set up automatic login so that a password is not required during testing reboot, power off etc.: Press the SUPER_KEY , type in Users and click Enter. A window with options to change should appear. Click the user name you want to enable automatic login for. On the top right side of the window, click Unlock ...` button. You will be asked to enter your user password to continue. You should now be able to toggle the Automatic Login button to enable it. Restart your system for changes to take effect.","title":"Set up the testing environment"},{"location":"common-coreboot-docs/checkbox/#download-and-install-checkbox","text":"Disable Secure Boot. To do this you can follow the steps described in Secure Boot test . Disable Secure boot is required to properly download packages. Open the terminal and type in the below commands to install Checkbox and all its dependencies: sudo add-apt-repository ppa:hardware-certification/public sudo apt-get update sudo apt-get install checkbox-ng plainbox-provider-resource-generic \\ plainbox-provider-certification-client plainbox-provider-checkbox \\ canonical-certification-client","title":"Download and install Checkbox"},{"location":"common-coreboot-docs/checkbox/#run-automatic-validation","text":"Start checkbox. To do this, open the terminal and run the following command: sudo checkbox-cli After using the above-mentioned command, the following menu should appear: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 ( X ) ( Deprecated ) Fully Automatic Client Certification Tests \u2502 \u2502 ( ) After suspend Dock Cert blocker tests \u2502 \u2502 ( ) After suspend Dock Cert tests \u2502 \u2502 ( ) After suspend Dock Hot-plug Cert tests \u2502 \u2502 ( ) After suspend Dock Hot-plug tests \u2502 \u2502 ( ) After suspend LED and oops tests ( using special sleep key ) \u2502 \u2502 ( ) After suspend LED and oops tests ( using special sleep key, cert. \u2502 \u2502 blockers only ) \u2502 \u2502 ( ) After suspend automated USB 3 write/read/compare tests on storage \u2502 \u2502 devices \u2502 \u2502 ( ) After suspend automated USB write/read/compare tests on storage \u2502 \u2502 devices \u2502 \u2502 ( ) After suspend reference tests \u2502 \u2502 ( ) After suspend reference tests ( automated ) \u2502 \u2502 ( ) After suspend reference tests ( certification blockers only ) \u2502 \u2502 ( ) After suspend tests ( discrete GPU automated ) \u2502 \u2502 ( ) After suspend tests ( discrete GPU manual ) \u2502 \u2502 ( ) After suspend tests ( discrete GPU ) \u2502 \u2502 ( ) After suspend tests ( discrete GPU, certification blockers only ) | . . . etc. \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Select test suites ( SPACE - select, ARROWS - navigation, Enter - go to the next test suite), which you want to run. Marking the first option starts the full automated check. After selecting the first option, all modules should be displayed and you can manually uncheck some modules, which you don't want to test. \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 [ X ] + Audio tests \u2502 \u2502 [ X ] + Benchmarks tests \u2502 \u2502 [ X ] + Bluetooth tests \u2502 \u2502 [ X ] + CPU tests \u2502 \u2502 [ X ] + Camera tests \u2502 \u2502 [ X ] + Disk tests \u2502 \u2502 [ X ] + Ethernet Device tests \u2502 \u2502 [ X ] + Firmware tests \u2502 \u2502 [ X ] + Graphics tests \u2502 \u2502 [ X ] + Informational tests \u2502 \u2502 [ X ] + Input Devices tests \u2502 \u2502 [ X ] + Memory tests \u2502 \u2502 [ X ] + Miscellaneous tests \u2502 \u2502 [ X ] + Mobile broadband tests \u2502 \u2502 [ X ] + Non-device specific networking tests \u2502 \u2502 [ X ] + Optical Drive tests \u2502 \u2502 [ X ] + Power Management tests \u2502 \u2502 [ X ] + Suspend tests \u2502 \u2502 [ X ] + TPM 2 .0 ( Trusted Platform Module ) \u2502 \u2502 [ X ] + Touchpad tests \u2502 . . . etc. \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Press T to start the testing procedure. You might be asked about the hardware in your machine. Just tick it truthfully and press T again. \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502Does this machine have this piece of hardware? \u2502 \u2502 An Ethernet Port ( X ) YES ( ) NO \u2502 \u2502 Camera/Capture Device ( X ) YES ( ) NO \u2502 \u2502 USB Storage Device Connected ( X ) YES ( ) NO \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 When testing ends, a menu with test results should appear. Press R to rerun test cases, or F to finish. After all, paths to the test results should be displayed in the terminal. By default, they are placed in /home/user/.local/share/checkbox-ng .","title":"Run automatic validation"},{"location":"common-coreboot-docs/checkbox/#additional-options","text":"run lets you run a particular test plan or a set of jobs, but it does save any results. Example of running one test plan: sudo checkbox-cli run com.canonical.certification::smoke launcher command lets you customize the checkbox experience. To use it, you need to create config_file.ini and start running the checkbox like below: checkbox-cli launcher config_file.ini For more details about these (and others) commands visit checkbox-cli .","title":"Additional options"},{"location":"common-coreboot-docs/checkbox/#troubleshooting","text":"When somehow the checkbox stop working you can resume the previous session. To do this, open the terminal and run the following command: sudo checkbox-cli If at least one incomplete session is present on the machine, you should see: Do you want to resume session 'session_title-2022-07-06T13.09.22' ? r = > resume this session n = > next session c = > create new session d = > delete old sessions [ rncd ] : Type in r to resume the stopped session. You can also create a new session or delete an old session by typing the appropriate letter. What do you want to do with that job? s = > skip that job p = > mark it as passed and continue f = > mark it as failed and continue r = > run it [ spfr ] : Decide what you want to do with the last test and type the appropriate letter. After this, your checkbox session will be resumed.","title":"Troubleshooting"},{"location":"common-coreboot-docs/dumping_logs/","text":"Dumping logs When facing an issue on a unique hardware configuration on the end user side it may prove useful to submit system logs to Dasharo team for diagnosis and possibly problem solution. This section describes how to dump various logs from a running system. System information One may use Dasharo Tools Suite HCL report or fwdump-docker image to gather all the hardware configuration information from a running system. The usage of the tools should result in an archive containing various logs from the running system. Submit them via email to contact@dasharo.com or use Dasharo pastebin . cbmem utility When already migrated to Dasharo, it is possible to retrieve firmware logs from coreboot on a running system. A utility called cbmem can be used for that purpose. By obtaining the logs Dasharo team will be able to locate any issues with the firmware. This method requires Secure Boot to be disabled. Options to get cbmem utility: Download precompiled utility from 3mdeb cloud Use Dasharo Tools Suite v1.1.0 or newer which has cbmem utility built in. Compile cbmem utility . See procedure below. Short instruction how to compile and use cbmem on Ubuntu 22.04 live CD: Launch Ubuntu 22.04 live CD and choose to Try Ubuntu . Right click on the desktop and choose Open in Terminal . Install required packages: sudo apt-get install -y build-essential libpci-dev Navigate to tmpfs: cd /tmp . Download and extract coreboot source: wget https://coreboot.org/releases/coreboot-4.17.tar.xz tar xvf coreboot-4.17.tar.xz Compile cbmem utility: cd coreboot-4.17/util/cbmem make Obtaining Dasharo firmware log One can obtain the firmware logs with: ```bash sudo ./cbmem -1 > cbmem.log ``` Execute the above command on the target platform. Newer Dasharo distributions will also contain complete logs from UEFI Payload to help debug issues outside of coreboot. NOTE: UEFI Payload logs are not available on platforms with serial console redirection enabled in the firmware.","title":"Dumping logs"},{"location":"common-coreboot-docs/dumping_logs/#dumping-logs","text":"When facing an issue on a unique hardware configuration on the end user side it may prove useful to submit system logs to Dasharo team for diagnosis and possibly problem solution. This section describes how to dump various logs from a running system.","title":"Dumping logs"},{"location":"common-coreboot-docs/dumping_logs/#system-information","text":"One may use Dasharo Tools Suite HCL report or fwdump-docker image to gather all the hardware configuration information from a running system. The usage of the tools should result in an archive containing various logs from the running system. Submit them via email to contact@dasharo.com or use Dasharo pastebin .","title":"System information"},{"location":"common-coreboot-docs/dumping_logs/#cbmem-utility","text":"When already migrated to Dasharo, it is possible to retrieve firmware logs from coreboot on a running system. A utility called cbmem can be used for that purpose. By obtaining the logs Dasharo team will be able to locate any issues with the firmware. This method requires Secure Boot to be disabled. Options to get cbmem utility: Download precompiled utility from 3mdeb cloud Use Dasharo Tools Suite v1.1.0 or newer which has cbmem utility built in. Compile cbmem utility . See procedure below. Short instruction how to compile and use cbmem on Ubuntu 22.04 live CD: Launch Ubuntu 22.04 live CD and choose to Try Ubuntu . Right click on the desktop and choose Open in Terminal . Install required packages: sudo apt-get install -y build-essential libpci-dev Navigate to tmpfs: cd /tmp . Download and extract coreboot source: wget https://coreboot.org/releases/coreboot-4.17.tar.xz tar xvf coreboot-4.17.tar.xz Compile cbmem utility: cd coreboot-4.17/util/cbmem make","title":"cbmem utility"},{"location":"common-coreboot-docs/dumping_logs/#obtaining-dasharo-firmware-log","text":"One can obtain the firmware logs with: ```bash sudo ./cbmem -1 > cbmem.log ``` Execute the above command on the target platform. Newer Dasharo distributions will also contain complete logs from UEFI Payload to help debug issues outside of coreboot. NOTE: UEFI Payload logs are not available on platforms with serial console redirection enabled in the firmware.","title":"Obtaining Dasharo firmware log"},{"location":"dasharo-menu-docs/boot-maintenance-mgr/","text":"Boot Maintenance Manager Boot Maintenance Manager is mainly used to manage boot options, boot timeout, next boot variable, console inputs and outputs. It also provides a way to add driver options, but it is rather rarely used. Boot Next Value is used to set which boot options should be booted after a reboot. This setting is not permanent and works only after the first reboot, then it defaults back to None . Auto Boot Time-out is used to specify the timeout in seconds how long the firmware should wait for hotkey to enter setup menu or Boot Manager Menu before booting the first priority according to boot order or Boot Next Value (if it was set before reset) Boot Options This submenu allows to manipulate the boot order and boot options in general: Add Boot Option When selecting to add a boot option, file explorer appears where one has to navigate to the desired disk, partition and file which shall be executed if the boot options is selected: NOTE: only EFI files may be used. If the file is already selected a window to set the boot option name appears: To set the name press ENTER to activate the prompt: Confirm the name (it must not be too short) with ENTER and then Commit Changes and Exit . From now on the boot options should appear on the boot options list in the Boot Manager Menu and One Time Boot menu. Delete Boot Option To delete boot options, enter Delete Boot Option submenu. Select the checkboxes which options should be removed and then Commit Changes and Exit . From now on the deleted boot options should not appear on the boot options list in the Boot Manager Menu and One Time Boot menu. Note that some boot options are auto-registered during boot, e.g. UEFI Shell, iPXE, or disks that contains /EFI/BOOT/BOOTX64.EFI file on their FAT32 partitions. To disable iPXE auto-registering, disable Network Boot in Dasharo System Features menu. Change Boot Order Boot Maintenance Manage also allows to change the boot order of the devices. PLease note that the boot order may be changed only for currently detected and registered boot options and devices. Dasharo does not yet provide fixed boot order options per interface, e.g. prioritize USB over NVMe or SATA, etc. To move the boot options priority, press ENTER when selecting the boot options list. A popup windows with the entries should show up. Use + and - on the hovered item to move it up and down, use arrows to change hovered item. If you are satisfied with the order you set, press ENTER to confirm it and then Commit Changes and Exit . The boot order should be immediately applied, it can be checked on the boot options list in the Boot Manager Menu and One Time Boot menu. Driver Options This menu is used to load additional drivers. It is used very rarely so it is not described in detail. Console Options This menu is used to manipulate EFI console variable. Typically there is no need to use it. Here one may enable/disable input and output devices. Please note that most output and input devices devices are registered automatically during boot. Changes made here will only last till next reboot. To permanently disable certain inputs one may use different setup options: USB keyboard input may be disabled by disabling whole USB stack PS/2 keyboard input may be disabled by disabling PS/2 controller WARNING : Dasharo does not yet implement any check if at least one keyboard is plugged and working. If you disable both USB stack and PS/2 controller you will not be able to control firmware boot flow (so unable to enter setup or choose boot option via Boot Manager or even enable back the keyboard inputs). Boot From File This submenu allows one to boot an arbitrary EFI file from one of the disk partitions. Selecting the entry will open the File Explorer (similarly like when adding a boot option) and one has to navigate to the file desired to be executed and press ENTER.","title":"Boot Maintenance Manager"},{"location":"dasharo-menu-docs/boot-maintenance-mgr/#boot-maintenance-manager","text":"Boot Maintenance Manager is mainly used to manage boot options, boot timeout, next boot variable, console inputs and outputs. It also provides a way to add driver options, but it is rather rarely used. Boot Next Value is used to set which boot options should be booted after a reboot. This setting is not permanent and works only after the first reboot, then it defaults back to None . Auto Boot Time-out is used to specify the timeout in seconds how long the firmware should wait for hotkey to enter setup menu or Boot Manager Menu before booting the first priority according to boot order or Boot Next Value (if it was set before reset)","title":"Boot Maintenance Manager"},{"location":"dasharo-menu-docs/boot-maintenance-mgr/#boot-options","text":"This submenu allows to manipulate the boot order and boot options in general:","title":"Boot Options"},{"location":"dasharo-menu-docs/boot-maintenance-mgr/#add-boot-option","text":"When selecting to add a boot option, file explorer appears where one has to navigate to the desired disk, partition and file which shall be executed if the boot options is selected: NOTE: only EFI files may be used. If the file is already selected a window to set the boot option name appears: To set the name press ENTER to activate the prompt: Confirm the name (it must not be too short) with ENTER and then Commit Changes and Exit . From now on the boot options should appear on the boot options list in the Boot Manager Menu and One Time Boot menu.","title":"Add Boot Option"},{"location":"dasharo-menu-docs/boot-maintenance-mgr/#delete-boot-option","text":"To delete boot options, enter Delete Boot Option submenu. Select the checkboxes which options should be removed and then Commit Changes and Exit . From now on the deleted boot options should not appear on the boot options list in the Boot Manager Menu and One Time Boot menu. Note that some boot options are auto-registered during boot, e.g. UEFI Shell, iPXE, or disks that contains /EFI/BOOT/BOOTX64.EFI file on their FAT32 partitions. To disable iPXE auto-registering, disable Network Boot in Dasharo System Features menu.","title":"Delete Boot Option"},{"location":"dasharo-menu-docs/boot-maintenance-mgr/#change-boot-order","text":"Boot Maintenance Manage also allows to change the boot order of the devices. PLease note that the boot order may be changed only for currently detected and registered boot options and devices. Dasharo does not yet provide fixed boot order options per interface, e.g. prioritize USB over NVMe or SATA, etc. To move the boot options priority, press ENTER when selecting the boot options list. A popup windows with the entries should show up. Use + and - on the hovered item to move it up and down, use arrows to change hovered item. If you are satisfied with the order you set, press ENTER to confirm it and then Commit Changes and Exit . The boot order should be immediately applied, it can be checked on the boot options list in the Boot Manager Menu and One Time Boot menu.","title":"Change Boot Order"},{"location":"dasharo-menu-docs/boot-maintenance-mgr/#driver-options","text":"This menu is used to load additional drivers. It is used very rarely so it is not described in detail.","title":"Driver Options"},{"location":"dasharo-menu-docs/boot-maintenance-mgr/#console-options","text":"This menu is used to manipulate EFI console variable. Typically there is no need to use it. Here one may enable/disable input and output devices. Please note that most output and input devices devices are registered automatically during boot. Changes made here will only last till next reboot. To permanently disable certain inputs one may use different setup options: USB keyboard input may be disabled by disabling whole USB stack PS/2 keyboard input may be disabled by disabling PS/2 controller WARNING : Dasharo does not yet implement any check if at least one keyboard is plugged and working. If you disable both USB stack and PS/2 controller you will not be able to control firmware boot flow (so unable to enter setup or choose boot option via Boot Manager or even enable back the keyboard inputs).","title":"Console Options"},{"location":"dasharo-menu-docs/boot-maintenance-mgr/#boot-from-file","text":"This submenu allows one to boot an arbitrary EFI file from one of the disk partitions. Selecting the entry will open the File Explorer (similarly like when adding a boot option) and one has to navigate to the file desired to be executed and press ENTER.","title":"Boot From File"},{"location":"dasharo-menu-docs/dasharo-system-features/","text":"Dasharo System Features When entering the Dasharo System Features menu, one may see the following submenus to appear: Dasharo Security Options This menu offers security-sensitive options like: BIOS boot medium lock - enables/disables flash protection on the vboot recovery firmware partition. Disable it if you need access to whole flash with flashrom. Enable SMM BIOS write protection - when enabled, allows only SMM code (the privileged code installed by the firmware in the system memory) to write to BIOS flash. Recommended to be enabled if Firmware setup password is set. Disable the protection if you need access to flash with flashrom. Boot menu enabled - enables/disables ability to enter boot manager menu. Enabled by default. Can be disabled, to prevent from booting from non-default boot media. Early boot DMA Protection - Enables IOMMU DMA protection early during POST. DMA protection is a feature that utilizes the IOMMU early in the boot process to prevent rogue DMA-capable devices such as PCIe add-in cards, USB4/thunderbolt devices from access to memory. This prevents a class of DMA attacks that allow for exfiltration of secrets and installation of malware early in the boot process. Keep IOMMU enabled when transfer control to OS - (only available when Early boot DMA Protection is selected) Keeps IOMMU DMA protection enabled during ExitBootServices when control is passed to the OS. If unsure or see any problems with DMA/IOMMU during OS boot, keep it disabled. NOTE: Windows may not boot if the option is enabled. Networking Options Enable network boot - the option controls if the network boot should be enabled or not. This option is disabled by default on most Dasharo supported devices. When disabled, it prevents loading network controller drivers and unregisters iPXE as boot option (iPXE disappears from Boot Manager and One Time Boot menus) USB Configuration Enable USB stack - controls loading of UEFI USB drivers, when enabled all USB drivers are loaded making USB keyboards and mass storage drives functional in the firmware (to browse setup, press hotkeys or move around bootloaders like GRUB). If disabled no USB device will work before OS is loaded (firmware will not communicate with USB devices). Enable USB Mass Storage driver - this option is blocked if USB stack is disabled. If disabled, UEFI USB Mass Storage driver is not loaded and one cannot boot from USB drives. Essentially this option controls the USB boot capability. It does not affect other devices, like USB keyboards. Intel Management Engine Options This submenu is used to access Intel Management Engine related options. Currently the only option available is Intel ME mode which allows to enable or disable Management Engine: On the right side of the window there is a help section describing the option meaning. If the window is too small, the help section may be divided and not fully shown on the screen. To scroll the help section use D or d keys to scroll down and U or u to scroll up. Intel ME can be disabled in two ways: Disabled (Soft) - when set, causes the Dasharo firmware to send ME_DISABLE command via MEI/HECI. MEI/HECI interface is being hidden from OS when ME is disabled. Disabled (HAP) - when set, causes the Dasharo firmware to set HAP bit in the flash descriptor. MEI/HECI interface is being hidden from OS when ME is disabled. HAP method is much more efficient as it halts the ME firmware execution even earlier than Soft Disable described above When the mode is set to Enabled , Dasharo enables the Intel Management engine by either sending ME_ENABLE command via MEI/HECI or clearing the HAP bit in flash descriptor, depending on the previously active ME mode. MEI/HECI device should be functional in OS when ME is enabled. Any change in the Dasharo firmware setup requires saving the changes and a platform reset (unless specified otherwise). For more information about neutering and disabling ME see also me_cleaner . NOTE: me_cleaner is not supported on all platforms! If a platform supports me_cleaner (i.e. ME version is lower or equal 11.x) it is recommended to set HAP bit and clean the ME region with me_cleaner script permanently. Chipset Configuration The submenu contains general chipset options. Currently available options: Enable PS/2 controller - enables/disables PS/2 controller on the platform. When disabled PS/2 keyboards and mice will stop working in firmware and OS. PS/2 controller will not be functional in OS. This option is not available on laptops where PS/2 is used for the integrated keyboard and possibly touchpad. Enable watchdog - controls the chipset watchdog functionality. If enabled, watchdog will be counting with the timeout specified below. The firmware automatically kicks the watchdog periodically so even without OS support, the platform will not reset itself when watchdog expires. Watchdog timeout value - watchdog timeout in seconds. Allowed range is 60-1024 seconds. The Option is only visible if watchdog is set to enabled. Power Management Options The submenu contains general power management options. Currently available options: Fan profile - Sets of the fan operation modes (defaults to Silent ): Silent - the fan will operate at lower speeds to reduce noise, Performance - the fan will operate at higher speeds, to allow for increased performance. Platform sleep type - sets the active sleep mode to be available for OS Suspend to Idle (S0ix) (default) - also known as modern standby. Select this option if using Windows. S3 sleep mode may not be working well with Windows for machines newer than 11th generation Intel Core processors. S0ix will not work properly if ME is disabled. Suspend to RAM (S3) - standard sleep mode that suspends the machine state to RAM, supported on most operating systems (except Windows on 11th generation Intel Core processors or newer). Additional information NOTE: Pressing F9 to reset to defaults resets all settings , not only the one that is currently selected.","title":"Dasharo System Features"},{"location":"dasharo-menu-docs/dasharo-system-features/#dasharo-system-features","text":"When entering the Dasharo System Features menu, one may see the following submenus to appear:","title":"Dasharo System Features"},{"location":"dasharo-menu-docs/dasharo-system-features/#dasharo-security-options","text":"This menu offers security-sensitive options like: BIOS boot medium lock - enables/disables flash protection on the vboot recovery firmware partition. Disable it if you need access to whole flash with flashrom. Enable SMM BIOS write protection - when enabled, allows only SMM code (the privileged code installed by the firmware in the system memory) to write to BIOS flash. Recommended to be enabled if Firmware setup password is set. Disable the protection if you need access to flash with flashrom. Boot menu enabled - enables/disables ability to enter boot manager menu. Enabled by default. Can be disabled, to prevent from booting from non-default boot media. Early boot DMA Protection - Enables IOMMU DMA protection early during POST. DMA protection is a feature that utilizes the IOMMU early in the boot process to prevent rogue DMA-capable devices such as PCIe add-in cards, USB4/thunderbolt devices from access to memory. This prevents a class of DMA attacks that allow for exfiltration of secrets and installation of malware early in the boot process. Keep IOMMU enabled when transfer control to OS - (only available when Early boot DMA Protection is selected) Keeps IOMMU DMA protection enabled during ExitBootServices when control is passed to the OS. If unsure or see any problems with DMA/IOMMU during OS boot, keep it disabled. NOTE: Windows may not boot if the option is enabled.","title":"Dasharo Security Options"},{"location":"dasharo-menu-docs/dasharo-system-features/#networking-options","text":"Enable network boot - the option controls if the network boot should be enabled or not. This option is disabled by default on most Dasharo supported devices. When disabled, it prevents loading network controller drivers and unregisters iPXE as boot option (iPXE disappears from Boot Manager and One Time Boot menus)","title":"Networking Options"},{"location":"dasharo-menu-docs/dasharo-system-features/#usb-configuration","text":"Enable USB stack - controls loading of UEFI USB drivers, when enabled all USB drivers are loaded making USB keyboards and mass storage drives functional in the firmware (to browse setup, press hotkeys or move around bootloaders like GRUB). If disabled no USB device will work before OS is loaded (firmware will not communicate with USB devices). Enable USB Mass Storage driver - this option is blocked if USB stack is disabled. If disabled, UEFI USB Mass Storage driver is not loaded and one cannot boot from USB drives. Essentially this option controls the USB boot capability. It does not affect other devices, like USB keyboards.","title":"USB Configuration"},{"location":"dasharo-menu-docs/dasharo-system-features/#intel-management-engine-options","text":"This submenu is used to access Intel Management Engine related options. Currently the only option available is Intel ME mode which allows to enable or disable Management Engine: On the right side of the window there is a help section describing the option meaning. If the window is too small, the help section may be divided and not fully shown on the screen. To scroll the help section use D or d keys to scroll down and U or u to scroll up. Intel ME can be disabled in two ways: Disabled (Soft) - when set, causes the Dasharo firmware to send ME_DISABLE command via MEI/HECI. MEI/HECI interface is being hidden from OS when ME is disabled. Disabled (HAP) - when set, causes the Dasharo firmware to set HAP bit in the flash descriptor. MEI/HECI interface is being hidden from OS when ME is disabled. HAP method is much more efficient as it halts the ME firmware execution even earlier than Soft Disable described above When the mode is set to Enabled , Dasharo enables the Intel Management engine by either sending ME_ENABLE command via MEI/HECI or clearing the HAP bit in flash descriptor, depending on the previously active ME mode. MEI/HECI device should be functional in OS when ME is enabled. Any change in the Dasharo firmware setup requires saving the changes and a platform reset (unless specified otherwise). For more information about neutering and disabling ME see also me_cleaner . NOTE: me_cleaner is not supported on all platforms! If a platform supports me_cleaner (i.e. ME version is lower or equal 11.x) it is recommended to set HAP bit and clean the ME region with me_cleaner script permanently.","title":"Intel Management Engine Options"},{"location":"dasharo-menu-docs/dasharo-system-features/#chipset-configuration","text":"The submenu contains general chipset options. Currently available options: Enable PS/2 controller - enables/disables PS/2 controller on the platform. When disabled PS/2 keyboards and mice will stop working in firmware and OS. PS/2 controller will not be functional in OS. This option is not available on laptops where PS/2 is used for the integrated keyboard and possibly touchpad. Enable watchdog - controls the chipset watchdog functionality. If enabled, watchdog will be counting with the timeout specified below. The firmware automatically kicks the watchdog periodically so even without OS support, the platform will not reset itself when watchdog expires. Watchdog timeout value - watchdog timeout in seconds. Allowed range is 60-1024 seconds. The Option is only visible if watchdog is set to enabled.","title":"Chipset Configuration"},{"location":"dasharo-menu-docs/dasharo-system-features/#power-management-options","text":"The submenu contains general power management options. Currently available options: Fan profile - Sets of the fan operation modes (defaults to Silent ): Silent - the fan will operate at lower speeds to reduce noise, Performance - the fan will operate at higher speeds, to allow for increased performance. Platform sleep type - sets the active sleep mode to be available for OS Suspend to Idle (S0ix) (default) - also known as modern standby. Select this option if using Windows. S3 sleep mode may not be working well with Windows for machines newer than 11th generation Intel Core processors. S0ix will not work properly if ME is disabled. Suspend to RAM (S3) - standard sleep mode that suspends the machine state to RAM, supported on most operating systems (except Windows on 11th generation Intel Core processors or newer).","title":"Power Management Options"},{"location":"dasharo-menu-docs/dasharo-system-features/#additional-information","text":"NOTE: Pressing F9 to reset to defaults resets all settings , not only the one that is currently selected.","title":"Additional information"},{"location":"dasharo-menu-docs/device-manager/","text":"Device Manager The Device Manager is a EDKII standard submenu which collects various device setups like TPM, UEFI Secure Boot, TCG OPAL Drive Password, SATA Password and others. TCG Drive Management This menu allows one to set up TCG OPAL disk password and manage other TCG OPAL feature settings. The main view of the submenu looks as follows: The submenu will list all the TCG OPAL capable disks. Selecting one of them with ENTER will cause entering the disk specific submenu: Here one can enable the TCG OPAL security feature or restore factory default with the PSID (Physical Security ID). Physical Security ID is a drive specific key which is used to revert to factory default mode. The PSID can be typically found on the sticker present on the disk. Besides the feature enablement and factory restore options there is an action interactive entry on the main TCG Drive Management page: It is used to perform TCG OPAL specific operations when the security feature is enabled. Enable/disable BlockSID will set/unset \"freeze locking\" of the drive features as requested by OS. One may also enable or disable physical presence (firmware popup confirmation of actions requested by OS) when switching BlockSID. To set up the password enter the desired disk submenu and enable the feature by selecting the checkbox. Note that not all disks support the security feature of TCG OPAL. Reset is required to apply changes. After reset you will be prompted to set admin password. When the admin password is set, more options become available for the disk: All below options require reset to apply changes. Update Drive Admin Password - to update current admin password. Prompt window appears after reset to enter current and new password Set Drive User Password - is used to set an optional user password. Secure Erase User Data - performs secure erase of the data after reset. Admin Revert to factory default and Disable - disables the admin password (prompt will no longer appear during boot o unlock the drive) and the security feature after reset. Optionally one may select to keep or discard user data. PSID Revert to factory default and Disable - in case admin password has been forgotten PSID can be used to disable the security feature and admin password after reset. This will also erase user data. Disable User - disables the user functionality (and so the user password) after reset. For more details about TCG OPAL please refer to TCG Storage Specifications and Key Management . Driver Health Manager This submenu is informational only and displays the status of drivers that install UEFI driver health protocol. Typically it is installed by 3rdparty applications such as OptionROMs on graphics devices or network controllers for example. Secure Boot Configuration This submenu allows configuring UEFI Secure Boot functionality. Enabling Secure Boot By default, Dasharo firmware doesn't have UEFI Secure Boot enabled. Additionally, keys for UEFI Secure Boot are not enrolled, as we do not make assumptions about which CA the user trusts. To enable Secure Boot for booting common OSes signed with Microsoft keys (Windows and Linux distros using the shim bootloader), select the Reset Secure Boot keys option. The Attempt Secure Boot option will now be available and selected, and Secure Boot will be used on next boot. Custom mode and key management The following keys are enrolled by default when resetting Secure Boot keys: Microsoft KEK certificate , Microsoft Signature Database (db) consisting of: Microsoft Windows Production PCA 2011 to allow Windows OS Loader to load, Microsoft Corporation UEFI CA 2011 to load OEM-approved UEFI drivers and applications (e.g. shim ), Microsoft Forbidden Signature Database (dbx) published as UEFI Revocation List File on uefi.org , Dasharo Platform Key (PK) certificate maintained by the Dasharo team. When custom application and UEFI driver signing is desired, this key may be replaced with the user's own PK. To learn more, please visit Windows Secure Boot Key Creation and Management Guidance . To use your own keys, choose Custom Mode in Secure Boot Mode : An additional entry appears below for configuring keys and certificates: Here one may delete and enroll particular keys, certificates and database signatures. TCG2 Configuration TCG2 Configuration submenu is responsible for displaying TPM 2.0 information and managing the module. The basic information displayed are the TPM device family, interface, but also information about supported hashing algorithms. It is also possible to perform various TPM2 physical presence operations ( TPM2 Operation ) and enable or disable PCR banks. The supported TPM2 operations are: Disabling or enabling Owner and Endorsement hierarchies TPM ClearControl(NO) + Clear - performs TPM clear PCR Allocation - used to enable additional PCR banks LogAllDigests - on next reboot (and only on next reboot), add digests for all supported hashing algorithms to log file ChangeEPS - clears the TPM and changes its identity For more details about the TPM operations see TCG Physical Presence Interface Specification HDD Security Configuration HDD Security Configuration allows one to set SATA disk password. Note that all SATA disks will be displayed, even these that don't support the feature. To check if the disk supports password feature, enter the specific disk submenu to see if Security Supported displays Yes : If one scrolls down a bit, more information is displayed about current state of the disk password feature: At the bottom of the page there are two checkboxes: Request to set User Password - this is the option to set the password on the disk. Requires reset, after which the prompt windows will appear to set the password. From now on the prompt will appear on each boot. Request to set Master Password - this options changes the disk master password. Master password is used to recover from forgotten User Password. Typically Master Password is provisioned during disk manufacturing and it will not be possible to change it without knowing what the master password is. To disable the User Password simply request to set the User Password again via the menu. After reset you will be asked to unlock the driver with current password and then type new password. To disable the password simply leave the field empty and confirm it twice by pressing ENTER . After that the password prompt will not appear again. Network Device List This submenu is displayed when Network Boot is enabled and the network controller driver installs the necessary UEFI protocols. The menu lists the network devices with the UEFI protocol installed. One may check out the network controller information, like MAC address, driver used and link status. Example view with MAC address blurred:","title":"Device Manager"},{"location":"dasharo-menu-docs/device-manager/#device-manager","text":"The Device Manager is a EDKII standard submenu which collects various device setups like TPM, UEFI Secure Boot, TCG OPAL Drive Password, SATA Password and others.","title":"Device Manager"},{"location":"dasharo-menu-docs/device-manager/#tcg-drive-management","text":"This menu allows one to set up TCG OPAL disk password and manage other TCG OPAL feature settings. The main view of the submenu looks as follows: The submenu will list all the TCG OPAL capable disks. Selecting one of them with ENTER will cause entering the disk specific submenu: Here one can enable the TCG OPAL security feature or restore factory default with the PSID (Physical Security ID). Physical Security ID is a drive specific key which is used to revert to factory default mode. The PSID can be typically found on the sticker present on the disk. Besides the feature enablement and factory restore options there is an action interactive entry on the main TCG Drive Management page: It is used to perform TCG OPAL specific operations when the security feature is enabled. Enable/disable BlockSID will set/unset \"freeze locking\" of the drive features as requested by OS. One may also enable or disable physical presence (firmware popup confirmation of actions requested by OS) when switching BlockSID. To set up the password enter the desired disk submenu and enable the feature by selecting the checkbox. Note that not all disks support the security feature of TCG OPAL. Reset is required to apply changes. After reset you will be prompted to set admin password. When the admin password is set, more options become available for the disk: All below options require reset to apply changes. Update Drive Admin Password - to update current admin password. Prompt window appears after reset to enter current and new password Set Drive User Password - is used to set an optional user password. Secure Erase User Data - performs secure erase of the data after reset. Admin Revert to factory default and Disable - disables the admin password (prompt will no longer appear during boot o unlock the drive) and the security feature after reset. Optionally one may select to keep or discard user data. PSID Revert to factory default and Disable - in case admin password has been forgotten PSID can be used to disable the security feature and admin password after reset. This will also erase user data. Disable User - disables the user functionality (and so the user password) after reset. For more details about TCG OPAL please refer to TCG Storage Specifications and Key Management .","title":"TCG Drive Management"},{"location":"dasharo-menu-docs/device-manager/#driver-health-manager","text":"This submenu is informational only and displays the status of drivers that install UEFI driver health protocol. Typically it is installed by 3rdparty applications such as OptionROMs on graphics devices or network controllers for example.","title":"Driver Health Manager"},{"location":"dasharo-menu-docs/device-manager/#secure-boot-configuration","text":"This submenu allows configuring UEFI Secure Boot functionality.","title":"Secure Boot Configuration"},{"location":"dasharo-menu-docs/device-manager/#tcg2-configuration","text":"TCG2 Configuration submenu is responsible for displaying TPM 2.0 information and managing the module. The basic information displayed are the TPM device family, interface, but also information about supported hashing algorithms. It is also possible to perform various TPM2 physical presence operations ( TPM2 Operation ) and enable or disable PCR banks. The supported TPM2 operations are: Disabling or enabling Owner and Endorsement hierarchies TPM ClearControl(NO) + Clear - performs TPM clear PCR Allocation - used to enable additional PCR banks LogAllDigests - on next reboot (and only on next reboot), add digests for all supported hashing algorithms to log file ChangeEPS - clears the TPM and changes its identity For more details about the TPM operations see TCG Physical Presence Interface Specification","title":"TCG2 Configuration"},{"location":"dasharo-menu-docs/device-manager/#hdd-security-configuration","text":"HDD Security Configuration allows one to set SATA disk password. Note that all SATA disks will be displayed, even these that don't support the feature. To check if the disk supports password feature, enter the specific disk submenu to see if Security Supported displays Yes : If one scrolls down a bit, more information is displayed about current state of the disk password feature: At the bottom of the page there are two checkboxes: Request to set User Password - this is the option to set the password on the disk. Requires reset, after which the prompt windows will appear to set the password. From now on the prompt will appear on each boot. Request to set Master Password - this options changes the disk master password. Master password is used to recover from forgotten User Password. Typically Master Password is provisioned during disk manufacturing and it will not be possible to change it without knowing what the master password is. To disable the User Password simply request to set the User Password again via the menu. After reset you will be asked to unlock the driver with current password and then type new password. To disable the password simply leave the field empty and confirm it twice by pressing ENTER . After that the password prompt will not appear again.","title":"HDD Security Configuration"},{"location":"dasharo-menu-docs/device-manager/#network-device-list","text":"This submenu is displayed when Network Boot is enabled and the network controller driver installs the necessary UEFI protocols. The menu lists the network devices with the UEFI protocol installed. One may check out the network controller information, like MAC address, driver used and link status. Example view with MAC address blurred:","title":"Network Device List"},{"location":"dasharo-menu-docs/overview/","text":"Dasharo menu overview This section describes the overview of the Dasharo firmware setup menu. In the subsections you will get to know: What options are available? How to use submenus and options? How the options and submenus work? Here you may watch a Dasharo menu walkthrough with commentary presenting Dasharo features. Dasharo menu guides The main menu is entered by selecting the Setup application in the Boot Manager Menu or by pressing the Setup hotkey while booting. The hotkey is shown in the top-left corner of the screen when the boot logo is displayed, for example DEL : DEL to enter Setup F11 to enter Boot Manager Menu ENTER to boot directly On certain devices like Novacustom laptops one will also be greeted with a firmware version printed on the screen (main firmware version and EC firmware version if applicable), for example: Firmware version: Dasharo (coreboot+UEFI) v1.6.0 EC firmware version: 2023-03-20_c398446 F2 to enter Setup F7 to enter Boot Manager Menu ENTER to boot directly If any error happens (firmware version is unknown, could not be read or any other error) you will get an red error string: OR In such case please follow the EC firmware update instructions for a specific board variant. Setup Main Page User Password Management Device Manager Dasharo System Features One Time Boot Boot Maintenance Manager Boot Manager Menu - entered with a different key than used for setup application. Lists all bootable options and allows one to override the boot path. Main Page The page is the main view of the firmware setup application. It contains the board model ( MS-7D25 ), installed CPU and firmware version in the top-left corner. In the top-right corner the CPU frequency and system RAM amount are shown. From the main page one may access all menus and submenus available in the firmware setup. Besides the menus there is also an option to: Change the language (currently only English is supported) Continue - execute the top first boot order priority Reset - resets the platform. The currently available menus/submenus are as follows: User Password Management - allows to set firmware setup password Device Manager - allows configuring various devices and features like: UEFI Secure Boot, TPM device, SATA and TCG OPAL password, etc. It may also contain informational menus like Driver Health Manager, Network Device List and others. Dasharo System Features - contains submenus for features specific to Dasharo products and Dasharo supported platforms One Time Boot - allows to choose which boot entry to execute. It simply lists all available boot options and allows to select one the same way as Boot Manager Menu Boot Maintenance Manager - allows to manipulate various UEFI standard variables responsible for console and boot options. One may choose which devices should be used for input and output, choose to boot an arbitrary file or modify the boot options and boot order. NOTE: not all submenus may be available on your platform. Contact Dasharo Team for more information and possible feature extension of your platform. User Password Management User Password Management menu allows one to set firmware setup admin password: The password must be a strong one. The requirements are described on the help section on the right side of the menu page. If the password is too weak it will not be accepted. Also the new password must be different from the last 5 passwords that were used before. The page shows the current status of Admin Password if it is provisioned or not. To disable the password, enter the User Password Management menu again and request to set new password. You will be asked to enter current password. When a window to provide new password pops up, leave the field empty and confirm it twice with ENTER . The password installation status on the menu page should change to Not Installed . One Time Boot When setup application is entered, one of the menus is called One Time Boot . As the name suggests it allows to override the boot just one time (not permanently). The usage principles are the same as for Boot Manager Menu . Example view of One Time Boot submenu: On the right side of the menu window, there is a DevicePath which is a UEFI-compliant path to the device or file being executed. Depending on the file/device type, these paths may be different: DevicePaths are defined in UEFI Specification . If you are interested in decoding those, read through the specification carefully. Boot Manager Menu Boot Manager Menu is an application that lists all bootable options and allows one to override the boot path. Boot Manager Menu is entered with a different key than setup application. It may be customized on your platform. The right key to use is always printed on the screen in the top-left corner, for example F11 : DEL to enter Setup F11 to enter Boot Manager Menu ENTER to boot directly After pressing the right hotkey for Boot Manager Menu, a window should pop up: On the bottom of the window there are instructions for moving and selecting entries.","title":"Overview"},{"location":"dasharo-menu-docs/overview/#dasharo-menu-overview","text":"This section describes the overview of the Dasharo firmware setup menu. In the subsections you will get to know: What options are available? How to use submenus and options? How the options and submenus work? Here you may watch a Dasharo menu walkthrough with commentary presenting Dasharo features.","title":"Dasharo menu overview"},{"location":"dasharo-menu-docs/overview/#dasharo-menu-guides","text":"The main menu is entered by selecting the Setup application in the Boot Manager Menu or by pressing the Setup hotkey while booting. The hotkey is shown in the top-left corner of the screen when the boot logo is displayed, for example DEL : DEL to enter Setup F11 to enter Boot Manager Menu ENTER to boot directly On certain devices like Novacustom laptops one will also be greeted with a firmware version printed on the screen (main firmware version and EC firmware version if applicable), for example: Firmware version: Dasharo (coreboot+UEFI) v1.6.0 EC firmware version: 2023-03-20_c398446 F2 to enter Setup F7 to enter Boot Manager Menu ENTER to boot directly If any error happens (firmware version is unknown, could not be read or any other error) you will get an red error string: OR In such case please follow the EC firmware update instructions for a specific board variant. Setup Main Page User Password Management Device Manager Dasharo System Features One Time Boot Boot Maintenance Manager Boot Manager Menu - entered with a different key than used for setup application. Lists all bootable options and allows one to override the boot path.","title":"Dasharo menu guides"},{"location":"dasharo-tools-suite/documentation/","text":"Documentation Supported hardware Dasharo Tools Suite was prepared to run on x86 platforms, but we can confirm that it boots on the following platforms: ASUS KGPE-D16, Dell OptiPlex 7010/9010, MSI PRO Z690-A DDR4 ( test report ), MSI PRO Z690-A DDR5 ( test report ), NovaCustom NV4x ( test report ), NovaCustom NS5x/7x ( test report ). Running The Dasharo Tools Suite can be started in various ways. Currently, there are two options: bootable over a network (iPXE), bootable USB stick image. The first one should always be preferred if possible, as it is the easiest one to use. Bootable over a network This section describes how to boot DTS using iPXE. Requirements Below are the requirements that must be met to run DTS over a network on the platform: Dasharo device with DTS functionality integrated, wired network connection, Secure Boot disabled , disabled BIOS lock feature (if device is already flashed with Dasharo). Launching DTS To access Dasharo Tools Suite: attach a wired network cable to the device's Ethernet port, power on the device, holding down the Boot Menu entry key, in the Boot Menu, select the iPXE Network Boot option, in the Network Boot menu, select the Dasharo Tools Suite option, the DTS menu will now appear. Bootable USB stick This section describes how to boot DTS using a USB stick. Requirements Below are the requirements that must be met to run DTS from a USB device on the platform: USB stick (at least 2GB), wired network connection, Secure Boot disabled , disabled BIOS lock feature (if device is already flashed with Dasharo), latest image from releases section. Launching DTS To access Dasharo Tools Suite: flash the downloaded image onto USB stick, you can use a cross-platform GUI installer - Etcher you can also use dd to flash from the command line gzip -cdk dts-base-image-v1.1.0.wic.gz | \\ sudo dd of = /dev/sdX bs = 16M status = progress conv = fdatasync Note: this is an example done on the v1.1.0 image. insert the USB stick into a USB in your device, boot from the USB stick, the DTS menu will now appear. Building We choose Yocto Project to prepare Dasharo Tools Suite system. DTS image can be built using publicly available sources. Thanks to publishing the build cache on cache.dasharo.com the time needed to finish the process should be significantly decreased. Prerequisites The following must be met to build DTS: Linux PC (tested on Ubuntu 20.04 LTS ), docker installed, kas-container 3.0.2 script downloaded and available in PATH , wget -O ~/bin/kas-container https://raw.githubusercontent.com/siemens/kas/3.0.2/kas-container chmod +x ~/bin/kas-container meta-dts repository cloned. mkdir yocto && cd yocto git clone https://github.com/Dasharo/meta-dts.git Build From yocto directory, run: SHELL = /bin/bash kas-container build meta-dts/kas.yml Image build takes time, so be patient, and the build's finished, you should see something similar to (tasks number may differ): Initialising tasks: 100 % | ###########################################################################################| Time: 0:00:01 Sstate summary: Wanted 2 Found 0 Missed 2 Current 931 ( 0 % match, 99 % complete ) NOTE: Executing Tasks NOTE: Tasks Summary: Attempted 2532 tasks of which 2524 didn ' t need to be rerun and all succeeded. Using the cache is enabled in kas/cache.yml file and can be disabled by removing content of that file. cat kas/cache.yml output: header: version: 11 local_conf_header: yocto-cache: | SSTATE_MIRRORS ? = \"file://.* http:// ${ LOCAL_PREMIRROR_SERVER } / ${ PROJECT_NAME } /sstate-cache/PATH\" SOURCE_MIRROR_URL ? = \"http:// ${ LOCAL_PREMIRROR_SERVER } / ${ PROJECT_NAME } /downloads\" INHERIT += \"own-mirrors\" LOCAL_PREMIRROR_SERVER ? = \"cache.dasharo.com\" PROJECT_NAME ? = \"yocto/dts\" Build image with UEFI Secure Boot support From yocto directory run: SHELL = /bin/bash kas-container build meta-dts/kas-uefi-sb.yml Image build takes time, so be patient and after build's finish you should see something similar to (the exact tasks numbers may differ): Initialising tasks: 100 % | ###########################################################################################| Time: 0:00:04 Checking sstate mirror object availability: 100 % | ###################################################################| Time: 0:00:03 Sstate summary: Wanted 892 Local 672 Mirrors 212 Missed 8 Current 1560 ( 99 % match, 99 % complete ) NOTE: Executing Tasks NOTE: Tasks Summary: Attempted 5860 tasks of which 5841 didn ' t need to be rerun and all succeeded. Image created with kas-uefi-sb.yml configuration file enable integration of UEFI Secure Boot into DTS using meta-secure-core . Building the image allow to prepare a PoC version with uses sample keys which by no mean should used in production. For user keys the script [create-user-key-store.sh](https://github.com/jiazhang0/meta-secure-core/blob/master/meta-signing-key/scripts/create-user-key-store.sh can be used but it was not tested yet. Quick start with instructions on how to use image are described in meta-efi-secure-boot . Flash Find out your device name. fdisk -l output: ( ... ) Device Boot Start End Sectors Size Id Type /dev/sdx1 * 8192 131433 123242 60 ,2M c W95 FAT32 ( LBA ) /dev/sdx2 139264 186667 47404 23 ,2M 83 Linux In this case the device name is /dev/sdx , but be aware, in the next steps, replace /dev/sdx with the right device name on your platform, or else you can damage your system! From where you ran image build type. sudo umount /dev/sdx* cd build/tmp/deploy/images/genericx86-64 Here the file dts-base-image-genericx86-64.wic.gz should be available, which is the image of DTS. To flash image, you can use the same command shown in running section . Just change the file name. Boot the platform. Disabling Secure Boot Any procedure affecting the firmware flashing should be preceded by controlling the Secure Boot status and if it is turned on, turning it off. The enabled Secure Boot will not only prevent you from operating on the firmware, but you will also not be able to launch DTS. To check the Secure Boot state: Turn off the station on which you want to test the Dasharo firmware. Turn the station on and go to the next step immediately. Hold the BIOS SETUP KEY to enter the BIOS MENU . Localize and enter the Secure Boot menu using the arrow keys and Enter. Verify that the Secure Boot Status field says Disabled - if not, deselect the Enforce Secure Boot option using the arrow keys and Enter. Change the setting of Secure Boot to Disabled and press Enter. Press the F10 key to open the dialog box. Press Enter to confirm changes and exit from the menu. After completing the steps described above, Secure Boot should be disabled. You could confirm that by repeating steps 3 - 5. Features This section describes the functionality of the Dasharo Tools Suite. These are: Dasharo zero-touch initial deployment , HCL Report , Firmware update , Local firmware update , EC transition , EC update , additional features , run commands from iPXE shell , run DTS using VentoyOS . Dasharo zero-touch initial deployment DTS can be used to flash Dasharo firmware on your hardware. To achieve this, boot DTS, choose option number 2 . After creating report with firmware dump as backup, type p to confirm the installation of Dasharo firmware. Next you will be asked two questions to confirm flashing. The first will be displayed with the detected information about the device you are using DTS on. The second will also provide the hash of Dasharo components which will then be used for flashing. You can compare them with the values listed in the supported hardware section on docs.dasharo.com. Both these questions can be accepted by typing Y . Procedure execution ends automatically on the reboot of the platform (unless it requires otherwise). After restarting the device, you can enjoy the basic version of Dasharo, which we provide for given hardware. This feature is supported on the following platforms: ASUS KGPE-D16, Dell OptiPlex 7010/9010, MSI PRO Z690-A DDR4, MSI PRO Z690-A DDR5, NovaCustom NV4x, NovaCustom NS5x/7x. HCL Report DTS allows the generation of a package with logs containing hardware information. To create one, choose option number 1 and check out the disclaimer. If you would like to send the report to our servers, please remember about connecting the ethernet cable. More information can be found in glossary . HCL Report correctness Please note DTS HCL Report assumes that your chipset is already supported by flashrom. There are also other false negative errors and unknowns, which we trying to fix to improve user experience. Always check results file to confirm the quality of your HCL report. Sample content of such file may look as follows: [OK] PCI configuration space and topology [UNKNOWN] USB devices and topology [OK] Super I/O configuration [UNKNOWN] EC configuration [ERROR] MSRs [OK] SMBIOS tables [OK] BIOS information [OK] CMOS NVRAM [UNKNOWN] Intel configuration registers [OK] GPIO configuration C header files [OK] kernel dmesg [OK] ACPI tables [UNKNOWN] Audio devices configuration [OK] CPU info [OK] I/O ports [OK] Input bus types [OK] Firmware image [OK] I2C bus [UNKNOWN] ACPI tables [OK] Touchpad information [OK] DIMMs information [ERROR] CBMEM table information [ERROR] TPM information [ERROR] AMT information [OK] ME information Results of getting data: Legend: [OK] Data get successfully [UNKNOWN] Result is unknown [ERROR] Error during getting data Please report all errors experienced while performing a dump to dasharo-issues repository. BIOS backup One of the key components of HCL Report is your BIOS backup. To prepare BIOS backup of your platform, simply run HCL Report and decide if you would like to contribute information about your hardware configuration. Please consider the following options depending on your situation: YES - If you decide to contribute, you can always get back to us and ask about BIOS backup, which we will provide after simple verification that you are the owner of the hardware. NO (default) - If you decide to not contribute, your situation depends on the boot method you used to execute DTS: Network Boot - please note that Dasharo booted over iPXE assumes no storage available, so the report, and your BIOS backup are stored in temporary memory and will not be available after reboot. Please make sure to move HCL Report to not volatile storage. This can be done using option 9) Shell , USB Boot - HCL Report and BIOS backup are saved to USB storage root directory. Firmware update DTS can be used to update Dasharo firmware. To achieve this, boot it on platform with flashed Dasharo and choose option number 5 . Next you will be asked two questions to confirm flashing. The first will be displayed with the detected information about the device you are using DTS on. The second will also provide the hash of Dasharo components which will then be used for flashing. You can compare them with the values listed in the supported hardware section on docs.dasharo.com. Both these questions can be accepted by typing Y . If you see the following warning during the process, you do not need to worry about it: Warning: Setting BIOS Control at 0xdc from 0x8b to 0x89 failed. New value is 0x8b. Procedure execution ends automatically on the reboot of the platform (unless it requires otherwise). After restarting the device, you can enjoy the updated version of Dasharo, which we provide for given hardware. Below we provide an example of updating Dasharo firmware from version v1.0.0 to v1.1.1 on MSI PRO Z690-A DDR4. DTS version v1.2.0 1 ) Dasharo HCL report - dump hardware information from this device 3 ) Restore firmware from Dasharo HCL report 4 ) Load SE keys 5 ) Update Dasharo firmware 9 ) Shell 10 ) Power off system 11 ) Reboot system Enter an option: 5 Gathering flash chip and chipset information... Flash information: vendor = \"Programmer\" name = \"Opaque flash chip\" Flash size: 32M Checking for the latest Dasharo update available... Current Dasharo version: 1 .0.0 Latest available Dasharo version: 1 .1.1 Please verify detected hardware! Board vendor: Micro-Star International Co., Ltd. System model: MS-7D25 Board model: PRO Z690-A WIFI DDR4 ( MS-7D25 ) Does it match your actual specification? ( Y | n ) y Following firmware will be used to install Dasharo Dasharo BIOS firmware: - link: https://3mdeb.com/ ( ... ) /msi_ms7d25_v1.1.1_ddr4.rom - hash: 3b438422338cf4c13abdb25823a9b2a2ad6e82fabbe0d9ed41a16a6eae1f15ff You can learn more about this release on: https://docs.dasharo.com/ Do you want to update Dasharo firmware on your hardware? ( Y | n ) y Downloading Dasharo firmware update... ########################################################################### 100.0% Checking sha256sum... /tmp/biosupdate.rom: OK Updating Dasharo firmware... This will take around 3 minutes. Please be patient and do not reset your computer, or touch keyboard! Successfully updated Dasharo firmware Syncing disks... Done. The computer will reboot automatically in 5 seconds Rebooting in 5s: 5 ... 4 ... 3 ... 2 ... 1 ... Rebooting Local firmware update To flash a local BIOS image (e.g. mounted from a USB stick), you can drop to the shell (option 9 ) and use the flashrom binary provided inside DTS directly. DANGER : Failure to use flashrom correctly may result in an unbootable device . For example, never flash an image that does not contain an Intel Firmware Descriptor (IFD) region and/or Management Engine (ME) region to the whole chip. You can use flashrom -p internal without additional parameters to double check if flashrom detects your chipset. This will not write anything. The following flashrom command will only rewrite the BIOS region: sudo flashrom -p internal --ifd -i bios -w [ path/to/your/coreboot.rom ] If flashrom outputs the following, you do not need to worry about it: Enabling flash write... Warning: Setting BIOS Control at 0xdc from 0x8b to 0x89 failed. New value is 0x8b. SPI Configuration is locked down EC transition DTS allows performing full Embedded Controller firmware transition from the proprietary vendor EC firmware to the Dasharo EC firmware. Currently, this functionality is supported on the NovaCustom NS5x/NS7x ) and NovaCustom NV4x only. Starting from DTS v1.2.0 to perform EC transition please run firmware update on the platform with proprietary vendor EC firmware. EC update DTS allows to update open-source Embedded Controller firmware to the newer version. This is how we can achieve that. Retrieve information about your current EC. system76_ectool info The output of the above-described command should contain information about the version of flashed firmware: board: clevo/ns50mu version: 2022 -08-16_c12ff1a Download the newest version of Embedded Controller firmware. Plug in power supply, without it, flashing EC is not possible as losing power may cause in damaged firmware. Flash Embedded Controller firmware internally. system76_ectool flash ec_file.rom The output of the above-described command should look as follows: file board: Ok ( \"clevo/ns50mu\" ) file version: Ok ( \"2022-08-16_c12ff1a\" ) ec board: Ok ( \"clevo/ns50mu\" ) ec version: Ok ( \"2022-08-31_cbff21b\" ) Waiting 5 seconds for all keys to be released Sync SPI Read 128K Saving ROM to backup.rom SPI Write 128K SPI Read 128K Successfully programmed SPI ROM Result: Ok (()) Sync System will shut off in 5 seconds Sync Note: this is example output, versions may differ Computer will shut down automatically. Power on your computer. Booting process may take a while. After boot, choose option number 9 to drop to Shell. Retrieve information about your updated EC. system76_ectool info The output of the above-described command should contain information about the version of flashed firmware: board: clevo/ns50mu version: 2022 -08-31_cbff21b Additional features The section below presents a list of functionalities added to DTS, which were developed at the community's request and which do not necessarily relate strictly to Dasharo. Run commands from iPXE shell Note: this functionality might not work, please see GitHub issue . It is possible to execute the bash script after Linux startup by passing it from the iPXE shell. Every script placed in /sbin/ipxe-commands will be executed automatically after startup. Here is a simple instruction on how to use that feature. Run the HTTP server in the directory which contains the DTS base image. If you build it by yourself, then it should be the meta-dts subdirectory: build/tmp/deploy/images/genericx86-64 . The easiest way to start an HTTP server is using http.server python module. $ python3 -m http.server 9000 Create a dts.ipxe bootchain file in a directory where you have an HTTP server. That file should have similar content (you need to enter the IP of your host machine in a local network). #!ipxe # kernel http://<YOUR_IP>:9000/bzImage root = /dev/nfs initrd = http://<YOUR_IP>:9000/dts-base-image-genericx86-64.cpio.gz initrd http://<YOUR_IP>:9000/dts-base-image-genericx86-64.cpio.gz module http://<YOUR_IP>:9000/custom-script /sbin/ipxe-commands mode = 755 boot Copy your custom-script script in this same directory. Enter the iPXE shell on your device and load dts.ipxe bootchain file. iPXE> dhcp Configuring ( net0 00 :0d:b9:4b:49:60 ) ...... ok iPXE> route net0: 192 .168.4.126/255.255.255.0 gw 192 .168.4.1 iPXE> chain http://192.168.4.98:9000/dts.ipxe http://192.168.4.98:9000/dts.ipxe... ok http://192.168.4.98:9000/bzImage... ok http://192.168.4.98:9000/dts-base-image-genericx86-64.cpio.gz... ok http://192.168.4.98:9000/custom-script... ok Now your custom-script script should be copied to DTS rootfs as ipxe-commands and will be executed after boot. Run DTS using VentoyOS Starting from version v1.1.1 , we provide also an ISO formatted image. Thanks to that, it can be used with VentoyOS[1]. As for now the following limitations are known. VentoyOS needs to be started in UEFI mode. Nothing can be saved on root file system, as VentoyOS boots systems in read-only mode. Please let us know if you started DTS using VentoyOS and have additional information for us. You can share them on Dasharo Matrix Workspace .","title":"Documentation"},{"location":"dasharo-tools-suite/documentation/#documentation","text":"","title":"Documentation"},{"location":"dasharo-tools-suite/documentation/#supported-hardware","text":"Dasharo Tools Suite was prepared to run on x86 platforms, but we can confirm that it boots on the following platforms: ASUS KGPE-D16, Dell OptiPlex 7010/9010, MSI PRO Z690-A DDR4 ( test report ), MSI PRO Z690-A DDR5 ( test report ), NovaCustom NV4x ( test report ), NovaCustom NS5x/7x ( test report ).","title":"Supported hardware"},{"location":"dasharo-tools-suite/documentation/#running","text":"The Dasharo Tools Suite can be started in various ways. Currently, there are two options: bootable over a network (iPXE), bootable USB stick image. The first one should always be preferred if possible, as it is the easiest one to use.","title":"Running"},{"location":"dasharo-tools-suite/documentation/#building","text":"We choose Yocto Project to prepare Dasharo Tools Suite system. DTS image can be built using publicly available sources. Thanks to publishing the build cache on cache.dasharo.com the time needed to finish the process should be significantly decreased.","title":"Building"},{"location":"dasharo-tools-suite/documentation/#disabling-secure-boot","text":"Any procedure affecting the firmware flashing should be preceded by controlling the Secure Boot status and if it is turned on, turning it off. The enabled Secure Boot will not only prevent you from operating on the firmware, but you will also not be able to launch DTS. To check the Secure Boot state: Turn off the station on which you want to test the Dasharo firmware. Turn the station on and go to the next step immediately. Hold the BIOS SETUP KEY to enter the BIOS MENU . Localize and enter the Secure Boot menu using the arrow keys and Enter. Verify that the Secure Boot Status field says Disabled - if not, deselect the Enforce Secure Boot option using the arrow keys and Enter. Change the setting of Secure Boot to Disabled and press Enter. Press the F10 key to open the dialog box. Press Enter to confirm changes and exit from the menu. After completing the steps described above, Secure Boot should be disabled. You could confirm that by repeating steps 3 - 5.","title":"Disabling Secure Boot"},{"location":"dasharo-tools-suite/documentation/#features","text":"This section describes the functionality of the Dasharo Tools Suite. These are: Dasharo zero-touch initial deployment , HCL Report , Firmware update , Local firmware update , EC transition , EC update , additional features , run commands from iPXE shell , run DTS using VentoyOS .","title":"Features"},{"location":"dasharo-tools-suite/overview/","text":"Dasharo Tools Suite Overview Dasharo Tools Suite (DTS) is a set of tools running in a minimal Linux environment to deploy, update, and maintain firmware on Dasharo-supported devices. For example, it can be used to update the firmware on a device or run the initial deployment, even when no OS is currently installed. Releases - groups information about all releases. Documentation - describes DTS functionality and information on how to run it. Reporting issues Thank you for using Dasharo Tools Suite. If you have encountered any problems with this system or would like to provide feedback for us - please open an issue on Dasharo issues . And if you have already used this system and would be interested in supporting the project, please check How to support us? section.","title":"Overview"},{"location":"dasharo-tools-suite/overview/#dasharo-tools-suite","text":"","title":"Dasharo Tools Suite"},{"location":"dasharo-tools-suite/overview/#overview","text":"Dasharo Tools Suite (DTS) is a set of tools running in a minimal Linux environment to deploy, update, and maintain firmware on Dasharo-supported devices. For example, it can be used to update the firmware on a device or run the initial deployment, even when no OS is currently installed. Releases - groups information about all releases. Documentation - describes DTS functionality and information on how to run it.","title":"Overview"},{"location":"dasharo-tools-suite/overview/#reporting-issues","text":"Thank you for using Dasharo Tools Suite. If you have encountered any problems with this system or would like to provide feedback for us - please open an issue on Dasharo issues . And if you have already used this system and would be interested in supporting the project, please check How to support us? section.","title":"Reporting issues"},{"location":"dasharo-tools-suite/releases/","text":"Release Notes Following Release Notes describe the status of Open Source Software development for Dasharo Tools Suite. For details about our release process, please read Dasharo Standard Release Process . Subscribe to Dasharo Tools Suite Newsletter v1.2.0 - 2023-05-10 Images USB bootable DTS v1.2.0 image sha256 sha256.sig DTS v1.2.0 ISO image sha256 ISO sha256.sig ISO To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key Changelog Please, refer to changelog stored in meta-dts repository. v1.1.1 - 2023-02-20 Images USB bootable DTS v1.1.1 image sha256 sha256.sig DTS v1.1.1 ISO image sha256 ISO sha256.sig ISO To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key Changelog Fixed Dasharo zero-touch initial deployment on MSI PRO Z690-A, added DDR5 target with dedicated firmware. Blocked Dasharo zero-touch initial deployment on platforms where Dasharo firmware was detected. Added couple UX improvements for Dasharo zero-touch initial deployment: added platform verification step (show detected device information), added firmware verification step (show hash of using binary), added progress bar on first instructions, used reboot as default behavior after successful flashing. Added improvements for HCL report. Added DTS ISO format image, and documentation about VentoyOS usage. Improved README of the meta-dts repository. Added service to run shell commands from iPXE . Added instructions for building PoC image with enabled UEFI Secure Boot support. v1.1.0 - 2022-11-02 Images USB bootable DTS v1.1.0 image sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key Changelog Added Dasharo zero-touch initial deployment for a couple of supported platforms. Added multiple HCL report improvements, e.g. dump information about TPM, ME. Refactored Dasharo Tools Suite documentation . Added possibility to rollback using firmware dumped in HCL report. Added documentation about building Dasharo Tools Suite image . Added Github Actions to automate new version building. Added new tools: cbfstool, cbmem, futil, intelmetool (all from Dasharo coreboot fork ), binwalk , uefi-firmware-parser , mei-amt-check . Updated flashrom to version dasharo-v1.2.2 . Deploying iPXE boot artifacts on boot.dasharo.com . Sharing build cache on cache.dasharo.com . v1.0.2 - 2022-10-19 Images USB bootable DTS v1.0.2 image sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key Changelog Added new vendor-specific menu entry, which is displayed only on supported platforms. For now, NovaCustom menu was added for NovaCustom NV4x and NovaCustom NS5x/7x laptops. DTS version is now printed in the main menu. ec_transition script now supports NovaCustom NV4x laptops and automatically download firmware used for transition both for NovaCustom NV4x NV4x and NovaCustom NS5x/7x laptops, firmware transition documentation is updated. Added kernel configuration to silence terminal logs by default (change loglevel to 1). Enabled GOOGLE_MEMCONSOLE_COREBOOT kernel configuration to ease getting firmware logs. v1.0.1 - 2022-09-02 Images USB bootable DTS v1.0.1 image sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key Changelog Added system76_ectool to enable Embedded Controller firmware updating . Added ec_transition script, which helps with full Dasharo/Embedded Controller firmware transition for NovaCustom NS5x/7x. First public release: meta-dts-ce . v1.0.0 - 2022-08-09 Images USB bootable DTS v1.0.0 image sha256 # assuming all files have been downloaded to the same directory without # changing names sha256sum -c [ sha256 file ] Changelog Added auto-login functionality. Added user menu. Dasharo HCL Report , which adds the ability to automatically dump device information and send it to 3mdeb servers. Possibility to manually update the Dasharo firmware . Bootable via iPXE . Bootable via USB . Tested on NovaCustom NV4x, Dell OptiPlex 7010/9010.","title":"Releases"},{"location":"dasharo-tools-suite/releases/#release-notes","text":"Following Release Notes describe the status of Open Source Software development for Dasharo Tools Suite. For details about our release process, please read Dasharo Standard Release Process . Subscribe to Dasharo Tools Suite Newsletter","title":"Release Notes"},{"location":"dasharo-tools-suite/releases/#v120-2023-05-10","text":"","title":"v1.2.0 - 2023-05-10"},{"location":"dasharo-tools-suite/releases/#v111-2023-02-20","text":"","title":"v1.1.1 - 2023-02-20"},{"location":"dasharo-tools-suite/releases/#v110-2022-11-02","text":"","title":"v1.1.0 - 2022-11-02"},{"location":"dasharo-tools-suite/releases/#v102-2022-10-19","text":"","title":"v1.0.2 - 2022-10-19"},{"location":"dasharo-tools-suite/releases/#v101-2022-09-02","text":"","title":"v1.0.1 - 2022-09-02"},{"location":"dasharo-tools-suite/releases/#v100-2022-08-09","text":"","title":"v1.0.0 - 2022-08-09"},{"location":"dev-proc/documentation-guidelines/","text":"Documentation guidelines That document can be treated as an onboarding into creating and maintaining documentation in projects developed by Dasharo Team. It is a set of general rules and tips that you should have in mind while writing guides to any projects in Dasharo repositories. Table of content General rules Document type Useful tools Formatting General rules Make a plan - before starting a new document, you should know how it will look. It is good to prepare a table of content first, and then fill up planned chapters. Read twice before publish - everyone make mistakes. Before committing your changes, it is good to read this again and make sure that you do not make any typos, a dump of commands output is correct, or there are no other mistakes. Goal of document - Documentation is not written for everyone. Some documents contain only a list of commands with minor descriptions, some of them were created to describe research results, and others may be written for non-technical persons with a huge amount of data that are obvious and unnecessary to read by developers. Because of that, you should always know for who you are writing that document - it may be developers, testers, or non-technical management. Hierarchy of information - most important information should always be on top of the document. We should start with the title, short description, and table of contexts. The rest of the chapters should start with the most important one. 30/90 rule - It is good to ask your reporter or someone else to do a quick review where approx 30% of the work was done. At this moment, you probably have prepared the initial draft of the document with a table of content and some remarks about content in planned chapters. The second review should be done when 90% of the work is finished, and the document is almost done. With that workflow, you can make sure that you are on the same page with a reporter. Existing resources - We should not duplicate content that was previously described in another document. Some steps or explanations are related to a few documents, and it is not necessary to write the same again. It is good to use references to existing documents (like hyperlinks) - because of that, updating and maintenance of documentation are easier because the change in one document is related to several others. Also, if you see that a related document is outdated, it will be a much better choice to review and update them instead of writing another new one from scratch. Maintenance - documentation may be outdated after a few changes. We should keep that in mind and prepare an updated schedule. One of the ideas is to mark related documents in every pull request with technical changes. Of course, the best solution is to improve documentation with every change in code/architecture, but it is not always possible due to deadlines or lack of time. Marking documents to update in the future allows us to do that on better occasions - and we prevent situations where the reader must inform us that the documentation is highly outdated - or even useless. Archive - Projects are changing, and some topics from the past are not existing now. If the document describes the working of a non-existing mechanism, we should move it to the special folder with archived content. We can go back to that solution in the future, but it must be moved out to as not to mislead the reader. Document type Good documentation should be written in one of four modes. It can be a tutorial, how-to guide, technical reference, or explanation. These modes were proposed by Diataxis framework, and we want to follow that method in the future. Generally: Tutorials are learning-oriented, and their purpose is to take the reader by the hand through a series of steps to complete a project of some kind. It may be a getting started guide, end2end process, or preparing the working environment. How-to-guides should be written as a step list that is required to solve the problem . They are goal-oriented, which is the main difference between tutorials: how-to guides lead to solving some problems and are not focused on the learning experience. For example, building system images or modifying boot parameters. Reference guides are technical descriptions, and it is information-oriented. It is only information about some technical thing without an explanation of it in the larger context. A good example of that is a requirement list, description of functions or variables used in the program, or list of supported platforms. Explanation is a discussion focused on the understanding of some topic, like boot flow, description of specific communication protocol, or device provisioning. That document should explain the subject, not instruct how to do something. We should not create documents that are not related to these modes. Useful tools grammarly.com - online writing assistant who can improve your grammar and make the document clear. A premium account is a very useful option, but it is not a must. Core functionalities are available for free. It is highly recommended to use the Grammarly tool before committing changes. hemingwayapp.com - make your writing clear. Sometimes it catches things that are not detected by Grammarly. draw.io - we use that to prepare diagrams. paste.dasharo.com - pastebin alternative hosted by Dasharo. asciinema.org - free and open-source solution for recording terminal sessions. Sometimes - especially in more complex cases, it is good to present command sequences in this way. Formatting General rules of formatting documents: Use markdown preview to verify that document is rendering correctly. That feature is available in VS code, Github/Gitlab web IDE, and other tools. Line with code should not have more than 80 characters. To follow that rule, it is good to set the line at width 80 in your IDE. Here is how to do it in VS code. We also maintain the repository Dasharo/dev-tools-configs with editors configs used by our community. Feel free to create PR with your configuration - you can give your proposition to improve existing settings or create configs for editors that don't exist yet in our repository. A properly configurated editor simplifies correct formatting.","title":"Documentation guidelines"},{"location":"dev-proc/documentation-guidelines/#documentation-guidelines","text":"That document can be treated as an onboarding into creating and maintaining documentation in projects developed by Dasharo Team. It is a set of general rules and tips that you should have in mind while writing guides to any projects in Dasharo repositories.","title":"Documentation guidelines"},{"location":"dev-proc/documentation-guidelines/#table-of-content","text":"General rules Document type Useful tools Formatting","title":"Table of content"},{"location":"dev-proc/documentation-guidelines/#general-rules","text":"Make a plan - before starting a new document, you should know how it will look. It is good to prepare a table of content first, and then fill up planned chapters. Read twice before publish - everyone make mistakes. Before committing your changes, it is good to read this again and make sure that you do not make any typos, a dump of commands output is correct, or there are no other mistakes. Goal of document - Documentation is not written for everyone. Some documents contain only a list of commands with minor descriptions, some of them were created to describe research results, and others may be written for non-technical persons with a huge amount of data that are obvious and unnecessary to read by developers. Because of that, you should always know for who you are writing that document - it may be developers, testers, or non-technical management. Hierarchy of information - most important information should always be on top of the document. We should start with the title, short description, and table of contexts. The rest of the chapters should start with the most important one. 30/90 rule - It is good to ask your reporter or someone else to do a quick review where approx 30% of the work was done. At this moment, you probably have prepared the initial draft of the document with a table of content and some remarks about content in planned chapters. The second review should be done when 90% of the work is finished, and the document is almost done. With that workflow, you can make sure that you are on the same page with a reporter. Existing resources - We should not duplicate content that was previously described in another document. Some steps or explanations are related to a few documents, and it is not necessary to write the same again. It is good to use references to existing documents (like hyperlinks) - because of that, updating and maintenance of documentation are easier because the change in one document is related to several others. Also, if you see that a related document is outdated, it will be a much better choice to review and update them instead of writing another new one from scratch. Maintenance - documentation may be outdated after a few changes. We should keep that in mind and prepare an updated schedule. One of the ideas is to mark related documents in every pull request with technical changes. Of course, the best solution is to improve documentation with every change in code/architecture, but it is not always possible due to deadlines or lack of time. Marking documents to update in the future allows us to do that on better occasions - and we prevent situations where the reader must inform us that the documentation is highly outdated - or even useless. Archive - Projects are changing, and some topics from the past are not existing now. If the document describes the working of a non-existing mechanism, we should move it to the special folder with archived content. We can go back to that solution in the future, but it must be moved out to as not to mislead the reader.","title":"General rules"},{"location":"dev-proc/documentation-guidelines/#document-type","text":"Good documentation should be written in one of four modes. It can be a tutorial, how-to guide, technical reference, or explanation. These modes were proposed by Diataxis framework, and we want to follow that method in the future. Generally: Tutorials are learning-oriented, and their purpose is to take the reader by the hand through a series of steps to complete a project of some kind. It may be a getting started guide, end2end process, or preparing the working environment. How-to-guides should be written as a step list that is required to solve the problem . They are goal-oriented, which is the main difference between tutorials: how-to guides lead to solving some problems and are not focused on the learning experience. For example, building system images or modifying boot parameters. Reference guides are technical descriptions, and it is information-oriented. It is only information about some technical thing without an explanation of it in the larger context. A good example of that is a requirement list, description of functions or variables used in the program, or list of supported platforms. Explanation is a discussion focused on the understanding of some topic, like boot flow, description of specific communication protocol, or device provisioning. That document should explain the subject, not instruct how to do something. We should not create documents that are not related to these modes.","title":"Document type"},{"location":"dev-proc/documentation-guidelines/#useful-tools","text":"grammarly.com - online writing assistant who can improve your grammar and make the document clear. A premium account is a very useful option, but it is not a must. Core functionalities are available for free. It is highly recommended to use the Grammarly tool before committing changes. hemingwayapp.com - make your writing clear. Sometimes it catches things that are not detected by Grammarly. draw.io - we use that to prepare diagrams. paste.dasharo.com - pastebin alternative hosted by Dasharo. asciinema.org - free and open-source solution for recording terminal sessions. Sometimes - especially in more complex cases, it is good to present command sequences in this way.","title":"Useful tools"},{"location":"dev-proc/documentation-guidelines/#formatting","text":"General rules of formatting documents: Use markdown preview to verify that document is rendering correctly. That feature is available in VS code, Github/Gitlab web IDE, and other tools. Line with code should not have more than 80 characters. To follow that rule, it is good to set the line at width 80 in your IDE. Here is how to do it in VS code. We also maintain the repository Dasharo/dev-tools-configs with editors configs used by our community. Feel free to create PR with your configuration - you can give your proposition to improve existing settings or create configs for editors that don't exist yet in our repository. A properly configurated editor simplifies correct formatting.","title":"Formatting"},{"location":"dev-proc/feature-bug-fix-dev-process/","text":"Features and bug fixes development We are in favor of Test Driven Bug Fixing methodology for which process looks as follows: Create automated test that validates feature or reproduces bug - test fails at this point Pull upstream master branch to Dasharo forked repository master branch Merge master to <platform>/develop Create new branch <platform>/<feature> from <platform>/develop Commit changes to <platform>/<feature> Run test written in point 1 and make sure it pass. Run <platform> regression test suite and make sure new feature does not introduce new bugs. Submit PR to <platform>/develop","title":"Features and bug fixes development process"},{"location":"dev-proc/feature-bug-fix-dev-process/#features-and-bug-fixes-development","text":"We are in favor of Test Driven Bug Fixing methodology for which process looks as follows: Create automated test that validates feature or reproduces bug - test fails at this point Pull upstream master branch to Dasharo forked repository master branch Merge master to <platform>/develop Create new branch <platform>/<feature> from <platform>/develop Commit changes to <platform>/<feature> Run test written in point 1 and make sure it pass. Run <platform> regression test suite and make sure new feature does not introduce new bugs. Submit PR to <platform>/develop","title":"Features and bug fixes development"},{"location":"dev-proc/hcl-maintainer/","text":"Dasharo HCL Maintainer documentation This documentaintion aims to describe how to maintain Dasharo Hardware Compatibility List for CPUs, memory, mainboards and GPU. Generating entry Dasharo HCL report parsing For reports uploaded to 3mdeb cloud please use dedicated script readme. Extending list Please always sort table before publishing. In vim: Shift + V - to enter visual mode and mark whole range of entries. type : and sort u to run vim sort function on marked range and leave only unique lines. Github report Github pull request Go through standard review process for Dasharo documentation.","title":"HCL Maintainer documentation"},{"location":"dev-proc/hcl-maintainer/#dasharo-hcl-maintainer-documentation","text":"This documentaintion aims to describe how to maintain Dasharo Hardware Compatibility List for CPUs, memory, mainboards and GPU.","title":"Dasharo HCL Maintainer documentation"},{"location":"dev-proc/hcl-maintainer/#generating-entry","text":"","title":"Generating entry"},{"location":"dev-proc/hcl-maintainer/#extending-list","text":"Please always sort table before publishing. In vim: Shift + V - to enter visual mode and mark whole range of entries. type : and sort u to run vim sort function on marked range and leave only unique lines.","title":"Extending list"},{"location":"dev-proc/smbios-rules/","text":"Dasharo Product Guidelines: SMBIOS Information Introduction This document describes the guidelines for filling in the SMBIOS fields in devices supported by Dasharo. It is meant to be used primarily as a reference for Dasharo developers. BIOS Information (Type 0) Vendor field The Vendor field, for firmware with release date after 13 January 2022, is set as follows: 3mdeb For firmware with release date before 13 January 2022: 3mdeb Embedded Systems Consulting BIOS Version field The BIOS Version string is defined as follows: Dasharo ([ major_framework ] + [ minor_framework ]) v [ version ] major_framework refers to the primary framework in which the firmware is developed, e.g. coreboot or UEFI . minor_framework is the secondary framework, a supporting component for the primary framework, e.g. a coreboot payload. May not always be used, e.g. if edk2 is used as the primary framework. version means version according to official Dasharo Versioning documentation. For TianoCore UEFIPayloadPkg , we use the simpler and more recognizable UEFI name. Examples: Dasharo (coreboot+UEFI) v1.0.0 - for coreboot-based builds with TianoCore UEFIPayload Dasharo (coreboot+SeaBIOS) v1.0.0 - for coreboot-based builds with SeaBIOS payload Dasharo (coreboot+Heads) v1.0.0 - for coreboot-based builds with Heads payload Dasharo (UEFI) v1.0.0 - for plain edk2-based builds System Information (Type 1) Devices with an existing BIOS implementation In this case, set all the fields that are relevant (excluding BIOS version and vendor) to the same values as the stock firmware. To obtain SMBIOS values from the stock firmware, either: Obtain the fwdump-docker logs from 3mdeb cloud Run dmidecode -t 1 on the machine itself Devices with no existing BIOS implementation In the case where the device does not have an existing supported BIOS or the client chooses to use different SMBIOS fields (e.g. to make it easier to differentiate devices), refer to the SMBIOS specification v3.5.0 .","title":"Dasharo Product Guidelines: SMBIOS Information"},{"location":"dev-proc/smbios-rules/#dasharo-product-guidelines-smbios-information","text":"","title":"Dasharo Product Guidelines: SMBIOS Information"},{"location":"dev-proc/smbios-rules/#introduction","text":"This document describes the guidelines for filling in the SMBIOS fields in devices supported by Dasharo. It is meant to be used primarily as a reference for Dasharo developers.","title":"Introduction"},{"location":"dev-proc/smbios-rules/#bios-information-type-0","text":"","title":"BIOS Information (Type 0)"},{"location":"dev-proc/smbios-rules/#system-information-type-1","text":"","title":"System Information (Type 1)"},{"location":"dev-proc/source-code-structure/","text":"Source code structure Every repository forked and maintained by Dasharo Release Team has following branch structure: master - follows upstream project master branch <platform>/release - contains all code releases for given <platform> , list of supported platforms is in Hardware Compatibility List section <platform>/rel_vX.Y.Z - release branch for version X.Y.Z <platform>/develop - contains most recent development and is periodically synced with master branch <platform>/<feature> - tracks development of platform specific feature <platform> = <coreboot_mainboard_vendor>_<coreboot_mainboard_model> if platform is supported by coreboot, otherwise we use common sense and available information about hardware. Remotes It is assumed that upstream repository is cloned and remote named dasharo is added later. This has to be done in order to pull git submodules from upstream repository so they don't have to be kept on Dasharo's repository. This can be done like this: git clone https://review.coreboot.org/coreboot.git cd coreboot git submodule update --init --checkout git remote add dasharo git@github.com:Dasharo/coreboot.git If everything was done properly, this is expected state of remotes: git remote -v dasharo git@github.com:Dasharo/coreboot.git ( fetch ) dasharo git@github.com:Dasharo/coreboot.git ( push ) origin https://review.coreboot.org/coreboot.git ( fetch ) origin https://review.coreboot.org/coreboot.git ( push ) Tags Dasharo Release tags in git repository use format: <platform>_vX.Y.Z New platform support Branch for new platform should be created from most recent master branch tag. If there is justified need to create support for new board at arbitrary non-tagged commit developer should mark this commit with <platform>_v0.0.0 tag. Force-pushes rules Force-pushes to <platform>/rel_vX.Y.Z , <platform>/develop or <platform>/<feature> are forbidden with following exceptions: rebasing - when some other PR is merged to target branch before our does, or when upstream's master introduces the same fixes that our branch would squashing - to not produce unnecessary \"fix indentation\" or \"add missing braces\" commits to the history (re-)signing commits (both -S and -s) - shouldn't happen, but if it does happen it would be better to have it fixed by original author than the person that tries to upstream it some time later. Force-pushes to <platform>/release branches are unconditionally forbidden. Merging guidelines We want to keep the history linear. The rebase merging strategy is desired. Merge commits in the code repositories are not allowed. The rebase strategy should be the only one available in the GitHub web UI. It is, however, strongly advised not to use GitHub web UI to perform code merges. The signed-off tends to be dropped (even when using the rebase strategy), which is problematic for some projects (e.g. it makes the coreboot lint checks fail after merging from the UI). The procedure of merging is as follows: Review the code in GitHub. Make sure to receive at least one Approve in the review process. Make sure that all change requests are resolved. Merge the branch using git CLI. In case of merging the feature branch into develop branch it may look as follows: git fetch dasharo git checkout dasharo/<platform>/develop -b <platform>/develop git merge --ff-only dasharo/<platform>/<feature> git push dasharo <platform>/develop This should automatically trigger closing the MR in the GitHub web UI. The remote branch can be safely deleted after this process. git push dasharo --delete <platform>/<feature> Note that the merging may fail if the source (in this case: feature ) branch is not properly rebased on top of the target (in this case: develop ) branch. In such a case, one must rebase the source branch first: git checkout dasharo/<platform>/<feature> git checkout -b <platform>/<feature> git rebase dasharo/<platform>/<develop> git push -f dasharo <platform>/<feature>","title":"Source code structure"},{"location":"dev-proc/source-code-structure/#source-code-structure","text":"Every repository forked and maintained by Dasharo Release Team has following branch structure: master - follows upstream project master branch <platform>/release - contains all code releases for given <platform> , list of supported platforms is in Hardware Compatibility List section <platform>/rel_vX.Y.Z - release branch for version X.Y.Z <platform>/develop - contains most recent development and is periodically synced with master branch <platform>/<feature> - tracks development of platform specific feature <platform> = <coreboot_mainboard_vendor>_<coreboot_mainboard_model> if platform is supported by coreboot, otherwise we use common sense and available information about hardware.","title":"Source code structure"},{"location":"dev-proc/source-code-structure/#remotes","text":"It is assumed that upstream repository is cloned and remote named dasharo is added later. This has to be done in order to pull git submodules from upstream repository so they don't have to be kept on Dasharo's repository. This can be done like this: git clone https://review.coreboot.org/coreboot.git cd coreboot git submodule update --init --checkout git remote add dasharo git@github.com:Dasharo/coreboot.git If everything was done properly, this is expected state of remotes: git remote -v dasharo git@github.com:Dasharo/coreboot.git ( fetch ) dasharo git@github.com:Dasharo/coreboot.git ( push ) origin https://review.coreboot.org/coreboot.git ( fetch ) origin https://review.coreboot.org/coreboot.git ( push )","title":"Remotes"},{"location":"dev-proc/source-code-structure/#tags","text":"Dasharo Release tags in git repository use format: <platform>_vX.Y.Z","title":"Tags"},{"location":"dev-proc/source-code-structure/#new-platform-support","text":"Branch for new platform should be created from most recent master branch tag. If there is justified need to create support for new board at arbitrary non-tagged commit developer should mark this commit with <platform>_v0.0.0 tag.","title":"New platform support"},{"location":"dev-proc/source-code-structure/#force-pushes-rules","text":"Force-pushes to <platform>/rel_vX.Y.Z , <platform>/develop or <platform>/<feature> are forbidden with following exceptions: rebasing - when some other PR is merged to target branch before our does, or when upstream's master introduces the same fixes that our branch would squashing - to not produce unnecessary \"fix indentation\" or \"add missing braces\" commits to the history (re-)signing commits (both -S and -s) - shouldn't happen, but if it does happen it would be better to have it fixed by original author than the person that tries to upstream it some time later. Force-pushes to <platform>/release branches are unconditionally forbidden.","title":"Force-pushes rules"},{"location":"dev-proc/source-code-structure/#merging-guidelines","text":"We want to keep the history linear. The rebase merging strategy is desired. Merge commits in the code repositories are not allowed. The rebase strategy should be the only one available in the GitHub web UI. It is, however, strongly advised not to use GitHub web UI to perform code merges. The signed-off tends to be dropped (even when using the rebase strategy), which is problematic for some projects (e.g. it makes the coreboot lint checks fail after merging from the UI). The procedure of merging is as follows: Review the code in GitHub. Make sure to receive at least one Approve in the review process. Make sure that all change requests are resolved. Merge the branch using git CLI. In case of merging the feature branch into develop branch it may look as follows: git fetch dasharo git checkout dasharo/<platform>/develop -b <platform>/develop git merge --ff-only dasharo/<platform>/<feature> git push dasharo <platform>/develop This should automatically trigger closing the MR in the GitHub web UI. The remote branch can be safely deleted after this process. git push dasharo --delete <platform>/<feature> Note that the merging may fail if the source (in this case: feature ) branch is not properly rebased on top of the target (in this case: develop ) branch. In such a case, one must rebase the source branch first: git checkout dasharo/<platform>/<feature> git checkout -b <platform>/<feature> git rebase dasharo/<platform>/<develop> git push -f dasharo <platform>/<feature>","title":"Merging guidelines"},{"location":"dev-proc/standard-release-process/","text":"Standard Release Process Following procedure is generic description of release process of firmware for supported hardware platforms. Precise steps and any difference from standard process are described in platform specific documentation. Description here is, intentionally, Open Source Firmware framework agnostics and should be maintained in that way. Process steps Checkout new branch <platform>/rel_vX.Y.Z from recent commit on <platform>/release - to understand versioning scheme please read Versioning section Merge current <platform>/develop to <platform>/rel_vX.Y.Z Run platform regression test suite Fix all required issues and repeat point 3 until fixed - this doesn't mean all tests pass, this mean that approved set passed If results are accepted merge it to <platform>/release branch Add tag, which should trigger CI and publish binaries. Tag should be annotated and signed. For example: git tag -a -s -m \"<platform>_vX.Y.Z\" <platform>_vX.Y.Z Merge release branch to develop","title":"Standard Release Process"},{"location":"dev-proc/standard-release-process/#standard-release-process","text":"Following procedure is generic description of release process of firmware for supported hardware platforms. Precise steps and any difference from standard process are described in platform specific documentation. Description here is, intentionally, Open Source Firmware framework agnostics and should be maintained in that way.","title":"Standard Release Process"},{"location":"dev-proc/standard-release-process/#process-steps","text":"Checkout new branch <platform>/rel_vX.Y.Z from recent commit on <platform>/release - to understand versioning scheme please read Versioning section Merge current <platform>/develop to <platform>/rel_vX.Y.Z Run platform regression test suite Fix all required issues and repeat point 3 until fixed - this doesn't mean all tests pass, this mean that approved set passed If results are accepted merge it to <platform>/release branch Add tag, which should trigger CI and publish binaries. Tag should be annotated and signed. For example: git tag -a -s -m \"<platform>_vX.Y.Z\" <platform>_vX.Y.Z Merge release branch to develop","title":"Process steps"},{"location":"dev-proc/versioning/","text":"Versioning Dasharo Releases are versioned using Semantic Versioning and Keep A Changelog to document changes introduced in new releases. Major version zero (0.y.z) is for initial development or first release issued and may not support all Dasharo Quality Criteria. The only way to map Dasharo Version to version of Open Source Firmware framework or other components included in Dasharo Release is through release notes. Link to Dasharo Release Notes for your hardware platform can be found in menu on the left side (Supported Hardware->Hardware Model->Releases). Dasharo Releases can be divided into two categories: Dasharo Entry Subscription Releases (previous Dasharo Supporters Release for Dasharo Support Entrance Subscribers) Dasharo Community Releases Dasharo Entry Subscription Releases Dasharo Entry Subscription subscribers receive firmware updates more frequently than the community. The number of updates per year depends on the number of Dasharo Entry Subscriptions sold and the availability of other funding (e.g., NLNet, corporate sponsors, community donations) but is less than 2 updates per year. Dasharo Entry Subscription Releases are characterized by a changing patch version ( z ). Fixes and features introduced in Dasharo Entry Subscription Releases will also be available later as Dasharo Community Releases with public pre-built binaries in the respective release pages. In short, being a Dasharo Subscriber gives early access to the newest features and fixes. How to become Dasharo Entry Subscription subscriber? Dasharo Community Releases Dasharo Community Releases are built and published once a year. Each Dasharo Community Release has a zero patch version ( x.y.0 ) and the only changing number is the minor version y . To be up-to-date with latest Dasharo Community Release updates, one can subscribed to free of charge mailing list for given hardware platform, for which the link can be found in menu on the left side (Supported Hardware->Hardware Model->Releases). Signing keys In Dasharo we use following rules for keys: GPG RSA 4096 for signing and authentication and subkey for encryption There few types of naming conventions, which define Real Name field and chain of trust schemes: Software: Real Name: <name> open-source software release <version> signing key Signing key: 3mdeb Open Source Software Master Key <contact@3mdeb.com> Firmware: Real Name: <name> open-source firmware release <version> signing key Signing key: 3mdeb Dasharo Master Key PC Engines (firmware exception): Real Name: PC Engines open-source firmware release <version> signing key Signing key: 3mdeb Open Source Firmware Master Key <contact@3mdeb.com> Dasharo firmware produced by 3mdeb: Real Name: Dasharo release <version> compatible with <name> signing key Signing key: 3mdeb Dasharo Master Key For Dasharo firmware produced by 3mdeb on customer's behalf: Real Name: Dasharo open-source firmware <version> for <name> signing key Signing key: 3mdeb Dasharo Master Key <name> typically is in form <vendor> <model> or just <vendor> if we release firmware for whole line of products which can be support in one binary e.g. PC Engines. Examples: Dell OptiPlex 7010/9010 ASUS KGPE-D16 MSI MS7D25 NovaCustom Tuxedo Most recent status should be reflected in 3mdeb-secpack repository.","title":"Versioning"},{"location":"dev-proc/versioning/#versioning","text":"Dasharo Releases are versioned using Semantic Versioning and Keep A Changelog to document changes introduced in new releases. Major version zero (0.y.z) is for initial development or first release issued and may not support all Dasharo Quality Criteria. The only way to map Dasharo Version to version of Open Source Firmware framework or other components included in Dasharo Release is through release notes. Link to Dasharo Release Notes for your hardware platform can be found in menu on the left side (Supported Hardware->Hardware Model->Releases). Dasharo Releases can be divided into two categories: Dasharo Entry Subscription Releases (previous Dasharo Supporters Release for Dasharo Support Entrance Subscribers) Dasharo Community Releases","title":"Versioning"},{"location":"dev-proc/versioning/#dasharo-entry-subscription-releases","text":"Dasharo Entry Subscription subscribers receive firmware updates more frequently than the community. The number of updates per year depends on the number of Dasharo Entry Subscriptions sold and the availability of other funding (e.g., NLNet, corporate sponsors, community donations) but is less than 2 updates per year. Dasharo Entry Subscription Releases are characterized by a changing patch version ( z ). Fixes and features introduced in Dasharo Entry Subscription Releases will also be available later as Dasharo Community Releases with public pre-built binaries in the respective release pages. In short, being a Dasharo Subscriber gives early access to the newest features and fixes. How to become Dasharo Entry Subscription subscriber?","title":"Dasharo Entry Subscription Releases"},{"location":"dev-proc/versioning/#dasharo-community-releases","text":"Dasharo Community Releases are built and published once a year. Each Dasharo Community Release has a zero patch version ( x.y.0 ) and the only changing number is the minor version y . To be up-to-date with latest Dasharo Community Release updates, one can subscribed to free of charge mailing list for given hardware platform, for which the link can be found in menu on the left side (Supported Hardware->Hardware Model->Releases).","title":"Dasharo Community Releases"},{"location":"dev-proc/versioning/#signing-keys","text":"In Dasharo we use following rules for keys: GPG RSA 4096 for signing and authentication and subkey for encryption There few types of naming conventions, which define Real Name field and chain of trust schemes: Software: Real Name: <name> open-source software release <version> signing key Signing key: 3mdeb Open Source Software Master Key <contact@3mdeb.com> Firmware: Real Name: <name> open-source firmware release <version> signing key Signing key: 3mdeb Dasharo Master Key PC Engines (firmware exception): Real Name: PC Engines open-source firmware release <version> signing key Signing key: 3mdeb Open Source Firmware Master Key <contact@3mdeb.com> Dasharo firmware produced by 3mdeb: Real Name: Dasharo release <version> compatible with <name> signing key Signing key: 3mdeb Dasharo Master Key For Dasharo firmware produced by 3mdeb on customer's behalf: Real Name: Dasharo open-source firmware <version> for <name> signing key Signing key: 3mdeb Dasharo Master Key <name> typically is in form <vendor> <model> or just <vendor> if we release firmware for whole line of products which can be support in one binary e.g. PC Engines. Examples: Dell OptiPlex 7010/9010 ASUS KGPE-D16 MSI MS7D25 NovaCustom Tuxedo Most recent status should be reflected in 3mdeb-secpack repository.","title":"Signing keys"},{"location":"ecosystem/overview/","text":"Ecosystem Overview Dasharo ecosystem contain multiple components on various levels of organization. This section overview role of every component. Open Source Firmware Community - semi-organised collections of contributors to projects related to embedded firmware. Dasharo project contributors are part of OSF community. Development - Dasharo Development describes processes which Embedded Firmware Team uses for the development of Dasharo Modules, which are sometimes custom services, but most of the time ready to use productised services, Open Core or SaaS. Production - Dasharo Production describes the process of putting together Dasharo Modules according to specific requirements. In this section we describe development infrastructure, build environment, CI/CD and build publishing methods. We also cover how production interacts with Dasharo Transparent Validation System. Customer Infrastructure - Some customers may have the need of replicating part of Dasharo Production process and infrastructure in their own environment, which leads to repositories synchronization, different CI/CD setup and other needs. This section describes interaction with Customer Infrastructure and which part of Dasharo Production is deployable on the customer site. Transparent Validation - Dasharo Transparent Validation (DTV) is a set of software, firmware and hardware components with the goal of simplifying and improving long term maintenance of Dasharo firmware. In this section we introduce components which belong to DTV. Testing Infrastructure - Part of Dasharo Transparent Validation responsible for scheduling automated testing, publishing test results and interacting with Dasharo Production in the area of release candidate quality confirmation.","title":"Overview"},{"location":"ecosystem/overview/#ecosystem-overview","text":"Dasharo ecosystem contain multiple components on various levels of organization. This section overview role of every component. Open Source Firmware Community - semi-organised collections of contributors to projects related to embedded firmware. Dasharo project contributors are part of OSF community. Development - Dasharo Development describes processes which Embedded Firmware Team uses for the development of Dasharo Modules, which are sometimes custom services, but most of the time ready to use productised services, Open Core or SaaS. Production - Dasharo Production describes the process of putting together Dasharo Modules according to specific requirements. In this section we describe development infrastructure, build environment, CI/CD and build publishing methods. We also cover how production interacts with Dasharo Transparent Validation System. Customer Infrastructure - Some customers may have the need of replicating part of Dasharo Production process and infrastructure in their own environment, which leads to repositories synchronization, different CI/CD setup and other needs. This section describes interaction with Customer Infrastructure and which part of Dasharo Production is deployable on the customer site. Transparent Validation - Dasharo Transparent Validation (DTV) is a set of software, firmware and hardware components with the goal of simplifying and improving long term maintenance of Dasharo firmware. In this section we introduce components which belong to DTV. Testing Infrastructure - Part of Dasharo Transparent Validation responsible for scheduling automated testing, publishing test results and interacting with Dasharo Production in the area of release candidate quality confirmation.","title":"Ecosystem Overview"},{"location":"ecosystem/roadmap/","text":"Roadmap Each features on below roadmap should be placed in public issue tracker, so it can be publicly referenced. Some places where issues can be discussed: Dasharo Github issues repo especially issues tagged enhancement . coreboot issues tracker edk2 bugzilla Backlog TrenchBoot Roadmap firmware related issues. Dasharo Reference OS on USB stick to simplify firmware deployment fwupd/LVFS for firmware deployment ipxe for firmware deployment","title":"Roadmap"},{"location":"ecosystem/roadmap/#roadmap","text":"Each features on below roadmap should be placed in public issue tracker, so it can be publicly referenced. Some places where issues can be discussed: Dasharo Github issues repo especially issues tagged enhancement . coreboot issues tracker edk2 bugzilla","title":"Roadmap"},{"location":"ecosystem/roadmap/#backlog","text":"TrenchBoot Roadmap firmware related issues. Dasharo Reference OS on USB stick to simplify firmware deployment fwupd/LVFS for firmware deployment ipxe for firmware deployment","title":"Backlog"},{"location":"guides/dasharo-reviewers-guide/","text":"Dasharo Reviewers Guide Based on reviews of Dasharo compatible with MSI Z690-A DDR4/DDR5, we created the following guide to explain the performance gap between MSI proprietary and Dasharo open-source firmware, but in the long run, the same discoveries can apply to other Dasharo and open-source firmware solutions. Introduction During the 23+ years of coreboot's existence, one aspect that has never been in-depth tested is how its performance compares against proprietary firmware solutions that run on the same hardware platform. The lack of performance testing is because, for most of the interested parties, the selling point of coreboot was the transparency of being open-source, and this rarely made direct comparisons about other features or functionality. Historically, most of what we could find about coreboot performance involves the lower POST times claims, but there needs to be more information regarding its runtime performance as measured in benchmarks, which is a significant point that end users are interested in. Sadly, we need more internal resources and the necessary field experience to conduct such exhaustive benchmark testing. Several significant findings came from third-party benchmarks and community reports, which is enough to know our current standing. Professional hardware reviewers should be better at performing and analyzing measures than we are. Why We Ask To Fine Tune Settings In general, we found out in our limited benchmarking that performance out-of-the-box with Dasharo is measurably lower than performance with MSI proprietary firmware, in the order of 6-8% on the benchmarked Core i5 12600K. Lower performance was quickly tracked down to MSI using, by default, certain processor operating parameters that are quite different from the values stated on the Intel datasheets, resulting in alterations of the processor behavior that allows it to sustain Turbo Boost with higher clock speeds and for longer periods than otherwise possible, and thus appear to perform better overall. After normalizing across both MSI proprietary firmware and Dasharo, the values we found were different, and the benchmark difference was reduced to around 2% (21:19- 29:00) . We also found several review websites that have already written articles and analysis about this matter. Mainboard vendors use default values above those specified by Intel (technically overclocking) to produce better performance results in benchmarks ( AnandTech , TechSpot , VideoCardz , Gamers Nexus about cheating , GamersNexus about MSI default settings , GamersNexus Z490 YouTube Review , TechPowerUp , Tom's Hardware ). Depending on whom you ask, using aggressive values by default can be seen either as a convenience, since the end user gets more performance without having to know how to configure the firmware, or as a form of cheating, due to the end user usually having no idea about these changes and that they are overclocking out-of-the-box. As for the time being, we're sticking to Intel specification default values; these mainboard vendors' custom optimizations hurts us because it makes the difference look much bigger than it is. What we want to showcase is how Dasharo (for this MSI port, coreboot + EDKII UefiPayloadPkg) performance compares against the proprietary firmware codebase. The only way to do so accurately is by ensuring that the hardware operating values are the same in both Dasharo and the original firmware so that the performance differences are not due to higher processor clock speeds thanks to higher Power Limits, unlimited Turbo Boost times, or similar tricks. Note that we are okay with out-of-the-box comparisons, but that wouldn't be directly an apples-to-apples comparison of the performance of both firmware codebases, which is our point. Thus, to make it fair, the hardware has to be tweaked to run with the same operating values on both. As you can't change values on Dasharo unless you're willing to recompile (or ask for a custom build with tweaked values), the easiest way is by bringing MSI firmware values down to Dasharo/Intel levels. Find Your Processor Intel Default Parameters So far we've found six processor-configurable parameters that differ significantly: PL1, PL2, PL1 Tau, ICCMAX, DC_LL, and AC_LL. coreboot uses the values found on two sections of the Intel 12th Generation Intel Core Processors Datasheet (Volume 1 of 2). You will have to check the datasheet to find the proper values for your processor so that you can manually input them onto MSI firmware. In the case of MSI firmware default values, we found no public information, so we only know how it autoconfigures the processors we tested. Note that on the datasheet, Intel doesn't mention processor models by name/number but instead classifies them by amount of P+E cores and Base Power TDP, so first, you have to check these two values from Intel Ark for your processor model, then check on the Datasheet tables what matches both classes to get the Intel default values for the configurable parameters. Here are examples covering the 12400, 12600K, 12900K and 12900KS ( Processor Line Thermal and Power - Package Turbo Specifications (S / HX - Processor Lines) - S-Processor Line LGA ) from this section of datasheet: 12400 6+0 Core 65W PL1 = 65W PL2 = 117W PL1 Tau = 28s 12600K 6+4 Core 125W PL1 = 125W PL2 = 150W PL1 Tau = 56s 12900K 8+8 Core 125W PL1 = 125W PL2 = 241W PL1 Tau = 56s 12900KS 8+8 Core 150W PL1 = 150W PL2 = 241W PL1 Tau = 56s VCCCORE DC Specifications - Processor VCCCORE Active and Idle Mode DC Voltage and Current Specifications - Segment S-Processor Line from this section of datasheet: 12400 S-Processor Line (65W) 6+0 -Core ICCMAX = 151A DC_LL/AC_LL = 1.7 m\u03a9 (170) 12600K S-Processor Line (125W) 6+4 -Core ICCMAX = 175A DC_LL/AC_LL = 1.7 m\u03a9 (170) 12900K S-Processor Line (125W) 8+8 -Core ICCMAX = 280A DC_LL/AC_LL = 1.1 m\u03a9 (110) 12900KS S-Processor Line (150W) 8+8 -Core ICCMAX = 280A DC_LL/AC_LL = 1.1 m\u03a9 (110) 1 On S-Processor Line, AC_LL is the same as DC_LL. For reference, on a 12600K, the MSI 1.70 firmware on Auto with CPU Cooler Tuning set to Boxed Cooler (lowest values for auto-configuration) uses the following values vs. Dasharo/Intel defaults: MSI BIOS 1.70 PL1 = 241W PL2 = 241W PL1 Tau = 56s ICCMAX = 250A DC_LL/AC_LL = 80 Dasharo 1.1.0 PL1 = 125W PL2 = 241W PL1 Tau = 56s ICCMAX = 175A DC_LL/AC_LL = 170 Configure MSI Firmware With Intel Default Parameters After you have found your processor model values, you can input them on MSI firmware. Most likely, you want to start from default settings. Enter MSI Firmware, and change the following: Settings Menu (Left Panel) -> Save & Exit Restore Defaults (Confirm Yes) Save Changes and Reboot (Confirm Yes) After the power off/on cycle, enter MSI firmware again, change the following values, then repeat Save Changes and Reboot: OC Menu (Left Panel) -> Advanced CPU Configuration Enhanced Turbo: Disabled (This is MSI name for Multi Core Enhancement) Long Duration Power Limit(W): PL1 Long Duration Maintained(s): PL1 Tau Short Duration Power Limit(W): PL2 CPU Current Limit (A): ICCMAX CPU Lite Load Control: Advanced (Required to input DC_LL and AC_LL as numbers instead of \"Modes\") CPU AC Loadline: AC_LL CPU DC Loadline: DC_LL Miscellaneous Comments Since you can software flash Dasharo and flash MSI firmware again on the same system, you likely want to use the same computer to test both firmware so that no temperature or clock speeds difference could attribute to different pressure on heatsink mounting or silicon lottery. MSI firmware bases its default (Auto) PL1, PL2, and ICCMAX values on the CPU Cooler Tuning set. When using Restore Defaults on a 12600K, this setting defaults to Water Cooler, which allows for technically unlimited PL1 and PL2 (4095W). Even the Boxed Cooler setting configures the 12600K to 241W PL1 and 241W PL2. Thus, you must manually set the individual values for controlled results. So far, the setting that most affected benchmark scores are AC_LL and DC_LL. PL1, PL2 and ICCMAX are limiting. They are only meaningful if the processor gets limited by them, which would depend on the processor model (some have more headroom than others. PL1 is 125W for both 6+4 12600K and 8+8 12900K, the latter would be severely more limited), whereas the other two values are always in effect. On the tested 12600K, the effect of the significantly lower values of AC_LL on DC_LL that MSI uses is a rather massive difference of 20 Watts in power consumption (as reported by ThrottleStop and HWiNFO, and also by lower processor temperatures) when running Cinebench R23. Thus, with MSI values (whenever on MSI or a custom Dasharo build with those), the 12600K doesn't even reach the PL1 limit, allowing it to maintain the highest Turbo Boost clock speeds infinitely, whereas, on Dasharo (or MSI with Intel default values), the extra power consumption makes it to go beyond PL1, eventually throttling back to slower clocks to keep under PL1. LCC (Loadline Calibration Control) is also present in another menu as CPU Loadline Calibration Control, but we left it at Auto. We need to find out if changes in CPU Lite Load Control / CPU AC Loadline / CPU DC Loadline change it or if LCC operates the same regardless of changes to the previous options. The most critical performance-related bug we found in Dasharo involves benchmarking Single Thread applications on Windows 11. With Dasharo, Windows 11 CPU Scheduler likes to move threads around between P and E cores, whereas MSI firmware on the same scenario instead always favors P cores. Such behavior significantly affects the scores of Single-Threaded benchmarks and makes them highly variable depending on which core type a thread spent most of its time. There may be MSRs (Model Specific Registers) related to Intel Thread Director that we aren't aware of that manages this. The only workaround found is to set CPU Affinity manually, which can be performed automatically with Process Lasso, with the bonus of using Forced Mode to continuously re-apply the CPU Affinity settings, as some applications, including Cinebench, like to change them when you start to run the benchmark. Of course, this will not happen on P core, only models like 12400. We did not test manual affinity tested on Linux. Dasharo currently doesn't support manually changing the memory clock speeds, and it will default to the highest standard JEDEC profile supported by the installed memory modules. MSI firmware also defaults to JEDEC profiles, so out-of-the-box, they're matched at memory configuration, thus not a problem. Many enthusiast-grade DDR4 modules use 3200 MHz (maximum supported by Alder Lake-S) or higher and have that clock speed as an XMP profile, whereas the standard JEDEC profile could be just 2133 or 2400 MHz. In most cases, a 3200 MHz DDR4 module will run at lower speeds than expected. There are modules rated for JEDEC 3200 MHz 22-22-22 @ 1.2V that should work in both Dasharo and MSI firmware, in case you're interested in testing this. It is also possible to force Dasharo to use an XMP profile if you're willing to recompile or use a custom build. There are a lot of other settings and MSRs (Model Specific Registers) that we have yet to test. We track the progress of that effort in this issue. Public Alder Lake FSP Integration Guide documents how to set these settings On or Off, but there are few details about how they change the Processor behavior. The remaining 2% of performance will come from matching all these settings. On the public datasheet, there is no DC_LL for the 8+8 150W class, only 8+8 125W, but we can confirm from alternate sources that this is the correct value. \u21a9","title":"Dasharo Reviewers Guide"},{"location":"guides/dasharo-reviewers-guide/#dasharo-reviewers-guide","text":"Based on reviews of Dasharo compatible with MSI Z690-A DDR4/DDR5, we created the following guide to explain the performance gap between MSI proprietary and Dasharo open-source firmware, but in the long run, the same discoveries can apply to other Dasharo and open-source firmware solutions.","title":"Dasharo Reviewers Guide"},{"location":"guides/dasharo-reviewers-guide/#introduction","text":"During the 23+ years of coreboot's existence, one aspect that has never been in-depth tested is how its performance compares against proprietary firmware solutions that run on the same hardware platform. The lack of performance testing is because, for most of the interested parties, the selling point of coreboot was the transparency of being open-source, and this rarely made direct comparisons about other features or functionality. Historically, most of what we could find about coreboot performance involves the lower POST times claims, but there needs to be more information regarding its runtime performance as measured in benchmarks, which is a significant point that end users are interested in. Sadly, we need more internal resources and the necessary field experience to conduct such exhaustive benchmark testing. Several significant findings came from third-party benchmarks and community reports, which is enough to know our current standing. Professional hardware reviewers should be better at performing and analyzing measures than we are.","title":"Introduction"},{"location":"guides/dasharo-reviewers-guide/#why-we-ask-to-fine-tune-settings","text":"In general, we found out in our limited benchmarking that performance out-of-the-box with Dasharo is measurably lower than performance with MSI proprietary firmware, in the order of 6-8% on the benchmarked Core i5 12600K. Lower performance was quickly tracked down to MSI using, by default, certain processor operating parameters that are quite different from the values stated on the Intel datasheets, resulting in alterations of the processor behavior that allows it to sustain Turbo Boost with higher clock speeds and for longer periods than otherwise possible, and thus appear to perform better overall. After normalizing across both MSI proprietary firmware and Dasharo, the values we found were different, and the benchmark difference was reduced to around 2% (21:19- 29:00) . We also found several review websites that have already written articles and analysis about this matter. Mainboard vendors use default values above those specified by Intel (technically overclocking) to produce better performance results in benchmarks ( AnandTech , TechSpot , VideoCardz , Gamers Nexus about cheating , GamersNexus about MSI default settings , GamersNexus Z490 YouTube Review , TechPowerUp , Tom's Hardware ). Depending on whom you ask, using aggressive values by default can be seen either as a convenience, since the end user gets more performance without having to know how to configure the firmware, or as a form of cheating, due to the end user usually having no idea about these changes and that they are overclocking out-of-the-box. As for the time being, we're sticking to Intel specification default values; these mainboard vendors' custom optimizations hurts us because it makes the difference look much bigger than it is. What we want to showcase is how Dasharo (for this MSI port, coreboot + EDKII UefiPayloadPkg) performance compares against the proprietary firmware codebase. The only way to do so accurately is by ensuring that the hardware operating values are the same in both Dasharo and the original firmware so that the performance differences are not due to higher processor clock speeds thanks to higher Power Limits, unlimited Turbo Boost times, or similar tricks. Note that we are okay with out-of-the-box comparisons, but that wouldn't be directly an apples-to-apples comparison of the performance of both firmware codebases, which is our point. Thus, to make it fair, the hardware has to be tweaked to run with the same operating values on both. As you can't change values on Dasharo unless you're willing to recompile (or ask for a custom build with tweaked values), the easiest way is by bringing MSI firmware values down to Dasharo/Intel levels.","title":"Why We Ask To Fine Tune Settings"},{"location":"guides/dasharo-reviewers-guide/#find-your-processor-intel-default-parameters","text":"So far we've found six processor-configurable parameters that differ significantly: PL1, PL2, PL1 Tau, ICCMAX, DC_LL, and AC_LL. coreboot uses the values found on two sections of the Intel 12th Generation Intel Core Processors Datasheet (Volume 1 of 2). You will have to check the datasheet to find the proper values for your processor so that you can manually input them onto MSI firmware. In the case of MSI firmware default values, we found no public information, so we only know how it autoconfigures the processors we tested. Note that on the datasheet, Intel doesn't mention processor models by name/number but instead classifies them by amount of P+E cores and Base Power TDP, so first, you have to check these two values from Intel Ark for your processor model, then check on the Datasheet tables what matches both classes to get the Intel default values for the configurable parameters. Here are examples covering the 12400, 12600K, 12900K and 12900KS ( Processor Line Thermal and Power - Package Turbo Specifications (S / HX - Processor Lines) - S-Processor Line LGA ) from this section of datasheet: 12400 6+0 Core 65W PL1 = 65W PL2 = 117W PL1 Tau = 28s 12600K 6+4 Core 125W PL1 = 125W PL2 = 150W PL1 Tau = 56s 12900K 8+8 Core 125W PL1 = 125W PL2 = 241W PL1 Tau = 56s 12900KS 8+8 Core 150W PL1 = 150W PL2 = 241W PL1 Tau = 56s VCCCORE DC Specifications - Processor VCCCORE Active and Idle Mode DC Voltage and Current Specifications - Segment S-Processor Line from this section of datasheet: 12400 S-Processor Line (65W) 6+0 -Core ICCMAX = 151A DC_LL/AC_LL = 1.7 m\u03a9 (170) 12600K S-Processor Line (125W) 6+4 -Core ICCMAX = 175A DC_LL/AC_LL = 1.7 m\u03a9 (170) 12900K S-Processor Line (125W) 8+8 -Core ICCMAX = 280A DC_LL/AC_LL = 1.1 m\u03a9 (110) 12900KS S-Processor Line (150W) 8+8 -Core ICCMAX = 280A DC_LL/AC_LL = 1.1 m\u03a9 (110) 1 On S-Processor Line, AC_LL is the same as DC_LL. For reference, on a 12600K, the MSI 1.70 firmware on Auto with CPU Cooler Tuning set to Boxed Cooler (lowest values for auto-configuration) uses the following values vs. Dasharo/Intel defaults: MSI BIOS 1.70 PL1 = 241W PL2 = 241W PL1 Tau = 56s ICCMAX = 250A DC_LL/AC_LL = 80 Dasharo 1.1.0 PL1 = 125W PL2 = 241W PL1 Tau = 56s ICCMAX = 175A DC_LL/AC_LL = 170","title":"Find Your Processor Intel Default Parameters"},{"location":"guides/dasharo-reviewers-guide/#configure-msi-firmware-with-intel-default-parameters","text":"After you have found your processor model values, you can input them on MSI firmware. Most likely, you want to start from default settings. Enter MSI Firmware, and change the following: Settings Menu (Left Panel) -> Save & Exit Restore Defaults (Confirm Yes) Save Changes and Reboot (Confirm Yes) After the power off/on cycle, enter MSI firmware again, change the following values, then repeat Save Changes and Reboot: OC Menu (Left Panel) -> Advanced CPU Configuration Enhanced Turbo: Disabled (This is MSI name for Multi Core Enhancement) Long Duration Power Limit(W): PL1 Long Duration Maintained(s): PL1 Tau Short Duration Power Limit(W): PL2 CPU Current Limit (A): ICCMAX CPU Lite Load Control: Advanced (Required to input DC_LL and AC_LL as numbers instead of \"Modes\") CPU AC Loadline: AC_LL CPU DC Loadline: DC_LL","title":"Configure MSI Firmware With Intel Default Parameters"},{"location":"guides/dasharo-reviewers-guide/#miscellaneous-comments","text":"Since you can software flash Dasharo and flash MSI firmware again on the same system, you likely want to use the same computer to test both firmware so that no temperature or clock speeds difference could attribute to different pressure on heatsink mounting or silicon lottery. MSI firmware bases its default (Auto) PL1, PL2, and ICCMAX values on the CPU Cooler Tuning set. When using Restore Defaults on a 12600K, this setting defaults to Water Cooler, which allows for technically unlimited PL1 and PL2 (4095W). Even the Boxed Cooler setting configures the 12600K to 241W PL1 and 241W PL2. Thus, you must manually set the individual values for controlled results. So far, the setting that most affected benchmark scores are AC_LL and DC_LL. PL1, PL2 and ICCMAX are limiting. They are only meaningful if the processor gets limited by them, which would depend on the processor model (some have more headroom than others. PL1 is 125W for both 6+4 12600K and 8+8 12900K, the latter would be severely more limited), whereas the other two values are always in effect. On the tested 12600K, the effect of the significantly lower values of AC_LL on DC_LL that MSI uses is a rather massive difference of 20 Watts in power consumption (as reported by ThrottleStop and HWiNFO, and also by lower processor temperatures) when running Cinebench R23. Thus, with MSI values (whenever on MSI or a custom Dasharo build with those), the 12600K doesn't even reach the PL1 limit, allowing it to maintain the highest Turbo Boost clock speeds infinitely, whereas, on Dasharo (or MSI with Intel default values), the extra power consumption makes it to go beyond PL1, eventually throttling back to slower clocks to keep under PL1. LCC (Loadline Calibration Control) is also present in another menu as CPU Loadline Calibration Control, but we left it at Auto. We need to find out if changes in CPU Lite Load Control / CPU AC Loadline / CPU DC Loadline change it or if LCC operates the same regardless of changes to the previous options. The most critical performance-related bug we found in Dasharo involves benchmarking Single Thread applications on Windows 11. With Dasharo, Windows 11 CPU Scheduler likes to move threads around between P and E cores, whereas MSI firmware on the same scenario instead always favors P cores. Such behavior significantly affects the scores of Single-Threaded benchmarks and makes them highly variable depending on which core type a thread spent most of its time. There may be MSRs (Model Specific Registers) related to Intel Thread Director that we aren't aware of that manages this. The only workaround found is to set CPU Affinity manually, which can be performed automatically with Process Lasso, with the bonus of using Forced Mode to continuously re-apply the CPU Affinity settings, as some applications, including Cinebench, like to change them when you start to run the benchmark. Of course, this will not happen on P core, only models like 12400. We did not test manual affinity tested on Linux. Dasharo currently doesn't support manually changing the memory clock speeds, and it will default to the highest standard JEDEC profile supported by the installed memory modules. MSI firmware also defaults to JEDEC profiles, so out-of-the-box, they're matched at memory configuration, thus not a problem. Many enthusiast-grade DDR4 modules use 3200 MHz (maximum supported by Alder Lake-S) or higher and have that clock speed as an XMP profile, whereas the standard JEDEC profile could be just 2133 or 2400 MHz. In most cases, a 3200 MHz DDR4 module will run at lower speeds than expected. There are modules rated for JEDEC 3200 MHz 22-22-22 @ 1.2V that should work in both Dasharo and MSI firmware, in case you're interested in testing this. It is also possible to force Dasharo to use an XMP profile if you're willing to recompile or use a custom build. There are a lot of other settings and MSRs (Model Specific Registers) that we have yet to test. We track the progress of that effort in this issue. Public Alder Lake FSP Integration Guide documents how to set these settings On or Off, but there are few details about how they change the Processor behavior. The remaining 2% of performance will come from matching all these settings. On the public datasheet, there is no DC_LL for the 8+8 150W class, only 8+8 125W, but we can confirm from alternate sources that this is the correct value. \u21a9","title":"Miscellaneous Comments"},{"location":"guides/logo-customization/","text":"Boot logo replacement instructions Introduction The logo displayed at boot can be customized according to the client's preferences. For this, we have created a script that automates the process of replacing the logo. Prerequisites The image file must fulfill a number of requirements: Bitmap (BMP file) Recommended resolution up to 577\u00d7432, but can be higher if it fits in the BOOTSPLASH region. indexed or 24bit RGB colors uncompressed preferably containing a simple logo on a black background with no additional padding. make sure it is properly formatted. To be sure, use the command: convert -background None custom_logo.bmp BMP3:logo.bmp Replace logo in an existing image For devices supporting persistent bootlogo, it's possible to replace the logo without rebuilding firmware from scratch. You only need the firmware image and cbfstool . Obtain cbfstool source code (skip if you've already cloned the coreboot source): git clone https://github.com/Dasharo/coreboot.git Build and install cbfstool: cd coreboot/util/cbfstool git checkout 912a262b7bf7cb49544f90cdb5c632b658918893 make sudo make install Remove the existing logo from the firmware image (replace [path] with the path to your firmware binary): cbfstool [ path ] remove -r BOOTSPLASH -n logo.bmp Add your desired bootlogo to the firmware image (replace [path] with the path to your firmware image and [logo] with the path to the logo): cbfstool [ path ] add -f [ logo ] -r BOOTSPLASH -n logo.bmp -t raw -c lzma Now you can flash the updated firmware image as usual. If you're not updating firmware and just changing the logo, only the BOOTSPLASH region needs to be updated. For example: sudo flashrom -p internal --fmap -i BOOTSPLASH -w [ path ]","title":"Logo customization"},{"location":"guides/logo-customization/#boot-logo-replacement-instructions","text":"","title":"Boot logo replacement instructions"},{"location":"guides/logo-customization/#introduction","text":"The logo displayed at boot can be customized according to the client's preferences. For this, we have created a script that automates the process of replacing the logo.","title":"Introduction"},{"location":"guides/logo-customization/#prerequisites","text":"The image file must fulfill a number of requirements: Bitmap (BMP file) Recommended resolution up to 577\u00d7432, but can be higher if it fits in the BOOTSPLASH region. indexed or 24bit RGB colors uncompressed preferably containing a simple logo on a black background with no additional padding. make sure it is properly formatted. To be sure, use the command: convert -background None custom_logo.bmp BMP3:logo.bmp","title":"Prerequisites"},{"location":"guides/logo-customization/#replace-logo-in-an-existing-image","text":"For devices supporting persistent bootlogo, it's possible to replace the logo without rebuilding firmware from scratch. You only need the firmware image and cbfstool . Obtain cbfstool source code (skip if you've already cloned the coreboot source): git clone https://github.com/Dasharo/coreboot.git Build and install cbfstool: cd coreboot/util/cbfstool git checkout 912a262b7bf7cb49544f90cdb5c632b658918893 make sudo make install Remove the existing logo from the firmware image (replace [path] with the path to your firmware binary): cbfstool [ path ] remove -r BOOTSPLASH -n logo.bmp Add your desired bootlogo to the firmware image (replace [path] with the path to your firmware image and [logo] with the path to the logo): cbfstool [ path ] add -f [ logo ] -r BOOTSPLASH -n logo.bmp -t raw -c lzma Now you can flash the updated firmware image as usual. If you're not updating firmware and just changing the logo, only the BOOTSPLASH region needs to be updated. For example: sudo flashrom -p internal --fmap -i BOOTSPLASH -w [ path ]","title":"Replace logo in an existing image"},{"location":"guides/signature-verification/","text":"Dasharo release signature verification Dasharo uses digital signatures to guarantee the authenticity and integrity of certain important assets. This page explains how to verify those signatures. It is extremely important for your security to understand and apply these practices. Why one should verify the signatures? Please refer to Qubes OS signature verification page: What digital signatures can and cannot prove . Signature verification prcocedure Each published Dasharo release is signed with a signing key corresponding to given platform and versions. The key infrastructure is stored in 3mdeb-secpack . For the signature verification we use the OpenPGP software like Qubes OS . To verify the integrity of the binaries published in release notes on this site, please follow the instructions below: Import necessary keys to your keyring: wget https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/keys/master-key/3mdeb-master-key.asc \\ -O - | gpg --import - wget https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/3mdeb-dasharo-master-key.asc \\ -O - | gpg --import - wget <release signing key URL> -O - | gpg --import - <release signing key URL> is provided in the release notes Check the signatures on the keys: gpg --check-signatures \"Dasharo\" \"3mdeb\" Download the binaries, SHA sums and their signature files export BIN_URL = https://3mdeb.com/open-source-firmware/Dasharo/... wget ${ BIN_URL } ${ BIN_URL } .sha256 ${ BIN_URL } .sha256.sig Verify the signatures and binary integrity: gpg -v --verify ` basename $BIN_URL ` .sha256.sig ` basename $BIN_URL ` .sha256 sha256sum -c ` basename $BIN_URL ` .sha256 Example verification of Dasharo release compatible with MSI PRO Z690-A DDR4: miczyg@3M08:~ $ export BIN_URL = https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom miczyg@3M08:~ $ wget ${ BIN_URL } ${ BIN_URL } .sha256 ${ BIN_URL } .sha256.sig --2023-08-02 10 :44:13-- https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom Resolving 3mdeb.com ( 3mdeb.com ) ... 2001 :41d0:301:5::26, 178 .32.205.96 Connecting to 3mdeb.com ( 3mdeb.com ) | 2001 :41d0:301:5::26 | :443... connected. HTTP request sent, awaiting response... 302 Found Location: https://dl.3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom [ following ] --2023-08-02 10 :44:14-- https://dl.3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom Resolving dl.3mdeb.com ( dl.3mdeb.com ) ... 178 .32.205.96 Connecting to dl.3mdeb.com ( dl.3mdeb.com ) | 178 .32.205.96 | :443... connected. HTTP request sent, awaiting response... 200 OK Length: 33554432 ( 32M ) [ application/octet-stream ] Saving to: \u2018msi_ms7d25_v1.1.1_ddr4.rom\u2019 msi_ms7d25_v1.1.1_d 100 % [=================== > ] 32 .00M 24 .4MB/s in 1 .3s 2023 -08-02 10 :44:15 ( 24 .4 MB/s ) - \u2018msi_ms7d25_v1.1.1_ddr4.rom\u2019 saved [ 33554432 /33554432 ] --2023-08-02 10 :44:15-- https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom.sha256 Connecting to 3mdeb.com ( 3mdeb.com ) | 2001 :41d0:301:5::26 | :443... connected. HTTP request sent, awaiting response... 302 Found Location: https://dl.3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom.sha256 [ following ] --2023-08-02 10 :44:16-- https://dl.3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom.sha256 Connecting to dl.3mdeb.com ( dl.3mdeb.com ) | 178 .32.205.96 | :443... connected. HTTP request sent, awaiting response... 200 OK Length: 93 Saving to: \u2018msi_ms7d25_v1.1.1_ddr4.rom.sha256\u2019 msi_ms7d25_v1.1.1_d 100 % [=================== > ] 93 --.-KB/s in 0s 2023 -08-02 10 :44:16 ( 49 .8 MB/s ) - \u2018msi_ms7d25_v1.1.1_ddr4.rom.sha256\u2019 saved [ 93 /93 ] --2023-08-02 10 :44:16-- https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom.sha256.sig Connecting to 3mdeb.com ( 3mdeb.com ) | 2001 :41d0:301:5::26 | :443... connected. HTTP request sent, awaiting response... 302 Found Location: https://dl.3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom.sha256.sig [ following ] --2023-08-02 10 :44:16-- https://dl.3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom.sha256.sig Connecting to dl.3mdeb.com ( dl.3mdeb.com ) | 178 .32.205.96 | :443... connected. HTTP request sent, awaiting response... 200 OK Length: 833 [ application/pgp-signature ] Saving to: \u2018msi_ms7d25_v1.1.1_ddr4.rom.sha256.sig\u2019 msi_ms7d25_v1.1.1_d 100 % [=================== > ] 833 --.-KB/s in 0s 2023 -08-02 10 :44:17 ( 11 .5 MB/s ) - \u2018msi_ms7d25_v1.1.1_ddr4.rom.sha256.sig\u2019 saved [ 833 /833 ] gpg -v --verify ` basename $BIN_URL ` .sha256.sig ` basename $BIN_URL ` .sha256 FINISHED --2023-08-02 10 :44:17-- Total wall clock time: 3 .3s Downloaded: 3 files, 32M in 1 .3s ( 24 .4 MB/s ) gpg: enabled compatibility flags: gpg: Signature made Thu 23 Feb 2023 12 :21:55 AM CET gpg: using RSA key 89B569C42BB9FCCBC3C9CFDF5DC481E1F371151E gpg: using pgp trust model gpg: Good signature from \"Dasharo release 1.x compatible with MSI MS-7D25 signing key\" [ unknown ] gpg: WARNING: This key is not certified with a trusted signature! gpg: There is no indication that the signature belongs to the owner. Primary key fingerprint: 89B5 69C4 2BB9 FCCB C3C9 CFDF 5DC4 81E1 F371 151E gpg: binary signature, digest algorithm SHA256, key algorithm rsa4096 miczyg@3M08:~ $sha256sum -c ` basename $BIN_URL ` .sha256 msi_ms7d25_v1.1.1_ddr4.rom: OK","title":"Verifying signatures"},{"location":"guides/signature-verification/#dasharo-release-signature-verification","text":"Dasharo uses digital signatures to guarantee the authenticity and integrity of certain important assets. This page explains how to verify those signatures. It is extremely important for your security to understand and apply these practices.","title":"Dasharo release signature verification"},{"location":"guides/signature-verification/#why-one-should-verify-the-signatures","text":"Please refer to Qubes OS signature verification page: What digital signatures can and cannot prove .","title":"Why one should verify the signatures?"},{"location":"guides/signature-verification/#signature-verification-prcocedure","text":"Each published Dasharo release is signed with a signing key corresponding to given platform and versions. The key infrastructure is stored in 3mdeb-secpack . For the signature verification we use the OpenPGP software like Qubes OS . To verify the integrity of the binaries published in release notes on this site, please follow the instructions below: Import necessary keys to your keyring: wget https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/keys/master-key/3mdeb-master-key.asc \\ -O - | gpg --import - wget https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/3mdeb-dasharo-master-key.asc \\ -O - | gpg --import - wget <release signing key URL> -O - | gpg --import - <release signing key URL> is provided in the release notes Check the signatures on the keys: gpg --check-signatures \"Dasharo\" \"3mdeb\" Download the binaries, SHA sums and their signature files export BIN_URL = https://3mdeb.com/open-source-firmware/Dasharo/... wget ${ BIN_URL } ${ BIN_URL } .sha256 ${ BIN_URL } .sha256.sig Verify the signatures and binary integrity: gpg -v --verify ` basename $BIN_URL ` .sha256.sig ` basename $BIN_URL ` .sha256 sha256sum -c ` basename $BIN_URL ` .sha256 Example verification of Dasharo release compatible with MSI PRO Z690-A DDR4: miczyg@3M08:~ $ export BIN_URL = https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom miczyg@3M08:~ $ wget ${ BIN_URL } ${ BIN_URL } .sha256 ${ BIN_URL } .sha256.sig --2023-08-02 10 :44:13-- https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom Resolving 3mdeb.com ( 3mdeb.com ) ... 2001 :41d0:301:5::26, 178 .32.205.96 Connecting to 3mdeb.com ( 3mdeb.com ) | 2001 :41d0:301:5::26 | :443... connected. HTTP request sent, awaiting response... 302 Found Location: https://dl.3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom [ following ] --2023-08-02 10 :44:14-- https://dl.3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom Resolving dl.3mdeb.com ( dl.3mdeb.com ) ... 178 .32.205.96 Connecting to dl.3mdeb.com ( dl.3mdeb.com ) | 178 .32.205.96 | :443... connected. HTTP request sent, awaiting response... 200 OK Length: 33554432 ( 32M ) [ application/octet-stream ] Saving to: \u2018msi_ms7d25_v1.1.1_ddr4.rom\u2019 msi_ms7d25_v1.1.1_d 100 % [=================== > ] 32 .00M 24 .4MB/s in 1 .3s 2023 -08-02 10 :44:15 ( 24 .4 MB/s ) - \u2018msi_ms7d25_v1.1.1_ddr4.rom\u2019 saved [ 33554432 /33554432 ] --2023-08-02 10 :44:15-- https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom.sha256 Connecting to 3mdeb.com ( 3mdeb.com ) | 2001 :41d0:301:5::26 | :443... connected. HTTP request sent, awaiting response... 302 Found Location: https://dl.3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom.sha256 [ following ] --2023-08-02 10 :44:16-- https://dl.3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom.sha256 Connecting to dl.3mdeb.com ( dl.3mdeb.com ) | 178 .32.205.96 | :443... connected. HTTP request sent, awaiting response... 200 OK Length: 93 Saving to: \u2018msi_ms7d25_v1.1.1_ddr4.rom.sha256\u2019 msi_ms7d25_v1.1.1_d 100 % [=================== > ] 93 --.-KB/s in 0s 2023 -08-02 10 :44:16 ( 49 .8 MB/s ) - \u2018msi_ms7d25_v1.1.1_ddr4.rom.sha256\u2019 saved [ 93 /93 ] --2023-08-02 10 :44:16-- https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom.sha256.sig Connecting to 3mdeb.com ( 3mdeb.com ) | 2001 :41d0:301:5::26 | :443... connected. HTTP request sent, awaiting response... 302 Found Location: https://dl.3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom.sha256.sig [ following ] --2023-08-02 10 :44:16-- https://dl.3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.1/msi_ms7d25_v1.1.1_ddr4.rom.sha256.sig Connecting to dl.3mdeb.com ( dl.3mdeb.com ) | 178 .32.205.96 | :443... connected. HTTP request sent, awaiting response... 200 OK Length: 833 [ application/pgp-signature ] Saving to: \u2018msi_ms7d25_v1.1.1_ddr4.rom.sha256.sig\u2019 msi_ms7d25_v1.1.1_d 100 % [=================== > ] 833 --.-KB/s in 0s 2023 -08-02 10 :44:17 ( 11 .5 MB/s ) - \u2018msi_ms7d25_v1.1.1_ddr4.rom.sha256.sig\u2019 saved [ 833 /833 ] gpg -v --verify ` basename $BIN_URL ` .sha256.sig ` basename $BIN_URL ` .sha256 FINISHED --2023-08-02 10 :44:17-- Total wall clock time: 3 .3s Downloaded: 3 files, 32M in 1 .3s ( 24 .4 MB/s ) gpg: enabled compatibility flags: gpg: Signature made Thu 23 Feb 2023 12 :21:55 AM CET gpg: using RSA key 89B569C42BB9FCCBC3C9CFDF5DC481E1F371151E gpg: using pgp trust model gpg: Good signature from \"Dasharo release 1.x compatible with MSI MS-7D25 signing key\" [ unknown ] gpg: WARNING: This key is not certified with a trusted signature! gpg: There is no indication that the signature belongs to the owner. Primary key fingerprint: 89B5 69C4 2BB9 FCCB C3C9 CFDF 5DC4 81E1 F371 151E gpg: binary signature, digest algorithm SHA256, key algorithm rsa4096 miczyg@3M08:~ $sha256sum -c ` basename $BIN_URL ` .sha256 msi_ms7d25_v1.1.1_ddr4.rom: OK","title":"Signature verification prcocedure"},{"location":"guides/vboot-signing/","text":"Dasharo vboot signing Introduction Verified Boot is a method of verifying that the firmware compents haven't been tampered with. It uses cryptographic signatures to determine whether the firmware comes from trusted source. This document covers the procedure for generating vboot keys and configuring the coreboot build system to sign the binaries with the generated keys. Prerequisites Functional Docker installation follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux Clone dasharo-tools repository git clone https://github.com/Dasharo/dasharo-tools.git Generating keys Make sure that you are in the dasharo-tools repository Generate the keys with the following command: ./vboot/generate_keys keys The keys will be created in the directory $PWD/keys , i.e. in the keys subdirectory in your current directory. Signing image without rebuilding This is the default procedure that should be followed by users downloading firmware from the Release section, who wishes to use their own keys for vboot. Make sure that you are in the dasharo-tools repository Be sure you have generated the keys as in Generate keys section. Assuming you have generated keys to the keys/ directory: ./vboot/resign <released_firmware_file> keys For example: ./vboot/resign protectli_vault_cml_v1.0.16_resigned.rom keys The successful output can look like this: ... INFO: sign_bios_at_end: BIOS image does not have FW_MAIN_B. Signing only FW_MAIN_A - import root_key from /.../keys/root_key.vbpubk: success - import recovery_key from /.../keys/recovery_key.vbpubk: success successfully saved new image to: /.../protectli_vault_cml_v1.0.16_resigned.rom The /.../protectli_vault_cml_v1.0.16.rom was resigned and saved as: /.../protectli_vault_cml_v1.0.16_resigned.rom Now the image will be signed with your own keys. Be sure to save the keys in a safe location, because you will need them to sign each firmware update. Otherwise, the firmware updates to RW partitions will not be executed by vboot. Adding keys to the coreboot config This procedure is only meant for developers or when you are rebuilding firmware by yourself. In the root of the coreboot tree, execute the following command: make nconfig Navigate to Security -> Verified Boot (vboot) -> Vboot keys and enter the paths to the keys in the appropriate fields. Exit nconfig by pressing Esc repeatedly and pressing Enter when prompted to save the configuration. Now, rebuild coreboot with this config to generate images signed with the chosen vboot keys.","title":"Firmware signing for vboot"},{"location":"guides/vboot-signing/#dasharo-vboot-signing","text":"","title":"Dasharo vboot signing"},{"location":"guides/vboot-signing/#introduction","text":"Verified Boot is a method of verifying that the firmware compents haven't been tampered with. It uses cryptographic signatures to determine whether the firmware comes from trusted source. This document covers the procedure for generating vboot keys and configuring the coreboot build system to sign the binaries with the generated keys.","title":"Introduction"},{"location":"guides/vboot-signing/#prerequisites","text":"Functional Docker installation follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux Clone dasharo-tools repository git clone https://github.com/Dasharo/dasharo-tools.git","title":"Prerequisites"},{"location":"guides/vboot-signing/#generating-keys","text":"Make sure that you are in the dasharo-tools repository Generate the keys with the following command: ./vboot/generate_keys keys The keys will be created in the directory $PWD/keys , i.e. in the keys subdirectory in your current directory.","title":"Generating keys"},{"location":"guides/vboot-signing/#signing-image-without-rebuilding","text":"This is the default procedure that should be followed by users downloading firmware from the Release section, who wishes to use their own keys for vboot. Make sure that you are in the dasharo-tools repository Be sure you have generated the keys as in Generate keys section. Assuming you have generated keys to the keys/ directory: ./vboot/resign <released_firmware_file> keys For example: ./vboot/resign protectli_vault_cml_v1.0.16_resigned.rom keys The successful output can look like this: ... INFO: sign_bios_at_end: BIOS image does not have FW_MAIN_B. Signing only FW_MAIN_A - import root_key from /.../keys/root_key.vbpubk: success - import recovery_key from /.../keys/recovery_key.vbpubk: success successfully saved new image to: /.../protectli_vault_cml_v1.0.16_resigned.rom The /.../protectli_vault_cml_v1.0.16.rom was resigned and saved as: /.../protectli_vault_cml_v1.0.16_resigned.rom Now the image will be signed with your own keys. Be sure to save the keys in a safe location, because you will need them to sign each firmware update. Otherwise, the firmware updates to RW partitions will not be executed by vboot.","title":"Signing image without rebuilding"},{"location":"guides/vboot-signing/#adding-keys-to-the-coreboot-config","text":"This procedure is only meant for developers or when you are rebuilding firmware by yourself. In the root of the coreboot tree, execute the following command: make nconfig Navigate to Security -> Verified Boot (vboot) -> Vboot keys and enter the paths to the keys in the appropriate fields. Exit nconfig by pressing Esc repeatedly and pressing Enter when prompted to save the configuration. Now, rebuild coreboot with this config to generate images signed with the chosen vboot keys.","title":"Adding keys to the coreboot config"},{"location":"osf-trivia-list/dasharo/","text":"Frequenty Asked Questions about Dasharo What is Dasharo? Dasharo is registered trademark and product developed by 3mdeb . Dasharo is an open-source firmware distribution focusing on: carefully selected hardware platforms , zero-touch initial deployment , clean and simple code , long-term maintenance , professional support , transparent validation , extensive and structured documentation , privacy-respecting implementation , liberty for the owners and trustworthiness for all . Dasharo consists of productized services , set of open-source repositories , and quality control which help to provide scalable, modular, easy to combine open-source BIOS, UEFI, and firmware solutions. It offers the components that are needed to develop and maintain a high quality, and modular firmware, for the stability and security of your platform. For individuals Dasharo provides optional features in subscription model called Dasharo Entry Subscription . Why 3mdeb created Dasharo? 3mdeb created Dasharo to establish a recognized brand with a proven history of successful firmware integrations. Dasharo aims to deliver added value to customers and the community as an open-source firmware distribution, such as transparent validation, long-term maintenance, bleeding-edge integration for modern hardware, and other products requested by the community and customers. 3mdeb has been providing services related to open-source firmware for years and has been asked multiple times by various parties to create a recognized brand. Therefore, the creation of Dasharo was a move to fulfill that need and establish a marketing vehicle to deliver value to customers. In addition, 3mdeb plans to provide a camp for all coreboot refugees, including platforms moved to branches due to the need for code evolution, such as Intel Intel Quark SoC deprecation and LEGACY_SMP_INIT & RESOURCE_ALLOCATOR_V3 . We want to provide solutions for those requiring long-term maintenance and firmware support. More elaborate explanation of our position you can find below . Dasharo typically supports fully open platforms like Raptor Computing Systems Talos II family, ASUS KGPE-D16 , and other which are not as open but provide modern computing experience, such as MSI PRO Z690-A DDR4/DDR5 . The goal is to provide a reliable, secure, and scalable firmware solution for a wide range of platforms and applications, aligning with the vision of a new golden age of computing advocated by experts in computer architecture. What Dasharo provides? Dasharo has 10 rules that govern the production and release of firmware within its ecosystem. Dasharo rules define what we deliver with every release. These rules are: Every release of firmware produced by Dasharo Ecosystem must contain source code , binary, SHA256 hash, and Dasharo cryptographic signature of that hash. Dasharo Universe contains structured documentation for key activities related to open-source firmware life-cycle: initial deployment, update and recovery. Cryptographic keys hierarchy should be followed: CEO/Founder (GPG fingerint: E030 9B2D 85A6 7E84 6329 E34B B2EE 71E9 67AA 9E4C ) which signs 3mdeb Master Key (GPG fingerint: 1B57 85C2 965D 84CF 85D1 652B 4AFD 81D9 7BD3 7C54 ) which signs 3mdeb Dasharo Master Key (GPG fingerint: 0D5F 6F1D A800 329E B7C5 97A2 ABE1 D0BC 6627 8008 ) which signs Customer Open Source Firmware Release x.y Signing Key (e.g. Novacustom Open Source Firmware Release 1.0 Signing Key) or dedicated 3mdeb keys to given platform. Keys can be found in 3mdeb-secpack repository. Every release of firmware produced by Dasharo Ecosystem must have an attached test report according to requirements. Every test should be described by test specification documentation. Customer-specific Dasharo validation procedures are delivered with the release notes directly to the customer and does not have to be publicly available. Every firmware produced by Dasharo Ecosystem use Semantic Versioning 2.0.0 compatible versioning scheme. For details please check description . Every firmware produced by Dasharo Ecosystem should use Keep A Changelog 1.0.0 compatible scheme as changelog format. Every Dasharo firmware release should be delivered with integrity and signature verification procedures. Every Dasharo firmware release must contain a detailed description of components and links to the range of code changes since the last release. Dasharo Ecosystem uses open-source software to create and maintain its firmware solutions, and the company strives to maintain transparency in its processes and procedures. These 10 rules are designed to ensure that every release of firmware produced by Dasharo Ecosystem is reliable, secure, and meets the needs of customers and the community. By following these rules, Dasharo Ecosystem provides a consistent and high-quality firmware solution for a wide range of platforms and applications. What is Dasharo binary blob policy? Modern x86 platforms' firmware requires closed source blobs to be integrated into the image to properly initialize the silicon. The ecosystem is shifting towards designs and technologies with a lot of small microcontrollers and intellectual property (IP) blocks specialized in a very thin range of tasks. Those microcontrollers and IP blocks typically require firmware blobs as well. Some of the blobs are clearly visible, some may be obfuscated and hidden inside the silicon or other firmware blobs (e.g. Intel Management Engine region contains multiple other blobs besides the ME firmware - more about Intel ME blob ). So Dasharo's binary blob policy is as follows: Integrate only the necessary amount of blobs required for proper platform operation and minimize the amount of blobs that are optional whenever possible by providing open equivalent implementations or removing them if there is no functional impact on the platform operation. Ultimately the blobs should be attested and properly documented. Dasharo Team is trying to achieve it by working on firmware SBOMs . Dasharo also works without blobs on platforms that allow that. For example, ASUS KGPE-D16 can run without any blobs (officially there is no PSP on that hardware, and Opteron 6200 series CPUs can run without microcode patches). There is also a libre, POWER9-based server/workstation Talos II by Raptor Computing Systems, which also do not use any binary blobs, however it is more expensive than x86 platforms. Why Dasharo? Open-source firmware ecosystem problems Every open-source project has its own internal dynamics, history and politics. We are always looking for a solution that endorse non-aggression principle and peaceful coexistence, which hopefully will allow everyone to compete based on the same rules. We believe that market is big enough for all players and, if not we should make market bigger, not fight for every possible piece causing collateral damage. Eventually, in the community, we are all human beings, including all our good and bad features. In some cases, sympathy and antipathy cause unexpected dynamics. This impacts every community. We also should be aware that the open-source ecosystem is a place of OPSEC and PSYWAR techniques use, which leads to redirecting energy and resources into directions that make open-source community activity less competitive. In our opinion, massive energy is wasted in the open-source firmware community because of incorrect focus, like religious flame wars about philosophical principles, security paranoia without having an idea of threat modeling, or revolutionary ideas and plans for how to overthrow multibillion-dollar industry overlords. Although we may enjoy discussion during Dasharo open-source firmware vPubs during everyday job would like to focus on delivering value to those who can vote by choosing open-source firmware/hardware/ISA based product to help change the computer industry. Overall there is no economy around open-source firmware, and nobody seems to care much about that. It impacts the upstreaming process, the number of contributors, and reviewers. There are huge players with their own interests, small open-source firmware vendors like 3mdeb and community members essentially working for free. Without middle-size companies standing behind open-source firmware-based products, not much will change. To fill the space between big players and small boutique dev companies, we have to have products with the volume on the market because the hardware market understands only sales volumes, nothing else. We want to work on changing the above paradigms or at least improve the state-of-the-art relation in the community to the level where threats will have a reasonably small impact. We believe that open-source firmware is a critical tool, which should be used consciously to ensure privacy and liberty. What is open-source firmware distribution? Dasharo is 3mdeb's firmware distribution and all its components are open-source. We provide releases in binary form. As you know in most cases on x86 for firmware to be useful it has to cooperate with closed blobs. In all binary releases we are making sure we provide information where all components are coming from. Dasharo works without blobs on platforms that allow that. When we are saying Dasharo open-source firmware distribution we mean code that is delivered by 3mdeb that is open-source. We have no influence on the code provided by 3rd parties (e.g. FSP, ME, GbE etc.). In coreboot community there was some controversy about calling Dasharo open-source firmware distribution (for details please check gerrit review ). We respect coreboot community opinion, so we agreed that in case of coreboot documentation it would be better to use open-source based firmware distribution. It doesn't mean we agree with that decision: Definitions and rules used in coreboot documentation review are not clear. Rules seem not to be applied equally to all contributors of coreboot distribution . Why Dasharo is not called coreboot firmware distribution? While the coreboot is now the default open-source framework for Dasharo, we do not want to limit Dasharo to one framework. We also expect another firmware frameworks to be a base for Dasharo, such as U-Boot , oreboot , Slim Bootloader , or pure EDK II . Moreover, coreboot is not enough in most cases for booting modern computer. Most Dasharo flavors are currently based on coreboot with EDK II payload, but we also have coreboot with skiboot/heads payload, and we expect more flavors to appear in the future. What value Dasharo provides in comparison to coreboot? Dasharo is open-source firmware distribution based on coreboot and other open-source firmware frameworks (e.g. Tianocore EDKII ), you can think about Dasharo and coreboot relation in the same way as you think about Debian/Ubuntu/RedHat and Linux. That means it can provide better cost-effectiveness, security, transparency and customizability than proprietary alternative. There are seven characterestics of Dasharo: carefully selected hardware platforms , zero-touch initial deployment , clean and simple code , long-term maintenance , professional support , transparent validation , extensive and structured documentation , privacy-respecting implementation , liberty for the owners , trustworthiness for all . Dasharo Zero-Touch Initial Deployment Documentation supported hardware provides information about initial deployment, updates and recovery procedures. Developed by Dasharo Team Dasharo Tools Suite (DTS) operating system supports users by automating the deployment process, which helps reducing errors and inconsistencies, and make sure the firmware can be further updated to new version without any problems. DTS also provides controlled and secure environment for initial deployment and update of firmware, reducing the risk of tampering or unauthorized changes. Dasharo Zero-Touch Initial Deployment is smooth, effortless and user-friendly process, which reduces user frustration and improves satisfaction. Use of DTS largely improves firmware adoption, hardware compatibility reporting and binary blobs transmission, as well as recovery. For more details about zero-touch initial deployment please read relevant DTS documentation . Dasharo Clean and Simple Code Dasharo is an open-source distribution project with a simple code structure described in detail here . While the project benefits from the simplicity of the coreboot source code, it is continuously researching and improving its development process and tools to provide a superior experience for developers. One example of this ongoing work is the improvements made to fork maintenance, currently being tracked in this issue on the Dasharo GitHub repository. The project also explores the concept of a bootstrapable toolchain, discussed in the build process section of the project documentation. Dasharo Long Term Maintenance We provide long term maintenance - coreboot community for various reasons, do not merge some patches, because of understaffing, lack of reviewers. Some changes have long way to upstream, we maintain those patches and make them work before those will go upstrea. If ever, we are committed to maintain platforms which are moved to branch in coreboot. Firmware update - we are registered consultants for fwupd/LVFS and enable customers and community platforms, so they can get seamless firmware update in Linux. Dasharo Professional Support Dasharo Support coming in form of three following packages: Dasharo Community Support (DCP) - donation driven development. Dasharo Support Package (DSP) - annual firmware support package. Dasharo Enterprise Package (DEP) - custom SLA, corporate and open roadmap alignment advisroy. The Dasharo Community Support Program is an open-source firmware support initiative that leverages the expertise of community members and developers to improve firmware solutions for a range of hardware models. Platforms in scope of the program should comply with Dasharo quality criteria, which we slowly gather in Dasharo Certification Program . 3mdeb supports and maintains DCP-approved firmware through Dasharo Support Package (DSP) and Dasharo Enterprise Package (DEP). These packages offer essential services like porting to new platforms, developing device drivers, debugging, and fixing bugs. Companies can rely on 3mdeb's expertise to ensure their systems remain secure, up-to-date, and reliable. If you are interested in our services please contact us here . Dasharo Transparent Validation We provide transparent validation results - coreboot in itself provide no guarantees around release quality and do not provide binary distribution (for reference please check coreboot project scope , we provide those in scope of validation we perform. Dasharo Trustworthiness for All We provide ready to use binaries with GPG based signing scheme that improve verification where firmware coming from. What are the differences between the official coreboot repository and the Dasharo repository? Dasharo focuses on specific platforms listed in supported hardware section of Dasharo Universe documentation. Dasharo repository contains release tags which are associated with Dasharo Certification Program providing certain quality criteria including test results. We always trying to minimize delta, but sometimes it can be up to 5k SLOC (or more I guess e.g. Talos II coreboot support). What is Dasharo Certification Program? The Dasharo Certification Program (DCP) is a highly specialized certification program that benchmarks open-source firmware ecosystem deliverables. The program ensures that firmware is stable, secure, and dependable while aligning with the Dasharo values. DCP encourages developers to create their version of Dasharo or contribute to the Dasharo project or coreboot upstream, enabling them to leverage the power of open-source development to create custom firmware tailored to their specific needs based on years of Dasharo quality assurance results. The program's rigorous certification process entails comprehensive testing in the Dasharo Certification Lab, ensuring that the firmware binary meets the strict standards established by the program. By aligning with the Dasharo values, the certification program improves the overall posture of the open-source firmware ecosystem, making it long-term maintainable, sustainable, and trustworthy and providing specific service level agreements and warranties to commercial customers and the community. What is DCP-approved firmware? The Dasharo-certified firmware provides long-term maintenance over ten years after the CPU microarchitecture release, which means that OEM, ODM, hardware vendors, and other companies can rely on the firmware for a long time without worrying about end-of-life issues. Moreover, DCP-approved firmware vendors must provide professional support channels to ensure that other business entities can rely on those channels for long-term support regarding firmware and software. The validation process for DCP firmware is transparent. Test results and bug reports are always publicly available, allowing the community to continually identify issues and improve the firmware. However, in case of a security embargo, the results can be kept under a strict but well-defined policy, ensuring the security of the firmware. Future work These future goals align with the values of privacy, liberty, and trustworthiness in the context of firmware development and the broader tech industry. We would like to implement following features as part of Dasharo Certification Program: Privacy-respecting implementation : By working on solutions that allow users to deactivate potentially malicious components, like ME or PSP, the firmware will respect user privacy and help mitigate data privacy concerns. This approach gives users more control over their devices and reduces the risk of unauthorized access or surveillance. Discussion and more detail in dedicated issue . Liberty for the owners : Respecting the liberty of hardware owners to repair and transfer ownership without risking the leak of personally identifiable data is crucial. This approach supports the right-to-repair movement and ensures that users maintain control over their personal information even when they modify or pass on their devices. Discussion and more detail in dedicated issue . Trustworthiness for all : By publishing known good measurements for each boot phase and storing those measurements in tamper-resistant mediums, such as TPM, during the boot process will increase security and confidence in the firmware. Users and other stakeholders can verify that the firmware executed during the boot process is genuine and uncompromised by making reference measurements publicly available. Discussion and more detail in dedicated issue . Why there is no AMD mainboard supported in Dasharo ? Unfortunately, from the perspective of a small open-source firmware vendor, it isn't easy to work with AMD. Despite our experience with AMD SoCs since 2016, we could not yet deliver Dasharo for a modern (Zen core-based) platform. We're trying hard, but Intel has a better ecosystem for open-source firmware development. The reason for that state may be because AMD is in a rush, and they are understaffed in all areas compared to their success. We've been doing AMD open-source firmware development for 6+ years, including our yearly reports of open-source firmware status at FOSDEM, but the level of support for small volume firmware development companies is not yet at the level of competition. AGESA distribution was a problem in the past, but we solved that, and Dasharo for AMD is possible. Because Dynamic Root of Trust can work without blob, we favor AMD, but we can't do anything without a partner who can sponsor the development effort. We are on the market of open-source firmware vendors, not hardware vendors. Can you port Dasharo to my mainboard? There are other versions of the same questions: Dasharo supports mainboard X; I have mainboard Y (or X'). Can you teach me how to port Dasharo to my mainboard? Can you help me port Dasharo to my mainboard? TL;DR: No, we can't. In Dasharo, we support only carefully selected targets. The answer to that question requires understanding many aspects of the open-source firmware business we learned over the years. The critical point is that we can't help to port arbitrary targets. Hardware has to be carefully selected to bring the most benefits to the open-source firmware community and improve the sustainability of the ecosystem. Random hardware porting lead to an unmaintainable stack of platforms that no one adapts in scale, which does not lead to market change in the correct direction. Lack of commercial adoption is part of coreboot problems as a project, and we would like to avoid this mistake. We have strict criteria based on various aspects explained in Dasharo Community Support section. Dasharo Team tries to select platforms with long-term availability potential. Because we are fully responsible for hardware that we enable in open-source firmware ecosystem, our releases have to pass the Dasharo Certification criteria. The whole effort is relatively expensive and, in most cases, not feasible for enabling one platform. That's why in most cases, our customers are OEM/ODM, angel investors, or communities that need reasonable quantities of hardware (>200pcs). If the board comes with variants with minimal differences required for support in an open-source firmware stack, and one of the variants is part of the Dasharo Support Package, Dasharo Enterprise Package, or Dasharo Community Support, there is a chance to put that hardware on the relevant roadmap. In such a case, don't hesitate to contact us; we will see what we can do. However, the community member who requested support for the platform should also offer their help in validating the firmware and maintenance. That kind of request will be more than welcome from active community members. New members should consider ways to help us to gain a reputation that can lead to influencing Dasharo Community Supported roadmap.","title":"Dasharo"},{"location":"osf-trivia-list/dasharo/#frequenty-asked-questions-about-dasharo","text":"","title":"Frequenty Asked Questions about Dasharo"},{"location":"osf-trivia-list/dasharo/#what-is-dasharo","text":"Dasharo is registered trademark and product developed by 3mdeb . Dasharo is an open-source firmware distribution focusing on: carefully selected hardware platforms , zero-touch initial deployment , clean and simple code , long-term maintenance , professional support , transparent validation , extensive and structured documentation , privacy-respecting implementation , liberty for the owners and trustworthiness for all . Dasharo consists of productized services , set of open-source repositories , and quality control which help to provide scalable, modular, easy to combine open-source BIOS, UEFI, and firmware solutions. It offers the components that are needed to develop and maintain a high quality, and modular firmware, for the stability and security of your platform. For individuals Dasharo provides optional features in subscription model called Dasharo Entry Subscription .","title":"What is Dasharo?"},{"location":"osf-trivia-list/dasharo/#why-3mdeb-created-dasharo","text":"3mdeb created Dasharo to establish a recognized brand with a proven history of successful firmware integrations. Dasharo aims to deliver added value to customers and the community as an open-source firmware distribution, such as transparent validation, long-term maintenance, bleeding-edge integration for modern hardware, and other products requested by the community and customers. 3mdeb has been providing services related to open-source firmware for years and has been asked multiple times by various parties to create a recognized brand. Therefore, the creation of Dasharo was a move to fulfill that need and establish a marketing vehicle to deliver value to customers. In addition, 3mdeb plans to provide a camp for all coreboot refugees, including platforms moved to branches due to the need for code evolution, such as Intel Intel Quark SoC deprecation and LEGACY_SMP_INIT & RESOURCE_ALLOCATOR_V3 . We want to provide solutions for those requiring long-term maintenance and firmware support. More elaborate explanation of our position you can find below . Dasharo typically supports fully open platforms like Raptor Computing Systems Talos II family, ASUS KGPE-D16 , and other which are not as open but provide modern computing experience, such as MSI PRO Z690-A DDR4/DDR5 . The goal is to provide a reliable, secure, and scalable firmware solution for a wide range of platforms and applications, aligning with the vision of a new golden age of computing advocated by experts in computer architecture.","title":"Why 3mdeb created Dasharo?"},{"location":"osf-trivia-list/dasharo/#what-dasharo-provides","text":"Dasharo has 10 rules that govern the production and release of firmware within its ecosystem. Dasharo rules define what we deliver with every release. These rules are: Every release of firmware produced by Dasharo Ecosystem must contain source code , binary, SHA256 hash, and Dasharo cryptographic signature of that hash. Dasharo Universe contains structured documentation for key activities related to open-source firmware life-cycle: initial deployment, update and recovery. Cryptographic keys hierarchy should be followed: CEO/Founder (GPG fingerint: E030 9B2D 85A6 7E84 6329 E34B B2EE 71E9 67AA 9E4C ) which signs 3mdeb Master Key (GPG fingerint: 1B57 85C2 965D 84CF 85D1 652B 4AFD 81D9 7BD3 7C54 ) which signs 3mdeb Dasharo Master Key (GPG fingerint: 0D5F 6F1D A800 329E B7C5 97A2 ABE1 D0BC 6627 8008 ) which signs Customer Open Source Firmware Release x.y Signing Key (e.g. Novacustom Open Source Firmware Release 1.0 Signing Key) or dedicated 3mdeb keys to given platform. Keys can be found in 3mdeb-secpack repository. Every release of firmware produced by Dasharo Ecosystem must have an attached test report according to requirements. Every test should be described by test specification documentation. Customer-specific Dasharo validation procedures are delivered with the release notes directly to the customer and does not have to be publicly available. Every firmware produced by Dasharo Ecosystem use Semantic Versioning 2.0.0 compatible versioning scheme. For details please check description . Every firmware produced by Dasharo Ecosystem should use Keep A Changelog 1.0.0 compatible scheme as changelog format. Every Dasharo firmware release should be delivered with integrity and signature verification procedures. Every Dasharo firmware release must contain a detailed description of components and links to the range of code changes since the last release. Dasharo Ecosystem uses open-source software to create and maintain its firmware solutions, and the company strives to maintain transparency in its processes and procedures. These 10 rules are designed to ensure that every release of firmware produced by Dasharo Ecosystem is reliable, secure, and meets the needs of customers and the community. By following these rules, Dasharo Ecosystem provides a consistent and high-quality firmware solution for a wide range of platforms and applications.","title":"What Dasharo provides?"},{"location":"osf-trivia-list/dasharo/#what-is-dasharo-binary-blob-policy","text":"Modern x86 platforms' firmware requires closed source blobs to be integrated into the image to properly initialize the silicon. The ecosystem is shifting towards designs and technologies with a lot of small microcontrollers and intellectual property (IP) blocks specialized in a very thin range of tasks. Those microcontrollers and IP blocks typically require firmware blobs as well. Some of the blobs are clearly visible, some may be obfuscated and hidden inside the silicon or other firmware blobs (e.g. Intel Management Engine region contains multiple other blobs besides the ME firmware - more about Intel ME blob ). So Dasharo's binary blob policy is as follows: Integrate only the necessary amount of blobs required for proper platform operation and minimize the amount of blobs that are optional whenever possible by providing open equivalent implementations or removing them if there is no functional impact on the platform operation. Ultimately the blobs should be attested and properly documented. Dasharo Team is trying to achieve it by working on firmware SBOMs . Dasharo also works without blobs on platforms that allow that. For example, ASUS KGPE-D16 can run without any blobs (officially there is no PSP on that hardware, and Opteron 6200 series CPUs can run without microcode patches). There is also a libre, POWER9-based server/workstation Talos II by Raptor Computing Systems, which also do not use any binary blobs, however it is more expensive than x86 platforms.","title":"What is Dasharo binary blob policy?"},{"location":"osf-trivia-list/dasharo/#why-dasharo","text":"","title":"Why Dasharo?"},{"location":"osf-trivia-list/dasharo/#what-is-open-source-firmware-distribution","text":"Dasharo is 3mdeb's firmware distribution and all its components are open-source. We provide releases in binary form. As you know in most cases on x86 for firmware to be useful it has to cooperate with closed blobs. In all binary releases we are making sure we provide information where all components are coming from. Dasharo works without blobs on platforms that allow that. When we are saying Dasharo open-source firmware distribution we mean code that is delivered by 3mdeb that is open-source. We have no influence on the code provided by 3rd parties (e.g. FSP, ME, GbE etc.). In coreboot community there was some controversy about calling Dasharo open-source firmware distribution (for details please check gerrit review ). We respect coreboot community opinion, so we agreed that in case of coreboot documentation it would be better to use open-source based firmware distribution. It doesn't mean we agree with that decision: Definitions and rules used in coreboot documentation review are not clear. Rules seem not to be applied equally to all contributors of coreboot distribution .","title":"What is open-source firmware distribution?"},{"location":"osf-trivia-list/dasharo/#why-dasharo-is-not-called-coreboot-firmware-distribution","text":"While the coreboot is now the default open-source framework for Dasharo, we do not want to limit Dasharo to one framework. We also expect another firmware frameworks to be a base for Dasharo, such as U-Boot , oreboot , Slim Bootloader , or pure EDK II . Moreover, coreboot is not enough in most cases for booting modern computer. Most Dasharo flavors are currently based on coreboot with EDK II payload, but we also have coreboot with skiboot/heads payload, and we expect more flavors to appear in the future.","title":"Why Dasharo is not called coreboot firmware distribution?"},{"location":"osf-trivia-list/dasharo/#what-value-dasharo-provides-in-comparison-to-coreboot","text":"Dasharo is open-source firmware distribution based on coreboot and other open-source firmware frameworks (e.g. Tianocore EDKII ), you can think about Dasharo and coreboot relation in the same way as you think about Debian/Ubuntu/RedHat and Linux. That means it can provide better cost-effectiveness, security, transparency and customizability than proprietary alternative. There are seven characterestics of Dasharo: carefully selected hardware platforms , zero-touch initial deployment , clean and simple code , long-term maintenance , professional support , transparent validation , extensive and structured documentation , privacy-respecting implementation , liberty for the owners , trustworthiness for all .","title":"What value Dasharo provides in comparison to coreboot?"},{"location":"osf-trivia-list/dasharo/#what-are-the-differences-between-the-official-coreboot-repository-and-the-dasharo-repository","text":"Dasharo focuses on specific platforms listed in supported hardware section of Dasharo Universe documentation. Dasharo repository contains release tags which are associated with Dasharo Certification Program providing certain quality criteria including test results. We always trying to minimize delta, but sometimes it can be up to 5k SLOC (or more I guess e.g. Talos II coreboot support).","title":"What are the differences between the official coreboot repository and the Dasharo repository?"},{"location":"osf-trivia-list/dasharo/#what-is-dasharo-certification-program","text":"The Dasharo Certification Program (DCP) is a highly specialized certification program that benchmarks open-source firmware ecosystem deliverables. The program ensures that firmware is stable, secure, and dependable while aligning with the Dasharo values. DCP encourages developers to create their version of Dasharo or contribute to the Dasharo project or coreboot upstream, enabling them to leverage the power of open-source development to create custom firmware tailored to their specific needs based on years of Dasharo quality assurance results. The program's rigorous certification process entails comprehensive testing in the Dasharo Certification Lab, ensuring that the firmware binary meets the strict standards established by the program. By aligning with the Dasharo values, the certification program improves the overall posture of the open-source firmware ecosystem, making it long-term maintainable, sustainable, and trustworthy and providing specific service level agreements and warranties to commercial customers and the community.","title":"What is Dasharo Certification Program?"},{"location":"osf-trivia-list/dasharo/#what-is-dcp-approved-firmware","text":"The Dasharo-certified firmware provides long-term maintenance over ten years after the CPU microarchitecture release, which means that OEM, ODM, hardware vendors, and other companies can rely on the firmware for a long time without worrying about end-of-life issues. Moreover, DCP-approved firmware vendors must provide professional support channels to ensure that other business entities can rely on those channels for long-term support regarding firmware and software. The validation process for DCP firmware is transparent. Test results and bug reports are always publicly available, allowing the community to continually identify issues and improve the firmware. However, in case of a security embargo, the results can be kept under a strict but well-defined policy, ensuring the security of the firmware.","title":"What is DCP-approved firmware?"},{"location":"osf-trivia-list/dasharo/#why-there-is-no-amd-mainboard-supported-in-dasharo","text":"Unfortunately, from the perspective of a small open-source firmware vendor, it isn't easy to work with AMD. Despite our experience with AMD SoCs since 2016, we could not yet deliver Dasharo for a modern (Zen core-based) platform. We're trying hard, but Intel has a better ecosystem for open-source firmware development. The reason for that state may be because AMD is in a rush, and they are understaffed in all areas compared to their success. We've been doing AMD open-source firmware development for 6+ years, including our yearly reports of open-source firmware status at FOSDEM, but the level of support for small volume firmware development companies is not yet at the level of competition. AGESA distribution was a problem in the past, but we solved that, and Dasharo for AMD is possible. Because Dynamic Root of Trust can work without blob, we favor AMD, but we can't do anything without a partner who can sponsor the development effort. We are on the market of open-source firmware vendors, not hardware vendors.","title":"Why there is no AMD mainboard supported in Dasharo ?"},{"location":"osf-trivia-list/dasharo/#can-you-port-dasharo-to-my-mainboard","text":"There are other versions of the same questions: Dasharo supports mainboard X; I have mainboard Y (or X'). Can you teach me how to port Dasharo to my mainboard? Can you help me port Dasharo to my mainboard? TL;DR: No, we can't. In Dasharo, we support only carefully selected targets. The answer to that question requires understanding many aspects of the open-source firmware business we learned over the years. The critical point is that we can't help to port arbitrary targets. Hardware has to be carefully selected to bring the most benefits to the open-source firmware community and improve the sustainability of the ecosystem. Random hardware porting lead to an unmaintainable stack of platforms that no one adapts in scale, which does not lead to market change in the correct direction. Lack of commercial adoption is part of coreboot problems as a project, and we would like to avoid this mistake. We have strict criteria based on various aspects explained in Dasharo Community Support section. Dasharo Team tries to select platforms with long-term availability potential. Because we are fully responsible for hardware that we enable in open-source firmware ecosystem, our releases have to pass the Dasharo Certification criteria. The whole effort is relatively expensive and, in most cases, not feasible for enabling one platform. That's why in most cases, our customers are OEM/ODM, angel investors, or communities that need reasonable quantities of hardware (>200pcs). If the board comes with variants with minimal differences required for support in an open-source firmware stack, and one of the variants is part of the Dasharo Support Package, Dasharo Enterprise Package, or Dasharo Community Support, there is a chance to put that hardware on the relevant roadmap. In such a case, don't hesitate to contact us; we will see what we can do. However, the community member who requested support for the platform should also offer their help in validating the firmware and maintenance. That kind of request will be more than welcome from active community members. New members should consider ways to help us to gain a reputation that can lead to influencing Dasharo Community Supported roadmap.","title":"Can you port Dasharo to my mainboard?"},{"location":"osf-trivia-list/deployment/","text":"Deployment Deployment section of Dasharo Knowledge Base FAQ considers topic of open-source firmware deployment, which may include operations of reading and writing SPI NOR flash, as well as binary modifications. If you can't find the answer to your questions feel free to contact us through Community Channels or submit issue through Dasharo Github . Flashrom Following sections explain how to deal with most common flashrom problem. How to install Dasharo flashrom fork ? Install flashrom v1.1 or newer with your distribution's package manager if you don't have it installed yet. If your distro doesn't provide flashrom or provides an outdated one, you can build it yourself using this instruction . Or compile recent version of flashrom: If you need flashrom for Dasharo-supported hardware and for some reason you cannot use DTS, please consider the compilation of Dasharo flashrom fork . For compilation details and related issues, please check flashrom documentation and community . Perform dry run to detect the problems early Most of the problems can be detected early and avoided without attempting to flash the firmware. You may check for most of the errors described here by doing a dry run (not passing any firmware binary): sudo flashrom -p internal In below sections there are example errors that you may find in the output of above command. Could not get I/O privileges (Operation not permitted) If you see a flashrom error like this: ERROR: Could not get I/O privileges (Operation not permitted). You need to be root. Error: Programmer initialization failed. It means you have insufficient privileges to perform initialization. Please use sudo before flashrom command. /dev/mem mmap failed: Operation not permitted /dev/mem mmap failed: Operation not permitted FAILED! FATAL ERROR! Error: Programmer initialization failed. Linux kernel restricts access to IOMEM. To fix that add iomem=relaxed to the kernel command line. Recommended way to fix the problem: Edit /etc/default/grub : GRUB_CMDLINE_LINUX = \"iomem=relaxed\" Update GRUB2 config with: sudo update-grub2 Alternatively, if previous command doesn't work: sudo grub-mkconfig -o /boot/grub/grub.cfg Reboot and try flashrom command again Other method: Edit grub.cfg in /boot/grub/ : linux /boot/vmlinuz-4.15.0-115-generic ro quiet iomem = relaxed Reboot and try flashrom command again Last resort you can try to modify boot option runtime. YMMV: If your computer uses BIOS for booting, then hold down the Shift , or if your computer uses UEFI for booting, press Esc several times, while GRUB is loading to get the boot menu. And, after getting a GRUB menu, press E on a boot entry to append iomem=relaxed to kernel command line and press Ctrl + X or F10 to boot. Although this setting is temporary and will last only during the next boot, this way is faster and a customer doesn't need to re-generate anything. Please note having it as a temporary setting maybe is slightly better for security (there's a reason why it's disabled by default) . If the above does not resolve the problem, the kernel may be compiled with strict devmem, which prohibits accessing the IOMEM. You should then take different Linux system. Transaction error between offset ... ? SPI Configuration is locked down. FREG0: Flash Descriptor region (0x00000000-0x00000fff) is read-only. FREG2: Management Engine region (0x00005000-0x005fffff) is locked. Not all flash regions are freely accessible by flashrom. This is most likely due to an active ME. Please see https://flashrom.org/ME for details. At least some flash regions are read protected. You have to use a flash layout and include only accessible regions. For write operations, you'll additionally need the --noverify-all switch. See manpage for more details. Enabling hardware sequencing due to multiple flash chips detected. OK. Found Programmer flash chip \"Opaque flash chip\" (12288 kB, Programmer-specific) mapped at physical address 0x0000000000000000. Reading flash... Transaction error between offset 0x00005000 and 0x0000503f (= 0x00005000 + 63)! Read operation failed! FAILED. Most probably it means problem lays in ME not allowing to read its region. One of the method to mitigate the issues is to put ME in Manufacturing Mode. Such operation depends on ME version, SPI flash layout and platform design. Detail information you should find in sections dedicated to given hardware. To access documentation for supported hardware please go to Hardware Compatibility List . Please note we consider further mitigations in Dasharo Roadmap . WARNING: No chipset found If you see the following in the flashrom output: WARNING: No chipset found. Flash detection will most likely fail. No EEPROM/flash device found. Note: flashrom can never write if the flash chip isn't found automatically. that means your flashrom version is incorrect. Follow the procedure of building flashrom or use DTS . Chip write protection enabled If you see anything like this in the flashrom output (or similar, the hex number may differ): PR0: Warning: 0x001c0000-0x01ffffff is read-only. That means you did not disable BIOS boot medium lock correctly. GO back to firmware setup and disable the option as described in Prerequisites . Flashrom update procedure containing --ifd -i bios parameters will fails if you do not disable the protection. The procedure using the --fmap -i RW_SECTION_A -i RW_SECTION_B parameters is not affected. Warning: BIOS region SMM protection is enabled! If you see anything like this in the flashrom output (or similar, the hex number may differ): Warning: BIOS region SMM protection is enabled! Warning: Setting Bios Control at 0xdc from 0xaa to 0x89 failed. New value is 0xaa. Any attempt to flash the firmware will fail. That means you did not disable Enable SMM BIOS write protection option correctly. Go back to firmware setup and disable the option as described in Prerequisites . How to use flashrom to backup vendor BIOS? It is always a good idea to backup the original BIOS of your hardware, before switching to open-source firmware. Boot Dasharo Tools Suite Choose option 9) Shell. Read content of SPI NOR flash: flashrom -p internal -r bios_backup_`date +%Y%m%d`.bin flashrom v1.2-551-gf47ff31 on Linux 5.10.0-9-amd64 (x86_64) flashrom is free software, get the source code at https://flashrom.org Using clock_gettime for delay loops (clk_id: 1, resolution: 1ns). Found chipset \"Intel Q77\". Enabling flash write... SPI Configuration is locked down. The Flash Descriptor Override Strap-Pin is set. Restrictions implied by the Master Section of the flash descriptor are NOT in effect. Please note that Protected Range (PR) restrictions still apply. Enabling hardware sequencing due to multiple flash chips detected. OK. Found Programmer flash chip \"Opaque flash chip\" (12288 kB, Programmer-specific) mapped at physical address 0x0000000000000000. Reading flash... done. If you face any issues, please refer to the troubleshooting section for hardware platform.","title":"Deployment"},{"location":"osf-trivia-list/deployment/#deployment","text":"Deployment section of Dasharo Knowledge Base FAQ considers topic of open-source firmware deployment, which may include operations of reading and writing SPI NOR flash, as well as binary modifications. If you can't find the answer to your questions feel free to contact us through Community Channels or submit issue through Dasharo Github .","title":"Deployment"},{"location":"osf-trivia-list/deployment/#flashrom","text":"Following sections explain how to deal with most common flashrom problem.","title":"Flashrom"},{"location":"osf-trivia-list/deployment/#how-to-use-flashrom-to-backup-vendor-bios","text":"It is always a good idea to backup the original BIOS of your hardware, before switching to open-source firmware. Boot Dasharo Tools Suite Choose option 9) Shell. Read content of SPI NOR flash: flashrom -p internal -r bios_backup_`date +%Y%m%d`.bin flashrom v1.2-551-gf47ff31 on Linux 5.10.0-9-amd64 (x86_64) flashrom is free software, get the source code at https://flashrom.org Using clock_gettime for delay loops (clk_id: 1, resolution: 1ns). Found chipset \"Intel Q77\". Enabling flash write... SPI Configuration is locked down. The Flash Descriptor Override Strap-Pin is set. Restrictions implied by the Master Section of the flash descriptor are NOT in effect. Please note that Protected Range (PR) restrictions still apply. Enabling hardware sequencing due to multiple flash chips detected. OK. Found Programmer flash chip \"Opaque flash chip\" (12288 kB, Programmer-specific) mapped at physical address 0x0000000000000000. Reading flash... done. If you face any issues, please refer to the troubleshooting section for hardware platform.","title":"How to use flashrom to backup vendor BIOS?"},{"location":"osf-trivia-list/dts/","text":"Dasharo Tools Suite What is Dasharo Tools Suite? Dasharo Tools Suite (DTS) is like a swiss army knife for Dasharo firmware: you can execute initial deployment, firmware update and even dump machine logs for debugging and development support. Also refer to DTS Overview . How to get Dasharo Entry Subscription Releases using Dasharo Tools Suite? Dasharo Entry Subscription Releases can be used to perform firmware updates with DTS by providing Dasharo Entry Subscription credentials obtained after buying a Dasharo Entry Subscription . Commercial use of DTS should be discussed directly with 3mdeb or Dasharo Team . How to support us? In general there are three ways to support us: I have more time than money and I can code Please help us develop Dasharo influence on open-source firmware market and spread the word about it. There are multiple ways to do that: Join Dasharo Matrix Community and support other members of community Join Dasharo open-source firmware vPub or other related event organized by 3mdeb or Dasharo Team. Write a Google review Follow us on social media and help spreading the word about Dasharo. Contribute documentation, test results, Dasharo Hardware Compatibility List Reports To get access to DTS SE you should contact 3mdeb or Dasharo Team and prove your contribution regarding above areas of support and influence. If it would be meaningful we would be glad to give you access to DTS SE for a year. I have more time than money and I can't code Please contribute ideas for new features, review documentation and help testing bug fixes. If you would like to pursue that path please contact us on Dasharo - General Matrix channel to agree on scope of contribution to avoid any potential collision with other developers. To get access to DTS SE you should contact 3mdeb or Dasharo Team with links to your contribution and we would be glad to provide one year of DTS SE updates. I have more money than time Please donate using one of available methods and contact 3mdeb or Dasharo Team to let us know about your donation. Minimal donating to access DTS SE with one year update support is 60EUR.","title":"Dasharo Tools Suite"},{"location":"osf-trivia-list/dts/#dasharo-tools-suite","text":"","title":"Dasharo Tools Suite"},{"location":"osf-trivia-list/dts/#what-is-dasharo-tools-suite","text":"Dasharo Tools Suite (DTS) is like a swiss army knife for Dasharo firmware: you can execute initial deployment, firmware update and even dump machine logs for debugging and development support. Also refer to DTS Overview .","title":"What is Dasharo Tools Suite?"},{"location":"osf-trivia-list/dts/#how-to-get-dasharo-entry-subscription-releases-using-dasharo-tools-suite","text":"Dasharo Entry Subscription Releases can be used to perform firmware updates with DTS by providing Dasharo Entry Subscription credentials obtained after buying a Dasharo Entry Subscription . Commercial use of DTS should be discussed directly with 3mdeb or Dasharo Team .","title":"How to get Dasharo Entry Subscription Releases using Dasharo Tools Suite?"},{"location":"osf-trivia-list/dts/#how-to-support-us","text":"In general there are three ways to support us:","title":"How to support us?"},{"location":"osf-trivia-list/introduction/","text":"Open Source Firmware Trivia Questions List (OSFTQL) Goal of following questions list is to provide answers to terribly trivial topics or questions that were asked and answered gazillion times. We believe to move forward with so limited resources we have to stop wasting community precious time on something we agree on, but move forward with discussion. Other role of this list is to create taxonomy of OSF trivia questions for community and Dasharo customers, to avoid repeating explanation of topics which most of community already agree on.","title":"Introduction"},{"location":"osf-trivia-list/introduction/#open-source-firmware-trivia-questions-list-osftql","text":"Goal of following questions list is to provide answers to terribly trivial topics or questions that were asked and answered gazillion times. We believe to move forward with so limited resources we have to stop wasting community precious time on something we agree on, but move forward with discussion. Other role of this list is to create taxonomy of OSF trivia questions for community and Dasharo customers, to avoid repeating explanation of topics which most of community already agree on.","title":"Open Source Firmware Trivia Questions List (OSFTQL)"},{"location":"osf-trivia-list/me/","text":"Introduction Until Nehalem (ME version 6) it was possible to remove ME firmware completely. Starting with Nehalem, ME firmware can't be completely removed. If ME firmware is missing, the PC will not boot at all Earlier ME versions left a 30 minute grace period for recovering from a bad flash, but this is no longer true Three methods to reduce ME's capabilities have been found: neutering , disabling and soft-disabling . Removing non-essential portions of the ME's firmware is commonly referred to as neutering ME Setting a bit in the Flash Descriptor which acts as a kill-switch which tells ME to hang after initialization is usually what we mean by disabling ME Neutering ME Neutralizing ME: removing non-essential portions of the ME's firmware Also called \"neutering\" Not initially designed by Intel Method discovered by Nicola Corna of the me_cleaner project Removes all modules other than those required for platform init Modules left in ME 6.0 - 10.x: ROMP , BUP Modules left in ME >= 11.x: rbe , kernel , syslib , bup , sometimes also mfs A neutered ME will initialize hardware, then throw an error due to missing firmware This sometimes results in power management issues Therefore it's not recommended in production without extensive testing Functions provided by ME will no longer be operational ME >= v11.x: Sometimes mfs also needs to be preserved. mfs is responsible for some of the hardware initialization. Why is it possible? The FPT is not signed, has just a checksum The partitions are individually signed The offset and size of each partition are saved in each FPT entry Source: Intel ME myths and reality, Igor Skochinsky & Nicola Corna Soft-disabling ME It's also possible to put ME into a soft-disabled state by sending a HECI SET_ME_DISABLE or HMRFPO_ENABLE message BIOS needs to send these messages ME will stay disabled until a corresponding ENABLE message is sent Functional ME firmware must be present Usually what the \"Disable ME\" option in some BIOSes does Also offered as an option when buying some laptops (e.g. Dell) HAP / AltMeDisable bit (aka disabling ME) Method discovered in 2017 by Positive Technologies. Initially introduced by Intel for government/intelligence purposes. Not even the US government trusts ME entirely! Also supported by the me_cleaner project Involves setting an undocumented, secret bit in the Flash Descriptor which acts as a kill-switch for the ME AltMeDisable on ME versions < 11.x HAP (High Assurance Platform) on ME versions >= 11.x Leaves ME in a stopped state, lets it shut down gracefully instead of erroring out - This can help prevent issues with power management that may arise from disabling the ME - Supported by some OEMs 3mdeb official statement Whenever it is possible 3mdeb try to minimize impact of (CS)ME/SPS/TXE or any other firmware residing on peripheral or built-in CPUs.","title":"Intel ME/CSME"},{"location":"osf-trivia-list/me/#introduction","text":"Until Nehalem (ME version 6) it was possible to remove ME firmware completely. Starting with Nehalem, ME firmware can't be completely removed. If ME firmware is missing, the PC will not boot at all Earlier ME versions left a 30 minute grace period for recovering from a bad flash, but this is no longer true Three methods to reduce ME's capabilities have been found: neutering , disabling and soft-disabling . Removing non-essential portions of the ME's firmware is commonly referred to as neutering ME Setting a bit in the Flash Descriptor which acts as a kill-switch which tells ME to hang after initialization is usually what we mean by disabling ME","title":"Introduction"},{"location":"osf-trivia-list/me/#neutering-me","text":"Neutralizing ME: removing non-essential portions of the ME's firmware Also called \"neutering\" Not initially designed by Intel Method discovered by Nicola Corna of the me_cleaner project Removes all modules other than those required for platform init Modules left in ME 6.0 - 10.x: ROMP , BUP Modules left in ME >= 11.x: rbe , kernel , syslib , bup , sometimes also mfs A neutered ME will initialize hardware, then throw an error due to missing firmware This sometimes results in power management issues Therefore it's not recommended in production without extensive testing Functions provided by ME will no longer be operational ME >= v11.x: Sometimes mfs also needs to be preserved. mfs is responsible for some of the hardware initialization.","title":"Neutering ME"},{"location":"osf-trivia-list/me/#why-is-it-possible","text":"The FPT is not signed, has just a checksum The partitions are individually signed The offset and size of each partition are saved in each FPT entry Source: Intel ME myths and reality, Igor Skochinsky & Nicola Corna","title":"Why is it possible?"},{"location":"osf-trivia-list/me/#soft-disabling-me","text":"It's also possible to put ME into a soft-disabled state by sending a HECI SET_ME_DISABLE or HMRFPO_ENABLE message BIOS needs to send these messages ME will stay disabled until a corresponding ENABLE message is sent Functional ME firmware must be present Usually what the \"Disable ME\" option in some BIOSes does Also offered as an option when buying some laptops (e.g. Dell)","title":"Soft-disabling ME"},{"location":"osf-trivia-list/me/#hap-altmedisable-bit-aka-disabling-me","text":"Method discovered in 2017 by Positive Technologies. Initially introduced by Intel for government/intelligence purposes. Not even the US government trusts ME entirely! Also supported by the me_cleaner project Involves setting an undocumented, secret bit in the Flash Descriptor which acts as a kill-switch for the ME AltMeDisable on ME versions < 11.x HAP (High Assurance Platform) on ME versions >= 11.x Leaves ME in a stopped state, lets it shut down gracefully instead of erroring out - This can help prevent issues with power management that may arise from disabling the ME - Supported by some OEMs","title":"HAP / AltMeDisable bit (aka disabling ME)"},{"location":"osf-trivia-list/me/#3mdeb-official-statement","text":"Whenever it is possible 3mdeb try to minimize impact of (CS)ME/SPS/TXE or any other firmware residing on peripheral or built-in CPUs.","title":"3mdeb official statement"},{"location":"osf-trolling-list/build_process/","text":"[OSFI001] Build process [OSFI0010] There is no healthy OSF without reproducible builds What are the reproducible builds? Reproducible Builds and a lot of its aspects is well explained on the linked website. Why are reproducible builds crucial OSF? This is because knowing hashes of firmware components, we can calculate expected TPM PCRs values. By knowing good PCR values and being able to predict further values after firmware update, we are gaining the following advantages: We can easily confirm if the firmware is valid by reading TPM PCRs and compare to reference integrity measures (RIM), RIM can be calculated by build exactly the same version of OSF. NOTE : Please note that depending on your threat model using TPM chip with closed source firmware implementation may lead to solution which is not trustworthy. Process of replying measurements provided in TPM Event Log is simpler because we can easily obtain software and confirm hashes used during PCR extension the process was valid and the same as produced by the software build process Looking for bugs by using bisection is easier since being able to build every commit of software in a reproducible manner give us confidence that there would be no change in behavior between 2 consecutive builds Consistent behavior for given hash can be confirmed by test results tied to given hash in that way users looking at test results may expect exactly the same behavior for firmware binaries with the same hash Long term maintenance should be easier if firmware build would be reproducible over a long time, because often happen some firmware land in industrial applications, e.g., robots, trains, smart city infrastructure, if the bug will be detected after a long time; it is important to have tools and be able to confirm the same binary can be generated in the future. If we know given toolchain reproduce binary bit by bit we are sure it also reproduces software/firmware behavior. In that light making small incremental improvement using a toolchain that gives reproducible results give us higher the chance that we will not introduce uncontrolled change in behavior and code the change will be reflected by the compilation process without affecting previous software behavior. [OSFI0011] Docker containers as build systems \"considered harmful.\" Docker containers for a couple of last years become the default method for providing reproducible runtime environment for software as well those started to be very useful for developers to transfer exact configuration for building given software stack. We wrote about the usefulness of Docker containers in embedded software development environment on 3mdeb blog . After a long time of using Docker containers for embedded software development and build environments we noticed problems for long time maintenance and reproducibility. coreboot-sdk problems The example can be coreboot-sdk used for building coreboot project . A good summary of the problem was provided by Thrilleratplay in guix-docker repo : Currently, the coreboot build environment, coreboot-sdk , uses a Debian docker base image. To install additional required packages, apt-get update must be run. The resulting Docker image is hosted in the Docker hub repository to be retrieved at any time in the future. However, at any time in the future, building the same docker file will generate a different image based on the latest packages used in apt-get. Over time, as packages are updated due to bug, security or feature improvements, the docker image's provenance in the docker hub repository becomes increasingly difficult, if not impossible, to audit and reproduce. Some more detailed notes related to coreboot-sdk issues are presented below. There is no meaningful versioning of SDK [1] - at some point, there was versioning 1.32-53, now switched to git SHA. Both seemed to have no meaning and were released at arbitrary points in time. The result is that it is hard to find which version of SDK works with the coreboot tree version. Validation of coreboot-sdk is not sufficient - for example, recently, python fixes were merged [2] , somehow this change passed all QA checks, but SeaBIOS use python (not python2 or python3) and all builds using this version of SDK that compile SeaBIOS fail. coreboot-sdk is based on moving target Debian sid. It is close to impossible to build the same Docker images at 2 different points in time. coreboot-sdk enforce given version of ACPI spec - this may not always be a good thing to use the most recent compiler and update code accordingly since it can easily break OSes. Why we care? Whenever we deliver code or service to community or customer, we provide build environment which, for the sake of quality user support, should be stable. CI pipelines rely on those containers. Replacing docker image in CI pipeline whenever something change defeat the purpose of having automation and increase maintenance cost significantly and increase maintenance cost significantly Requirements for OSF dev and build process Open-source firmware development and build environment SHOULD have: * meaningful release process * meaningful validation process, at least basic build system and dev env capabilities should be tested * meaningful revisions with a clear explanation of what software stack can be build with what version of dev and build system, a description should include side-spec compliance, e.g., ACPI, SMBIOS, UEFI, etc. * reproducible process that works across systems and in the long run * signature, so anyone can identify where build and dev env coming from and if it is trustworthy Ideas for solving the above issues Docker images are not reproducible - this is a known fact, and if we are extremely serious about stability, security and quality, we should stop using a not reproducible build environment. Of course, there is some work making Docker images reproducible, but it opens Pandora's box [3] of Yocto or Buildroot. Another path could be Nix or Guix, which is currently pursued in the community OSFW #guix-buildstack channel this is a private channel; feel free to ping anyone from 3mdeb Team to join. coreboot toolchain is built by its own build system, which would be hard to couple with Dockerfile or something else. Docker images can be signed using docker trust commands as described here . Other idea would be to use wget and dpkg -i for every needed package in Dockerfile that create base image for reproducible toolchain. Of course that means quite extensive dependency management, but maybe simplicity is worth the effort. It is also possible to maintain VMs per given coreboot (or other OSF) version. That may mean long term VM image compatibility issues as well as problems with making sure images would work with various hypervisor versions. It is even more complex if multiple OS should be supported. VMs also have quite big overhead in terms of performance I'm not tracking all activity in the community, so some claims may be plain wrong. Please let me know what I miss when I'm wrong.","title":"Firmware build process"},{"location":"osf-trolling-list/build_process/#osfi001-build-process","text":"","title":"[OSFI001] Build process"},{"location":"osf-trolling-list/build_process/#osfi0010-there-is-no-healthy-osf-without-reproducible-builds","text":"","title":"[OSFI0010] There is no healthy OSF without reproducible builds"},{"location":"osf-trolling-list/build_process/#osfi0011-docker-containers-as-build-systems-considered-harmful","text":"Docker containers for a couple of last years become the default method for providing reproducible runtime environment for software as well those started to be very useful for developers to transfer exact configuration for building given software stack. We wrote about the usefulness of Docker containers in embedded software development environment on 3mdeb blog . After a long time of using Docker containers for embedded software development and build environments we noticed problems for long time maintenance and reproducibility.","title":"[OSFI0011] Docker containers as build systems \"considered harmful.\""},{"location":"osf-trolling-list/jsm_documentation/","text":"Jira Service Management client procedure Dasharo Support Package If you are interested in starting cooperation using the Support Package, it is the perfect time to start. The Support Package will help us allocate resources and a secure timeline for your needs. To ensure that we can provide comprehensive assistance with your current products and future new developments, we encourage you to choose our new Support Package for more streamlined cooperation, guaranteed availability, and quick, on-time delivery. Why should you add requests to Jira Service Management? JSM allows you to easily keep track of the status of individual requests. Each new request you add means analysis and pricing of task execution. This conversation will take place on JSM. Progress on the request will also be reported using JSM. Before you raise your first request Remember to provide a list of email addresses of people that need access to the portal. It's required to prepare the organization, where requested people will automatically receive updates on the ticket statuses. How to add a request Raising requests using the portal To add a new request using the web service: Go to portal and select the project. Select a type of request and provide the required data. You can also add attachments by dragging and dropping them into any part of the web page, or by clicking the Browse button. When you are ready to send the request, click Send. Your request is created and awaits our response. Raising requests using email If you prefer raising a request using email, you can do this by sending a message to special email address generated for the project. The email address will be provided to you by separate message. Communication through the Jira Service Desk You can always add a comment to the request and attach files. You can do it directly from the JSM request page or using email simply by replying to the email thread. We'll also add comments, questions and quotations in the comment section. What happens after you raise a request We'll soon let you know about the cost and what solutions are proposed. You'll also receive information on which requests will be resolved in the next release. Process and request statuses The diagram below presents what the workflow of JSM requests looks like. Open - your request is created and visible for us, but we didn't start working on it yet. Analysis - our team is analyzing your request. We will soon let you know what will be the cost of resolving this request. Waiting for the client - your action is required to continue working on the request. Most of the time it will be: acceptance of the estimated effort need for additional clarification. Note that the request with this status is waiting for your response. Delaying a response will result with lack of progress being made on the request. Approved - you have accepted the cost, and we will soon start working to resolve the request. Rejected - you have rejected the cost of resolving the request, and we will not work on this request. In progress - we are actively working on the request. On hold - the progress on resolving the request has been paused, and the work may be resumed in the future. Closed - the request has been resolved, but there was no work to be done or work was stopped due to: the client's decision feasibility study showed 0% success rate other Done - the request is resolved, and work has been completed. Support budget After completing the requests, you'll receive information about the state of your support budget by email (by default two times a month). SLAs Our team aims to provide the best support experience. We want you to always be up to date on the status of your request. We are doing our best to reply on your request in less that 36 hours.","title":"Jira Service Management"},{"location":"osf-trolling-list/jsm_documentation/#jira-service-management-client-procedure","text":"","title":"Jira Service Management client procedure"},{"location":"osf-trolling-list/jsm_documentation/#dasharo-support-package","text":"If you are interested in starting cooperation using the Support Package, it is the perfect time to start. The Support Package will help us allocate resources and a secure timeline for your needs. To ensure that we can provide comprehensive assistance with your current products and future new developments, we encourage you to choose our new Support Package for more streamlined cooperation, guaranteed availability, and quick, on-time delivery.","title":"Dasharo Support Package"},{"location":"osf-trolling-list/jsm_documentation/#why-should-you-add-requests-to-jira-service-management","text":"JSM allows you to easily keep track of the status of individual requests. Each new request you add means analysis and pricing of task execution. This conversation will take place on JSM. Progress on the request will also be reported using JSM.","title":"Why should you add requests to Jira Service Management?"},{"location":"osf-trolling-list/jsm_documentation/#before-you-raise-your-first-request","text":"Remember to provide a list of email addresses of people that need access to the portal. It's required to prepare the organization, where requested people will automatically receive updates on the ticket statuses.","title":"Before you raise your first request"},{"location":"osf-trolling-list/jsm_documentation/#how-to-add-a-request","text":"","title":"How to add a request"},{"location":"osf-trolling-list/jsm_documentation/#process-and-request-statuses","text":"The diagram below presents what the workflow of JSM requests looks like. Open - your request is created and visible for us, but we didn't start working on it yet. Analysis - our team is analyzing your request. We will soon let you know what will be the cost of resolving this request. Waiting for the client - your action is required to continue working on the request. Most of the time it will be: acceptance of the estimated effort need for additional clarification. Note that the request with this status is waiting for your response. Delaying a response will result with lack of progress being made on the request. Approved - you have accepted the cost, and we will soon start working to resolve the request. Rejected - you have rejected the cost of resolving the request, and we will not work on this request. In progress - we are actively working on the request. On hold - the progress on resolving the request has been paused, and the work may be resumed in the future. Closed - the request has been resolved, but there was no work to be done or work was stopped due to: the client's decision feasibility study showed 0% success rate other Done - the request is resolved, and work has been completed.","title":"Process and request statuses"},{"location":"osf-trolling-list/jsm_documentation/#support-budget","text":"After completing the requests, you'll receive information about the state of your support budget by email (by default two times a month).","title":"Support budget"},{"location":"osf-trolling-list/jsm_documentation/#slas","text":"Our team aims to provide the best support experience. We want you to always be up to date on the status of your request. We are doing our best to reply on your request in less that 36 hours.","title":"SLAs"},{"location":"osf-trolling-list/trusted_computing/","text":"[OSFI002] Trusted computing [OSFI0020] CRTM what it stand for? According to TCG Glossary v1.1 rev1.0 published in 2017 correct definition is: The instructions executed by the platform when it acts as the RTM. [Formerly described as \u201cCore Root of Trust for Measurement\u201d. Code Root of Trust for Measurement is the preferred expansion.] This acronym expansion is preferred. Not every one agree with that expansion of CRTM abbreviation. What do you think?","title":"Trusted Computing"},{"location":"osf-trolling-list/trusted_computing/#osfi002-trusted-computing","text":"","title":"[OSFI002] Trusted computing"},{"location":"osf-trolling-list/trusted_computing/#osfi0020-crtm-what-it-stand-for","text":"According to TCG Glossary v1.1 rev1.0 published in 2017 correct definition is: The instructions executed by the platform when it acts as the RTM. [Formerly described as \u201cCore Root of Trust for Measurement\u201d. Code Root of Trust for Measurement is the preferred expansion.] This acronym expansion is preferred. Not every one agree with that expansion of CRTM abbreviation. What do you think?","title":"[OSFI0020] CRTM what it stand for?"},{"location":"projects/capsule-updates/","text":"UEFI Capsule Update for coreboot with EDK II Abstract The project, UEFI Capsule Update for coreboot with EDK II, aims to improve the firmware update process by integrating UEFI capsule update methods into coreboot with EDK II open-source firmware frameworks. UEFI capsule update is an industry-standard approach widely supported by hardware vendors, providing a secure and reliable method for delivering firmware updates. By adopting UEFI capsule update methods, the project aims to simplify the update process and enhance the user experience, providing a more secure and reliable approach compared to complex flashrom-based updates, which are still common in the open-source firmware distributions based on coreboot. Due to security measures, OS-level access to firmware is intentionally restricted, which in turn makes it increasingly challenging to apply firmware updates from the operating system. This limitation poses difficulties in utilizing traditional flashrom-based methods for firmware updates. The expected outcomes of the project include enhanced firmware update capabilities, a simplified user experience, heightened security, and enhanced compatibility, all achieved by seamlessly integrating with fwupd, a popular firmware update management tool for Linux systems. Involvement with projects or organisations relevant to this project Relevant projects: coreboot [1] Dasharo compatible with MSI PRO Z690-A DDR4 (and the subsequent port for the DDR5 variant) [2] Dasharo compatible with Dell Optiplex [3] EDKII [4] Fwupd (LVFS) [5] U-Boot [6] 3mdeb has been a licensed provider of quality coreboot consulting services since 2016. We are well-known in the open-source community for maintaining th firmware of the PC Engines APU series platform since 2016, delivering high-quality firmware releases each month and providing technical support on PC Engines and OPNSense forums. Our contribution to the coreboot project reaches (as of 26th of July 2023): 319 individual patches merged to the official coreboot repository 33481 lines of code added 41097 lines of code removed Moreover, we constantly develop Dasharo, which is an open-source firmware distribution focusing on clean and simple code, long-term maintenance, transparent validation, privacy-respecting implementation, liberty for the owners, and trustworthiness for all. More details can be found here [7] . Project scope Task 1. Enable Capsule Updates in coreboot This task aims to enhance the coreboot framework by adding support for UEFI Capsule Update. Enable memory access above 4GB Modify coreboot to operate in 64-bit mode and enable access to memory above the 4GB limit. Parse capsule location from UEFI variables in coreboot Implement a mechanism for coreboot to identify the memory location of the capsule images from drivers to UEFI variables. This milestone ensures accurate retrieval of capsule images by coreboot. Gather capsules into one region Rewrite the existing capsule coalescing logic to consolidate all firmware update capsules into a single memory region. Reserve memory containing capsules and pass it to the payload Implement the necessary changes in coreboot to reserve the memory region containing the capsules. Pass this information to the UEFI payload using the Hand-Off Block (HOB) data structure. Add SMI handler for flashing firmware updates Implement a handler able of writing to SPI flash. Similar handler already exists, but it is limited to SMMSTORE region, used to implement secure UEFI variables. New handler would allow to overwrite whole BIOS image, so it must not be enabled unless a valid capsule update is present. Task 2. Enable capsule updates in coreboot EDK II UEFI Payload The UEFI payload integration task involves integrating the enhanced coreboot firmware with the UEFI system. Additionally, parsing the version reported by coreboot and incorporating it into the EFI System Resource Table (ESRT) ensures accurate tracking of system firmware updates. These integrations enhance firmware reliability, provide advanced update capabilities, and enable a seamless user experience. Implement PlatformFlashAccessLib leveraging coreboot SMI handler Create a library instance that enables flash access operations within the UEFI platform with the help of SMI handler implemented in coreboot. Modify FDF/DSC files and capsule processing Update the Firmware Descriptor (FDF) and Device Scope Configuration (DSC) files. Enable boot mode selection and invoke ProcessCapsules() at the necessary stages during the firmware update process. Parse version reported by coreboot for ESRT Extract coreboot version information and incorporate it into the EFI System Resource Table (ESRT) within UEFI, to reflect the updated firmware and prevent rolling back to earlier versions. Develop process for building capsules from coreboot.rom Establish a streamlined workflow to generate capsules containing the coreboot.rom image and automate the process where possible. Task 3. Test the solution on a hardware In this task, the UEFI Capsule Update will be tested on the hardware to ensure its proper functionality and compatibility. Verify feature using test signing keys Validate the CAPSULE_ENABLE feature using test signing keys before using product-specific signing keys. OS block booting verification Test a mechanism that prevents the operating system from booting until a reboot occurs after the firmware update process. The primary objective is to ensure that the system remains secure and stable after firmware updates are applied. Task 4. Secure Firmware Signing In this task the focus is on implementing secure firmware signing processes to ensure the integrity and authenticity of firmware updates. The use of OpenSSL utilities for generating signing keys enhances security, while the developed binary compilation procedure simplifies the signing process for end-users. Generate signing keys using OpenSSL utilities Utilize OpenSSL command line utilities to generate the necessary signing keys for the capsule update process. Develop binary compilation without using a private key This milestone involves creating a comprehensive procedure for users, outlining the process of signing binaries without the use of a private key, ensuring a consistent and efficient signing process. End-user documentation Create comprehensive documentation for end-users, including detailed instructions on how to perform firmware updates and utilize the provided features effectively. Task 5. Enhanced Boot Process with vboot A/B Support This task aims to establish a more secure, stable, and user-friendly firmware update process. The incorporation of the vboot A/B scheme will provide a reliable fallback in case of problematic updates, while the automated execution of the UX capsule will enhance the end-user experience during firmware updates. Add support for the vboot A/B scheme Enhance the firmware update mechanism to support the vboot A/B scheme, providing a fallback option in case of unstable updates. Automate the creation and execution of the UX capsule Use UX capsule to convey message to the user that the update is in progress. Because update takes significantly more time than normal boot, impatient user may think that the boot process is stuck and try to force a platform reboot, which in turn may end up with non-working platform. Task 6. Test and release UEFI Capsule Update for coreboot and EDK II Task 6 involves testing and release of firmware updates for both MSI PRO Z790-P and MSI PRO Z690-A DDR4/DDR5 platforms. The primary focus is to verify the successful update process, ensuring system stability and security after applying the new firmware update method. Test and publish release for MSI PRO Z790-P Verify the successful update process and ensure system stability and security after applying the new firmware update method. Test and publish release for MSI PRO Z690-A DDR4/DDR5 Verify the successful update process and ensure system stability and security after applying the new firmware update method. Task 7. Upstream of the UEFI Capsule Update for coreboot with EDK II in coreboot The primary objective is to merge the UEFI Capsule Update functionality directly into the coreboot codebase, ensuring its availability as part of the coreboot project and expanding the firmware update capabilities for coreboot-supported systems. The code implementing UEFI Capsule Update for coreboot with EDK II shall be upstreamed to the official coreboot repository at https://review.coreboot.org/. Task 8. Upstream of the UEFI Capsule Update for coreboot with EDK II in EDK II The goal is to ensure that the UEFI Capsule Update implementation becomes a part of the official codebase, contributing to the wider EDK II ecosystem and enhancing the firmware update capabilities for coreboot-supported systems. The code implementing UEFI Capsule Update for coreboot with EDK II shall be upstreamed to the official EDK II repository at https://github.com/tianocore/edk2. Compare your own project with existing or historical efforts 3mdeb's embedded systems developers are experienced engineers accustomed to firmware development on desktops. There are a few successfully enabled coreboot supported Dell machines that were enabled by 3mdeb and other platforms based on Intel FSP. By leveraging our knowledge and experience from the ESRT project, which plays a vital role within the operating system to initiate capsule updates at the system level, we bring valuable insights and advancements to the firmware update process. Through our contributions, we aim to promote open-source firmware adoption and facilitate a more robust and secure firmware update process, benefiting open-source firmware community and and ensuring a user-friendly and efficient firmware update experience for end-users. MSI Z690-A PRO DDR4 / DDR5: https://review.coreboot.org/c/coreboot/+/63463 Dell OptiPlex 7010/9010 SFF: https://review.coreboot.org/c/coreboot/+/40351 Dell Precision T1650: https://review.coreboot.org/c/coreboot/+/62212 Libretrend LT1000: https://review.coreboot.org/c/coreboot/+/30360 Protectli FW2B/FW4B: https://review.coreboot.org/c/coreboot/+/32076 Protectli FW6: https://review.coreboot.org/c/coreboot/+/33839 Fwupd for BSD: https://www.phoronix.com/news/FWUPD-To-The-BSDs EFI System Resource Table (ESRT): https://reviews.freebsd.org/rG24f398e7a153a05a7e94ae8dd623e2b6d28d94eb Significant technical challenges you expect to solve during the project The coreboot and EDK II firmware frameworks need to be modified to support UEFI capsule update methods. This integration requires understanding and implementing the UEFI specification, especially the EFI_FIRMWARE_MANAGEMENT_PROTOCOL, FMP capsule format, and EFI System Resource Table (ESRT). Adapting coreboot and EDK II to support these mechanisms will involve extensive code changes and ensuring compatibility with the UEFI standard. Solving these challenges will involve significant code modifications, rigorous testing, and an active collaboration with the coreboot and EDK II communities to ensure successful integration and smooth functionality. Ecosystem of the project Although 3mdeb will be responsible for the whole implementation and testing, anyone is also welcome to test, develop code, and report issues after the results will be published. For the project to be successful, the outcomes should be included in the upstream coreboot and edk2 projects for the benefit of the wider community. That is why we expect high level of engagement with communities of both of this projects at each stage of the project, to make sure the proposed solution can be accepted upstream. Review Further reviews and suggestions are welcome. You can do it in two ways: using Giscus on the bottom of this page contributing to this repository directly via Pull Request","title":"UEFI Capsule Update for coreboot with EDK II"},{"location":"projects/capsule-updates/#uefi-capsule-update-for-coreboot-with-edk-ii","text":"","title":"UEFI Capsule Update for coreboot with EDK II"},{"location":"projects/capsule-updates/#abstract","text":"The project, UEFI Capsule Update for coreboot with EDK II, aims to improve the firmware update process by integrating UEFI capsule update methods into coreboot with EDK II open-source firmware frameworks. UEFI capsule update is an industry-standard approach widely supported by hardware vendors, providing a secure and reliable method for delivering firmware updates. By adopting UEFI capsule update methods, the project aims to simplify the update process and enhance the user experience, providing a more secure and reliable approach compared to complex flashrom-based updates, which are still common in the open-source firmware distributions based on coreboot. Due to security measures, OS-level access to firmware is intentionally restricted, which in turn makes it increasingly challenging to apply firmware updates from the operating system. This limitation poses difficulties in utilizing traditional flashrom-based methods for firmware updates. The expected outcomes of the project include enhanced firmware update capabilities, a simplified user experience, heightened security, and enhanced compatibility, all achieved by seamlessly integrating with fwupd, a popular firmware update management tool for Linux systems.","title":"Abstract"},{"location":"projects/capsule-updates/#involvement-with-projects-or-organisations-relevant-to-this-project","text":"Relevant projects: coreboot [1] Dasharo compatible with MSI PRO Z690-A DDR4 (and the subsequent port for the DDR5 variant) [2] Dasharo compatible with Dell Optiplex [3] EDKII [4] Fwupd (LVFS) [5] U-Boot [6] 3mdeb has been a licensed provider of quality coreboot consulting services since 2016. We are well-known in the open-source community for maintaining th firmware of the PC Engines APU series platform since 2016, delivering high-quality firmware releases each month and providing technical support on PC Engines and OPNSense forums. Our contribution to the coreboot project reaches (as of 26th of July 2023): 319 individual patches merged to the official coreboot repository 33481 lines of code added 41097 lines of code removed Moreover, we constantly develop Dasharo, which is an open-source firmware distribution focusing on clean and simple code, long-term maintenance, transparent validation, privacy-respecting implementation, liberty for the owners, and trustworthiness for all. More details can be found here [7] .","title":"Involvement with projects or organisations relevant to this project"},{"location":"projects/capsule-updates/#project-scope","text":"Task 1. Enable Capsule Updates in coreboot This task aims to enhance the coreboot framework by adding support for UEFI Capsule Update. Enable memory access above 4GB Modify coreboot to operate in 64-bit mode and enable access to memory above the 4GB limit. Parse capsule location from UEFI variables in coreboot Implement a mechanism for coreboot to identify the memory location of the capsule images from drivers to UEFI variables. This milestone ensures accurate retrieval of capsule images by coreboot. Gather capsules into one region Rewrite the existing capsule coalescing logic to consolidate all firmware update capsules into a single memory region. Reserve memory containing capsules and pass it to the payload Implement the necessary changes in coreboot to reserve the memory region containing the capsules. Pass this information to the UEFI payload using the Hand-Off Block (HOB) data structure. Add SMI handler for flashing firmware updates Implement a handler able of writing to SPI flash. Similar handler already exists, but it is limited to SMMSTORE region, used to implement secure UEFI variables. New handler would allow to overwrite whole BIOS image, so it must not be enabled unless a valid capsule update is present. Task 2. Enable capsule updates in coreboot EDK II UEFI Payload The UEFI payload integration task involves integrating the enhanced coreboot firmware with the UEFI system. Additionally, parsing the version reported by coreboot and incorporating it into the EFI System Resource Table (ESRT) ensures accurate tracking of system firmware updates. These integrations enhance firmware reliability, provide advanced update capabilities, and enable a seamless user experience. Implement PlatformFlashAccessLib leveraging coreboot SMI handler Create a library instance that enables flash access operations within the UEFI platform with the help of SMI handler implemented in coreboot. Modify FDF/DSC files and capsule processing Update the Firmware Descriptor (FDF) and Device Scope Configuration (DSC) files. Enable boot mode selection and invoke ProcessCapsules() at the necessary stages during the firmware update process. Parse version reported by coreboot for ESRT Extract coreboot version information and incorporate it into the EFI System Resource Table (ESRT) within UEFI, to reflect the updated firmware and prevent rolling back to earlier versions. Develop process for building capsules from coreboot.rom Establish a streamlined workflow to generate capsules containing the coreboot.rom image and automate the process where possible. Task 3. Test the solution on a hardware In this task, the UEFI Capsule Update will be tested on the hardware to ensure its proper functionality and compatibility. Verify feature using test signing keys Validate the CAPSULE_ENABLE feature using test signing keys before using product-specific signing keys. OS block booting verification Test a mechanism that prevents the operating system from booting until a reboot occurs after the firmware update process. The primary objective is to ensure that the system remains secure and stable after firmware updates are applied. Task 4. Secure Firmware Signing In this task the focus is on implementing secure firmware signing processes to ensure the integrity and authenticity of firmware updates. The use of OpenSSL utilities for generating signing keys enhances security, while the developed binary compilation procedure simplifies the signing process for end-users. Generate signing keys using OpenSSL utilities Utilize OpenSSL command line utilities to generate the necessary signing keys for the capsule update process. Develop binary compilation without using a private key This milestone involves creating a comprehensive procedure for users, outlining the process of signing binaries without the use of a private key, ensuring a consistent and efficient signing process. End-user documentation Create comprehensive documentation for end-users, including detailed instructions on how to perform firmware updates and utilize the provided features effectively. Task 5. Enhanced Boot Process with vboot A/B Support This task aims to establish a more secure, stable, and user-friendly firmware update process. The incorporation of the vboot A/B scheme will provide a reliable fallback in case of problematic updates, while the automated execution of the UX capsule will enhance the end-user experience during firmware updates. Add support for the vboot A/B scheme Enhance the firmware update mechanism to support the vboot A/B scheme, providing a fallback option in case of unstable updates. Automate the creation and execution of the UX capsule Use UX capsule to convey message to the user that the update is in progress. Because update takes significantly more time than normal boot, impatient user may think that the boot process is stuck and try to force a platform reboot, which in turn may end up with non-working platform. Task 6. Test and release UEFI Capsule Update for coreboot and EDK II Task 6 involves testing and release of firmware updates for both MSI PRO Z790-P and MSI PRO Z690-A DDR4/DDR5 platforms. The primary focus is to verify the successful update process, ensuring system stability and security after applying the new firmware update method. Test and publish release for MSI PRO Z790-P Verify the successful update process and ensure system stability and security after applying the new firmware update method. Test and publish release for MSI PRO Z690-A DDR4/DDR5 Verify the successful update process and ensure system stability and security after applying the new firmware update method. Task 7. Upstream of the UEFI Capsule Update for coreboot with EDK II in coreboot The primary objective is to merge the UEFI Capsule Update functionality directly into the coreboot codebase, ensuring its availability as part of the coreboot project and expanding the firmware update capabilities for coreboot-supported systems. The code implementing UEFI Capsule Update for coreboot with EDK II shall be upstreamed to the official coreboot repository at https://review.coreboot.org/. Task 8. Upstream of the UEFI Capsule Update for coreboot with EDK II in EDK II The goal is to ensure that the UEFI Capsule Update implementation becomes a part of the official codebase, contributing to the wider EDK II ecosystem and enhancing the firmware update capabilities for coreboot-supported systems. The code implementing UEFI Capsule Update for coreboot with EDK II shall be upstreamed to the official EDK II repository at https://github.com/tianocore/edk2.","title":"Project scope"},{"location":"projects/capsule-updates/#compare-your-own-project-with-existing-or-historical-efforts","text":"3mdeb's embedded systems developers are experienced engineers accustomed to firmware development on desktops. There are a few successfully enabled coreboot supported Dell machines that were enabled by 3mdeb and other platforms based on Intel FSP. By leveraging our knowledge and experience from the ESRT project, which plays a vital role within the operating system to initiate capsule updates at the system level, we bring valuable insights and advancements to the firmware update process. Through our contributions, we aim to promote open-source firmware adoption and facilitate a more robust and secure firmware update process, benefiting open-source firmware community and and ensuring a user-friendly and efficient firmware update experience for end-users. MSI Z690-A PRO DDR4 / DDR5: https://review.coreboot.org/c/coreboot/+/63463 Dell OptiPlex 7010/9010 SFF: https://review.coreboot.org/c/coreboot/+/40351 Dell Precision T1650: https://review.coreboot.org/c/coreboot/+/62212 Libretrend LT1000: https://review.coreboot.org/c/coreboot/+/30360 Protectli FW2B/FW4B: https://review.coreboot.org/c/coreboot/+/32076 Protectli FW6: https://review.coreboot.org/c/coreboot/+/33839 Fwupd for BSD: https://www.phoronix.com/news/FWUPD-To-The-BSDs EFI System Resource Table (ESRT): https://reviews.freebsd.org/rG24f398e7a153a05a7e94ae8dd623e2b6d28d94eb","title":"Compare your own project with existing or historical efforts"},{"location":"projects/capsule-updates/#significant-technical-challenges-you-expect-to-solve-during-the-project","text":"The coreboot and EDK II firmware frameworks need to be modified to support UEFI capsule update methods. This integration requires understanding and implementing the UEFI specification, especially the EFI_FIRMWARE_MANAGEMENT_PROTOCOL, FMP capsule format, and EFI System Resource Table (ESRT). Adapting coreboot and EDK II to support these mechanisms will involve extensive code changes and ensuring compatibility with the UEFI standard. Solving these challenges will involve significant code modifications, rigorous testing, and an active collaboration with the coreboot and EDK II communities to ensure successful integration and smooth functionality.","title":"Significant technical challenges you expect to solve during the project"},{"location":"projects/capsule-updates/#ecosystem-of-the-project","text":"Although 3mdeb will be responsible for the whole implementation and testing, anyone is also welcome to test, develop code, and report issues after the results will be published. For the project to be successful, the outcomes should be included in the upstream coreboot and edk2 projects for the benefit of the wider community. That is why we expect high level of engagement with communities of both of this projects at each stage of the project, to make sure the proposed solution can be accepted upstream.","title":"Ecosystem of the project"},{"location":"projects/capsule-updates/#review","text":"Further reviews and suggestions are welcome. You can do it in two ways: using Giscus on the bottom of this page contributing to this repository directly via Pull Request","title":"Review"},{"location":"projects/trenchboot-aem-v2/","text":"Trenchboot as Anti Evil Maid Abstract As Qubes OS users, promoters, and developers, we understand how essential it is to be aware of the latest developments in maintaining the security of your favorite operating system. We're excited to share our plans to integrate the TrenchBoot Project into Qubes OS's new Anti-Evil Maid (AEM) implementation. As you may know, traditional firmware security measures like UEFI Secure Boot and measured boot, even with a Static Root of Trust (SRT), may only sometimes be enough to ensure a completely secure environment for your operating system. Compromised firmware may allow for the injection of malicious software into your system, making it difficult to detect. To overcome these limitations, many silicon vendors have started implementing Dynamic Root of Trust (DRT) technologies to establish a secure environment for operating system launch and integrity measurements. We're excited to take advantage of these advancements through integration with the TrenchBoot Project . The usage of DRT technologies like Intel Trusted Execution Technology (TXT) or AMD Secure Startup becomes more and more significant, for example, Dynamic Root of Trust for Measurement (DRTM) requirements of Microsoft Secured Core PCs . In open-source projects, DRTM hasn't found its place yet, but that gradually changes. The demand on having firmware independent Roots of Trust is increasing and projects that satisfy this demand are growing, for instance, TrenchBoot . TrenchBoot is a framework that allows individuals and projects to build security engines to perform launch integrity actions for their systems. The framework builds upon Boot Integrity Technologies (BITs) that establish one or more Roots of Trust (RoT) from which a degree of confidence that integrity actions were not subverted is derived. The project has grown a lot thanks to the previous NLnet NGI0 PET grant and now it looks for further expansion into extensive use of the DRT technologies in open-source and security-oriented operating systems like Qubes OS . Qubes OS Anti Evil Maid (AEM) software heavily depends on the availability of the DRTM technologies to prevent the Evil Maid attacks . However, the project hasn't evolved much since the beginning of 2018 and froze on the support of TPM 1.2 with Intel TXT in legacy boot mode (BIOS). This effectively limits the usage of this security software to older Intel machines only. TPM 1.2 implemented SHA1 hashing algorithm which is nowadays considered weak in the era of forever-increasing computer performance and quantum computing. The solution to this problem comes with a newer TPM 2.0 with more agile cryptographic algorithms and SHA256 implementation by default. Qubes OS AEM software suffers from the following: Lack of TPM 2.0 support to handle more secure hashes and safer design of the TPM firmware according to a newer specification. Qubes OS AEM has never supported any AMD processors with AMD Secure Startup technology. Implementing AMD support would make a huge impact and broaden the usage of DRTM technologies. The initial AEM implementation relied on the Trusted Boot project , Intel's reference implementation of Intel TXT. It had never any plans to support AMD processors. TrenchBoot is filling this gap supporting both Intel and AMD hardware which makes it an ideal target to replace Trusted Boot in Qubes OS AEM implementation. Furthermore, the project grant would be used to implement the missing pieces in the Qubes OS AEM software to cover the AMD and Intel support for both TPM 1.2 and TPM 2.0. Compare your own project with existing or historical efforts 3mdeb is a licensed provider for quality coreboot consulting services for 7 years. We are well-known in the open-source community for maintaining firmware of the PC Engines APU series platform for over 7-years. Delivering high-quality firmware releases each month and providing technical support on PC Engines and OPNSense forums. 3mdeb embedded systems developers are experienced engineers accustomed to operating systems development. Our developers have contributed to the fwupd support for Qubes OS . 3mdeb is also regularly co-organizing mini-conference events with Qubes OS maintainer Marek Marczykowski-G\u00f3recki where various topics related to Qubes OS security are discussed. Among them, the Anti Evil Maid was frequently presented by 3mdeb engineers: Anti Evil Maid for Intel coreboot-based platform Anti Evil Maid for modern AMD UEFI-based platform 3mdeb, with financial support from Qubes OS, developed a proof of concept replacing Trusted Boot with TrenchBoot on Intel hardware with TPM 1.2. Qubes OS and 3mdeb already tested a new solution with Qubes OS Anti Evil Maid, which is available for community use. The result of this solution can be seen in the published blog post that concludes the first phase of integrating TrenchBoot Anti Evil Maid for Qubes OS. The numbering of the next phases of the project will commence with number 2 in order to maintain consistency with the work already completed in phase 1 . The following application describes the remaining work required to have production quality adoption in one of the most popular secure operating system on the market. What are the significant technical challenges you expect to solve First of all Qubes OS AEM software consists of software packages providing Trusted Boot and the Qubes OS TPM scripts . These software packages would need to replace the Trusted Boot with TrenchBoot supported GRUB2 and Xen. Secondly, the TPM scripts require adding support for TPM 2.0 equivalent functionality. AEM requires access to non-volatile RAM inside TPM which is defined differently in the TPM 2.0 specification compared to TPM 1.2. Another challenge would be to update the TrenchBoot components for AMD platforms to the recent boot protocol, which will allow AMD platforms to take advantage of the QubesOS AEM feature, and TrenchBoot. Requested support Phase 2 - TPM 2.0 support in Qubes OS AEM (Intel hardware): Implement support for TPM 2.0 module in Xen Required to measure Dom0 kernel and initial ram disk before they are executed. Implement support for TPM 2.0 event log in Xen Required to log the Dom0 kernel and initial ram disk hashes to the TPM event log. The event log could be used for future system attestation. Implement parallel CPU cores bring-up for DRTM launch Currently the CPU cores are being woken up in parallel, but later they are hacked to be waiting in a queue. If any interrupt would come at that time, it could be a serious danger. It has to be fixed as soon as possible, as required by Intel TXT specification. Integrate TPM 2.0 software stack into Qubes OS Dom0 Extend the AEM scripts to detect TPM version on the platform While AEM fully supports TPM 1.2 there is no support for TPM 2.0 at all. When the TPM family is determined the script should use the appropriate software stack for given TPM. The task implements the AEM TPM 1.2 equivalent functionalities using TPM 2.0 software stack and as a result allowing the use of TPM 2.0 with Qubes OS AEM. It will require implementing the access to TPM 2.0 NVRAM, sealing and unsealing the secret data and generating TOTP. Extend the AEM scripts to use appropriate software stack for TPM 2.0 Currently, only TPM 1.2 is supported in Qubes OS AEM service code. The 3 items above will ensure the necessary software for TPM 2.0 is available and AEM scripts executed early from the initrd can detect which TPM family is present on the platform and use appropriate software stack and functions. TPM 1.2 and TPM 2.0 software stacks are not compatible so the scripts themselves must use proper API for given TPM and its respective software stack. Update Qubes OS AEM documentation Test the solution on Intel hardware with TPM 1.2 and 2.0 using legacy boot mode Phase 3 - Update to the newest TrenchBoot boot protocol: Code rebase onto the most recent work implementing Secure Launch protocol being upstreamed to Linux and GRUB The current state of TrenchBoot support has diverged with what was developed for QubesOS AEM for Intel hardware with TPM 1.2. The task aims to update the work and align with the TrenchBoot boot protocol being upstreamed to GRUB and Linux kernel. Xen shall take similar approach as Linux kernel in terms of DRTM launch. Test the solution on Intel hardware with TPM 1.2 and TPM 2.0 using legacy boot mode Phase 4 - AMD support for Qubes OS AEM with TrenchBoot: Update the Secure Kernel Loader (formerly LandingZone) package support for QubesOS Since the initial work done by 3mdeb engineers for AMD AEM in Qubes OS a lot of time has passed and Secure Kernel Loader - SKL (formerly Landing Zone) has improved a lot and added new features. SKL is an open-source module written by TrenchBoot developers required by AMD Secure Startup technology to perform DRTM launch. The task aims to refresh the previous work and update the SKL package for Qubes OS to the newest revision. TrenchBoot Secure Kernel Loader (SKL) improvements for AMD server CPUs with multiple nodes While SKL was extensively tested on System on Chip and single CPU platforms, it was not much tested on workstation/server segment CPUs which are more complex. For example one server CPU package may contain two independent CPUs inside called nodes. Each node will enable protection on the SKL during DRTM execution. This protection has to be disabled on each node when TrenchBoot DRTM tasks are done. The task implements the correct support for server CPUs in TrenchBoot SKL. Update TrenchBoot boot protocol for AMD in GRUB2 Some work to implement TrenchBoot support for Qubes OS on AMD hardware has been done. GRUB2 with TrenchBoot support has been added to Qubes building system on 3mdeb fork . The task aims to update the work and align with the TrenchBoot boot protocol being upstreamed to GRUB2 and Linux kernel. Update TrenchBoot boot protocol for AMD in Secure Kernel Loader The task aims to update the TrenchBoot boot protocol for AMD platforms in Secure Kernel Loader and align with the TrenchBoot boot protocol being upstreamed to GRUB2 and Linux kernel. Test the solution on AMD hardware with TPM 2.0 and TPM 1.2 with legacy boot mode Projects or organizations relevant to this project before? Qubes OS Xen Hypervisor GNU GRUB TrenchBoot Invisible Things Lab Apertus Solutions Oracle 3mdeb The ecosystem of the project 3mdeb has a good relationship with the maintainers of relevant projects which will participate in review of the work: Marek Marczykowski-G\u00f3recki (Invisible Things Lab CTO) - Qubes OS maintainer Andrew Cooper (Citrix) - Xen Hypervisor Maintainer Daniel Kiper (Oracle) - GRUB2 Maintainer Daniel Smith (Apertus Solutions) - TrenchBoot founder and maintainer Review Further reviews and suggestions are welcome. You can do it in two ways: using Giscus on the bottom of this page contributing to this repository directly via Pull Request","title":"TrenchBoot Anti Evil Maid (current plan - v2)"},{"location":"projects/trenchboot-aem-v2/#trenchboot-as-anti-evil-maid","text":"","title":"Trenchboot as Anti Evil Maid"},{"location":"projects/trenchboot-aem-v2/#abstract","text":"As Qubes OS users, promoters, and developers, we understand how essential it is to be aware of the latest developments in maintaining the security of your favorite operating system. We're excited to share our plans to integrate the TrenchBoot Project into Qubes OS's new Anti-Evil Maid (AEM) implementation. As you may know, traditional firmware security measures like UEFI Secure Boot and measured boot, even with a Static Root of Trust (SRT), may only sometimes be enough to ensure a completely secure environment for your operating system. Compromised firmware may allow for the injection of malicious software into your system, making it difficult to detect. To overcome these limitations, many silicon vendors have started implementing Dynamic Root of Trust (DRT) technologies to establish a secure environment for operating system launch and integrity measurements. We're excited to take advantage of these advancements through integration with the TrenchBoot Project . The usage of DRT technologies like Intel Trusted Execution Technology (TXT) or AMD Secure Startup becomes more and more significant, for example, Dynamic Root of Trust for Measurement (DRTM) requirements of Microsoft Secured Core PCs . In open-source projects, DRTM hasn't found its place yet, but that gradually changes. The demand on having firmware independent Roots of Trust is increasing and projects that satisfy this demand are growing, for instance, TrenchBoot . TrenchBoot is a framework that allows individuals and projects to build security engines to perform launch integrity actions for their systems. The framework builds upon Boot Integrity Technologies (BITs) that establish one or more Roots of Trust (RoT) from which a degree of confidence that integrity actions were not subverted is derived. The project has grown a lot thanks to the previous NLnet NGI0 PET grant and now it looks for further expansion into extensive use of the DRT technologies in open-source and security-oriented operating systems like Qubes OS . Qubes OS Anti Evil Maid (AEM) software heavily depends on the availability of the DRTM technologies to prevent the Evil Maid attacks . However, the project hasn't evolved much since the beginning of 2018 and froze on the support of TPM 1.2 with Intel TXT in legacy boot mode (BIOS). This effectively limits the usage of this security software to older Intel machines only. TPM 1.2 implemented SHA1 hashing algorithm which is nowadays considered weak in the era of forever-increasing computer performance and quantum computing. The solution to this problem comes with a newer TPM 2.0 with more agile cryptographic algorithms and SHA256 implementation by default. Qubes OS AEM software suffers from the following: Lack of TPM 2.0 support to handle more secure hashes and safer design of the TPM firmware according to a newer specification. Qubes OS AEM has never supported any AMD processors with AMD Secure Startup technology. Implementing AMD support would make a huge impact and broaden the usage of DRTM technologies. The initial AEM implementation relied on the Trusted Boot project , Intel's reference implementation of Intel TXT. It had never any plans to support AMD processors. TrenchBoot is filling this gap supporting both Intel and AMD hardware which makes it an ideal target to replace Trusted Boot in Qubes OS AEM implementation. Furthermore, the project grant would be used to implement the missing pieces in the Qubes OS AEM software to cover the AMD and Intel support for both TPM 1.2 and TPM 2.0.","title":"Abstract"},{"location":"projects/trenchboot-aem-v2/#compare-your-own-project-with-existing-or-historical-efforts","text":"3mdeb is a licensed provider for quality coreboot consulting services for 7 years. We are well-known in the open-source community for maintaining firmware of the PC Engines APU series platform for over 7-years. Delivering high-quality firmware releases each month and providing technical support on PC Engines and OPNSense forums. 3mdeb embedded systems developers are experienced engineers accustomed to operating systems development. Our developers have contributed to the fwupd support for Qubes OS . 3mdeb is also regularly co-organizing mini-conference events with Qubes OS maintainer Marek Marczykowski-G\u00f3recki where various topics related to Qubes OS security are discussed. Among them, the Anti Evil Maid was frequently presented by 3mdeb engineers: Anti Evil Maid for Intel coreboot-based platform Anti Evil Maid for modern AMD UEFI-based platform 3mdeb, with financial support from Qubes OS, developed a proof of concept replacing Trusted Boot with TrenchBoot on Intel hardware with TPM 1.2. Qubes OS and 3mdeb already tested a new solution with Qubes OS Anti Evil Maid, which is available for community use. The result of this solution can be seen in the published blog post that concludes the first phase of integrating TrenchBoot Anti Evil Maid for Qubes OS. The numbering of the next phases of the project will commence with number 2 in order to maintain consistency with the work already completed in phase 1 . The following application describes the remaining work required to have production quality adoption in one of the most popular secure operating system on the market.","title":"Compare your own project with existing or historical efforts"},{"location":"projects/trenchboot-aem-v2/#what-are-the-significant-technical-challenges-you-expect-to-solve","text":"First of all Qubes OS AEM software consists of software packages providing Trusted Boot and the Qubes OS TPM scripts . These software packages would need to replace the Trusted Boot with TrenchBoot supported GRUB2 and Xen. Secondly, the TPM scripts require adding support for TPM 2.0 equivalent functionality. AEM requires access to non-volatile RAM inside TPM which is defined differently in the TPM 2.0 specification compared to TPM 1.2. Another challenge would be to update the TrenchBoot components for AMD platforms to the recent boot protocol, which will allow AMD platforms to take advantage of the QubesOS AEM feature, and TrenchBoot.","title":"What are the significant technical challenges you expect to solve"},{"location":"projects/trenchboot-aem-v2/#requested-support","text":"Phase 2 - TPM 2.0 support in Qubes OS AEM (Intel hardware): Implement support for TPM 2.0 module in Xen Required to measure Dom0 kernel and initial ram disk before they are executed. Implement support for TPM 2.0 event log in Xen Required to log the Dom0 kernel and initial ram disk hashes to the TPM event log. The event log could be used for future system attestation. Implement parallel CPU cores bring-up for DRTM launch Currently the CPU cores are being woken up in parallel, but later they are hacked to be waiting in a queue. If any interrupt would come at that time, it could be a serious danger. It has to be fixed as soon as possible, as required by Intel TXT specification. Integrate TPM 2.0 software stack into Qubes OS Dom0 Extend the AEM scripts to detect TPM version on the platform While AEM fully supports TPM 1.2 there is no support for TPM 2.0 at all. When the TPM family is determined the script should use the appropriate software stack for given TPM. The task implements the AEM TPM 1.2 equivalent functionalities using TPM 2.0 software stack and as a result allowing the use of TPM 2.0 with Qubes OS AEM. It will require implementing the access to TPM 2.0 NVRAM, sealing and unsealing the secret data and generating TOTP. Extend the AEM scripts to use appropriate software stack for TPM 2.0 Currently, only TPM 1.2 is supported in Qubes OS AEM service code. The 3 items above will ensure the necessary software for TPM 2.0 is available and AEM scripts executed early from the initrd can detect which TPM family is present on the platform and use appropriate software stack and functions. TPM 1.2 and TPM 2.0 software stacks are not compatible so the scripts themselves must use proper API for given TPM and its respective software stack. Update Qubes OS AEM documentation Test the solution on Intel hardware with TPM 1.2 and 2.0 using legacy boot mode Phase 3 - Update to the newest TrenchBoot boot protocol: Code rebase onto the most recent work implementing Secure Launch protocol being upstreamed to Linux and GRUB The current state of TrenchBoot support has diverged with what was developed for QubesOS AEM for Intel hardware with TPM 1.2. The task aims to update the work and align with the TrenchBoot boot protocol being upstreamed to GRUB and Linux kernel. Xen shall take similar approach as Linux kernel in terms of DRTM launch. Test the solution on Intel hardware with TPM 1.2 and TPM 2.0 using legacy boot mode Phase 4 - AMD support for Qubes OS AEM with TrenchBoot: Update the Secure Kernel Loader (formerly LandingZone) package support for QubesOS Since the initial work done by 3mdeb engineers for AMD AEM in Qubes OS a lot of time has passed and Secure Kernel Loader - SKL (formerly Landing Zone) has improved a lot and added new features. SKL is an open-source module written by TrenchBoot developers required by AMD Secure Startup technology to perform DRTM launch. The task aims to refresh the previous work and update the SKL package for Qubes OS to the newest revision. TrenchBoot Secure Kernel Loader (SKL) improvements for AMD server CPUs with multiple nodes While SKL was extensively tested on System on Chip and single CPU platforms, it was not much tested on workstation/server segment CPUs which are more complex. For example one server CPU package may contain two independent CPUs inside called nodes. Each node will enable protection on the SKL during DRTM execution. This protection has to be disabled on each node when TrenchBoot DRTM tasks are done. The task implements the correct support for server CPUs in TrenchBoot SKL. Update TrenchBoot boot protocol for AMD in GRUB2 Some work to implement TrenchBoot support for Qubes OS on AMD hardware has been done. GRUB2 with TrenchBoot support has been added to Qubes building system on 3mdeb fork . The task aims to update the work and align with the TrenchBoot boot protocol being upstreamed to GRUB2 and Linux kernel. Update TrenchBoot boot protocol for AMD in Secure Kernel Loader The task aims to update the TrenchBoot boot protocol for AMD platforms in Secure Kernel Loader and align with the TrenchBoot boot protocol being upstreamed to GRUB2 and Linux kernel. Test the solution on AMD hardware with TPM 2.0 and TPM 1.2 with legacy boot mode","title":"Requested support"},{"location":"projects/trenchboot-aem-v2/#projects-or-organizations-relevant-to-this-project-before","text":"Qubes OS Xen Hypervisor GNU GRUB TrenchBoot Invisible Things Lab Apertus Solutions Oracle 3mdeb","title":"Projects or organizations relevant to this project before?"},{"location":"projects/trenchboot-aem-v2/#the-ecosystem-of-the-project","text":"3mdeb has a good relationship with the maintainers of relevant projects which will participate in review of the work: Marek Marczykowski-G\u00f3recki (Invisible Things Lab CTO) - Qubes OS maintainer Andrew Cooper (Citrix) - Xen Hypervisor Maintainer Daniel Kiper (Oracle) - GRUB2 Maintainer Daniel Smith (Apertus Solutions) - TrenchBoot founder and maintainer","title":"The ecosystem of the project"},{"location":"projects/trenchboot-aem-v2/#review","text":"Further reviews and suggestions are welcome. You can do it in two ways: using Giscus on the bottom of this page contributing to this repository directly via Pull Request","title":"Review"},{"location":"projects/trenchboot-aem/","text":"Trenchboot as Anti Evil Maid This is out of date and left here as a reference. Please use the current version of the plan for up-to-date information Abstract The firmware is the heart of the security of a given system and should always be up-to-date to maintain the computer's security. However, being up to date does not prevent the firmware vulnerabilities from appearing. The Static Root of Trust (SRT) like Unified Extensible Firmware Interface (UEFI) Secure Boot and measured boot provided by the firmware is not always sufficient to establish a secure environment for an operating system. If the firmware is compromised, it could inject malicious software into operating system components and prevent the machine owner from detecting it. Silicon vendors implement alternative technologies to establish a Dynamic Root of Trust (DRT) to provide a secure environment for operating system launch and integrity measurements. Either from SRT or DRT, these integrity measurements can be used for operating system attestation. However, DRT technologies are designed to provide the ability to establish a secure environment for integrity measurements at any arbitrary point of time instead of relying on the firmware, which requires machine reset to establish the aforementioned secure environment. The usage of DRT technologies like Intel Trusted Execution Technology (TXT) or AMD Secure Startup becomes more and more significant, for example, Dynamic Root of Trust for Measurement (DRTM) requirements of Microsoft Secured Core PCs . DRTM hasn't found its place in open-source projects yet, but that gradually changes. The demand on having firmware independent Roots of Trust is increasing, and projects that satisfy this demand are growing, for instance, TrenchBoot . TrenchBoot is a framework that allows individuals and projects to build security engines to perform launch integrity actions for their systems. The framework builds upon Boot Integrity Technologies (BITs) that establish one or more Roots of Trust (RoT) from which a degree of confidence that integrity actions were not subverted is derived. The project has grown a lot thanks to the previous NLnet NGI0 PET grant and now it looks for further expansion into extensive use of the DRT technologies in open-source and security-oriented operating systems like Qubes OS . Qubes OS Anti Evil Maid (AEM) software heavily depends on the availability of the DRTM technologies to prevent the Evil Maid attacks . However, the project hasn't evolved much since the beginning of 2018 and froze on the support of TPM 1.2 with Intel TXT in legacy boot mode (BIOS). Because of that, the usage of this security software is effectively limited to older Intel machines only. TPM 1.2 implemented SHA1 hashing algorithm, which is nowadays considered weak in the era of forever-increasing computer performance and quantum computing. The solution to this problem comes with a newer TPM 2.0 with more agile cryptographic algorithms and SHA256 implementation by default. Qubes OS AEM software suffers from the following: Lack of TPM 2.0 support to handle more secure hashes and safer design of the TPM firmware according to a newer specification. Lack of UEFI mode support. All modern systems boot in UEFI mode only. Legacy boot modes are being deprecated and dropped from the PC firmware. The AEM usage is not possible on most if not all modern machines. Qubes OS AEM has never supported AMD processors with AMD Secure Startup technology. Implementing AMD support would make a significant impact and broaden the usage of DRTM technologies. The initial AEM implementation relied on the Trusted Boot , Intel's reference implementation of Intel TXT. It never had any plans to support AMD processors. TrenchBoot is filling this gap, supporting both Intel and AMD hardware which makes it an ideal target to replace Trusted Boot in Qubes OS AEM implementation. Furthermore, the project grant would be used to implement the missing pieces in the Qubes OS AEM software to cover the AMD and Intel support for both TPM 1.2 and TPM 2.0. Compare your own project with existing or historical efforts 3mdeb is a licensed provider for quality coreboot consulting services since 2016. We are well-known in the open-source community for maintaining the firmware of the PC Engines APU series platform since 2016. Delivering high-quality firmware releases each month and providing technical support on PC Engines and OPNSense forums. 3mdeb embedded systems developers are experienced engineers accustomed to operating systems development. Our developers have contributed to the fwupd support for Qubes OS . 3mdeb is also regularly co-organizing mini-conference events with Qubes OS maintainer Marek Marczykowski-G\u00f3recki, where various topics related to Qubes OS security are discussed. Among them, the Anti Evil Maid was frequently presented by 3mdeb engineers: Anti Evil Maid for Intel coreboot-based platform Anti Evil Maid for modern AMD UEFI-based platform A similar approach was already tried by Assured Information Security (AIS) to boot Xen in UEFI mode with Intel TXT DRTM technology . However, this is only a tiny portion of the work covered by our proposal. Additionally, Qubes OS does not launch using Xen.efi like in the AIS work but uses Multiboot2 protocol with GRUB2 instead, making this approach unusable. Moreover, the Xen.efi approach is much more complex and assumes usage of Trusted Boot, limiting the feature to Intel hardware only. What are the significant technical challenges you expect to solve First of all, Qubes OS AEM software consists of software packages providing Trusted Boot and the Qubes OS TPM scripts . These software packages would need to replace the Trusted Boot with TrenchBoot supported GRUB2 and Xen. Secondly, the TPM scripts require adding support for TPM 2.0 equivalent functionality. AEM requires access to non-volatile RAM inside TPM, which is defined differently in the TPM 2.0 specification compared to TPM 1.2. Another challenge would be to make Xen possible to boot in UEFI boot mode without Boot Services defined in UEFI specification. Boot Services are a set of functions exposed in UEFI structures that are used to help with handling the boot process. However, the main principle of DRTM technologies is to not depend on any external code that is not a part of the operating system software to be executed after DRTM. UEFI Boot Services are a part of the firmware of which DRTM tries to be independent. The whole security concept of DRTM depends on cutting the ties with firmware. Thus the work includes implementing the capability in Xen not to use the UEFI Boot Services, which GRUB2 would terminate before DRTM is executed. Xen also contains an option not to use the UEFI Runtime Services. Runtime Services is a set of functions available throughout the whole machine lifetime, which means some firmware functionalities are available even when the operating system is launched. Removing the Boot Services from Xen brings certain drawbacks to the system because the Boot Services hold essential information like memory map, TPM event log, graphics framebuffer, etc. This information must be extracted by GRUB before Boot Services are terminated and passed to the Xen. The proposed solution is to pass this information via the Multiboot2 tags defined in the specification for this particular Boot Services information. Another challenge would be to get the work merged in the upstream repositories. It would ensure the long-term support and maintenance of the solution and availability. Providing software packages to be used out of the box is crucial for technology availability. Requested support Phase 1: TrenchBoot Intel TXT and TPM 1.2 support Add TPM 1.2 support for Intel TXT in TrenchBoot GRUB2 The TrenchBoot support hasn't been implemented and verified with TPM 1.2 on Intel TXT path. This requirement ensures that the TPM 1.2 is also supported for older Intel hardware with Intel TXT. Xen Secure Launch - Intel TXT support in Xen for TrenchBoot Due to the requirements of Intel TXT and how it is utilized, it is impossible to use the Xen boot protocols defined in the UEFI or Multiboot2 specifications. This task aims to create a custom Intel TXT entry point for Xen, which would hand off to the standard Multiboot2 entry point and enable the direct launch of Xen by GRUB via DRTM on Intel hardware. Additionally, there is no support for launching Xen with Intel TXT other than Trusted Boot. It has to be ported from Trusted Boot specific code: constructing MLE header waking up APs restoring MTRRs reserving the TXT memory reenabling SMIs handling TXT shutdown and S3 resume/suspend TPM event log finding Test the solution on Intel hardware with TPM 1.2 with legacy boot mode Phase 2 - Qubes OS AEM TPM 2.0 support: Extend the AEM scripts to detect TPM version on the platform As TPM 1.2 and TPM 2.0 use different software stacks and tools, it is necessary to distinguish the TPM module family and use the appropriate software. The task will implement the logic to distinguish the TPM families. Extend the AEM scripts to use the appropriate software stack for TPM 2.0 While AEM fully supports TPM 1.2, there is no support for TPM 2.0 at all. When the TPM family is determined, the script should use the appropriate software stack for the given TPM. The task implements the AEM TPM 1.2 equivalent functionalities using TPM 2.0 software stack and as a result allowing the use of TPM 2.0 with Qubes OS AEM. It will require implementing the access to TPM 2.0 NVRAM, sealing and unsealing the secret data, and generating TOTP. Test the solution on Intel hardware with TPM 2.0 with legacy boot mode Phase 3 - Qubes OS AEM AMD support: Rebase and refresh TrenchBoot GRUB2 for QubesOS Some work to implement TrenchBoot support for Qubes OS on AMD hardware has been done. GRUB2 with TrenchBoot support has been added to Qubes building system on 3mdeb fork The task aims to refresh the work and align with the upstream Qubes OS GRUB2 repository Clean up the Secure Kernel Loader (formerly LandingZone) package support for QubesOS Since the initial work done by 3mdeb engineers for AMD AEM in Qubes OS, a lot of time has passed, and Secure Kernel Loader - SKL (formerly Landing Zone) has improved a lot and added new features. SKL is an open-source module written by TrenchBoot developers required by AMD Secure Startup technology to perform DRTM launch. The task aims to refresh the previous work and update the SKL package for Qubes OS to the newest revision. TrenchBoot Secure Kernel Loader (SKL) improvements for AMD server CPUs with multiple nodes While SKL was extensively tested on System on Chip and single CPU platforms, it was not tested on workstation/server segment CPUs which are more complex. For example, one server CPU package may contain two independent CPUs inside called nodes. Each node will enable protection on the SKL during DRTM execution, and this protection must be disabled on each node when TrenchBoot DRTM tasks are done. The task implements the correct support for server CPUs in TrenchBoot SKL. Test the solution on AMD hardware with TPM 2.0 and TPM 1.2 with legacy boot mode Phase 4 - Xen UEFI boot mode with DRTM: TrenchBoot support for UEFI boot mode for AMD in GRUB While TrenchBoot DRTM was extensively tested on Intel hardware with UEFI firmware and Linux, it was not on AMD platforms. This task ensures that DRTM works with UEFI boot mode on AMD processors in GRUB2 and Linux without UEFI Boot Services. TrenchBoot support for UEFI boot mode in Xen When UEFI boot mode with TrenchBoot is working with GRUB2 and Linux, all that is missing to fully support AMD and Intel hardware with Qubes OS AEM is the Xen support to boot in UEFI mode without Boot Services. This requires a significant amount of work to ensure that all information that Xen would obtain from UEFI Boot Services would still be available. The information has to be passed by GRUB2 to Xen via Multiboot2 protocol: EFI memory map Framebuffer information PCI devices information with their option ROMs Additionally \"EFI boot services not terminated\" Multiboot2 tag must not be passed to Xen by GRUB2 on DRTM launch when GRUB2 will terminate Boot Services. Xen should detect such situations and act according to the state of Boot Services. Xen will be implemented to: parse the EFI memory map, framebuffer information, and PCI devices information passed by GRUB2 do not expose the \"EFI boot services\" Multiboot2 tag indicating that Xen can be executed without UEFI Boot Services presence allocate the memory space for the trampoline used to launch other processors or use the allocation done by GRUB2 if necessary do not go error path when Boot Services are not present and skip all calls to UEFI Boot Services by using the information provided by GRUB2 Test the solution on AMD and Intel hardware with TPM 2.0 and TPM 1.2 with legacy and UEFI boot mode Projects or organizations relevant to this project before? Qubes OS Xen Hypervisor GNU GRUB TrenchBoot Invisible Things Lab Apertus Solutions Oracle 3mdeb The ecosystem of the project 3mdeb has a good relationship with the maintainers of relevant projects which will participate in the review of the work: Marek Marczykowski-G\u00f3recki (Invisible Things Lab CTO) - Qubes OS maintainer Andrew Cooper (Citrix) - Xen Hypervisor Maintainer Daniel Kiper (Oracle) - GRUB2 Maintainer Daniel Smith (Apertus Solutions) - TrenchBoot founder and maintainer Review Further reviews and suggestions are welcome. You can do it in two ways: using Giscus on the bottom of this page contributing to this repository directly via Pull Request","title":"TrenchBoot Anti Evil Maid (previoius plan - v1)"},{"location":"projects/trenchboot-aem/#trenchboot-as-anti-evil-maid","text":"This is out of date and left here as a reference. Please use the current version of the plan for up-to-date information","title":"Trenchboot as Anti Evil Maid"},{"location":"projects/trenchboot-aem/#abstract","text":"The firmware is the heart of the security of a given system and should always be up-to-date to maintain the computer's security. However, being up to date does not prevent the firmware vulnerabilities from appearing. The Static Root of Trust (SRT) like Unified Extensible Firmware Interface (UEFI) Secure Boot and measured boot provided by the firmware is not always sufficient to establish a secure environment for an operating system. If the firmware is compromised, it could inject malicious software into operating system components and prevent the machine owner from detecting it. Silicon vendors implement alternative technologies to establish a Dynamic Root of Trust (DRT) to provide a secure environment for operating system launch and integrity measurements. Either from SRT or DRT, these integrity measurements can be used for operating system attestation. However, DRT technologies are designed to provide the ability to establish a secure environment for integrity measurements at any arbitrary point of time instead of relying on the firmware, which requires machine reset to establish the aforementioned secure environment. The usage of DRT technologies like Intel Trusted Execution Technology (TXT) or AMD Secure Startup becomes more and more significant, for example, Dynamic Root of Trust for Measurement (DRTM) requirements of Microsoft Secured Core PCs . DRTM hasn't found its place in open-source projects yet, but that gradually changes. The demand on having firmware independent Roots of Trust is increasing, and projects that satisfy this demand are growing, for instance, TrenchBoot . TrenchBoot is a framework that allows individuals and projects to build security engines to perform launch integrity actions for their systems. The framework builds upon Boot Integrity Technologies (BITs) that establish one or more Roots of Trust (RoT) from which a degree of confidence that integrity actions were not subverted is derived. The project has grown a lot thanks to the previous NLnet NGI0 PET grant and now it looks for further expansion into extensive use of the DRT technologies in open-source and security-oriented operating systems like Qubes OS . Qubes OS Anti Evil Maid (AEM) software heavily depends on the availability of the DRTM technologies to prevent the Evil Maid attacks . However, the project hasn't evolved much since the beginning of 2018 and froze on the support of TPM 1.2 with Intel TXT in legacy boot mode (BIOS). Because of that, the usage of this security software is effectively limited to older Intel machines only. TPM 1.2 implemented SHA1 hashing algorithm, which is nowadays considered weak in the era of forever-increasing computer performance and quantum computing. The solution to this problem comes with a newer TPM 2.0 with more agile cryptographic algorithms and SHA256 implementation by default. Qubes OS AEM software suffers from the following: Lack of TPM 2.0 support to handle more secure hashes and safer design of the TPM firmware according to a newer specification. Lack of UEFI mode support. All modern systems boot in UEFI mode only. Legacy boot modes are being deprecated and dropped from the PC firmware. The AEM usage is not possible on most if not all modern machines. Qubes OS AEM has never supported AMD processors with AMD Secure Startup technology. Implementing AMD support would make a significant impact and broaden the usage of DRTM technologies. The initial AEM implementation relied on the Trusted Boot , Intel's reference implementation of Intel TXT. It never had any plans to support AMD processors. TrenchBoot is filling this gap, supporting both Intel and AMD hardware which makes it an ideal target to replace Trusted Boot in Qubes OS AEM implementation. Furthermore, the project grant would be used to implement the missing pieces in the Qubes OS AEM software to cover the AMD and Intel support for both TPM 1.2 and TPM 2.0.","title":"Abstract"},{"location":"projects/trenchboot-aem/#compare-your-own-project-with-existing-or-historical-efforts","text":"3mdeb is a licensed provider for quality coreboot consulting services since 2016. We are well-known in the open-source community for maintaining the firmware of the PC Engines APU series platform since 2016. Delivering high-quality firmware releases each month and providing technical support on PC Engines and OPNSense forums. 3mdeb embedded systems developers are experienced engineers accustomed to operating systems development. Our developers have contributed to the fwupd support for Qubes OS . 3mdeb is also regularly co-organizing mini-conference events with Qubes OS maintainer Marek Marczykowski-G\u00f3recki, where various topics related to Qubes OS security are discussed. Among them, the Anti Evil Maid was frequently presented by 3mdeb engineers: Anti Evil Maid for Intel coreboot-based platform Anti Evil Maid for modern AMD UEFI-based platform A similar approach was already tried by Assured Information Security (AIS) to boot Xen in UEFI mode with Intel TXT DRTM technology . However, this is only a tiny portion of the work covered by our proposal. Additionally, Qubes OS does not launch using Xen.efi like in the AIS work but uses Multiboot2 protocol with GRUB2 instead, making this approach unusable. Moreover, the Xen.efi approach is much more complex and assumes usage of Trusted Boot, limiting the feature to Intel hardware only.","title":"Compare your own project with existing or historical efforts"},{"location":"projects/trenchboot-aem/#what-are-the-significant-technical-challenges-you-expect-to-solve","text":"First of all, Qubes OS AEM software consists of software packages providing Trusted Boot and the Qubes OS TPM scripts . These software packages would need to replace the Trusted Boot with TrenchBoot supported GRUB2 and Xen. Secondly, the TPM scripts require adding support for TPM 2.0 equivalent functionality. AEM requires access to non-volatile RAM inside TPM, which is defined differently in the TPM 2.0 specification compared to TPM 1.2. Another challenge would be to make Xen possible to boot in UEFI boot mode without Boot Services defined in UEFI specification. Boot Services are a set of functions exposed in UEFI structures that are used to help with handling the boot process. However, the main principle of DRTM technologies is to not depend on any external code that is not a part of the operating system software to be executed after DRTM. UEFI Boot Services are a part of the firmware of which DRTM tries to be independent. The whole security concept of DRTM depends on cutting the ties with firmware. Thus the work includes implementing the capability in Xen not to use the UEFI Boot Services, which GRUB2 would terminate before DRTM is executed. Xen also contains an option not to use the UEFI Runtime Services. Runtime Services is a set of functions available throughout the whole machine lifetime, which means some firmware functionalities are available even when the operating system is launched. Removing the Boot Services from Xen brings certain drawbacks to the system because the Boot Services hold essential information like memory map, TPM event log, graphics framebuffer, etc. This information must be extracted by GRUB before Boot Services are terminated and passed to the Xen. The proposed solution is to pass this information via the Multiboot2 tags defined in the specification for this particular Boot Services information. Another challenge would be to get the work merged in the upstream repositories. It would ensure the long-term support and maintenance of the solution and availability. Providing software packages to be used out of the box is crucial for technology availability.","title":"What are the significant technical challenges you expect to solve"},{"location":"projects/trenchboot-aem/#requested-support","text":"Phase 1: TrenchBoot Intel TXT and TPM 1.2 support Add TPM 1.2 support for Intel TXT in TrenchBoot GRUB2 The TrenchBoot support hasn't been implemented and verified with TPM 1.2 on Intel TXT path. This requirement ensures that the TPM 1.2 is also supported for older Intel hardware with Intel TXT. Xen Secure Launch - Intel TXT support in Xen for TrenchBoot Due to the requirements of Intel TXT and how it is utilized, it is impossible to use the Xen boot protocols defined in the UEFI or Multiboot2 specifications. This task aims to create a custom Intel TXT entry point for Xen, which would hand off to the standard Multiboot2 entry point and enable the direct launch of Xen by GRUB via DRTM on Intel hardware. Additionally, there is no support for launching Xen with Intel TXT other than Trusted Boot. It has to be ported from Trusted Boot specific code: constructing MLE header waking up APs restoring MTRRs reserving the TXT memory reenabling SMIs handling TXT shutdown and S3 resume/suspend TPM event log finding Test the solution on Intel hardware with TPM 1.2 with legacy boot mode Phase 2 - Qubes OS AEM TPM 2.0 support: Extend the AEM scripts to detect TPM version on the platform As TPM 1.2 and TPM 2.0 use different software stacks and tools, it is necessary to distinguish the TPM module family and use the appropriate software. The task will implement the logic to distinguish the TPM families. Extend the AEM scripts to use the appropriate software stack for TPM 2.0 While AEM fully supports TPM 1.2, there is no support for TPM 2.0 at all. When the TPM family is determined, the script should use the appropriate software stack for the given TPM. The task implements the AEM TPM 1.2 equivalent functionalities using TPM 2.0 software stack and as a result allowing the use of TPM 2.0 with Qubes OS AEM. It will require implementing the access to TPM 2.0 NVRAM, sealing and unsealing the secret data, and generating TOTP. Test the solution on Intel hardware with TPM 2.0 with legacy boot mode Phase 3 - Qubes OS AEM AMD support: Rebase and refresh TrenchBoot GRUB2 for QubesOS Some work to implement TrenchBoot support for Qubes OS on AMD hardware has been done. GRUB2 with TrenchBoot support has been added to Qubes building system on 3mdeb fork The task aims to refresh the work and align with the upstream Qubes OS GRUB2 repository Clean up the Secure Kernel Loader (formerly LandingZone) package support for QubesOS Since the initial work done by 3mdeb engineers for AMD AEM in Qubes OS, a lot of time has passed, and Secure Kernel Loader - SKL (formerly Landing Zone) has improved a lot and added new features. SKL is an open-source module written by TrenchBoot developers required by AMD Secure Startup technology to perform DRTM launch. The task aims to refresh the previous work and update the SKL package for Qubes OS to the newest revision. TrenchBoot Secure Kernel Loader (SKL) improvements for AMD server CPUs with multiple nodes While SKL was extensively tested on System on Chip and single CPU platforms, it was not tested on workstation/server segment CPUs which are more complex. For example, one server CPU package may contain two independent CPUs inside called nodes. Each node will enable protection on the SKL during DRTM execution, and this protection must be disabled on each node when TrenchBoot DRTM tasks are done. The task implements the correct support for server CPUs in TrenchBoot SKL. Test the solution on AMD hardware with TPM 2.0 and TPM 1.2 with legacy boot mode Phase 4 - Xen UEFI boot mode with DRTM: TrenchBoot support for UEFI boot mode for AMD in GRUB While TrenchBoot DRTM was extensively tested on Intel hardware with UEFI firmware and Linux, it was not on AMD platforms. This task ensures that DRTM works with UEFI boot mode on AMD processors in GRUB2 and Linux without UEFI Boot Services. TrenchBoot support for UEFI boot mode in Xen When UEFI boot mode with TrenchBoot is working with GRUB2 and Linux, all that is missing to fully support AMD and Intel hardware with Qubes OS AEM is the Xen support to boot in UEFI mode without Boot Services. This requires a significant amount of work to ensure that all information that Xen would obtain from UEFI Boot Services would still be available. The information has to be passed by GRUB2 to Xen via Multiboot2 protocol: EFI memory map Framebuffer information PCI devices information with their option ROMs Additionally \"EFI boot services not terminated\" Multiboot2 tag must not be passed to Xen by GRUB2 on DRTM launch when GRUB2 will terminate Boot Services. Xen should detect such situations and act according to the state of Boot Services. Xen will be implemented to: parse the EFI memory map, framebuffer information, and PCI devices information passed by GRUB2 do not expose the \"EFI boot services\" Multiboot2 tag indicating that Xen can be executed without UEFI Boot Services presence allocate the memory space for the trampoline used to launch other processors or use the allocation done by GRUB2 if necessary do not go error path when Boot Services are not present and skip all calls to UEFI Boot Services by using the information provided by GRUB2 Test the solution on AMD and Intel hardware with TPM 2.0 and TPM 1.2 with legacy and UEFI boot mode","title":"Requested support"},{"location":"projects/trenchboot-aem/#projects-or-organizations-relevant-to-this-project-before","text":"Qubes OS Xen Hypervisor GNU GRUB TrenchBoot Invisible Things Lab Apertus Solutions Oracle 3mdeb","title":"Projects or organizations relevant to this project before?"},{"location":"projects/trenchboot-aem/#the-ecosystem-of-the-project","text":"3mdeb has a good relationship with the maintainers of relevant projects which will participate in the review of the work: Marek Marczykowski-G\u00f3recki (Invisible Things Lab CTO) - Qubes OS maintainer Andrew Cooper (Citrix) - Xen Hypervisor Maintainer Daniel Kiper (Oracle) - GRUB2 Maintainer Daniel Smith (Apertus Solutions) - TrenchBoot founder and maintainer","title":"The ecosystem of the project"},{"location":"projects/trenchboot-aem/#review","text":"Further reviews and suggestions are welcome. You can do it in two ways: using Giscus on the bottom of this page contributing to this repository directly via Pull Request","title":"Review"},{"location":"quality-principles/introduction/","text":"Dasharo Quality Principles Secure Delivery Each Dasharo release is secured cryptographically, ensuring with RSA 4096 keys the authenticity of binary SHA-256 integrity checksum. The three-step key verification is guarantees that your client receives a clean file without any third-party modifications. Integrity and signature verification procedure is included, so that the key compliance can be easily checked. Secure Maintenance Dasharo doesn't believe in security through obscurity. That is why each Dasharo firmware is supported with the system of Transparent Validation, proving its efficiency and quality with testing results. As an Open Source product, it provides timely emergency releases and patches together with long-lasting maintenance. Credibility Dasharo values credibility. Each release is extended by a validation report based on a project charter and a complete changelog with a description of the product versioning. Transparency Generic testing procedures for a given Dasharo product line are included in the product documentation. Specific testing procedures are delivered in the form of a PDF document accompanying a release. Availability Dasharo product line page includes a hardware compatibility platform list. The platform for which the new product line is created becomes its reference platform. The consecutive hardware platforms are added to the hardware compatibility list (HCL). Compliance No danger of version lock. Dasharo releases are versioned according to the [Semantic Versioning 2.0.0] ( https://semver.org/ ) specification for the sake of consistency. Release notes comply with the [Keep A Changelog 1.0.0] specification ( https://keepachangelog.com/en/1.0.0/ ).","title":"Quality Principles"},{"location":"quality-principles/introduction/#dasharo-quality-principles","text":"","title":"Dasharo Quality Principles"},{"location":"quality-principles/introduction/#secure-delivery","text":"Each Dasharo release is secured cryptographically, ensuring with RSA 4096 keys the authenticity of binary SHA-256 integrity checksum. The three-step key verification is guarantees that your client receives a clean file without any third-party modifications. Integrity and signature verification procedure is included, so that the key compliance can be easily checked.","title":"Secure Delivery"},{"location":"quality-principles/introduction/#secure-maintenance","text":"Dasharo doesn't believe in security through obscurity. That is why each Dasharo firmware is supported with the system of Transparent Validation, proving its efficiency and quality with testing results. As an Open Source product, it provides timely emergency releases and patches together with long-lasting maintenance.","title":"Secure Maintenance"},{"location":"quality-principles/introduction/#credibility","text":"Dasharo values credibility. Each release is extended by a validation report based on a project charter and a complete changelog with a description of the product versioning.","title":"Credibility"},{"location":"quality-principles/introduction/#transparency","text":"Generic testing procedures for a given Dasharo product line are included in the product documentation. Specific testing procedures are delivered in the form of a PDF document accompanying a release.","title":"Transparency"},{"location":"quality-principles/introduction/#availability","text":"Dasharo product line page includes a hardware compatibility platform list. The platform for which the new product line is created becomes its reference platform. The consecutive hardware platforms are added to the hardware compatibility list (HCL).","title":"Availability"},{"location":"quality-principles/introduction/#compliance","text":"No danger of version lock. Dasharo releases are versioned according to the [Semantic Versioning 2.0.0] ( https://semver.org/ ) specification for the sake of consistency. Release notes comply with the [Keep A Changelog 1.0.0] specification ( https://keepachangelog.com/en/1.0.0/ ).","title":"Compliance"},{"location":"transparent-validation/msi-z690/laboratory-assembly-guide/","text":"Laboratory stand dedicated to MSI PRO Z690-A assembly guide Introduction This document describes the assembly procedure dedicated to the MSI PRO Z690-A testing stand. Prerequisites The below table contains information about all elements which are needed to create the testing stand. MSI PRO Z690-A platform RTE v1.1.0 Sonoff S20 type E 4x standard female-female connection wire 2.54 mm raster 7x standard female-female connection wire 2.54/2.00 mm raster USB-UART converter with 4-wire cable 4-pin header 2.54 mm raster Pre-setup activities The following subsections describe the method of preparing all the components of the laboratory stand. MSI PRO Z690-A MSI PRO Z690-A platform should be prepared in accordance with the Motherboard assembly documentation. RTE RTE (acronym: Remote Testing Environment) should be prepared in accordance with Quick start guide documentation dedicated to the device. Sonoff The below section of the documentation is based on the EPSHome documentation Open the Sonoff case. Check if the headers are soldered to the board. If not - 4 pin header raster 2.54 mm should be soldered to the board in accordance with the below images. Connect the USB-UART converter to the USB port. Create a Sonoff configuration file. The file extension should be .yaml and it should contain the device configuration. Example configuration: esphome: name: XXXXXX platform: ESP8266 board: esp01_1m wifi: ssid: \"XXXXXX\" password: \"XXXXXX\" # manual_ip: # # Set this to the IP of the ESP # static_ip: 192.168.4.187 # # Set this to the IP address of the router. Often ends with .1 # gateway: 192.168.4.1 # # The subnet of the network. 255.255.255.0 works for most home networks. # subnet: 255.255.255.0 power_save_mode: none # # Enable fallback hotspot (captive portal) in case wifi connection fails ap: ssid: \"Sonoff1 Fallback Hotspot\" password: \"123456789\" captive_portal: # Enable logging logger: # Enable Home Assistant API api: ota: binary_sensor: - platform: gpio pin: number: GPIO0 mode: INPUT_PULLUP inverted: True name: \"Sonoff S20 Button\" on_press: - switch.toggle: relay - platform: status name: \"Sonoff S20 Status\" switch: - platform: gpio name: \"Sonoff S20 Relay\" pin: GPIO12 id: relay output: - platform: esp8266_pwm id: s20_green_led pin: GPIO13 inverted: True light: - platform: monochromatic name: \"Sonoff S20 Green LED\" output: s20_green_led web_server: port: 80 reboot_timeout: 0s Run the docker container in the folder containing created .yaml configuration file: docker run --rm -v \" ${ PWD } \" :/config --device = /dev/ttyUSB0 -p 6052 :6052 -it esphome/esphome Open the browser and type into the web browser the following address: http://localhost:6052/ Put the device in flash mode. Putting the device in this mode should be done in accordance with the documentation . Change the upload method from OTA to /dev/ttyUSB0 . After this operation, the new element with the name specified in esphome:name should be displayed. Select the option Upload . After clicking, the program should generate the image, compile it and upload it to the device. After successful upload replug the device to the USB ( without the button pressed) to get out of the flashing mode. Open connection to the device in the PC terminal by typing: sudo minicom -D /dev/ttyUSB0 -o -b 115200 . Note: /dev/ttyUSB0 is example device - check whether USB0 is the correct one. Check if the device is responsible - whether network connectivity information is generated. Note: The effective range for this device is only a few meters. Based on the minicom logs read the IP address assigned to the device. Connections The following sections describe how to enable all of the following features: serial connection to the platform, controlling power supply, enabling basic power actions with the platform (power off/power on/reset), external flashing with the RTE, device power status readout. Serial connection Attach the jumpers in the RTE J16 header to enable header J18: Jumper position (TX) Jumper position (RX) EXT + COM EXT + COM Connect the RTE J18 header to the platform JBD1 header as described in the table: RTE MSI PRO Z690-A J18 pin 1 (GND) JBD1 pin 1 (pin closer to JBAT1) J18 pin 2 (RX) JBD1 pin 2 (pin further from JBAT1) Note: Pins on JBD1 are not described in the documentation. They have been discovered experimentally. Pay attention to the connections. Power supply controlling Connect SeaSonic FOCUS Plus Platinum to Sonoff. Basic power operations enabling Connect the RTE J11 header to the platform JFP1 header as described in the table: RTE Msi Z690 J11 pin 9 JFP1 pin 6 (PWR_ON) J11 pin 8 JFP1 pin 7 (RST) J15 pin 1 (GND) JFP1 pin 5 (GND) External flashing enabling Connect the RTE SPI header to the platform as described in the table: RTE SPI header MSI Z690-A J7 pin 1 (Vcc) JTPM1 pin 1 (SPI Power) J7 pin 2 (GND) JTPM1 pin 7 (GND) J7 pin 3 (CS) JTPM1 pin 5 (RESERVED / BIOS SPI CS pin) J7 pin 4 (SCLK) JTPM1 pin 6 (SPI Clock) J7 pin 5 (MISO) JTPM1 pin 3 (MISO) J7 pin 6 (MOSI) JTPM1 pin 4 (MOSI) Note: external access to the flash chip is possible only from the JTPM header. JTPM1 is a 2mm pitch header, you will need 2mm to 2.54mm female-female dupont wires to connect to RTE. Device power status readout Connect the RTE J1 header to the platform JFP1 header as shown in the picture below: The values \u200b\u200bof R1 , R2 , V1 and V2 should meet the relationship according to the formula R1/R2 = V2/V1 . V1 cannot be greater than 3.3V (RTE property). Complete Setup After preparing all of the connections also three activities should be performed to enable all of the test stand features: Connect Sonoff to the mains: Connect the RTE to the Internet by using the Ethernet cable. Connect the RTE to the mains by using the microUSB 5 V/2 A power supply. Complete setup should looks as follows: Theory of operation The following sections describe how to use all of the enabled features: serial connection to the platform, controlling power supply, enabling basic power actions with the platform (power off/power on/reset), external flashing with the RTE, device power status readout. Serial connection The method of setting and using serial connection is described in the Serial connection guide . Power supply controlling Power supply controlling (in this case: controlling the state of Sonoff) should be performed based on the sonoff.sh script implemented in meta-rte (OS image dedicated to the RTE platform). Note, that before using the above-mentioned script, it should be modified and SONOFF_IP parameter should be set in accordance with obtained Sonoff IP address. To perform basic power operations use the below-described commands: Turn on the power supply: ./sonoff on Turn off the power supply: ./sonoff on Basic power operations Basic power operations should be performed based on the rte_ctrl script implemented in meta-rte (OS image dedicated to the RTE platform). To perform basic power operations use the below-described commands: Turn on the platform: rte_ctrl pon Turn off the platform: rte_ctrl poff Reset the platform: rte_ctrl reset Note, that in order for the above commands to work properly, the platform should be powered up: both Sonoff and the power supply must be turned on. External flashing The external flashing procedure should be performed based on the scripts implemented on the RTE platform. To perform the flashing operation reproduce, the below-described steps: By using scp put the requested Dasharo file to the RTE: scp <path_to_firmware>/<firmware_file> root@<RTE_IP>:/tmp/coreboot.rom Where: path_to_firmware - path to firmware, which should send to RTE, firmware_file - the name of the firmware file, which should be sent to RTE, RTE_IP - IP address of the connected RTE. Login to RTE via ssh or minicom . Read the flash chip by executing the following command on RTE: ./flash.sh read tmp/dump.rom If the reading was successful, the output from the command above should contain the phrase Verifying flash... VERIFIED . Write the flash chip by executing the following command on RTE: ./flash.sh write /tmp/coreboot.rom Do not interrupt the flashing procedure in any way (especially by changing connections). It may cause hardware damage! If the reading was successful, the output from the command above should contain the phrase Verifying flash... VERIFIED . Device power status readout To read the current power status use the following command: cat /sys/class/gpio/gpio12/value Example output: 1 means that the platform is turned on. 0 means that the platform is turned off.","title":"Laboratory stand assembly guide"},{"location":"transparent-validation/msi-z690/laboratory-assembly-guide/#laboratory-stand-dedicated-to-msi-pro-z690-a-assembly-guide","text":"","title":"Laboratory stand dedicated to MSI PRO Z690-A assembly guide"},{"location":"transparent-validation/msi-z690/laboratory-assembly-guide/#introduction","text":"This document describes the assembly procedure dedicated to the MSI PRO Z690-A testing stand.","title":"Introduction"},{"location":"transparent-validation/msi-z690/laboratory-assembly-guide/#prerequisites","text":"The below table contains information about all elements which are needed to create the testing stand. MSI PRO Z690-A platform RTE v1.1.0 Sonoff S20 type E 4x standard female-female connection wire 2.54 mm raster 7x standard female-female connection wire 2.54/2.00 mm raster USB-UART converter with 4-wire cable 4-pin header 2.54 mm raster","title":"Prerequisites"},{"location":"transparent-validation/msi-z690/laboratory-assembly-guide/#pre-setup-activities","text":"The following subsections describe the method of preparing all the components of the laboratory stand.","title":"Pre-setup activities"},{"location":"transparent-validation/msi-z690/laboratory-assembly-guide/#connections","text":"The following sections describe how to enable all of the following features: serial connection to the platform, controlling power supply, enabling basic power actions with the platform (power off/power on/reset), external flashing with the RTE, device power status readout.","title":"Connections"},{"location":"transparent-validation/msi-z690/laboratory-assembly-guide/#theory-of-operation","text":"The following sections describe how to use all of the enabled features: serial connection to the platform, controlling power supply, enabling basic power actions with the platform (power off/power on/reset), external flashing with the RTE, device power status readout.","title":"Theory of operation"},{"location":"transparent-validation/msi-z690/presale-assembly-and-validation/","text":"Presale device assembly and validation Introduction This document describes the assembly procedure of the MSI PRO Z690-A DDR4 with specified components in requirements . Requirements Part Model Name Image Motherboard MSI PRO Z-690A DDR4 CPU Intel Core i5-12600K, 3.7G Cooling Noctua CPU NH-U12S Redux (w/ Noctua NM-i17xx-MP78 Mounting Kit) RAM Kingston Fury Beast, DDR4, 4*8GB (32GB Total), 3600MHz, CL17 Power Supply Seasonic Focus PX 750W 80 Plus Platinum Storage SSD Intel 670p 512 GB M.2 2280 PCI-E x4 Gen3 NVMe Enclosure SilentiumPC Armis AR1 Additionally, you will need a regular Phillips screwdriver and thermal paste. Try not to tighten all the elements to the maximum, as it will make disassembly difficult. Remember that make all connections in the grounding strap. Device assembly Full set assembly Section below describes the procedure of complete assembling of the working station. Unpack all equipment. Place the motherboard in front of you, this is the component with which most of the operations will be performed. It's best to put something softer under the board so as not to damage it, e.g. during the installation of RAM modules. To install the CPU on the motherboard first, open the CPU socket: Insert the processor carefully and tighten it with the dedicated mechanism: To install the CPU cooler, the parts shown in the picture below are necessary: Attach the black stand to the bottom of the motherboard, then apply and screw down the remaining parts except the cooler itself and apply thermal paste. After these steps, the CPU area should look like this: Then attach the cooler from above by tightening the two screws. Most likely, for this operation, it is necessary to dismantle the fan and restore it after tightening the screws. Install the memory module into the DIMM slots. To insert a single module, open the latch on both sides. Then insert the RAM and gently press the module downward at both ends of the module and the latch will close automatically. Always insert memory modules in the DIMMA2 slot first. Install the M.2 solid-state drive (SSD) into the M.2 slot. Remove the two screws from the cover and the one responsible for disk stabilization. Insert the SSD into the M.2 slot and tighten the previously removed screws. Take the enclosure of the computer and open one side as shown in the picture below: Install the rear panel by inserting it from the inside of the enclosure and pressing it lightly. Insert the motherboard into the case but do not twist it, some pins are hard to connect when the motherboard is screwed. The photo below shows the slots that should be filled in the next steps. Connect the fan from the CPU cooler to the slot marked I . Connect the cables from the front panel to the appropriately marked places: A detailed description of the connection cable marked D can be found in the Board manual in section: JFP1, JFP2: Front Panel Connectors. To verify correct connection of the cable marked D , you can compare them to the pictures below: Connection from the inside: Connection from the outside: Connect the speaker to the slot marked before E : Screw the motherboard to the enclosure. Connect the power supply to the motherboard using the cables marked RE25 for connection to the G and H slots and the cable marked RJ21 to connect the F slots. Connect the fan built into the enclosure to the indicated place: Bundle the cables so that they don't interfere with the fans or other components. Close the case of the computer. Motherboard assembly only Section below describes the procedure of assembling the motherboard. To prepare the motherboard the following operations should be performed: Go through steps 1-8 from Full set assembling section . Go through 13th step from Full set assembling section . Connect cable marked D to allows power on the device as described in the 14th point of the Full set assembling section . Connect the power supply to the motherboard as described in the 17th point of the Full set assembling section . Device validation Connect the device to the mains. Power on the device with the button located on the front panel. If all connections have been made correctly, the device should start and the boot logo should be shown. Install Dasharo firmware in accordance with Initial Deployment - the Migrating SMBIOS unique data chapter can be skipped. Power on the device. Boot to Linux system (Ubuntu is recommended). Open a terminal window and run the following command: sudo dmidecode -t 0 | grep Version The output of the command above should be similar to: Version: Dasharo (coreboot+UEFI) <version> where the version should correspond to the version of the flashing binary used eg. v1.0.0. Check in the system that everything is working properly. Useful content Building manual - documentation contains information on how to build Dasharo compatible with the MSI PRO Z690-A DDR4. Board manual - documentation contains detailed information about the motherboard and its operations.","title":"Presale assembly and validation"},{"location":"transparent-validation/msi-z690/presale-assembly-and-validation/#presale-device-assembly-and-validation","text":"","title":"Presale device assembly and validation"},{"location":"transparent-validation/msi-z690/presale-assembly-and-validation/#introduction","text":"This document describes the assembly procedure of the MSI PRO Z690-A DDR4 with specified components in requirements .","title":"Introduction"},{"location":"transparent-validation/msi-z690/presale-assembly-and-validation/#requirements","text":"Part Model Name Image Motherboard MSI PRO Z-690A DDR4 CPU Intel Core i5-12600K, 3.7G Cooling Noctua CPU NH-U12S Redux (w/ Noctua NM-i17xx-MP78 Mounting Kit) RAM Kingston Fury Beast, DDR4, 4*8GB (32GB Total), 3600MHz, CL17 Power Supply Seasonic Focus PX 750W 80 Plus Platinum Storage SSD Intel 670p 512 GB M.2 2280 PCI-E x4 Gen3 NVMe Enclosure SilentiumPC Armis AR1 Additionally, you will need a regular Phillips screwdriver and thermal paste. Try not to tighten all the elements to the maximum, as it will make disassembly difficult. Remember that make all connections in the grounding strap.","title":"Requirements"},{"location":"transparent-validation/msi-z690/presale-assembly-and-validation/#device-assembly","text":"","title":"Device assembly"},{"location":"transparent-validation/msi-z690/presale-assembly-and-validation/#device-validation","text":"Connect the device to the mains. Power on the device with the button located on the front panel. If all connections have been made correctly, the device should start and the boot logo should be shown. Install Dasharo firmware in accordance with Initial Deployment - the Migrating SMBIOS unique data chapter can be skipped. Power on the device. Boot to Linux system (Ubuntu is recommended). Open a terminal window and run the following command: sudo dmidecode -t 0 | grep Version The output of the command above should be similar to: Version: Dasharo (coreboot+UEFI) <version> where the version should correspond to the version of the flashing binary used eg. v1.0.0. Check in the system that everything is working properly.","title":"Device validation"},{"location":"transparent-validation/msi-z690/presale-assembly-and-validation/#useful-content","text":"Building manual - documentation contains information on how to build Dasharo compatible with the MSI PRO Z690-A DDR4. Board manual - documentation contains detailed information about the motherboard and its operations.","title":"Useful content"},{"location":"transparent-validation/msi-z790/laboratory-assembly-guide/","text":"Laboratory stand dedicated to MSI PRO Z790-P assembly guide Introduction This document describes the assembly procedure dedicated to the MSI PRO Z790-P testing stand. Prerequisites The below table contains information about all elements which are needed to create the testing stand. MSI PRO Z790-P platform RTE v1.1.0 Sonoff S20 type E 4x standard female-female connection wire 2.54 mm raster 7x standard female-female connection wire 2.54/2.00 mm raster USB-UART converter with 4-wire cable 4-pin header 2.54 mm raster Pre-setup activities The following subsections describe the method of preparing all the components of the laboratory stand. MSI PRO Z790-P MSI PRO Z790-P platform should be prepared in accordance with the Motherboard assembly documentation. RTE RTE (acronym: Remote Testing Environment) should be prepared in accordance with Quick start guide documentation dedicated to the device. Sonoff The below section of the documentation is based on the EPSHome documentation Open the Sonoff case. Check if the headers are soldered to the board. If not - 4 pin header raster 2.54 mm should be soldered to the board in accordance with the below images. Connect the USB-UART converter to the USB port. Create a Sonoff configuration file. The file extension should be .yaml and it should contain the device configuration. Example configuration: esphome: name: XXXXXX platform: ESP8266 board: esp01_1m wifi: ssid: \"XXXXXX\" password: \"XXXXXX\" # manual_ip: # # Set this to the IP of the ESP # static_ip: 192.168.4.187 # # Set this to the IP address of the router. Often ends with .1 # gateway: 192.168.4.1 # # The subnet of the network. 255.255.255.0 works for most home networks. # subnet: 255.255.255.0 power_save_mode: none # # Enable fallback hotspot (captive portal) in case wifi connection fails ap: ssid: \"Sonoff1 Fallback Hotspot\" password: \"123456789\" captive_portal: # Enable logging logger: # Enable Home Assistant API api: ota: binary_sensor: - platform: gpio pin: number: GPIO0 mode: INPUT_PULLUP inverted: True name: \"Sonoff S20 Button\" on_press: - switch.toggle: relay - platform: status name: \"Sonoff S20 Status\" switch: - platform: gpio name: \"Sonoff S20 Relay\" pin: GPIO12 id: relay output: - platform: esp8266_pwm id: s20_green_led pin: GPIO13 inverted: True light: - platform: monochromatic name: \"Sonoff S20 Green LED\" output: s20_green_led web_server: port: 80 reboot_timeout: 0s Run the docker container in the folder containing created .yaml configuration file: docker run --rm -v \" ${ PWD } \" :/config --device = /dev/ttyUSB0 -p 6052 :6052 -it esphome/esphome Open the browser and type into the web browser the following address: http://localhost:6052/ Put the device in flash mode. Putting the device in this mode should be done in accordance with the documentation . Change the upload method from OTA to /dev/ttyUSB0 . After this operation, the new element with the name specified in esphome:name should be displayed. Select the option Upload . After clicking, the program should generate the image, compile it and upload it to the device. After successful upload replug the device to the USB ( without the button pressed) to get out of the flashing mode. Open connection to the device in the PC terminal by typing: sudo minicom -D /dev/ttyUSB0 -o -b 115200 . Note: /dev/ttyUSB0 is example device - check whether USB0 is the correct one. Check if the device is responsible - whether network connectivity information is generated. Note: The effective range for this device is only a few meters. Based on the minicom logs read the IP address assigned to the device. Connections The following sections describe how to enable all of the following features: serial connection to the platform, controlling power supply, enabling basic power actions with the platform (power off/power on/reset), external flashing with the RTE, device power status readout. Serial connection Attach the jumpers in the RTE J16 header to enable header J18: Jumper position (TX) Jumper position (RX) EXT + COM EXT + COM Connect the RTE J18 header to the platform JBD1 header as described in the table: RTE MSI PRO Z790-P J18 pin 1 (GND) JBD1 pin 1 (pin closer to JBAT1) J18 pin 2 (RX) JBD1 pin 2 (pin further from JBAT1) Note: Pins on JBD1 are not described in the documentation. They have been discovered experimentally. Pay attention to the connections. Power supply controlling Connect SeaSonic FOCUS Plus Platinum to Sonoff. Basic power operations enabling Connect the RTE J11 header to the platform JFP1 header as described in the table: RTE Msi Z790-P J11 pin 9 JFP1 pin 6 (PWR_ON) J11 pin 8 JFP1 pin 7 (RST) J15 pin 1 (GND) JFP1 pin 5 (GND) External flashing enabling Connect the RTE SPI header to the platform as described in the table: RTE SPI header MSI Z790-P J7 pin 1 (Vcc) JTPM1 pin 1 (SPI Power) J7 pin 2 (GND) JTPM1 pin 7 (GND) J7 pin 3 (CS) JTPM1 pin 5 (RESERVED / BIOS SPI CS pin) J7 pin 4 (SCLK) JTPM1 pin 6 (SPI Clock) J7 pin 5 (MISO) JTPM1 pin 3 (MISO) J7 pin 6 (MOSI) JTPM1 pin 4 (MOSI) Note: external access to the flash chip is possible only from the JTPM header. JTPM1 is a 2mm pitch header, you will need 2mm to 2.54mm female-female dupont wires to connect to RTE. Device power status readout Connect the RTE J1 header to the platform JFP1 header as shown in the picture below: The values \u200b\u200bof R1 , R2 , V1 and V2 should meet the relationship according to the formula R1/R2 = V2/V1 . V1 cannot be greater than 3.3V (RTE property). Complete Setup After preparing all of the connections also three activities should be performed to enable all of the test stand features: Connect Sonoff to the mains: Connect the RTE to the Internet by using the Ethernet cable. Connect the RTE to the mains by using the microUSB 5 V/2 A power supply. Complete setup should looks as follows: Theory of operation The following sections describe how to use all of the enabled features: serial connection to the platform, controlling power supply, enabling basic power actions with the platform (power off/power on/reset), external flashing with the RTE, device power status readout. Serial connection The method of setting and using serial connection is described in the Serial connection guide . Power supply controlling Power supply controlling (in this case: controlling the state of Sonoff) should be performed based on the sonoff.sh script implemented in meta-rte (OS image dedicated to the RTE platform). Note, that before using the above-mentioned script, it should be modified and SONOFF_IP parameter should be set in accordance with obtained Sonoff IP address. To perform basic power operations use the below-described commands: Turn on the power supply: ./sonoff on Turn off the power supply: ./sonoff on Basic power operations Basic power operations should be performed based on the rte_ctrl script implemented in meta-rte (OS image dedicated to the RTE platform). To perform basic power operations use the below-described commands: Turn on the platform: rte_ctrl pon Turn off the platform: rte_ctrl poff Reset the platform: rte_ctrl reset Note, that in order for the above commands to work properly, the platform should be powered up: both Sonoff and the power supply must be turned on. External flashing The external flashing procedure should be performed based on the scripts implemented on the RTE platform. To perform the flashing operation reproduce, the below-described steps: By using scp put the requested Dasharo file to the RTE: scp <path_to_firmware>/<firmware_file> root@<RTE_IP>:/tmp/coreboot.rom Where: path_to_firmware - path to firmware, which should send to RTE, firmware_file - the name of the firmware file, which should be sent to RTE, RTE_IP - IP address of the connected RTE. Login to RTE via ssh or minicom . Read the flash chip by executing the following command on RTE: ./flash.sh read tmp/dump.rom If the reading was successful, the output from the command above should contain the phrase Verifying flash... VERIFIED . Write the flash chip by executing the following command on RTE: ./flash.sh write /tmp/coreboot.rom Do not interrupt the flashing procedure in any way (especially by changing connections). It may cause hardware damage! If the reading was successful, the output from the command above should contain the phrase Verifying flash... VERIFIED . Device power status readout To read the current power status use the following command: cat /sys/class/gpio/gpio12/value Example output: 1 means that the platform is turned on. 0 means that the platform is turned off.","title":"Laboratory stand assembly guide"},{"location":"transparent-validation/msi-z790/laboratory-assembly-guide/#laboratory-stand-dedicated-to-msi-pro-z790-p-assembly-guide","text":"","title":"Laboratory stand dedicated to MSI PRO Z790-P assembly guide"},{"location":"transparent-validation/msi-z790/laboratory-assembly-guide/#introduction","text":"This document describes the assembly procedure dedicated to the MSI PRO Z790-P testing stand.","title":"Introduction"},{"location":"transparent-validation/msi-z790/laboratory-assembly-guide/#prerequisites","text":"The below table contains information about all elements which are needed to create the testing stand. MSI PRO Z790-P platform RTE v1.1.0 Sonoff S20 type E 4x standard female-female connection wire 2.54 mm raster 7x standard female-female connection wire 2.54/2.00 mm raster USB-UART converter with 4-wire cable 4-pin header 2.54 mm raster","title":"Prerequisites"},{"location":"transparent-validation/msi-z790/laboratory-assembly-guide/#pre-setup-activities","text":"The following subsections describe the method of preparing all the components of the laboratory stand.","title":"Pre-setup activities"},{"location":"transparent-validation/msi-z790/laboratory-assembly-guide/#connections","text":"The following sections describe how to enable all of the following features: serial connection to the platform, controlling power supply, enabling basic power actions with the platform (power off/power on/reset), external flashing with the RTE, device power status readout.","title":"Connections"},{"location":"transparent-validation/msi-z790/laboratory-assembly-guide/#theory-of-operation","text":"The following sections describe how to use all of the enabled features: serial connection to the platform, controlling power supply, enabling basic power actions with the platform (power off/power on/reset), external flashing with the RTE, device power status readout.","title":"Theory of operation"},{"location":"transparent-validation/muxpi/basic-validation/","text":"muxPi board validation In case of any troubles, first it is recommended to read comprehend Theory of Operations for muxPi devices. Necessary components preparation NanoPi muxPi ETH, microUSB<->USB cables, power supply (5V/2A Dc 5.5/2.1mm jack) 2 SDcards (minimum 8GB each) IDC-uSD adapter (DUT<->SD card) SD card adapter (USB<->SD card) Device bootable from SD card (e.g. RPI) NanoPi setup Prepare microSD card (minimum 8GB) for NanoPi NEO operating system. Download and extract image - link Flash image into microSD card ( Etcher tool could be helpful) muxPi setup Attach NanoPi to muxPi connectors. Plug ETH cable to RJ45 NanoPi port. Plug microUSB<->USB cable to muxPi and your machine. Plug in power supply. Make sure that jumpers are correctly set according to image: Connect to NanoPi using terminal: sudo minicom -D /dev/ttyUSB0 -o -b 115200 ` Save ip address: ifconfig Connect to NanoPi via ssh (with password: fa ): bash ssh root@192.168.4.XXX Or via serial connection. NOTE: Connecting with MuxPi through serial will automatically login as non root user pi with password pi . Validation steps 1. Install WiringNP git clone https://github.com/friendlyarm/WiringNP cd WiringNP/ chmod 755 build ./build verify installation: gpio readall If your installation is successful the following messages will show up: +-----+-----+----------+------+---+-NanoPi-NEO--+------+----------+-----+-----+ | BCM | wPi | Name | Mode | V | Physical | V | Mode | Name | wPi | BCM | +-----+-----+----------+------+---+----++----+---+------+----------+-----+-----+ | | | 3 .3V | | | 1 || 2 | | | 5V | | | | 12 | 8 | GPIOA12 | ALT5 | 0 | 3 || 4 | | | 5V | | | | 11 | 9 | GPIOA11 | ALT5 | 0 | 5 || 6 | | | 0v | | | | 203 | 7 | GPIOG11 | OFF | 0 | 7 || 8 | 0 | ALT5 | GPIOG6 | 15 | 198 | | | | 0v | | | 9 || 10 | 0 | ALT5 | GPIOG7 | 16 | 199 | | 0 | 0 | GPIOA0 | ALT5 | 0 | 11 || 12 | 0 | OUT | GPIOA6 | 1 | 6 | | 2 | 2 | GPIOA2 | OFF | 0 | 13 || 14 | | | 0v | | | | 3 | 3 | GPIOA3 | OFF | 0 | 15 || 16 | 0 | OFF | GPIOG8 | 4 | 200 | | | | 3 .3v | | | 17 || 18 | 0 | OFF | GPIOG9 | 5 | 201 | | 64 | 12 | GPIOC0 | ALT4 | 0 | 19 || 20 | | | 0v | | | | 65 | 13 | GPIOC1 | ALT4 | 0 | 21 || 22 | 0 | ALT5 | GPIOA1 | 6 | 1 | | 66 | 14 | GPIOC2 | ALT4 | 0 | 23 || 24 | 1 | OUT | GPIOC3 | 10 | 67 | +-----+-----+----------+------+---+----++----+---+------+----------+-----+-----+ | BCM | wPi | Name | Mode | V | Physical | V | Mode | Name | wPi | BCM | +-----+-----+----------+------+---+-NanoPi-NEO--+------+----------+-----+-----+ +-----+----NanoPi-NEO USB/Audio-+----+ | BCM | wPi | Name | Mode | V | Ph | +-----+-----+----------+------+---+----+ | | | 5V | | | 25 | | | | USB-DP1 | | | 26 | | | | USB-DM1 | | | 27 | | | | USB-DP2 | | | 28 | | | | USB-DM2 | | | 29 | | | | IR-RX | | | 30 | | 17 | 19 | GPIOA17 | OFF | 0 | 31 | | | | PCM/I2C | | | 32 | | | | PCM/I2C | | | 33 | | | | PCM/I2C | | | 34 | | | | PCM/I2C | | | 35 | | | | 0V | | | 36 | +-----+-----+----------+------+---+----+ +-----+----NanoPi-NEO Debug UART-+----+ | BCM | wPi | Name | Mode | V | Ph | +-----+-----+----------+------+---+----+ | 4 | 17 | GPIOA4 | ALT5 | 0 | 37 | | 5 | 18 | GPIOA5 | ALT5 | 0 | 38 | +-----+-----+----------+------+---+----+ 2. Cortex-M0 flashing The second controllable unit on the muxPi board is embedded microcontroller STM32 F030C6T6 from Cortex-M0 family. It is required to flash special binary prepared by Tizen group (the code is not open yet, but this process is in progress). To flash muxPi's microcontroller, follow steps below: Make sure that VDD jumper is left open. Download binary file - link . Copy binary to nanoPi: scp <path-to-file> root@192.168.4.XXX:/root/ Update package lists (nanoPi): apt-get update Install stm32flash utility (nanoPi): sudo apt-get install stm32flash Export GPIO: gpio mode 3 out and gpio mode 7 out Set Cortex-M0 to \"Flashing mode\": gpio write 7 1 Power up microcontroller: gpio write 3 1 Flash firmware: stm32flash -w /root/firmware-05.bin -v -g 0x0 /dev/ttyS2 Power off microcontroller: gpio write 3 0 Set Cortex-M0 to \"Execution mode\": gpio write 7 0 Power on microcontroller: gpio write 3 1 From now on, muxPi's LCD should light on and display: * MuxPi * HW: 1 .0 SW: 0 .5 3. SD Adapter Connect IDC-uSD adapter to the muxPI board: Insert the microSD card to microSD card slot accessible on the bottom side of muxPi board. To enable microSD card reader, connect to Cortex from MuxPi via minicom: minicom -D /dev/ttyS2 and enter in minicom following commands: ts and then dut NOTE: Each command should return OK Connect IDC-uSD adapter to a SD card adapter plugged into your machine NOTE: You need to force IDC-uSD adapter to insert into SD card adapter (On your machine) Check if device is connected: dmesg -w should help. You should also be able to read and write data to uSD card from file manager. Flash image into microSD card (for RPI or other device bootable form SD card). Disconnect uSD adapter form a SD card adapter and connect to the device (e.g. RPI). Connect device to the power supply, now device should boot via IDC-uSD adapter. 4. Screening It is recommended to use screen program for communication: Install screen: sudo apt-get install screen Open connection (from muxPi): screen /dev/ttyS2 115200,cs8,ixon,ixoff Write help and press Enter. Help output: help --- This help version --- Display version of the firmware echo --- Get ( no arguments ) or set ( 'on' or 'off' ) echo on serial \"console\" : echo [ on | off ] . The default value is on. power --- Get ( no arguments ) or set ( 'on' or 'off' ) or switch off and on ( 'tick' ) power supply for DUT: power [ on | off | tick ] hdmi --- Get ( no arguments ) or set ( 'on' or 'off' ) HDMI HOTPLUG pin: hdmi [ on | off ] dyper --- Get ( no second argument ) or set ( 'on' or 'off' ) DyPer state: dyper 1 | 2 [ on | off ] mux --- Connect microSD card to external connector ( DUT ) or card reader ( ts ) : mux [ dut | ts ] dut --- Connect microSD card and power to DUT: dut ts --- Connect microSD card and power to TS: ts led --- Get ( no second or third argument ) or set ( 'R G B' ) color of led ( 1 | 2 ) , ex: led 1 255 0 255 clr --- Clear oled display text --- Print text on the OLED display: text x y color content draw --- Draw an object on the OLED display: draw object x1 y1 [ x2 y2 ] , objects are: - point x y color - draws one point at given coordinates - line x1 y1 x2 y2 color - draws line between given coordinates - rectangle left top width height color - draws line between given coordinates - circle x y radius color - draws line between given coordinates color must be 'on' , 'off' or 'inv' adc --- Print current adc value of all ( if no arguments are given ) or one specified channel, ex: adc 1 voltage --- Print current voltage [ mV ] of all ( if no arguments are given ) or one specified channel, ex: voltage 1 current --- Print current current [ mA ] being consumed by DUT lthor --- Get ( no second argument ) or set state of lthor control signals: - lthor switch [ usb | uart ] - redirect DUT 's USB wires to NanoPi' s 'usb' or 'uart' - lthor id [ usb | uart ] - switch DUT 's USB to ' usb ' or ' uart ' mode - lthor vbus [on|off] - switch DUT' s VBUS 'on' or 'off' - lthor combo [ usb | uart ] - make DUT and MuxPi USB work in 'usb' or 'uart' mode - no get function key --- Get current state of given key or both if no key number is given: key [ 1 | 2 ] uart --- Get current value of UART voltage or set if new value is given [ in millivolts ] NOTE: help might not display anything. Then try to use minicom. Minicom quick guide: Install minicom: sudo apt-get install minicom Connect via minicom: sudo minicom -D /dev/ttyS2 -o -b 115200 Type: help NOTE: If output is the same as above then basic validation for muxPi is done. Images source: Wiki Tizen","title":"Basic validation"},{"location":"transparent-validation/muxpi/basic-validation/#muxpi-board-validation","text":"In case of any troubles, first it is recommended to read comprehend Theory of Operations for muxPi devices.","title":"muxPi board validation"},{"location":"transparent-validation/muxpi/basic-validation/#necessary-components-preparation","text":"NanoPi muxPi ETH, microUSB<->USB cables, power supply (5V/2A Dc 5.5/2.1mm jack) 2 SDcards (minimum 8GB each) IDC-uSD adapter (DUT<->SD card) SD card adapter (USB<->SD card) Device bootable from SD card (e.g. RPI)","title":"Necessary components preparation"},{"location":"transparent-validation/muxpi/basic-validation/#nanopi-setup","text":"Prepare microSD card (minimum 8GB) for NanoPi NEO operating system. Download and extract image - link Flash image into microSD card ( Etcher tool could be helpful)","title":"NanoPi setup"},{"location":"transparent-validation/muxpi/basic-validation/#muxpi-setup","text":"Attach NanoPi to muxPi connectors. Plug ETH cable to RJ45 NanoPi port. Plug microUSB<->USB cable to muxPi and your machine. Plug in power supply. Make sure that jumpers are correctly set according to image: Connect to NanoPi using terminal: sudo minicom -D /dev/ttyUSB0 -o -b 115200 ` Save ip address: ifconfig Connect to NanoPi via ssh (with password: fa ): bash ssh root@192.168.4.XXX Or via serial connection. NOTE: Connecting with MuxPi through serial will automatically login as non root user pi with password pi .","title":"muxPi setup"},{"location":"transparent-validation/muxpi/basic-validation/#validation-steps","text":"","title":"Validation steps"},{"location":"transparent-validation/muxpi/theory-of-operations/","text":"MuxPi - Theory of Operations Block diagram muxPi setup NanoPi NEO Preparation of the muxPi's \"heart\": Prepare microSD card (minimum 8GB) for NanoPi NEO operating system. Download and extract image - link Flash image into microSD card ( Etcher tool could be helpful) Insert card to NanoPi microSD slot. Attach NanoPi to muxPi connectors. Plug Ethernet cable to RJ45 NanoPi port. Serial communication There are two methods to setup serial communication with muxPi: with microUSB<->USB cable with UART/USB converter Attach USB/UART converter to muxPi's left addon female header ( GND , DBG UART RX , DBG UART TX on pinout image below): and plug USB connector to the computer. Next, open connection in PC terminal by typing: sudo minicom -D /dev/ttyUSB0 -o -b 115200 . /dev/ttyUSB0 is example device - check whether USB0 is the correct one Jumpers configuration UART - pins Vloc & VCC - if jumped then internal voltage generator is used as voltage reference for data lines and powers up target device. If open then voltage reference for data lines comes from target device and internal voltage generator is unused. USB/ETH - determines what USB data lines of one USB HUB are connected to. If first two pins are jumped then USB lines are connected to add-on connector. If last two pins are jumped then these lines are connected tu USB<->ETH converter. If none of the pins are jumped then the only connection is the upper socket of double connector. NOTE: The upper socket of double USB-A connector must be left empty if USB<->ETH is selected or add-on connector is selected and something is connected to these data lines on the addon! NOTE: Both jumpers must be placed in the same position! VDD - if this pins are jumped then the VDD and 3V3 are always on. If this is left open then VDD and 3V3 are controlled by NanoPi. The usage example is setting value of USB ID potentiometer (which is located underneath NanoPi). But when NanoPi NEO is removed there is no way to turn on power for microcontroller (that is when VDD jumper is helpful). NOTE: If there is no particular need then leave this jumper open. Power supply To power on MuxPi with NanoPi attached, plug the 5V/2A DC 5.5/2.1mm power supply jack to the CON1 muxPi's connector. Power consumption of MuxPi should be less then 1A assuming no addons connected. IP address To check which IP address has been assigned, type in terminal: ifconfig . OPTIONAL STEP: To set static IP, create the following file: sudo vi /etc/NetworkManager/NetworkManager.conf Edit NetworkManger.conf and set the value of \"managed\" under \"ifupdown\" to false: [ ifupdown ] managed = false Add network setting to /etc/network/interfaces : sudo vi /etc/network/interfaces Here is sample of /etc/network/interfaces : # The loopback network interface auto lo iface lo inet loopback # network interface not managed by Network Manager allow-hotplug eth0 iface eth0 inet static address 192 .168.4.XXX netmask 255 .255.255.0 gateway 192 .168.4.1 dns-nameservers 192 .168.4.1 Restart the whole device: reboot Now you should be able to connect to device through ssh: ssh root@192.168.4.XXX with the password: fa Install WiringNP Connect to NanoPi NEO through ssh (serial connection automatically login to non root user pi ), then type: git clone https://github.com/friendlyarm/WiringNP cd WiringNP/ chmod 755 build ./build Verify installation: gpio readall If your installation is successful the following messages will show up: +-----+-----+----------+------+---+-NanoPi-NEO--+------+----------+-----+-----+ | BCM | wPi | Name | Mode | V | Physical | V | Mode | Name | wPi | BCM | +-----+-----+----------+------+---+----++----+---+------+----------+-----+-----+ | | | 3 .3V | | | 1 || 2 | | | 5V | | | | 12 | 8 | GPIOA12 | ALT5 | 0 | 3 || 4 | | | 5V | | | | 11 | 9 | GPIOA11 | ALT5 | 0 | 5 || 6 | | | 0v | | | | 203 | 7 | GPIOG11 | OFF | 0 | 7 || 8 | 0 | ALT5 | GPIOG6 | 15 | 198 | | | | 0v | | | 9 || 10 | 0 | ALT5 | GPIOG7 | 16 | 199 | | 0 | 0 | GPIOA0 | ALT5 | 0 | 11 || 12 | 0 | OUT | GPIOA6 | 1 | 6 | | 2 | 2 | GPIOA2 | OFF | 0 | 13 || 14 | | | 0v | | | | 3 | 3 | GPIOA3 | OFF | 0 | 15 || 16 | 0 | OFF | GPIOG8 | 4 | 200 | | | | 3 .3v | | | 17 || 18 | 0 | OFF | GPIOG9 | 5 | 201 | | 64 | 12 | GPIOC0 | ALT4 | 0 | 19 || 20 | | | 0v | | | | 65 | 13 | GPIOC1 | ALT4 | 0 | 21 || 22 | 0 | ALT5 | GPIOA1 | 6 | 1 | | 66 | 14 | GPIOC2 | ALT4 | 0 | 23 || 24 | 1 | OUT | GPIOC3 | 10 | 67 | +-----+-----+----------+------+---+----++----+---+------+----------+-----+-----+ | BCM | wPi | Name | Mode | V | Physical | V | Mode | Name | wPi | BCM | +-----+-----+----------+------+---+-NanoPi-NEO--+------+----------+-----+-----+ +-----+----NanoPi-NEO USB/Audio-+----+ | BCM | wPi | Name | Mode | V | Ph | +-----+-----+----------+------+---+----+ | | | 5V | | | 25 | | | | USB-DP1 | | | 26 | | | | USB-DM1 | | | 27 | | | | USB-DP2 | | | 28 | | | | USB-DM2 | | | 29 | | | | IR-RX | | | 30 | | 17 | 19 | GPIOA17 | OFF | 0 | 31 | | | | PCM/I2C | | | 32 | | | | PCM/I2C | | | 33 | | | | PCM/I2C | | | 34 | | | | PCM/I2C | | | 35 | | | | 0V | | | 36 | +-----+-----+----------+------+---+----+ +-----+----NanoPi-NEO Debug UART-+----+ | BCM | wPi | Name | Mode | V | Ph | +-----+-----+----------+------+---+----+ | 4 | 17 | GPIOA4 | ALT5 | 0 | 37 | | 5 | 18 | GPIOA5 | ALT5 | 0 | 38 | +-----+-----+----------+------+---+----+ Cortex-M0 flashing The second controllable unit on the muxPi board is embedded microcontroller STM32 F030C6T6 from Cortex-M0 family. It is required to flash special binary prepared by Tizen group (the code is not open yet, but this process is in progress). To flash muxPi's microcontroller, follow steps below: Make sure that VDD jumper is left open. Download binary file - link Copy binary to nanoPi: scp <path-to-file> root@192.168.4.XXX:/root/ Update package lists (nanoPi): apt-get update Install stm32flash utility (nanoPi): sudo apt-get install stm32flash Export GPIO: gpio mode 3 out and gpio mode 7 out Set Cortex-M0 to \"Flashing mode\": gpio write 7 1 Power up microcontroller: gpio write 3 1 Flash firmware: stm32flash -w firmware-05.bin -v -g 0x0 /dev/ttyS2 Power off microcontroller: gpio write 3 0 Set Cortex-M0 to \"Execution mode\": gpio write 7 0 Power on microcontroller: gpio write 3 1 From now on, muxPi's LCD should light on and display: * MuxPi * HW: 1 .0 SW: 0 .5 Software installation NOTE: It is recommended to cross-compile muxPi's software on your host machine Building using docker Prerequisites: Docker , Make . Clone repository: git clone https://github.com/SamsungSLAV/muxpi.git . Change directory: cd muxpi/sw/nanopi . Build muxPi software: make docker-build Resulting binaries will be in bin directory. Building from source Prerequisites: git , go (1.10+) Go get it: go get github.com/SamsungSLAV/muxpi Change directory: cd $GOPATH/src/github.com/SamsungSLAV/muxpi/sw/nanopi Download dependencies: go get ./... Build binaries: mkdir -p bin GOARCH = arm GOOARM = 7 GOOS = linux go build -o bin/stm ./cmd/stm/ GOARCH = arm GOOARM = 7 GOOS = linux go build -o bin/fota ./cmd/fota/ Install muxpi-power muxpi-power - tool for controlling power supply for MuxPi's main board. Copy muxpi-power files (change XXX to proper values): scp power/muxpi-power root@192.168.4.XXX:/usr/bin scp power/systemd/muxpi-power.service root@192.168.4.XXX:/etc/systemd/system On your MuxPi device, enable and start muxpi-power service: systemctl enable muxpi-power.service systemctl start muxpi-power.service Install stm stm - tools/libs for communicating with STM32F030 microcontroller. Copy stm binary and systemd files (change XXX to proper values): scp bin/stm_armv7 root@192.168.4.XXX:/usr/bin/stm scp stm/systemd/stm.service root@192.168.4.XXX:/etc/systemd/system scp stm/systemd/stm-user.socket root@192.168.4.XXX:/etc/systemd/system scp stm/systemd/stm.socket root@192.168.4.XXX:/etc/systemd/system scp stm/stm root@192.168.4.XXX:/usr/local/bin/stm On your MuxPi device - create group stm and add your user: groupadd stm usermod -aG stm root On your MuxPi device - enable stm sockets: systemctl daemon-reload systemctl enable stm.socket stm-user.socket systemctl start stm.socket stm-user.socket Install fota fota - tools/libs for flashing devices - usually microSD card. Copy fota binary to MuxPi device (change XXX to proper values): scp bin/fota_armv7 root@192.168.4.XXX:/usr/bin/fota On your MuxPi device - create a symlink from /usr/local/bin/fota to /usr/bin/fota/ . Only /usr/local/bin/fota/ should be used by software interfacing with MuxPi. This allows to swap fota implementation to your preferred tool: ln -s /usr/bin/fota /usr/local/bin/fota DUT setup DUT power supply MuxPi is capable of: power switching on/off current measurement Power switching - it can switch power supply up to 5A and 250VAC. One line is connected directly and one is connected through relay. Current measurement - It is able to measure up to -/+5A and is galvanically isolated from the rest of components thanks to use of Hall effect current sensor ACS712ELCTR-05B-T. It is connected to unswitchable power line. The current sensor is bypassed with 3 0R resistors that can be populated if current sensor is not needed. These resistors must not be populated if current measurement is required. UART connections GND - digital ground of MuxPi board N.C. - not connected Vloc - local voltage - voltage may be generated internally on MuxPi if the DUT, or anything else we are connecting to, has not power pin. Nn such case voltage generator must be set to desired value and activated. Command \"uart 3300\" must be sent to Cortex-M0, where 3300 is desired voltage given in millivolts. The voltage range is from 0 to 5000mv. Pins Vloc an VCC must be connected each other. Typical jumper is a perfect connector for this purpose. Vloc may be also used to power up additional converter RS232C. For example if converter to RS232C (+/-12v) must be used then it may be powered from Vloc pin. VCC - power of DUT. If dut has no such power pin then it must be connected to Vloc and vloc must be configured properly as stated above. DUT RX - receiver data line in the DUT - through this line MuxPi sends data to the DUT DUT TX - transmitter data line in the DUT - from this line MuxPi reads data form the DUT DUT CTS - Clear To Send - hardware handshake DUT RTS - Ready To Send - hardware handshake Example configuration for OrangePi (DUT) uart connection: Set 3.3V Vloc (/dev/ttyS2 terminal): uart 3300 Attach UART jumper ( Vloc and Vcc ). Connect GND, RX and TX (without crossing). Open connection: screen /dev/ttyS1 115200,cs8,ixon,ixoff NOTE: RX , TX , XTS , RTS are crossed on the board so you don't need to cross the wires by yourself. NOTE: A device powered from Vloc mustn't draw more than 50mA of current. Add-ons Add-ons headers are extensions for attaching new shields or simply using NanoPi and CortexM0 interfaces: 5V - power supply - not switchable - always present 3V3 - switchable (controlled by NanoPi) 3.3V power supply I2C0 SDA - I2C0 SDA line connected to NanoPi I2C0 SCL - I2C0 SCL line connected to NanoPi DBG UART TX - UART0 (debug) of NanoPi DBG UART RX - UART0 (debug) of NanoPi USB B+/- , USB A+/- USB host lines connected to NanoPi through USB HUB GND - ground lines N.C . - not connected SPI0 CLK - SPI0 clock line connected to NanoPi SPI0 MOSI - SPI0 \"master output slave input\" line connected to NanoPi SPI0 CS - SPI0 \"chip select\" line connected to NanoPi SPI0 MISO - SPI0 \"master input slave output\" line connected to NanoPi PI GPIO 1,2,3 - GPIO (General Purpose Input/Output) connected to NanoPi NEO. Ports PG11, PL11, PA17 respectively. ST GPIO 1,2,3 - GPIO connected to Cortex-M0 microcontroller. Ports PB3, PB4, PB5 of STM32F03C6T6 respectively. ADC1,2 - analog inputs connected to analog to digital converter of Cortex-M0 microcontroller. Ports PA1, PA2 respectively. Voltage range of this input is 0 to 3.3V. This lines are not buffered in any way so attention must paid when dealing with them. GND - ground lines NOTE: PI GPIO 1 has additional special function. It is connected to Cortex-M0 Boot0 pin which enables firmware download mode during microcontroller boot. 1 - enables this mode while 0 disables it. So it is useless as GPIO when the microcontroller is being booted. DyPers Dyper is a small, electromagnetic relay which is controllable by software. There are 2 dypers on MuxPi board. Each of them has two channels. Both channels are switched at the same time with the same command. So both of them can be on and both can be off but there is no way to turn one on and one off. They can be controlled by CortexM0 - examples here . ETH and USB ETH and upper USB of double USB socket share the same USB channel from USB HUB. Jumpers located at the rear side of double USB connector allow to disconnect this USB from ETH and connect to add-on connector. Details on this topic are covered in jumpers section. USB-M This is USB connector dedicated to mobile devices from Samsung company. This connector has controllable Vbus line and also controllable ID line. More information about this type of interface, it's capabilities and example of flashing smartphone can be found here . SD Adapter This connector is used to connect microSD card, put into MuxPi, to a DUT. This connector requires IDC-uSD cable adapter: Target microSD card must be attached to microSD card reader accessible on bottom side of muxPi board. To enable microSD card reader, connect to Cortex from MuxPi via minicom: minicom -D /dev/ttyS2 and enter in minicom following commands: ts and then: dut Each command should return OK After doing this you can connect the uSD's end of the cable adapter to the external card reader and check if it is correctly recognized by PC. You should also be able to run the microcontroller from the card attached to MuxPi if the card contains appropriate OS. Interacting with muxPi Connection with NanoPi User can simply open SSH connection by (password: fa ): ssh root@<muxpi-ip-address> or use serial connection mentioned here NOTE: Connecting with MuxPi through serial will automatically login as non root user pi with password pi . User interface Features operable directly via NanoPi GPIOs: #Pin (board) #WiringNP Description Low state \"0\" High state \"1\" 12 1 LED1 LED off LED on 13 2 LED2 LED off LED on 15 3 Power (Cortex m0) Power off Power on 7 7 Boot (Cortex m0) Execution mode Flashing mode NOTE: Initially, above GPIOs are not exported. Set GPIOs mode with gpio mode <#WiringNP> out . Example LED1 control: LED1 on: gpio write 1 1 LED1 off: gpio write 1 0 Example of flashing Cortex-M0 is described here . The microcontroller is connected to NanoPi NEO with UART. This UART is connected to third UART of NanoPi - /dev/ttyS2. The port is configured to 115200,8,N1 and cannot be changed without modification of the firmware. The protocol is text based, simple and human readable. Each command has to be ended with 'n' or 'r' character. Each command is confirmed with 'OK' string or error string. It is recommended to use screen program for communication: Install screen: sudo apt-get install screen Open connection (from muxPi): screen /dev/ttyS2 115200,cs8,ixon,ixoff Write help and press Enter . Features operable through Cortex-M0 microcontroller (help output): help --- This help version --- Display version of the firmware echo --- Get ( no arguments ) or set ( 'on' or 'off' ) echo on serial \"console\" : echo [ on | off ] . The default value is on. power --- Get ( no arguments ) or set ( 'on' or 'off' ) or switch off and on ( 'tick' ) power supply for DUT: power [ on | off | tick ] hdmi --- Get ( no arguments ) or set ( 'on' or 'off' ) HDMI HOTPLUG pin: hdmi [ on | off ] dyper --- Get ( no second argument ) or set ( 'on' or 'off' ) DyPer state: dyper 1 | 2 [ on | off ] mux --- Connect microSD card to external connector ( DUT ) or card reader ( ts ) : mux [ dut | ts ] dut --- Connect microSD card and power to DUT: dut ts --- Connect microSD card and power to TS: ts led --- Get ( no second or third argument ) or set ( 'R G B' ) color of led ( 1 | 2 ) , ex: led 1 255 0 255 clr --- Clear oled display text --- Print text on the OLED display: text x y color content draw --- Draw an object on the OLED display: draw object x1 y1 [ x2 y2 ] , objects are: - point x y color - draws one point at given coordinates - line x1 y1 x2 y2 color - draws line between given coordinates - rectangle left top width height color - draws line between given coordinates - circle x y radius color - draws line between given coordinates color must be 'on' , 'off' or 'inv' adc --- Print current adc value of all ( if no arguments are given ) or one specified channel, ex: adc 1 voltage --- Print current voltage [ mV ] of all ( if no arguments are given ) or one specified channel, ex: voltage 1 current --- Print current current [ mA ] being consumed by DUT lthor --- Get ( no second argument ) or set state of lthor control signals: - lthor switch [ usb | uart ] - redirect DUT 's USB wires to NanoPi' s 'usb' or 'uart' - lthor id [ usb | uart ] - switch DUT 's USB to ' usb ' or ' uart ' mode - lthor vbus [on|off] - switch DUT' s VBUS 'on' or 'off' - lthor combo [ usb | uart ] - make DUT and MuxPi USB work in 'usb' or 'uart' mode - no get function key --- Get current state of given key or both if no key number is given: key [ 1 | 2 ] uart --- Get current value of UART voltage or set if new value is given [ in millivolts ] Images source: Wiki Tizen","title":"Theory of Operations"},{"location":"transparent-validation/muxpi/theory-of-operations/#muxpi-theory-of-operations","text":"","title":"MuxPi - Theory of Operations"},{"location":"transparent-validation/muxpi/theory-of-operations/#block-diagram","text":"","title":"Block diagram"},{"location":"transparent-validation/muxpi/theory-of-operations/#muxpi-setup","text":"","title":"muxPi setup"},{"location":"transparent-validation/muxpi/theory-of-operations/#software-installation","text":"NOTE: It is recommended to cross-compile muxPi's software on your host machine","title":"Software installation"},{"location":"transparent-validation/muxpi/theory-of-operations/#dut-setup","text":"","title":"DUT setup"},{"location":"transparent-validation/muxpi/theory-of-operations/#interacting-with-muxpi","text":"","title":"Interacting with muxPi"},{"location":"transparent-validation/pikvm/assembly-and-validation/","text":"Presale device assembly and validation Introduction This document describes the assembly procedure of the PiKVM (device based on Raspberry Pi 4 or Raspberry Pi Zero 2W) with components specified in requirements . Requirements Note that the PiKVM build might be basing on two types of Raspberry Pi: RPi 4 or RPi Zero 2W. Hardware components necessary to build PiKVM on RPi Zero 2W: Raspberry Pi Zero 2W, microSD card 16 GB, USB-A 5 V 3.1 A charger (female socket), HDMI to CSI-2 bridge, Raspberry Pi Zero Camera Cable, HDMI-HDMI cable, USB A - micro USB cable (male, male), Y-splitter cable. (Optional) UART -> USB converter Hardware components necessary to build PiKVM on RPi 4: Raspberry Pi 4, microSD card 16 GB, USB-A 5 V 3.1 A charger (female socket), HDMI to CSI-2 bridge, HDMI-HDMI cable, USB A - USB C cable, Y-splitter cable. (Optional) UART -> USB converter Device assembly The following section of the documentation shows the assembly procedure for PiKVM including setting up a WiFi connection and methods for reading device IP. Set based on RPi Zero 2W preparation The section below describes the method of preparing PiKVM hardware based on RPI Zero 2W. Connect SD card and HDMI to CSI-2 bridge with camera cable: Block USB power from device under test by preparing USB cable: Connect HDMI cable from the device under test to HDMI -> CSI-2 bridge. Connect the USB splitter to the Raspberry Pi micro USB port. Connect one side of the splitter to USB-A 5 V 3.1 A charger. Connect other side to device under test via USB cable with blocked power. Set based on RPi 4 preparation To build PiKVM on RPi 4, use the RPI 0 set documentation and replace the cable for connecting to the RPi and the cable for connecting with the CSI-2 bridge. OS image building and flashing Prepare the OS in accordance with the PiKVM Handbook . Flash the SD card using bmaptool or balenaEtcher . to do this by balenaEtcher go to the producer site and follow his procedure on how to download and flash an SD card. to do this by bmaptool reproduce the following steps: install bmaptool by opening the terminal and typing the following command: sudo apt install bmap-tools create the bmap by typing the following command: bmaptool create /path/to/your/image > /path/where/you/want/bmap/file/saved/bmapfilename.bmap flash image to the SD card by typing the following command: sudo bmaptool copy --bmap ~/path/where/your/bmap/file/is/located /path/where/your/image/is/located /path/to/memory/device Insert the flashed SD card into the SD card slot on the PiKVM. Set up WiFi The section below describes the method of setting up a WiFi connection for the PiKVM. This section is dedicated especially to the PiKVMs based on RPi Zero 2W, which is not equipped with an Ethernet port. Mount the first partition of the memory card. Edit or make the pikvm.txt file in the following convention: FIRSTBOOT = 1 WIFI_ESSID = \"name\" WIFI_PASSWD = \"password\" Note: Do not remove line FIRSTBOOT=1 or FIRST_BOOT-1 line. It may occur with troubles with the device starts. Unmount the first partition of the memory card. Note: In some countries, in which WiFi channel 13 is in use, the device might not connect to the WiFi. To prevent this, the router should be configured properly: channels 12-14 or Auto Scan mode should be disabled. Read IP address The section below describes the known methods of reading PiKVM IP. First option: from os repository run the following command: make scan Example output: . . . ===== Toolbox image is ready ===== ===== Searching for Pis in the local network ===== docker run \\ --rm \\ --tty \\ --net host \\ pi-builder-arm-toolbox arp-scan --localnet | grep -Pi \"\\s(b8:27:eb:|dc:a6:32:)\" || true 192 .168.4.13 dc:a6:32:aa:aa:aa Raspberry Pi Trading Ltd Second option: open the web interface of your router and find the list of issued IP addresses. Localization of the mentioned list depends on the router model. Third option: solder pins for serial output as on images below: Check Raspberry Pi Zero2W IP by booting to system and reading information via serial (eg.) UART -> USB converter. Device validation Connect the device to the mains. Login to RTE via ssh (by using earlier obtained IP address) or minicom (by using USB-UART converter with 3 wire cables). FullHD stream In order to enable FullHD stream (1920x1080) instead of 1200x720. One of the reasons to enable FullHD is that certain proprietary BIOSes implement a GUI setup which scales well only for Full HD or higher resolutions (in extreme cases it can even crash if lower than FullHD resolution is used). To enable FullHD resolution, one has to replace the EDID on PiKVM. To do so: Remount the filesystem to RW if necessary using rw command. Save the follow HEX to /root/edid.hexxecute: kvmd-edidconf --edid=/root/edid.hex --apply Execute: kvmd-edidconf --import=/root/edid.hex Switch the filesystem back to RO using ro command. When PiKVM is connected to the platform, the BIOS or OS should initialize the display with 1920x1080 resolution. Where to buy? The PiKVM is available in our online shop .","title":"Assembly and validation"},{"location":"transparent-validation/pikvm/assembly-and-validation/#presale-device-assembly-and-validation","text":"","title":"Presale device assembly and validation"},{"location":"transparent-validation/pikvm/assembly-and-validation/#introduction","text":"This document describes the assembly procedure of the PiKVM (device based on Raspberry Pi 4 or Raspberry Pi Zero 2W) with components specified in requirements .","title":"Introduction"},{"location":"transparent-validation/pikvm/assembly-and-validation/#requirements","text":"Note that the PiKVM build might be basing on two types of Raspberry Pi: RPi 4 or RPi Zero 2W. Hardware components necessary to build PiKVM on RPi Zero 2W: Raspberry Pi Zero 2W, microSD card 16 GB, USB-A 5 V 3.1 A charger (female socket), HDMI to CSI-2 bridge, Raspberry Pi Zero Camera Cable, HDMI-HDMI cable, USB A - micro USB cable (male, male), Y-splitter cable. (Optional) UART -> USB converter Hardware components necessary to build PiKVM on RPi 4: Raspberry Pi 4, microSD card 16 GB, USB-A 5 V 3.1 A charger (female socket), HDMI to CSI-2 bridge, HDMI-HDMI cable, USB A - USB C cable, Y-splitter cable. (Optional) UART -> USB converter","title":"Requirements"},{"location":"transparent-validation/pikvm/assembly-and-validation/#device-assembly","text":"The following section of the documentation shows the assembly procedure for PiKVM including setting up a WiFi connection and methods for reading device IP.","title":"Device assembly"},{"location":"transparent-validation/pikvm/assembly-and-validation/#device-validation","text":"Connect the device to the mains. Login to RTE via ssh (by using earlier obtained IP address) or minicom (by using USB-UART converter with 3 wire cables).","title":"Device validation"},{"location":"transparent-validation/pikvm/assembly-and-validation/#fullhd-stream","text":"In order to enable FullHD stream (1920x1080) instead of 1200x720. One of the reasons to enable FullHD is that certain proprietary BIOSes implement a GUI setup which scales well only for Full HD or higher resolutions (in extreme cases it can even crash if lower than FullHD resolution is used). To enable FullHD resolution, one has to replace the EDID on PiKVM. To do so: Remount the filesystem to RW if necessary using rw command. Save the follow HEX to /root/edid.hexxecute: kvmd-edidconf --edid=/root/edid.hex --apply Execute: kvmd-edidconf --import=/root/edid.hex Switch the filesystem back to RO using ro command. When PiKVM is connected to the platform, the BIOS or OS should initialize the display with 1920x1080 resolution.","title":"FullHD stream"},{"location":"transparent-validation/pikvm/assembly-and-validation/#where-to-buy","text":"The PiKVM is available in our online shop .","title":"Where to buy?"},{"location":"transparent-validation/rte/introduction/","text":"RTE Introduction RTE is certified Open Source Hardware , so based on published schematics you can build and modify PCB yourself. RTE is a hat designed for Orange Pi Zero board which runs specially crafted Linux distribution using the Yocto Project. RTE boards are used for controlling Device Under Test fully remotely through the network interface. Most common applications are: debugging tasks, flashing firmware, controlling GPIOs power management for Device Under Test . Where to buy? RTE can be also bought in our 3mdeb shop . Full Remote Testing Environment set includes: Category Description Quantity shield Remote Testing Environment v1.1.0 1 control unit Orange Pi Zero 256MB RAM version 1 power supply MicroUSB 5V/2A 1 storage SanDisk 16GB microSD card (with preinstalled compatible system) 1 clip Pomona 8-pin SOIC clip for Device Under Test SPI interface 1 cables standard female-female connection wire 2.56mm raster 8 cables IDC 8-pin wires for Device Under Test SPI interface 1 cables DC Jack - DC Jack power cable for Device Under Test 1 cables RS232 D-Sub 9P/9P cable for serial communication 1 jumpers jumper for UART OUTPUT SELECT header 2 spacers Polyamide M3 spacers and bolts 4 Why choose 3mdeb RTE? high accessibility and flexibility test your device from any location. efficiency simplify validation: write one script and run it on unlimited platforms. Don\u2019t repeat yourself! independent development open hardware license: modify, upgrade and set it as you like. All blueprints are at your disposal. instant setup intuitive connection: you do not need to be a certified engineer. automation time is money: let the machine do all the work for you","title":"Introduction"},{"location":"transparent-validation/rte/introduction/#rte-introduction","text":"RTE is certified Open Source Hardware , so based on published schematics you can build and modify PCB yourself. RTE is a hat designed for Orange Pi Zero board which runs specially crafted Linux distribution using the Yocto Project. RTE boards are used for controlling Device Under Test fully remotely through the network interface. Most common applications are: debugging tasks, flashing firmware, controlling GPIOs power management for Device Under Test .","title":"RTE Introduction"},{"location":"transparent-validation/rte/introduction/#where-to-buy","text":"RTE can be also bought in our 3mdeb shop . Full Remote Testing Environment set includes: Category Description Quantity shield Remote Testing Environment v1.1.0 1 control unit Orange Pi Zero 256MB RAM version 1 power supply MicroUSB 5V/2A 1 storage SanDisk 16GB microSD card (with preinstalled compatible system) 1 clip Pomona 8-pin SOIC clip for Device Under Test SPI interface 1 cables standard female-female connection wire 2.56mm raster 8 cables IDC 8-pin wires for Device Under Test SPI interface 1 cables DC Jack - DC Jack power cable for Device Under Test 1 cables RS232 D-Sub 9P/9P cable for serial communication 1 jumpers jumper for UART OUTPUT SELECT header 2 spacers Polyamide M3 spacers and bolts 4","title":"Where to buy?"},{"location":"transparent-validation/rte/introduction/#why-choose-3mdeb-rte","text":"high accessibility and flexibility test your device from any location. efficiency simplify validation: write one script and run it on unlimited platforms. Don\u2019t repeat yourself! independent development open hardware license: modify, upgrade and set it as you like. All blueprints are at your disposal. instant setup intuitive connection: you do not need to be a certified engineer. automation time is money: let the machine do all the work for you","title":"Why choose 3mdeb RTE?"},{"location":"transparent-validation/rte/revision-history/","text":"Revision history v1.1.0 added Open hardware logo added SW1 reset button added D5 relay state LED indicator added J16 2x3pin UART OUTPUT SELECT header added J18 1x2pin UART1 header added 1.8V stabilizer populated SPI Vcc pin modified capacitors near MAX3232 SOIC reduced OC buffers GPIO header (J11) from 12 to 9 pin eliminated issue with J6 USB port (unreliable detection of USB devices) v1.0.0 added RoHS logo added Crossed Wheelie Bin logo modified footprints of the pin headers v0.5.3 enlarged added holes v0.5.2 modified I2C GPIO expander outputs connections (now 4 of them are connected to the dedicated header) modified version number on board removed SPI header for APU recovery with output pin role information labels removed 7 and 8 pin of SPI header with GPIO expander connection v0.5.1 added micro USB connector for power supply added 5 V power supply pins added SPI connector for APU SPI recovery added fiducials on the bottom layer added pins information labels modified relay control system elements placement modified SPI connector for APU paths placement modified project text descriptions removed 2 pin GPIO expander connector v0.5 added 5 V power supply signal diode (red) + limiting current resistor added 3.3 V power supply signal diode (orange) + limiting current resistor relay NO/NC connection switched to the previous configuration switched SPI1_MISO with SPI1_MOSI output mirrored RS232 socket pads removed I2C pull-up resistors v0.3.6 relay NO/NC connection switched v0.3.5 enlarged the hole diameter by 0.1 mm v0.3.4 added 3mdeb logo and board name on PCB modified elements marks placing v0.3.3 added SPI output IO pins connection with GPIO added PCB mechanical schematic added I2C INT pins connection added mounting holes added fiducials modified MOSFET transistor pinout numeration modified USB footprint from horizontal to vertical modified I2C GPIO expander with OC buffers connection v0.3.2 added mounting holes modified relay pinout removed I2C to GND connection v0.3.1 modified power supply from 5V to 3V3 for I2C bus MCP23017 , and MAX3232 removed capacitors connected to the I2C bus v0.3 added I2C bus with output header added MCP23017 I2C GPIO expander added second SN74LS06 OC buffer added relay with required neighboring items added MAX3232 RS232 electrical level changer added RS232 socket added GPIO output header for pins unused to OC buffer control modified some of input pins connection removed ARK joint for the relay module removed header for relay module control","title":"Revision History"},{"location":"transparent-validation/rte/revision-history/#revision-history","text":"","title":"Revision history"},{"location":"transparent-validation/rte/revision-history/#v110","text":"added Open hardware logo added SW1 reset button added D5 relay state LED indicator added J16 2x3pin UART OUTPUT SELECT header added J18 1x2pin UART1 header added 1.8V stabilizer populated SPI Vcc pin modified capacitors near MAX3232 SOIC reduced OC buffers GPIO header (J11) from 12 to 9 pin eliminated issue with J6 USB port (unreliable detection of USB devices)","title":"v1.1.0"},{"location":"transparent-validation/rte/revision-history/#v100","text":"added RoHS logo added Crossed Wheelie Bin logo modified footprints of the pin headers","title":"v1.0.0"},{"location":"transparent-validation/rte/revision-history/#v053","text":"enlarged added holes","title":"v0.5.3"},{"location":"transparent-validation/rte/revision-history/#v052","text":"modified I2C GPIO expander outputs connections (now 4 of them are connected to the dedicated header) modified version number on board removed SPI header for APU recovery with output pin role information labels removed 7 and 8 pin of SPI header with GPIO expander connection","title":"v0.5.2"},{"location":"transparent-validation/rte/revision-history/#v051","text":"added micro USB connector for power supply added 5 V power supply pins added SPI connector for APU SPI recovery added fiducials on the bottom layer added pins information labels modified relay control system elements placement modified SPI connector for APU paths placement modified project text descriptions removed 2 pin GPIO expander connector","title":"v0.5.1"},{"location":"transparent-validation/rte/revision-history/#v05","text":"added 5 V power supply signal diode (red) + limiting current resistor added 3.3 V power supply signal diode (orange) + limiting current resistor relay NO/NC connection switched to the previous configuration switched SPI1_MISO with SPI1_MOSI output mirrored RS232 socket pads removed I2C pull-up resistors","title":"v0.5"},{"location":"transparent-validation/rte/revision-history/#v036","text":"relay NO/NC connection switched","title":"v0.3.6"},{"location":"transparent-validation/rte/revision-history/#v035","text":"enlarged the hole diameter by 0.1 mm","title":"v0.3.5"},{"location":"transparent-validation/rte/revision-history/#v034","text":"added 3mdeb logo and board name on PCB modified elements marks placing","title":"v0.3.4"},{"location":"transparent-validation/rte/revision-history/#v033","text":"added SPI output IO pins connection with GPIO added PCB mechanical schematic added I2C INT pins connection added mounting holes added fiducials modified MOSFET transistor pinout numeration modified USB footprint from horizontal to vertical modified I2C GPIO expander with OC buffers connection","title":"v0.3.3"},{"location":"transparent-validation/rte/revision-history/#v032","text":"added mounting holes modified relay pinout removed I2C to GND connection","title":"v0.3.2"},{"location":"transparent-validation/rte/revision-history/#v031","text":"modified power supply from 5V to 3V3 for I2C bus MCP23017 , and MAX3232 removed capacitors connected to the I2C bus","title":"v0.3.1"},{"location":"transparent-validation/rte/revision-history/#v03","text":"added I2C bus with output header added MCP23017 I2C GPIO expander added second SN74LS06 OC buffer added relay with required neighboring items added MAX3232 RS232 electrical level changer added RS232 socket added GPIO output header for pins unused to OC buffer control modified some of input pins connection removed ARK joint for the relay module removed header for relay module control","title":"v0.3"},{"location":"transparent-validation/rte/v1.1.0/flashing-guide/","text":"Flashing guide This document describes how to set up external flashing for the devices using RTE. NS5x/7x 12th Generation Prerequisites Prepared RTE WSON8 probe Flashing Unscrew the bottom cover of the laptop. Disconnect the battery All power must be removed from the laptop during flashing. Localize the flash chip. Take the WSON8 probe and locate the white dot on the needles side. The dot indicates the first reference pin that should be connected to the pin on the flash chip also marked with a dot. Connect the cables coming out from the WSON8 probe to the SPI header according to the pictures and table below. Top view of flash chip: Table with all required connections: RTE SPI header Flash Chip Vcc VCC CS CS# MISO (SO) SO (IO1) GND VSS SCLK SCLK MOSI (SI) SI Note: both the SPI header and the WSON8 probe have 8-pin headers. Pins marked as NC on the RTE board and as IO2 and IO3 on the flash chip do not require a connection. Example connection appearance: Put the flash script on RTE: The next steps require the device with Linux OS, it is possible to do this on e.g. Windows, but the procedure will be different. Open the terminal and run the following commands: git clone https://github.com/3mdeb/RteCtrl.git cd RteCtrl/scripts/ Use scp to transfer flash script, in places marked with XX enter the RTE IP address, which you can check with the command ip a : scp flash.sh root@XX.XX.XX.XX:/home/root/ Login to RTE via ssh or minicom . Connect and hold the WSON8 probe to the flash chip. Read the flash chip by executing the following command on RTE: ./flash.sh read dump.rom If the reading was successful, the output from the command above should contain the phrase Verifying flash... VERIFIED. . Only after the entire script has been executed, the WSON8 probe can be disconnected. Connect and hold again the WSON8 probe to the flash chip. Write the flash chip by executing the following command on RTE: ./flash.sh write coreboot.rom If the writing was successful, the output from the command above should contain the phrase Verifying flash... VERIFIED. . Only after the entire script has been executed, the WSON8 probe can be disconnected. Reconnect the battery and screw in the bottom cover. Power on the device. If the platform is booting up and basic functionalities are working, the entire procedure was successful.","title":"Flashing Guide"},{"location":"transparent-validation/rte/v1.1.0/flashing-guide/#flashing-guide","text":"This document describes how to set up external flashing for the devices using RTE.","title":"Flashing guide"},{"location":"transparent-validation/rte/v1.1.0/flashing-guide/#ns5x7x-12th-generation","text":"","title":"NS5x/7x 12th Generation"},{"location":"transparent-validation/rte/v1.1.0/quick-start-guide/","text":"Quick start guide The canonical example of RTE usage is hooking it to some hardware for SPI flashing, power control and serial logs gathering. This document describes the common preparation of RTE without listed functions. Prerequisites RTE board (this document is based on v1.1.0) Micro-USB 5V 2.5A power supply Orange Pi SD card Ethernet cable USB-UART converter with 3 wire cables Ubuntu (based on 22.04) Preparation of RTE Download the latest version of the RTE image from the meta-rte repository . Flash the SD card using bmaptool or balenaEtcher . to do this by balenaEtcher go to the producer site and follow his procedure on how to download and flash an SD card. to do this by bmaptool reproduce the following steps: install bmaptool by opening the terminal and typing the following command: sudo apt install bmap-tools create the bmap by typing the following command: bmaptool create /path/to/your/image > /path/where/you/want/bmap/file/saved/bmapfilename.bmap flash image to the SD card by typing the following command: sudo bmaptool copy --bmap ~/path/where/your/bmap/file/is/located /path/where/your/image/is/located /path/to/memory/device Insert Orange Pi into RTE. Insert SD card into Orange Pi. Connect the ethernet cable to Orange Pi. Plug the USB-UART converter into your computer and connect its pins with RTE J2 Header . (you may need a USB extension cable) UART Converter RTE J2 Header GND GND TXD RX RXD TX Open the serial connection with RTE from your PC using a previously connected USB-UART converter by executing the following command: sudo minicom -D /dev/ttyUSB<x> Substitute <x> with the device number corresponding to your USB-UART Converter for example /dev/ttyUSB0 . The dmesg command allows to identify the latest connected devices. Plug the power supply into the RTE J17 Micro-USB slot. Login into the device by using the default credentials: Login: root Password: meta-rte","title":"Quick Start Guide"},{"location":"transparent-validation/rte/v1.1.0/quick-start-guide/#quick-start-guide","text":"The canonical example of RTE usage is hooking it to some hardware for SPI flashing, power control and serial logs gathering. This document describes the common preparation of RTE without listed functions.","title":"Quick start guide"},{"location":"transparent-validation/rte/v1.1.0/quick-start-guide/#prerequisites","text":"RTE board (this document is based on v1.1.0) Micro-USB 5V 2.5A power supply Orange Pi SD card Ethernet cable USB-UART converter with 3 wire cables Ubuntu (based on 22.04)","title":"Prerequisites"},{"location":"transparent-validation/rte/v1.1.0/quick-start-guide/#preparation-of-rte","text":"Download the latest version of the RTE image from the meta-rte repository . Flash the SD card using bmaptool or balenaEtcher . to do this by balenaEtcher go to the producer site and follow his procedure on how to download and flash an SD card. to do this by bmaptool reproduce the following steps: install bmaptool by opening the terminal and typing the following command: sudo apt install bmap-tools create the bmap by typing the following command: bmaptool create /path/to/your/image > /path/where/you/want/bmap/file/saved/bmapfilename.bmap flash image to the SD card by typing the following command: sudo bmaptool copy --bmap ~/path/where/your/bmap/file/is/located /path/where/your/image/is/located /path/to/memory/device Insert Orange Pi into RTE. Insert SD card into Orange Pi. Connect the ethernet cable to Orange Pi. Plug the USB-UART converter into your computer and connect its pins with RTE J2 Header . (you may need a USB extension cable) UART Converter RTE J2 Header GND GND TXD RX RXD TX Open the serial connection with RTE from your PC using a previously connected USB-UART converter by executing the following command: sudo minicom -D /dev/ttyUSB<x> Substitute <x> with the device number corresponding to your USB-UART Converter for example /dev/ttyUSB0 . The dmesg command allows to identify the latest connected devices. Plug the power supply into the RTE J17 Micro-USB slot. Login into the device by using the default credentials: Login: root Password: meta-rte","title":"Preparation of RTE"},{"location":"transparent-validation/rte/v1.1.0/reference-os/","text":"Dasharo RTE Reference OS Our specially crafted operating system fully customized for Remote Testing Environment platform aspects. meta-rte is based on open-source project - Yocto Project used for building Linux-based systems regardless of the hardware architecture. meta-rte has most mandatory tools and dependencies required for everyday debugging task with various range of hardware. RTE running meta-rte is ready to use completely out of the box, without the need for additional laborious configuration. Moreover, open-source solutions such as the Yocto Project and meta-rte provides possibility to rebuild the whole system strictly for the end users requirements, making the whole set more universal with endless applications! More information can be found in meta-rte repository","title":"RTE Reference OS"},{"location":"transparent-validation/rte/v1.1.0/reference-os/#dasharo-rte-reference-os","text":"Our specially crafted operating system fully customized for Remote Testing Environment platform aspects. meta-rte is based on open-source project - Yocto Project used for building Linux-based systems regardless of the hardware architecture. meta-rte has most mandatory tools and dependencies required for everyday debugging task with various range of hardware. RTE running meta-rte is ready to use completely out of the box, without the need for additional laborious configuration. Moreover, open-source solutions such as the Yocto Project and meta-rte provides possibility to rebuild the whole system strictly for the end users requirements, making the whole set more universal with endless applications! More information can be found in meta-rte repository","title":"Dasharo RTE Reference OS"},{"location":"transparent-validation/rte/v1.1.0/serial-port-connection-guide/","text":"Serial port connection guide This document describes how to set up a serial connection between RTE and another device. Prerequisites Prepared RTE Two jumpers Choose one of the following cables depending on the connectivity to your platform: RS232<->RJ45 cable, RS232<->RS232 cable, USB<->RS232 cable, micro-USB<->USB cable, 3-wire cable. Setting serial connection Put the two jumpers on RTE J16 Header : For the RS232 port, they join COM and RS232 rows both on RX and TX columns. For the UART port (only during using a 3-wire cable), they join COM and EXT rows both on RX and TX columns. For the micro-USB-USB cable, jumpers aren't required. Connect the RTE header (J14 or J18) with the device serial port. Use the cable according to the DUT specification: DUT has a serial port -> needs to use an RS232<->RS232 cable. DUT has the debug port in the form of the RJ45 -> needs to use an RS232<->RJ45 cable. DUT has the debug port in the form of the USB -> needs to use an RS232<->USB cable. DUT has the debug port in the form of the micro-USB -> needs to use a micro-USB<->USB cable. DUT doesn't have a port but has pins for serial connection on the board -> need to use a 3-wire cable. Connect with RTE via ssh or minicom . To connect via ssh is required to know RTE IP and connection to the internet on both sides. While using a minicom there is a need to use the USB-UART converter. There are two ways to open a serial connection: Telnet - by executing the following command: telnet 192 .168.X.X 13541 To configure telnet connections, update the file /etc/ser2net.conf using vim . Then reboot the RTE to apply the changes. The dmesg command allows to identify the latest connected devices. Minicom - by executing the following command: minicom -D /dev/ttyS1 -o -b 115200 Replace ttyS1 with ttyUSB0 while using micro-USB-USB cable.","title":"Serial Port Connection Guide"},{"location":"transparent-validation/rte/v1.1.0/serial-port-connection-guide/#serial-port-connection-guide","text":"This document describes how to set up a serial connection between RTE and another device.","title":"Serial port connection guide"},{"location":"transparent-validation/rte/v1.1.0/serial-port-connection-guide/#prerequisites","text":"Prepared RTE Two jumpers Choose one of the following cables depending on the connectivity to your platform: RS232<->RJ45 cable, RS232<->RS232 cable, USB<->RS232 cable, micro-USB<->USB cable, 3-wire cable.","title":"Prerequisites"},{"location":"transparent-validation/rte/v1.1.0/serial-port-connection-guide/#setting-serial-connection","text":"Put the two jumpers on RTE J16 Header : For the RS232 port, they join COM and RS232 rows both on RX and TX columns. For the UART port (only during using a 3-wire cable), they join COM and EXT rows both on RX and TX columns. For the micro-USB-USB cable, jumpers aren't required. Connect the RTE header (J14 or J18) with the device serial port. Use the cable according to the DUT specification: DUT has a serial port -> needs to use an RS232<->RS232 cable. DUT has the debug port in the form of the RJ45 -> needs to use an RS232<->RJ45 cable. DUT has the debug port in the form of the USB -> needs to use an RS232<->USB cable. DUT has the debug port in the form of the micro-USB -> needs to use a micro-USB<->USB cable. DUT doesn't have a port but has pins for serial connection on the board -> need to use a 3-wire cable. Connect with RTE via ssh or minicom . To connect via ssh is required to know RTE IP and connection to the internet on both sides. While using a minicom there is a need to use the USB-UART converter. There are two ways to open a serial connection: Telnet - by executing the following command: telnet 192 .168.X.X 13541 To configure telnet connections, update the file /etc/ser2net.conf using vim . Then reboot the RTE to apply the changes. The dmesg command allows to identify the latest connected devices. Minicom - by executing the following command: minicom -D /dev/ttyS1 -o -b 115200 Replace ttyS1 with ttyUSB0 while using micro-USB-USB cable.","title":"Setting serial connection"},{"location":"transparent-validation/rte/v1.1.0/specification/","text":"RTE elements UART0 header - 1x3 Orange Pi Zero system debug output and console (pins: RX , TX , GND ). SPI header - 2x4 standard 2.5mm IDC compatible header with all necessary signals to flash SPI chips. Orange Pi Zero GPIO - 1x3 GPIO pin header directly connected to Orange Pi zero platform. I2C header - 1x4 populated pins: 3.3V , SCK , SDA , GND . OC buffers output - 1x12 GPIO pin header connected to Open Collector buffers. DUT power control connectors - 2x DC jack 5.5/2.1mm female connectors for a Device Under Test power supply controlled directly through the relay. Reset button - Simple switch to reset RTE RS232 - DB9 male connector for RS232 communication with a hardware flow control. UART output select header 2x3 UART OUTPUT SELECT header destined for selecting serial output between UART1 header and DB9 RS232 connector. UART1 header - 1x3 UART header for 3V3 serial communication with DUT (pins: RX , TX , GND ). 2x USB connectors - Connect additional storages, external flash programmers, USB-RS232 or USB-UART converters. 5V header - 1x2 5V output populated pins: 5V , GND . expander GPIO - 1x4 GPIO pin header connected to GPIOs expander with no OC buffers. Relay - Controls Device Under Tests power supply micro USB connector - Connector for powering up RTE and OrangePi Zero setup. Product features Key features Cheaper and more feature-rich in comparison to other products Ultra-fast SPI flashing (16MHz) In-Circuit Programming (program onboard SPI Flash) Pomona connector to work with Serial Flash soldered on board Two logic levels SPI (1.8V and 3.3V) Remote power control over the target device Open Hardware Open Source software attached Open Source REST API controller Cost-free future software improvements RteCtrl: Web interface RteCtrl is a REST API controller used for RTE board. It comes with meta-rte operating system and starts automatically on port 8000 without the necessity of additional configuration. REST API dashboard can be reached through the Internet browser and provides a possibility to: control Device Under Test power supply (coldboot and warmboot) reset Device Under Test platform flash Device Under Test firmware More information can be found at RteCtrl repository DISCLAIMER: Before starting the flashing procedure through REST API console, make sure that appropriate SPI logic levels are set accordingly to SPI section. Specification GPIO header (1) First GPIO header ( J1 ) is a 1x3 pin header straight type 2.54mm pitch. It is derived directly from Orange Pi GPIOs for general use. By default, these GPIOs are set to INPUT mode. Maximum voltage for all data signals: 3.3 V. Description Pin # GPIO12 1 GPIO11 2 GPIO6 3 GPIO header (2) Second GPIO header ( J10 ) is a 1x4 pin header straight type 2.54mm pitch. It is derived from GPIO expander on RTE board. They are accessible for general use. By default, these GPIOs are set to INPUT mode. Maximum voltage for all data signals: 3.3 V. Expander GPIO: 25 mA maximum output current. Description Pin # GPIO400 1 GPIO401 2 GPIO402 3 GPIO403 4 GPIO header (3) Third GPIO header ( J11 ) is a 1x9 pin header straight type 2.54mm pitch. It is derived from GPIO expander on RTE board with an additional connection to OC (Open Collector) buffers. By default, these GPIOs are set to OUTPUT mode. Maximum voltage for all data signals: 3.3 V. OC buffers: 40 mA maximum output current. Description Pin # GPIO407 1 GPIO415 2 GPIO414 3 GPIO408 4 GPIO409 5 GPIO410 6 GPIO411 7 GPIO412 8 GPIO413 9 I2C header I2C header ( J9 ) is 1x4 pin header straight type 2.54mm pitch. It is used to rather low-speed applications such as reading sensors or accessing DACs and ADCs. Maximum voltage for all data signals: 3.3 V. Description Pin # 3V3 1 SCK 2 SDA 3 GND 4 SPI header SPI header ( J7 ) is a 2x4 pin header straight type 2.54mm pitch. It is used to control the application SPI flash with a minimal set of connections. Maximum voltage for all data signals: 3.3 V. Description Pin # Pin # Description Vcc 1 2 GND CS 3 4 SCLK MISO (SO) 5 6 MOSI (SI) ISP 7 8 NC Revision v1.1.0 features new possibilities for SPI configuration: SPI Vcc pin has been populated - power is now supplied to the SPI Vcc connector and can be enabled/disabled on demand: GPIO406 (OC_OUT1) state SPI Vcc 0 - low disabled (by default) 1 - high enabled user can choose the voltage level for Vcc SPI - either 1.8V or 3.3 V: GPIO405 (OC_OUT2) state SPI Vcc voltage level 0 - low 1.8 V (by default) 1 - high 3.3 V user can enable/disable SPI lines (some platforms have problems when booting with SPI wires connected): GPIO404 (OC_OUT3) state SPI lines (MOSI/MISO/CS/SCLK) 0 - low disabled (by default) 1 - high enabled UART OUTPUT SELECT header UART OUTPUT SELECT header ( J16 ) is a 2x3 pin header straight type 2.54mm pitch. It is used for enabling serial communication output: RS232 DB9 port ( J14 ) or UART1 header ( J18 ). If jumpers are not attached, serial ports are disabled. Jumper position (TX) Jumper position (RX) Serial communication enabled RS232 + COM RS232 + COM RS232 DB9 port (J14) EXT + COM EXT + COM 3.3V UART1 header (J18) RS232 connector RS232 connector ( J14 ) is a DB9 male 9 pin connector for serial communication between Remote Testing Environment and Device Under Test platform. It supports a hardware flow control. RS232 connector can be enabled/disabled according to UART OUTPUT SELECT section. Pin # Signal Description 1 DCD Data Carrier Detect 2 RXD Receive Data 3 TXD Transmit Data 4 DTR Data Terminal Ready 5 GND Signal Ground 6 DSR Data Set Ready 7 RTS Request to Send 8 CTS Clear to Send 9 RI Ring Indicator UART0 header UART0 header ( J2 ) is a 1x3 pin header straight type 2.54mm pitch. It is derived from Orange Pi Zero serial debug UART for debugging and serial communication purposes. Maximum voltage for all data signals: 3.3 V. Description Pin # GND 1 RX 2 TX 3 UART1 header UART1 header ( J18 ) is a 1x3 pin header straight type 2.54mm pitch. It is used for serial communication with DUT. UART1 header can be enabled/disabled according to UART OUTPUT SELECT section. Maximum voltage for all data signals: 3.3 V. Description Pin # GND 1 RX 2 TX 3 Power output header Power output header ( J15 ) is 1x2 pin header straight type 2.54mm pitch. It is used for additional 5V or ground pin connections with various devices. Description Pin # 5V 1 GND 2 DC jack Two DC Jacks ( J12 and J13 ) are 5.5/2.1mm female plug connectors used for Device Under Test power supply. The output from DC Jacks is controlled through a relay. There is no matter whether J12 or J13 plug is input/output for power supply. Relay Relay ( K1 ) is a mechanical switch for controlling Device Under Test power supply. Technical reference: 1 Form C (1PDT) contact arrangement 5 V coil nominal voltage 70 Ohms nominal resistance 72 mA nominal current 24 VDC maximal input voltage 10 A maximal input voltage Expected relay life: 100 000 operations Relay state is indicated by LED ( D5 ) located near relay and can be controlled via meta-rte operating system through GPIO199: GPIO199 state Relay state D5 LED state 0 OFF OFF 1 ON ON USB connectors USB connectors ( J6 , J8 ) available on RTE are additional USB type A ports derived from Orange Pi Zero header. They can be used for storage extension, serial communication through various adapters or USB programmer extension. microUSB connector The micro USB connector ( J17 ) is a USB B micro socket for powering up RTE and OrangePi Zero setup. It is required to use a 5V/2A power adapter. There is no difference whether the user plugs the power supply to the micro USB connector located on RTE board or use OrangePi Zero original socket. Reset button Reset button ( SW1 ) located near relay is used for resetting the RTE itself. How to set GPIO states to flash SPI? Set proper SPI Vcc Voltage: Adequate Vcc voltege is necessary for successful flash procedure. If it will be to low chip will not recognize any signals, if too high chip will be damaged. echo 0 > /sys/class/gpio/gpio405/value Or when flash chip operates on 3.3V: echo 1 > /sys/class/gpio/gpio405/value Enable SPI Vcc: echo 1 > /sys/class/gpio/gpio406/value Enable SPI signals: echo 1 > /sys/class/gpio/gpio404/value Flash SPI chip: flashrom -w /path/to/coreboot.rom -p linux_spi:dev = /dev/spidev1.0,spispeed = 16000 When done, change back all states: echo 0 > /sys/class/gpio/gpio405/value echo 0 > /sys/class/gpio/gpio406/value echo 0 > /sys/class/gpio/gpio404/value","title":"Specification"},{"location":"transparent-validation/rte/v1.1.0/specification/#rte-elements","text":"UART0 header - 1x3 Orange Pi Zero system debug output and console (pins: RX , TX , GND ). SPI header - 2x4 standard 2.5mm IDC compatible header with all necessary signals to flash SPI chips. Orange Pi Zero GPIO - 1x3 GPIO pin header directly connected to Orange Pi zero platform. I2C header - 1x4 populated pins: 3.3V , SCK , SDA , GND . OC buffers output - 1x12 GPIO pin header connected to Open Collector buffers. DUT power control connectors - 2x DC jack 5.5/2.1mm female connectors for a Device Under Test power supply controlled directly through the relay. Reset button - Simple switch to reset RTE RS232 - DB9 male connector for RS232 communication with a hardware flow control. UART output select header 2x3 UART OUTPUT SELECT header destined for selecting serial output between UART1 header and DB9 RS232 connector. UART1 header - 1x3 UART header for 3V3 serial communication with DUT (pins: RX , TX , GND ). 2x USB connectors - Connect additional storages, external flash programmers, USB-RS232 or USB-UART converters. 5V header - 1x2 5V output populated pins: 5V , GND . expander GPIO - 1x4 GPIO pin header connected to GPIOs expander with no OC buffers. Relay - Controls Device Under Tests power supply micro USB connector - Connector for powering up RTE and OrangePi Zero setup.","title":"RTE elements"},{"location":"transparent-validation/rte/v1.1.0/specification/#product-features","text":"","title":"Product features"},{"location":"transparent-validation/rte/v1.1.0/specification/#specification","text":"","title":"Specification"},{"location":"transparent-validation/rte/v1.1.0/specification/#how-to-set-gpio-states-to-flash-spi","text":"Set proper SPI Vcc Voltage: Adequate Vcc voltege is necessary for successful flash procedure. If it will be to low chip will not recognize any signals, if too high chip will be damaged. echo 0 > /sys/class/gpio/gpio405/value Or when flash chip operates on 3.3V: echo 1 > /sys/class/gpio/gpio405/value Enable SPI Vcc: echo 1 > /sys/class/gpio/gpio406/value Enable SPI signals: echo 1 > /sys/class/gpio/gpio404/value Flash SPI chip: flashrom -w /path/to/coreboot.rom -p linux_spi:dev = /dev/spidev1.0,spispeed = 16000 When done, change back all states: echo 0 > /sys/class/gpio/gpio405/value echo 0 > /sys/class/gpio/gpio406/value echo 0 > /sys/class/gpio/gpio404/value","title":"How to set GPIO states to flash SPI?"},{"location":"transparent-validation/sd-wire/getting-started/","text":"SDWire is a small board with two features SD card reader SD card MUX SDWire allows to flash SD card connected to the DUT (Device Under Test), without physical contact with the device. There is only one micro USB socket for connecting to host PC. Both USB mass storage and MUX control are served through the same USB connection. The PCB board is designed in such way that it fits into micro SD card slots. Thanks to this, there is no need for special cables with a micro SD adapter .","title":"Getting started"},{"location":"transparent-validation/sd-wire/getting-started/#sdwire-is-a-small-board-with-two-features","text":"SD card reader SD card MUX SDWire allows to flash SD card connected to the DUT (Device Under Test), without physical contact with the device. There is only one micro USB socket for connecting to host PC. Both USB mass storage and MUX control are served through the same USB connection. The PCB board is designed in such way that it fits into micro SD card slots. Thanks to this, there is no need for special cables with a micro SD adapter .","title":"SDWire is a small board with two features"},{"location":"transparent-validation/sd-wire/specification/","text":"Hardware design Design of this board is based on SD MUX . SDWire does not have power switch or USB switch but has built in USB SD card reader. SD card multiplexer itself is exactly the same in both devices. There are four LEDs on the board: red - power presence from USB blue - USB reader activity blue - card connected to TS ( Test Server ) green - card connected to DUT ( Device Under Test ) All LEDs are present on both sides of the board to make them visible no matter which side of the board will be facing you. LED positions are showed in the image below. Source: wiki.tizen.org PCB elements and scheme Source: wiki.tizen.org","title":"Specification"},{"location":"transparent-validation/sd-wire/specification/#hardware-design","text":"Design of this board is based on SD MUX . SDWire does not have power switch or USB switch but has built in USB SD card reader. SD card multiplexer itself is exactly the same in both devices. There are four LEDs on the board: red - power presence from USB blue - USB reader activity blue - card connected to TS ( Test Server ) green - card connected to DUT ( Device Under Test ) All LEDs are present on both sides of the board to make them visible no matter which side of the board will be facing you. LED positions are showed in the image below. Source: wiki.tizen.org","title":"Hardware design"},{"location":"transparent-validation/sd-wire/specification/#pcb-elements-and-scheme","text":"Source: wiki.tizen.org","title":"PCB elements and scheme"},{"location":"transparent-validation/sd-wire/usage-validation/","text":"SDWire usage Environment preparation SDWire has dedicated software which is a simple tool meant to control the hardware. Source code of the tool is published on tizen git server. This is simple to use, command-line utility software written in C and based on open-source libFTDI library. To prepare the environment reproduce the following steps: Clone the repository: git clone https://git.tizen.org/cgit/tools/testlab/sd-mux Install all needed dependencies: Ubuntu/Debian: sudo apt-get install libftdi1-dev libpopt-dev cmake Fedora/Red Hat: sudo dnf install libftdi-devel popt-devel cmake gcc gcc-c++ Enter into sd-mux project directory and reproduce the following steps to build project: open directory in terminal create 'build' directory by the following command: mkdir build enter into 'build' directory by the following command: cd build run the following commands one by one: cmake .. make In the above-described directory ( sd-mux/build ) run the following command to build binary: sudo make install Note, that the above-described command installs binary into '/usr/local/bin'. If you want to install files in directory rather than the default one add an argument to cmake command: cmake -DCMAKE_INSTALL_PREFIX = /usr .. Then it is obligatory to run again the following commands: make make install First use The following procedure should be performed not only before the first use of the device, but also as the presale validation procedure! Hardware requirements: SDWire SD card DUT (Device Under Test) bootable from SD card (for example: RPI, Orange PI etc.) DUT power supply Micro-USB --> USB cable TS (Test Server) - in most cases personal computer with prepared environment. To perform first use (assuming Raspberry Pi platform as a DUT) procedure reproduce the following steps: Prepare environment in accordance with this section . Insert SD card to the SDWire. Put SDWire into the DUT (Device Under Test). Prepare a micro USB --> USB cable. It will be used to connect SDWire to TS (Test Server). Check whether SDWire is configured by reproducing the following steps: run in TS terminal the following command: dmesg -w connect the SDWire to your machine using micro-USB --> USB cable. after connecting your dmesg output should looks like this: ( ... ) [ 73278 .307591 ] usb-storage 3 -1.1:1.0: USB Mass Storage device detected [ 73278 .307823 ] scsi host6: usb-storage 3 -1.1:1.0 [ 73278 .384925 ] usb 3 -1.2: new full-speed USB device number 45 using xhci_hcd [ 73278 .492025 ] usb 3 -1.2: New USB device found, idVendor = 0403 , idProduct = 6015 , bcdDevice = 10 .00 [ 73278 .492027 ] usb 3 -1.2: New USB device strings: Mfr = 1 , Product = 2 , SerialNumber = 3 [ 73278 .492028 ] usb 3 -1.2: Product: FT200X USB I2C [ 73278 .492029 ] usb 3 -1.2: Manufacturer: FTDI [ 73278 .492030 ] usb 3 -1.2: SerialNumber: DB007V7V ( ... ) open new terminal window and run the following command: sudo sd-mux-ctrl --list If output looks like below, it means that SDWire is configured and ready to use. Now, you can go to point 6 in this section. Number of FTDI devices found: 1 Dev: 0 , Manufacturer: SRPOL, Serial: sd-wire_11, Description: sd-wire Otherwise, if output shows no devices (like in the example below): Number of FTDI devices found: 0 you have to configure SDWire: sudo sd-mux-ctrl --device-serial = DB007V7V --vendor = 0x0403 --product = 0x6015 --device-type = sd-wire --set-serial = sd-wire_11 where: --device-serial = <SerialNumber> ( from dmesg output ) --vendor = 0x<idVendor> ( from dmesg output ) --product = 0x<idProduct> ( from dmesg output ) --set-serial = <New serial device> After above-desribed procedure check again if SDWire is properly configured: sudo sd-mux-ctrl --list Should output: Number of FTDI devices found: 1 Dev: 0 , Manufacturer: SRPOL, Serial: sd-wire_11, Description: sd-wire Connect SD card to the TS (Test Server): sudo sd-mux-ctrl --device-serial = sd-wire_11 --ts Flash the SD card using bmaptool or balenaEtcher. download the OS image for the target DUT - link for RPi image to do this by balenaEtcher go to the producer site and follow his procedure how to download and flash SD card to do this by bmaptool reproduce the following steps: install bmaptool by opening terminal and typing the following command: sudo apt install bmap-tools create the bmap by typing the following command: bmaptool create /path/to/your/image > /path/where/you/want/bmap/file/saved/bmapfilename.bmap flash image to the SD card by typing the following command: sudo bmaptool copy --bmap ~/path/where/your/bmap/file/is/located /path/where/your/image/is/located /path/to/memory/device Connect SD card to the DUT using sd-mux-ctrl : sudo sd-mux-ctrl --device-serial = sd-wire_11 --dut Connect power supply to the DUT and check if it boots properly from newly burned image. Everyday use scenario Disconnect power supply from the DUT (Device Under Test). Disconnect micro SD card from the DUT. Connect micro SD card to the TS (Test Server) using card reader. Flash the SD card. Connect SD card to the DUT. Connect power supply to the DUT. Boot DUT from new image. Using SDWire there is no need to disconnect SD card from DUT. SDWire with RTE use scenario Insert SD card to the SDWire. Insert SDWire into the DUT and connect it to the TS with micro-USB --> USB cable. Connect RTE power control connectors to the DUT (RTE here is optional but highly recommended for remote work, because it helps with automated and remote power control of the connected device). Check serial no. of SDWire: sudo sd-mux-ctrl --list Output: Number of FTDI devices found: 1 Dev: 0 , Manufacturer: SRPOL, Serial: sd-wire_11, Description: sd-wire Disconnect power supply using RTE. Connect SD card to the TS (using sd-mux-ctrl) sudo sd-mux-ctrl --device-serial = sd-wire_11 --ts Flash the SD card using bmaptool or balenaEtcher as described in the First use section Connect SD card to the DUT (using sd-mux-ctrl) sudo sd-mux-ctrl --device-serial = sd-wire_11 --dut Connect power supply using RTE. DUT should boot from freshly burned SD card. Command sudo sd-mux-ctrl --device-serial=sd-wire_11 --status returns information if SDWire is connected to DUT or TS. \u279c ~ sudo sd-mux-ctrl --device-serial = sd-wire_11 --status SD connected to: TS At the moment RTE does not support sd-mux-ctrl, so SDWire must be controlled from configured TS (Test Server). References & Projects: https://wiki.tizen.org/SDWire Ethernet camera module build \u2013 Automated flashing SD Wire & 3d Printer Usage","title":"Usage"},{"location":"transparent-validation/sd-wire/usage-validation/#sdwire-usage","text":"","title":"SDWire usage"},{"location":"transparent-validation/sd-wire/usage-validation/#environment-preparation","text":"SDWire has dedicated software which is a simple tool meant to control the hardware. Source code of the tool is published on tizen git server. This is simple to use, command-line utility software written in C and based on open-source libFTDI library. To prepare the environment reproduce the following steps: Clone the repository: git clone https://git.tizen.org/cgit/tools/testlab/sd-mux Install all needed dependencies: Ubuntu/Debian: sudo apt-get install libftdi1-dev libpopt-dev cmake Fedora/Red Hat: sudo dnf install libftdi-devel popt-devel cmake gcc gcc-c++ Enter into sd-mux project directory and reproduce the following steps to build project: open directory in terminal create 'build' directory by the following command: mkdir build enter into 'build' directory by the following command: cd build run the following commands one by one: cmake .. make In the above-described directory ( sd-mux/build ) run the following command to build binary: sudo make install Note, that the above-described command installs binary into '/usr/local/bin'. If you want to install files in directory rather than the default one add an argument to cmake command: cmake -DCMAKE_INSTALL_PREFIX = /usr .. Then it is obligatory to run again the following commands: make make install","title":"Environment preparation"},{"location":"transparent-validation/sd-wire/usage-validation/#first-use","text":"The following procedure should be performed not only before the first use of the device, but also as the presale validation procedure! Hardware requirements: SDWire SD card DUT (Device Under Test) bootable from SD card (for example: RPI, Orange PI etc.) DUT power supply Micro-USB --> USB cable TS (Test Server) - in most cases personal computer with prepared environment. To perform first use (assuming Raspberry Pi platform as a DUT) procedure reproduce the following steps: Prepare environment in accordance with this section . Insert SD card to the SDWire. Put SDWire into the DUT (Device Under Test). Prepare a micro USB --> USB cable. It will be used to connect SDWire to TS (Test Server). Check whether SDWire is configured by reproducing the following steps: run in TS terminal the following command: dmesg -w connect the SDWire to your machine using micro-USB --> USB cable. after connecting your dmesg output should looks like this: ( ... ) [ 73278 .307591 ] usb-storage 3 -1.1:1.0: USB Mass Storage device detected [ 73278 .307823 ] scsi host6: usb-storage 3 -1.1:1.0 [ 73278 .384925 ] usb 3 -1.2: new full-speed USB device number 45 using xhci_hcd [ 73278 .492025 ] usb 3 -1.2: New USB device found, idVendor = 0403 , idProduct = 6015 , bcdDevice = 10 .00 [ 73278 .492027 ] usb 3 -1.2: New USB device strings: Mfr = 1 , Product = 2 , SerialNumber = 3 [ 73278 .492028 ] usb 3 -1.2: Product: FT200X USB I2C [ 73278 .492029 ] usb 3 -1.2: Manufacturer: FTDI [ 73278 .492030 ] usb 3 -1.2: SerialNumber: DB007V7V ( ... ) open new terminal window and run the following command: sudo sd-mux-ctrl --list If output looks like below, it means that SDWire is configured and ready to use. Now, you can go to point 6 in this section. Number of FTDI devices found: 1 Dev: 0 , Manufacturer: SRPOL, Serial: sd-wire_11, Description: sd-wire Otherwise, if output shows no devices (like in the example below): Number of FTDI devices found: 0 you have to configure SDWire: sudo sd-mux-ctrl --device-serial = DB007V7V --vendor = 0x0403 --product = 0x6015 --device-type = sd-wire --set-serial = sd-wire_11 where: --device-serial = <SerialNumber> ( from dmesg output ) --vendor = 0x<idVendor> ( from dmesg output ) --product = 0x<idProduct> ( from dmesg output ) --set-serial = <New serial device> After above-desribed procedure check again if SDWire is properly configured: sudo sd-mux-ctrl --list Should output: Number of FTDI devices found: 1 Dev: 0 , Manufacturer: SRPOL, Serial: sd-wire_11, Description: sd-wire Connect SD card to the TS (Test Server): sudo sd-mux-ctrl --device-serial = sd-wire_11 --ts Flash the SD card using bmaptool or balenaEtcher. download the OS image for the target DUT - link for RPi image to do this by balenaEtcher go to the producer site and follow his procedure how to download and flash SD card to do this by bmaptool reproduce the following steps: install bmaptool by opening terminal and typing the following command: sudo apt install bmap-tools create the bmap by typing the following command: bmaptool create /path/to/your/image > /path/where/you/want/bmap/file/saved/bmapfilename.bmap flash image to the SD card by typing the following command: sudo bmaptool copy --bmap ~/path/where/your/bmap/file/is/located /path/where/your/image/is/located /path/to/memory/device Connect SD card to the DUT using sd-mux-ctrl : sudo sd-mux-ctrl --device-serial = sd-wire_11 --dut Connect power supply to the DUT and check if it boots properly from newly burned image.","title":"First use"},{"location":"transparent-validation/sd-wire/usage-validation/#everyday-use-scenario","text":"Disconnect power supply from the DUT (Device Under Test). Disconnect micro SD card from the DUT. Connect micro SD card to the TS (Test Server) using card reader. Flash the SD card. Connect SD card to the DUT. Connect power supply to the DUT. Boot DUT from new image. Using SDWire there is no need to disconnect SD card from DUT.","title":"Everyday use scenario"},{"location":"transparent-validation/sd-wire/usage-validation/#sdwire-with-rte-use-scenario","text":"Insert SD card to the SDWire. Insert SDWire into the DUT and connect it to the TS with micro-USB --> USB cable. Connect RTE power control connectors to the DUT (RTE here is optional but highly recommended for remote work, because it helps with automated and remote power control of the connected device). Check serial no. of SDWire: sudo sd-mux-ctrl --list Output: Number of FTDI devices found: 1 Dev: 0 , Manufacturer: SRPOL, Serial: sd-wire_11, Description: sd-wire Disconnect power supply using RTE. Connect SD card to the TS (using sd-mux-ctrl) sudo sd-mux-ctrl --device-serial = sd-wire_11 --ts Flash the SD card using bmaptool or balenaEtcher as described in the First use section Connect SD card to the DUT (using sd-mux-ctrl) sudo sd-mux-ctrl --device-serial = sd-wire_11 --dut Connect power supply using RTE. DUT should boot from freshly burned SD card. Command sudo sd-mux-ctrl --device-serial=sd-wire_11 --status returns information if SDWire is connected to DUT or TS. \u279c ~ sudo sd-mux-ctrl --device-serial = sd-wire_11 --status SD connected to: TS At the moment RTE does not support sd-mux-ctrl, so SDWire must be controlled from configured TS (Test Server). References & Projects: https://wiki.tizen.org/SDWire Ethernet camera module build \u2013 Automated flashing SD Wire & 3d Printer Usage","title":"SDWire with RTE use scenario"},{"location":"transparent-validation/supermicro_x11_lga1151_series/theory-of-operation/","text":"Supermicro X11 LGA1151 Series theory of operation Remote power control using ipmitool To remote control supermicro you can use ipmitool. ipmitool -H [ bmc_ip ] -U [ bmc_username ] -P [ bmc_password ] chassis power off ipmitool -H [ bmc_ip ] -U [ bmc_username ] -P [ bmc_password ] chassis power on ipmitool -H [ bmc_ip ] -U [ bmc_username ] -P [ bmc_password ] chassis power cycle ipmitool -H [ bmc_ip ] -U [ bmc_username ] -P [ bmc_password ] chassis power reset Enabling SOL This procedure is based on this documentation . Follow the steps below to set up a serial connection via ssh: Enable SOL/COM2 console in BIOS. To do that in BIOS go to the Advanced section, then select Serial Port Console Redirection and set the SOL/COM2 Console Redirection option to Enabled state. Edit the /etc/default/grub on your Linux-based OS file by adding: linux /vmlinuz ro console=ttyS1,115200n8 earlyprintk=serial,ttyS1,115200n8 NOTE: If your Linux-based OS is QubesOS you should additionally remove the plymouth.ignore-serial-consoles phase to enable password disk authentication via SOL Add the following lines to the ~/.ssh/config file on your machine: Host <IP> HostKeyAlgorithms = +ssh-rsa PubkeyAcceptedAlgorithms = +ssh-rsa Connect with BMC via ssh: ssh ADMIN@<IP> Then run the following command: cd system1/sol1 And start the serial console: start If you want to run the SOL console again, repeat points 4-6. Using Supermicro Update Manager (SUM) Supermicro Update Manager is a proprietary tool for interacting with Supermicro BMC. It can be used to change BIOS settings or mount virtual drive through CLI, among other things. Examples below assume that SUM was downloaded and extracted, and commands are executed from directory with sum executable. Mounting floppy image ./sum -i [ bmc_ip ] -u [ bmc_username ] -p [ bmc_password ] -c MountFloppyImage --file path/to/file.img Mounting ISO image Contrary to mounting floppy, for ISO you have to pass URL instead of path to local file. SUM supports SAMBA, HTTP and, in latest versions, HTTPS. ./sum -i [ bmc_ip ] -u [ bmc_username ] -p [ bmc_password ] -c MountIsoImage --image_url http://www.example.com/cd.iso Reading default and current BIOS configuration To read out default settings: ./sum -i [ bmc_ip ] -u [ bmc_username ] -p [ bmc_password ] -c GetDefaultBiosCfg --file bios.cfg To get current settings instead, change GetDefaultBiosCfg to GetCurrentBiosCfg . In both cases, you can omit --file bios.cfg to print the settings to standard output. Writing settings to BIOS ./sum -i [ bmc_ip ] -u [ bmc_username ] -p [ bmc_password ] -c ChangeBiosCfg --file bios.cfg There are additional switches to this command like --reboot and --post_complete , but they require cooperation from the running OS. These commands result in OS displaying power off (or log out) window, as if power button was pressed. After 5 minutes or so a hard reboot is initiated. This gives user a chance to save current work, but for test automation this may be unnecessary delay. File passed to this command can be a full configuration saved by one of the previous commands, or it can be simplified to contain just the settings that are to be changed, together with their section headers. Any option not listed in simplified file will not be changed. For example, to enable TXT you can use file with following content: [Advanced|Trusted Computing] TXT Support=01","title":"Theory of Operation"},{"location":"transparent-validation/supermicro_x11_lga1151_series/theory-of-operation/#supermicro-x11-lga1151-series-theory-of-operation","text":"","title":"Supermicro X11 LGA1151 Series theory of operation"},{"location":"transparent-validation/supermicro_x11_lga1151_series/theory-of-operation/#remote-power-control-using-ipmitool","text":"To remote control supermicro you can use ipmitool. ipmitool -H [ bmc_ip ] -U [ bmc_username ] -P [ bmc_password ] chassis power off ipmitool -H [ bmc_ip ] -U [ bmc_username ] -P [ bmc_password ] chassis power on ipmitool -H [ bmc_ip ] -U [ bmc_username ] -P [ bmc_password ] chassis power cycle ipmitool -H [ bmc_ip ] -U [ bmc_username ] -P [ bmc_password ] chassis power reset","title":"Remote power control using ipmitool"},{"location":"transparent-validation/supermicro_x11_lga1151_series/theory-of-operation/#enabling-sol","text":"This procedure is based on this documentation . Follow the steps below to set up a serial connection via ssh: Enable SOL/COM2 console in BIOS. To do that in BIOS go to the Advanced section, then select Serial Port Console Redirection and set the SOL/COM2 Console Redirection option to Enabled state. Edit the /etc/default/grub on your Linux-based OS file by adding: linux /vmlinuz ro console=ttyS1,115200n8 earlyprintk=serial,ttyS1,115200n8 NOTE: If your Linux-based OS is QubesOS you should additionally remove the plymouth.ignore-serial-consoles phase to enable password disk authentication via SOL Add the following lines to the ~/.ssh/config file on your machine: Host <IP> HostKeyAlgorithms = +ssh-rsa PubkeyAcceptedAlgorithms = +ssh-rsa Connect with BMC via ssh: ssh ADMIN@<IP> Then run the following command: cd system1/sol1 And start the serial console: start If you want to run the SOL console again, repeat points 4-6.","title":"Enabling SOL"},{"location":"transparent-validation/supermicro_x11_lga1151_series/theory-of-operation/#using-supermicro-update-manager-sum","text":"Supermicro Update Manager is a proprietary tool for interacting with Supermicro BMC. It can be used to change BIOS settings or mount virtual drive through CLI, among other things. Examples below assume that SUM was downloaded and extracted, and commands are executed from directory with sum executable.","title":"Using Supermicro Update Manager (SUM)"},{"location":"unified/clevo/post-install/","text":"Post-installation setup This document contains extra steps to perform after installing Dasharo in order to enable full functionality of your device. Linux This section covers Linux post-install steps tested on Ubuntu 22.04. It is likely thas similar procedures would for others Linux distributions as well. Touchpad hotkey enablement The touchpad hotkey needs extra setup to function correctly under Linux. To enable the touchpad hotkey to work under Linux, follow the steps below: Execute fixup script: curl -sSf https://raw.githubusercontent.com/Dasharo/dasharo-tools/main/clevo/touchpad-fixup | sudo sh After executing these steps, it should be possible to enable and disable the touchpad using the touchpad hotkey (Fn+F1) on the keyboard when using GNOME. Touchpad multi-touch support On NS7x an additional fix is necessary to enable multi-touch on Linux. Create a file /etc/modprobe.d/blacklist-psmouse.conf with the following contents: blacklist psmouse and then run the following commands: sudo depmod -a sudo update-initramfs -u Updated kernel On Gen 12 (Alder Lake), it's recommended to install the ubuntu-oem kernel which is a newer version than the default Ubuntu kernel. This version contains additional fixes for newer hardware which helps with power management and suspend on Gen 12 laptops. To install the ubuntu-oem kernel, run the following command: sudo apt install linux-oem-22.04a and reboot to use the new kernel. Nvidia drivers It is only necessary to follow this step if your device has Nvidia GPU For proper working of the sleep mode on Ubuntu 22.04, it is required to install additional Nvidia drivers. Install drivers by executing the following command in the terminal: sudo apt install nvidia-driver-515 nvidia-dkms-515 Reboot the device to apply changes by executing the following command in the terminal: sudo reboot (Optional) For power saving while the card is not in use, enable On-Demand mode in NVIDIA Control Panel: Suspend fix for SATA disks Only affects laptops with M.2 SATA disks experiencing sleep issues (the power LED not blinking while the laptop is suspended) Windows and certain Linux distros such as Ubuntu do not enable the necessary power saving tweaks to enable sleep mode while a SATA disk is installed. Execute fixup script: curl -sSf https://raw.githubusercontent.com/Dasharo/dasharo-tools/main/clevo/sata-suspend-fixup | sudo sh Windows 11 Updates and drivers installation Several features on Windows 11 (i. e. suspending the device) may not work or work unexpectedly without installing all of the updates and drivers. To install all of them, log into the system, connect the device to the mains and Internet, then follow the steps below: Press the Windows button on the keypad. Type Windows Update Settings in the search and press Enter . Select the Check for updates bar to start installing available updates and drivers. During this process previously selected bar might be changed to Restart now or Retry , so click them if something hasn't been installed yet, something has gone wrong or a restart is just required. The entire process may take up to 30 minutes. Select the Advanced options option in the Windows Update Settings window. Locate the Optional updates option and click on it. Select all displayed updates and drivers. Select the Download & Install bar to start installing additional updates and drivers. During this process previously selected bar might be changed to Restart now or Retry , so click them if something hasn't been installed yet, something has gone wrong or a restart is just required. The entire process may take up to 30 minutes. Repeat all steps until all updates have been installed. Suspend fix for SATA disks (Windows and Linux) Only affects laptops with M.2 SATA disks experiencing sleep issues (the power LED not blinking while the laptop is suspended). Windows and certain Linux distros such as Ubuntu do not enable the necessary power saving tweaks to enable sleep mode while a SATA disk is installed. Download the script: link Double click on the script to install the tweak Headset jack fix for NV4x 12th Gen The headset jack in NV4x 12th Gen (Alder Lake) needs a fix that is available starting with kernel version v6.0 (patch be561ffad708f0cee18aee4231f80ffafaf7a419 ). If you are using an older kernel, you need to add the fix manually: Execute fixup script: curl -sSf https://raw.githubusercontent.com/Dasharo/dasharo-tools/main/clevo/nv4x-audio-fixup | sudo sh Reboot. The audio jack will now work correctly.","title":"Post-installation setup"},{"location":"unified/clevo/post-install/#post-installation-setup","text":"This document contains extra steps to perform after installing Dasharo in order to enable full functionality of your device.","title":"Post-installation setup"},{"location":"unified/clevo/post-install/#linux","text":"This section covers Linux post-install steps tested on Ubuntu 22.04. It is likely thas similar procedures would for others Linux distributions as well.","title":"Linux"},{"location":"unified/clevo/post-install/#windows-11","text":"","title":"Windows 11"},{"location":"unified/msi/building-manual/","text":"Building manual Intro This documents describes the procedure for compiling Dasharo firmware compatible with MSI PRO Z690-A and MSI PRO Z790-P. Requirements Ubuntu 20.04/21.04/22.04 as a host OS was tested Internet connection Docker installed follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux Git, wget, unzip installed sudo apt install git unzip wget UEFIExtract installed this tool is used in the build.sh script to extract CPU microcode from the original MSI firmware sudo apt install wget wget https://github.com/LongSoft/UEFITool/releases/download/A59/UEFIExtract_NE_A59_linux_x86_64.zip unzip UEFIExtract_NE_A59_linux_x86_64.zip sudo cp ./UEFIExtract /usr/local/bin Procedure Obtain Dasharo source code: PRO Z690-A (WIFI) DDR4 PRO Z690-A (WIFI) PRO Z790-P (WIFI) DDR4 PRO Z790-P (WIFI) Replace the REVISION with one of the: msi_ms7d25/release for the latest released version msi_ms7d25_vVERSION (e.g. msi_ms7d25_v1.1.2 ) for the given release Replace the REVISION with one of the: msi_ms7d25/release for the latest released version msi_ms7d25_vVERSION (e.g. msi_ms7d25_v1.1.2 ) for the given release Replace the REVISION with one of the: msi_ms7d25/release for the latest released version msi_ms7e06_vVERSION (e.g. msi_ms7e06_v0.9.0 ) for the given release Replace the REVISION with one of the: msi_ms7d25/release for the latest released version msi_ms7e06_vVERSION (e.g. msi_ms7e06_v0.9.0 ) for the given release git clone https://github.com/Dasharo/coreboot.git -b REVISION cd coreboot Start the build process: PRO Z690-A (WIFI) DDR4 PRO Z690-A (WIFI) PRO Z790-P (WIFI) DDR4 PRO Z790-P (WIFI) ./build.sh z690a_ddr4 The resulting Dasharo firmware image will be placed at $PWD/msi_ms7d25_VERSION_ddr4.rom . ./build.sh z690a_ddr5 The resulting Dasharo firmware image will be placed at $PWD/msi_ms7d25_VERSION_ddr5.rom . ./build.sh z790p_ddr4 The resulting Dasharo firmware image will be placed at $PWD/msi_ms7e06_VERSION_ddr4.rom . ./build.sh z790p_ddr5 The resulting Dasharo firmware image will be placed at $PWD/msi_ms7e06_VERSION_ddr4.rom .","title":"Building manual"},{"location":"unified/msi/building-manual/#building-manual","text":"","title":"Building manual"},{"location":"unified/msi/building-manual/#intro","text":"This documents describes the procedure for compiling Dasharo firmware compatible with MSI PRO Z690-A and MSI PRO Z790-P.","title":"Intro"},{"location":"unified/msi/building-manual/#requirements","text":"Ubuntu 20.04/21.04/22.04 as a host OS was tested Internet connection Docker installed follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux Git, wget, unzip installed sudo apt install git unzip wget UEFIExtract installed this tool is used in the build.sh script to extract CPU microcode from the original MSI firmware sudo apt install wget wget https://github.com/LongSoft/UEFITool/releases/download/A59/UEFIExtract_NE_A59_linux_x86_64.zip unzip UEFIExtract_NE_A59_linux_x86_64.zip sudo cp ./UEFIExtract /usr/local/bin","title":"Requirements"},{"location":"unified/msi/building-manual/#procedure","text":"Obtain Dasharo source code: PRO Z690-A (WIFI) DDR4 PRO Z690-A (WIFI) PRO Z790-P (WIFI) DDR4 PRO Z790-P (WIFI) Replace the REVISION with one of the: msi_ms7d25/release for the latest released version msi_ms7d25_vVERSION (e.g. msi_ms7d25_v1.1.2 ) for the given release Replace the REVISION with one of the: msi_ms7d25/release for the latest released version msi_ms7d25_vVERSION (e.g. msi_ms7d25_v1.1.2 ) for the given release Replace the REVISION with one of the: msi_ms7d25/release for the latest released version msi_ms7e06_vVERSION (e.g. msi_ms7e06_v0.9.0 ) for the given release Replace the REVISION with one of the: msi_ms7d25/release for the latest released version msi_ms7e06_vVERSION (e.g. msi_ms7e06_v0.9.0 ) for the given release git clone https://github.com/Dasharo/coreboot.git -b REVISION cd coreboot Start the build process: PRO Z690-A (WIFI) DDR4 PRO Z690-A (WIFI) PRO Z790-P (WIFI) DDR4 PRO Z790-P (WIFI) ./build.sh z690a_ddr4 The resulting Dasharo firmware image will be placed at $PWD/msi_ms7d25_VERSION_ddr4.rom . ./build.sh z690a_ddr5 The resulting Dasharo firmware image will be placed at $PWD/msi_ms7d25_VERSION_ddr5.rom . ./build.sh z790p_ddr4 The resulting Dasharo firmware image will be placed at $PWD/msi_ms7e06_VERSION_ddr4.rom . ./build.sh z790p_ddr5 The resulting Dasharo firmware image will be placed at $PWD/msi_ms7e06_VERSION_ddr4.rom .","title":"Procedure"},{"location":"unified/msi/community-test-results/","text":"Community test results About The following document contains information about additional tests which were carried out on the MSI PRO Z690-A and MSI Z790-P platform with Dasharo firmware by community members. The following list is created based on the information from the community - people which are currently using the platform with Dasharo firmware. This document contains three main sections: - Contributing in which we are describing preferred of reporting the results. - Testing method in which we are describing our preferred testing method. - Hardware Compatible List in which in a labeled manner we show all tests carried out by the community. Contributing Feel free to perform different tests and report your results via email or submit a Pull Request to Dasharo documentation repository or by using Dasharo issues repository . Testing method Platform testing might be carried out on the basis of Dasharo Test Specification . If you prefer another mechanism for checking any functionality or check any mechanism that we did not include in the documentation - describe it in the test report issue. Community test results PRO Z690-A (WIFI) DDR4 PRO Z690-A (WIFI) PRO Z790-P (WIFI) DDR4 PRO Z790-P (WIFI) No. Description Link to description Notes 1. No. Description Link to description Notes 1. No. Description Link to description Notes 1. No. Description Link to description Notes 1.","title":"Community Test Results"},{"location":"unified/msi/community-test-results/#community-test-results","text":"","title":"Community test results"},{"location":"unified/msi/community-test-results/#about","text":"The following document contains information about additional tests which were carried out on the MSI PRO Z690-A and MSI Z790-P platform with Dasharo firmware by community members. The following list is created based on the information from the community - people which are currently using the platform with Dasharo firmware. This document contains three main sections: - Contributing in which we are describing preferred of reporting the results. - Testing method in which we are describing our preferred testing method. - Hardware Compatible List in which in a labeled manner we show all tests carried out by the community.","title":"About"},{"location":"unified/msi/community-test-results/#contributing","text":"Feel free to perform different tests and report your results via email or submit a Pull Request to Dasharo documentation repository or by using Dasharo issues repository .","title":"Contributing"},{"location":"unified/msi/community-test-results/#testing-method","text":"Platform testing might be carried out on the basis of Dasharo Test Specification . If you prefer another mechanism for checking any functionality or check any mechanism that we did not include in the documentation - describe it in the test report issue.","title":"Testing method"},{"location":"unified/msi/community-test-results/#community-test-results_1","text":"PRO Z690-A (WIFI) DDR4 PRO Z690-A (WIFI) PRO Z790-P (WIFI) DDR4 PRO Z790-P (WIFI) No. Description Link to description Notes 1. No. Description Link to description Notes 1. No. Description Link to description Notes 1. No. Description Link to description Notes 1.","title":"Community test results"},{"location":"unified/msi/development/","text":"Dasharo compatible with MSI PRO Z690-A and PRO Z790-P - development Intro This document gather various notes and documentation useful for development of Dasharo compatible with the MSI PRO Z690-A and PRO Z790-P platform. Hardware connection Requirements peripherals listed in the: PRO Z690-A Hardware Configuration Matrix PRO Z790-P Hardware Configuration Matrix RTE Sonoff S20 Smart Plug with custom firmware Serial debug Attach the jumpers in J16 header to enable header J18 according to the table below: Jumper position (TX) Jumper position (RX) EXT + COM EXT + COM Connect signals from the J18 header to serial receiver: RTE Msi Z690 J18 pin 1 (GND) JBD1 pin 1 (pin closer to JBAT1) J18 pin 2 (RX) JBD1 pin 2 (pin further from JBAT1) Pins on JBD1 are not described in the documentation. They have been discovered experimentally. Pay attention to the connections. Please also note that this is uni-directional communication. We can gether logs from booting, but we cannot provide input to the platform at the same time. SPI For external flashing, connect RTE with motherboard according to the table below: RTE SPI header MSI Z690-A/Z790-P J7 pin 1 (Vcc) JTPM1 pin 1 (SPI Power) J7 pin 2 (GND) JTPM1 pin 7 (GND) J7 pin 3 (CS) JTPM1 pin 5 (RESERVED / BIOS SPI CS pin) J7 pin 4 (SCLK) JTPM1 pin 6 (SPI Clock) J7 pin 5 (MISO) JTPM1 pin 3 (MISO) J7 pin 6 (MOSI) JTPM1 pin 4 (MOSI) JTPM1 is a 2mm pitch header, you will need 2mm to 2.54mm female-female dupont wires to connect to RTE. The JTPM1 pin5 is actually BIOS SPI CS pin (marked as reserved in the board manual). Example connection: Power control Power buttons control Connect 12V/4A power supply to RTE J13 connector to power on RTE Connect power control pins from mainboard to RTE according to the table below: JFP1 is located in the corner of the mainbaord, near SATA interface ports RTE MSI Z690-A/Z790-P J11 pin 9 JFP1 pin 6 (PWR_ON) J11 pin 8 JFP1 pin 7 (RST) J15 pin 1 (GND) JFP1 pin 5 (GND) Power supply control Connect SeaSonic FOCUS Plus Platinum power supply unit to the mains via Sonoff S20 Smart Plug . To power control via RTE, Sonoff smart plug","title":"Development"},{"location":"unified/msi/development/#dasharo-compatible-with-msi-pro-z690-a-and-pro-z790-p-development","text":"","title":"Dasharo compatible with MSI PRO Z690-A and PRO Z790-P - development"},{"location":"unified/msi/development/#intro","text":"This document gather various notes and documentation useful for development of Dasharo compatible with the MSI PRO Z690-A and PRO Z790-P platform.","title":"Intro"},{"location":"unified/msi/development/#hardware-connection","text":"","title":"Hardware connection"},{"location":"unified/msi/faq/","text":"FAQ Why MSI Z690-A (WIFI) (DDR4) was chosen for Dasharo ? Please read this extensive analysis contributed to Intel Reddit. Why do you use the nomenclature MSI Z690-A (WIFI) (DDR4) ? This nomenclature is the result of the naming used by the producer. MSI PRO Z690-A is the nomenclature used for naming the platform with DDR5 memory slots. If the platform is also equipped with the WiFi module, its naming nomenclature will additionally include the phrase WIFI . If instead of DDR5 memory slots, the platform is equipped with DDR4 memory slots, its naming nomenclature will additionally include the phrase DDR4 . Will this work on my MSI PRO Z690-A (model with DDR5 support)? Yes, during test procedures the Dasharo firmware work has been confirmed for the DDR5 platform without WIFI. Dasharo working correctness has not been tested on MSI PRO Z690-A WIFI . However, given that the difference is only the WiFi module, there should be no problems using Dasharo on it as well. Will this work on my MSI PRO Z690-A DDR4 ? Yes, during test procedures the Dasharo firmware work has been confirmed for the DDR4 WIFI platform. In turn, Dasharo working correctness on MSI PRO Z690-A DDR4 has been confirmed by the community. Can I safely try this on my board? If you are afraid of bricking the board and have no means of recovering from failed installation , we do not recommend trying it out until at least the v1.0.0 is released. Recovery process is not suitable for inexperienced users right now. We will be trying to make it easier, and if that happens, we may change our recommendation here. Can I destroy my hardware by installing this firmware? We give no warranty, although it is highly unlikely, provided that you use the supported board model and follow the Initial Deployment . In the worst scenario, you might \"brick\" the board, rendering it unbootable. It can be fixed by following the recovery procedure . In case of concerns, we invite you to buy the equipment directly in our online store with a subscription service, under which we perform the Dasharo installation with the latest release, and offer full support through invite-only Matrix channel. How can I know if the board is \"bricked\"? In such a case, you would get stuck with black screen on the display. There will be no beeping sounds from the buzzer as well. The only way to get some information on what's going on in that state is to use the Serial header to read out error information. What can be the reason of board \"bricking\"? The most common reason would be the fact that you DDR memory modules are not initialized properly. The other reason might be improper or interrupted installation. Please make sure to follow the Initial Deployment Manual correctly. How can I \"unbrick\" my board? Please follow the recovery procedure . Which CPUs are supported? We can say the \"supported\" one is the one that have been tested during Validation Procedure or have been tested by the community. The list of all supported CPUs is available in the CPU HCL documentation. In practice, any Alder Lake-S Processor should work. 12900KS is rather unknown at the moment, because it was released later and may require more recent microcode. Which memory modules are supported? We can say the \"supported\" one is the one that have been tested during Validation Procedure or have been tested by the community. The list of all supported memory modules is available in the Memory HCL documentation. What is the memory profile? Currently, Dasharo firmware picks the highest standard SPD Profile, no support for XMP ones. This means that on the Kingston modules it is actually working at 2400 MHz, but it is expected to work all the way to 3200 MHz. Why my GPU doesn't work on MSI PRO Z690-A (DDR4) (WIFI) ? Due to the fact, that there's no possibility to insert all available GPU drivers into the firmware, the solution in the form of the Option ROM is in use. Option ROMs are the drivers flashed in the GPUs non-volatile memory. These types of drivers can be divided into Legacy Option ROMs and EFI Option ROMs . Legacy Option ROMs are only supported on legacy BIOS, such as SeaBIOS. Legacy BIOS checks the availability of Option ROM and if its signature matches, it executes its entry point. This option ROM initializes the graphics. The only way to support Option ROM in UEFI is through CSM, which we do not have implemented. EFI Option ROMs are nothing more than EFI drivers which have the same form as the UEFI files (PE format). UEFI firmware scans the Option ROM space of the graphics card and if it finds a potential EFI Option ROM with PE signature, it executes the file. This option ROM initializes the graphics. Considering the above, the firmware might have a problem with initializing older graphics cards - UEFI standard appeared about 15 years ago. The problem might also be caused by an enabled Secure boot - because there is no certainty that EFI Option ROM is signed correctly. Which GPUs are supported? We can say the \"supported\" one is the one that have been tested during Validation Procedure or have been tested by the community. The list of all supported memory modules is available in the GPU HCL documentation. What does the obligatory Dasharo Subscripion includes? The Dasharo Subscription includes: The latest Dasharo Entry Subscription release installed by Dasharo Team Dasharo Updates \u2013 number of updates depends on the number of Dasharo Subscriptions sold and the availability of other funding (e.g., NLNet, corporate sponsors, community donations ) Priority support for Dasharo Subscribers through invite-only Matrix channel Influence on Dasharo features roadmap \u2013 you can have a real impact on Dasharo development by direct access with the developers or premium voting on github. You will gain the access to the dedicated channels on the matrix communicator. If you wish to share your Github nickname with us, the votes cast for the features that you would like to have implemented in the future will be treated with priority, i.e. they will have a higher priority than the votes of non-subscribers. By buying this product, you support open-source firmware and Dasharo distribution. What means in warranty conditions \"No signs of customer interference...\"? Full question: \"In the Disclaimer, you wrote that one of the warranty conditions is: \"No signs of customer interference with the platform or firmware.\" How would a user modify firmware without losing the warranty? Being open source to be easy to modify, then saying \"don't touch this\" seems contradictory. How would you add an exception?\" Playing with firmware parameters can result in damaging the mainboard. Such action excludes the acceptance of the return. You can improve the Dasharo by contributing, so we can pass Dasharo Certification Program and release it in the next version.","title":"FAQ"},{"location":"unified/msi/faq/#faq","text":"","title":"FAQ"},{"location":"unified/msi/faq/#why-msi-z690-a-wifi-ddr4-was-chosen-for-dasharo","text":"Please read this extensive analysis contributed to Intel Reddit.","title":"Why MSI Z690-A (WIFI) (DDR4) was chosen for Dasharo ?"},{"location":"unified/msi/faq/#why-do-you-use-the-nomenclature-msi-z690-a-wifi-ddr4","text":"This nomenclature is the result of the naming used by the producer. MSI PRO Z690-A is the nomenclature used for naming the platform with DDR5 memory slots. If the platform is also equipped with the WiFi module, its naming nomenclature will additionally include the phrase WIFI . If instead of DDR5 memory slots, the platform is equipped with DDR4 memory slots, its naming nomenclature will additionally include the phrase DDR4 .","title":"Why do you use the nomenclature MSI Z690-A (WIFI) (DDR4)?"},{"location":"unified/msi/faq/#will-this-work-on-my-msi-pro-z690-a-model-with-ddr5-support","text":"Yes, during test procedures the Dasharo firmware work has been confirmed for the DDR5 platform without WIFI. Dasharo working correctness has not been tested on MSI PRO Z690-A WIFI . However, given that the difference is only the WiFi module, there should be no problems using Dasharo on it as well.","title":"Will this work on my MSI PRO Z690-A (model with DDR5 support)?"},{"location":"unified/msi/faq/#will-this-work-on-my-msi-pro-z690-a-ddr4","text":"Yes, during test procedures the Dasharo firmware work has been confirmed for the DDR4 WIFI platform. In turn, Dasharo working correctness on MSI PRO Z690-A DDR4 has been confirmed by the community.","title":"Will this work on my MSI PRO Z690-A DDR4?"},{"location":"unified/msi/faq/#can-i-safely-try-this-on-my-board","text":"If you are afraid of bricking the board and have no means of recovering from failed installation , we do not recommend trying it out until at least the v1.0.0 is released. Recovery process is not suitable for inexperienced users right now. We will be trying to make it easier, and if that happens, we may change our recommendation here.","title":"Can I safely try this on my board?"},{"location":"unified/msi/faq/#can-i-destroy-my-hardware-by-installing-this-firmware","text":"We give no warranty, although it is highly unlikely, provided that you use the supported board model and follow the Initial Deployment . In the worst scenario, you might \"brick\" the board, rendering it unbootable. It can be fixed by following the recovery procedure . In case of concerns, we invite you to buy the equipment directly in our online store with a subscription service, under which we perform the Dasharo installation with the latest release, and offer full support through invite-only Matrix channel.","title":"Can I destroy my hardware by installing this firmware?"},{"location":"unified/msi/faq/#how-can-i-know-if-the-board-is-bricked","text":"In such a case, you would get stuck with black screen on the display. There will be no beeping sounds from the buzzer as well. The only way to get some information on what's going on in that state is to use the Serial header to read out error information.","title":"How can I know if the board is \"bricked\"?"},{"location":"unified/msi/faq/#what-can-be-the-reason-of-board-bricking","text":"The most common reason would be the fact that you DDR memory modules are not initialized properly. The other reason might be improper or interrupted installation. Please make sure to follow the Initial Deployment Manual correctly.","title":"What can be the reason of board \"bricking\"?"},{"location":"unified/msi/faq/#how-can-i-unbrick-my-board","text":"Please follow the recovery procedure .","title":"How can I \"unbrick\" my board?"},{"location":"unified/msi/faq/#which-cpus-are-supported","text":"We can say the \"supported\" one is the one that have been tested during Validation Procedure or have been tested by the community. The list of all supported CPUs is available in the CPU HCL documentation. In practice, any Alder Lake-S Processor should work. 12900KS is rather unknown at the moment, because it was released later and may require more recent microcode.","title":"Which CPUs are supported?"},{"location":"unified/msi/faq/#which-memory-modules-are-supported","text":"We can say the \"supported\" one is the one that have been tested during Validation Procedure or have been tested by the community. The list of all supported memory modules is available in the Memory HCL documentation.","title":"Which memory modules are supported?"},{"location":"unified/msi/faq/#what-is-the-memory-profile","text":"Currently, Dasharo firmware picks the highest standard SPD Profile, no support for XMP ones. This means that on the Kingston modules it is actually working at 2400 MHz, but it is expected to work all the way to 3200 MHz.","title":"What is the memory profile?"},{"location":"unified/msi/faq/#why-my-gpu-doesnt-work-on-msi-pro-z690-a-ddr4-wifi","text":"Due to the fact, that there's no possibility to insert all available GPU drivers into the firmware, the solution in the form of the Option ROM is in use. Option ROMs are the drivers flashed in the GPUs non-volatile memory. These types of drivers can be divided into Legacy Option ROMs and EFI Option ROMs . Legacy Option ROMs are only supported on legacy BIOS, such as SeaBIOS. Legacy BIOS checks the availability of Option ROM and if its signature matches, it executes its entry point. This option ROM initializes the graphics. The only way to support Option ROM in UEFI is through CSM, which we do not have implemented. EFI Option ROMs are nothing more than EFI drivers which have the same form as the UEFI files (PE format). UEFI firmware scans the Option ROM space of the graphics card and if it finds a potential EFI Option ROM with PE signature, it executes the file. This option ROM initializes the graphics. Considering the above, the firmware might have a problem with initializing older graphics cards - UEFI standard appeared about 15 years ago. The problem might also be caused by an enabled Secure boot - because there is no certainty that EFI Option ROM is signed correctly.","title":"Why my GPU doesn't work on MSI PRO Z690-A (DDR4) (WIFI)?"},{"location":"unified/msi/faq/#which-gpus-are-supported","text":"We can say the \"supported\" one is the one that have been tested during Validation Procedure or have been tested by the community. The list of all supported memory modules is available in the GPU HCL documentation.","title":"Which GPUs are supported?"},{"location":"unified/msi/faq/#what-does-the-obligatory-dasharo-subscripion-includes","text":"The Dasharo Subscription includes: The latest Dasharo Entry Subscription release installed by Dasharo Team Dasharo Updates \u2013 number of updates depends on the number of Dasharo Subscriptions sold and the availability of other funding (e.g., NLNet, corporate sponsors, community donations ) Priority support for Dasharo Subscribers through invite-only Matrix channel Influence on Dasharo features roadmap \u2013 you can have a real impact on Dasharo development by direct access with the developers or premium voting on github. You will gain the access to the dedicated channels on the matrix communicator. If you wish to share your Github nickname with us, the votes cast for the features that you would like to have implemented in the future will be treated with priority, i.e. they will have a higher priority than the votes of non-subscribers. By buying this product, you support open-source firmware and Dasharo distribution.","title":"What does the obligatory Dasharo Subscripion includes?"},{"location":"unified/msi/faq/#what-means-in-warranty-conditions-no-signs-of-customer-interference","text":"Full question: \"In the Disclaimer, you wrote that one of the warranty conditions is: \"No signs of customer interference with the platform or firmware.\" How would a user modify firmware without losing the warranty? Being open source to be easy to modify, then saying \"don't touch this\" seems contradictory. How would you add an exception?\" Playing with firmware parameters can result in damaging the mainboard. Such action excludes the acceptance of the return. You can improve the Dasharo by contributing, so we can pass Dasharo Certification Program and release it in the next version.","title":"What means in warranty conditions \"No signs of customer interference...\"?"},{"location":"unified/msi/firmware-update/","text":"Firmware update The following documentation describes the process of Dasharo open-source firmware update. The update process may be different, depending on which firmware version is currently installed on your device. The currently installed firmware version can be checked with the following command in a Linux environment: sudo dmidecode -t bios | grep Version Alternatively, it can be checked in the BIOS Setup Menu . Prerequisites Before proceeding, ensure that the firmware protections are disabled in Dasharo Security Options . Both BIOS boot medium lock and Enable SMM BIOS write protection should be unchecked. UEFI Secure Boot must be disabled as well (uncheck Attempt Secure Boot if Current Secure Boot State does not say Disabled ). To apply changes you will need to reboot. Please use one of the following environments to perform Dasharo update: Dasharo Tools Suite (DTS) Linux distribution of your choice We recommend using the DTS. Dasharo Tools Suite The DTS allows performing automatic firmware update process, which is the recommended method. To update your firmware, follow below steps. Boot DTS using iPXE on your platform. Follow firmware update procedure described in DTS documentation. Linux distribution of your choice Linux distributions may not yet have the support for the newest chipsets in flashrom installed via package manager so building the flashrom from source may be inevitable. You may check if your flashrom supports the Z690 and Z790 chipset by doing a dry run without firmware binary: sudo flashrom -p internal Example output of undetected chipset: flashrom v1.2 on Linux 5.19.0-32-generic (x86_64) flashrom is free software, get the source code at https://flashrom.org Using clock_gettime for delay loops (clk_id: 1, resolution: 1ns). Cannot open file stream for /dev/mtd0 No DMI table found. WARNING: No chipset found. Flash detection will most likely fail. ======================================================================== You may be running flashrom on an unknown laptop. We could not detect this for sure because your vendor has not set up the SMBIOS tables correctly. Some internal buses have been disabled for safety reasons. You can enforce using all buses by adding -p internal:laptop=this_is_not_a_laptop to the command line, but please read the following warning if you are not sure. Laptops, notebooks and netbooks are difficult to support and we recommend to use the vendor flashing utility. The embedded controller (EC) in these machines often interacts badly with flashing. See the manpage and https://flashrom.org/Laptops for details. If flash is shared with the EC, erase is guaranteed to brick your laptop and write may brick your laptop. Read and probe may irritate your EC and cause fan failure, backlight failure and sudden poweroff. You have been warned. ======================================================================== No EEPROM/flash device found. Note: flashrom can never write if the flash chip isn't found automatically. It means you cannot proceed with this flashrom version and you have to remove it using your package manager. Then follow the procedure for building the right flashrom is described in Build flashrom section in the Initial deployment documentation (note the procedure describes Ubuntu case only, your package manager and package names to install may be slightly different). We recommend to use Dasharo Tools Suite . Example of good output: flashrom v1.2-1031-g6b2061b on Linux 5.19.0-32-generic (x86_64) flashrom is free software, get the source code at https://flashrom.org Using clock_gettime for delay loops (clk_id: 1, resolution: 1ns). No DMI table found. Found chipset \"Intel Z690\". Enabling flash write... SPI Configuration is locked down. FREG0: Flash Descriptor region (0x00000000-0x00000fff) is read-write. FREG1: BIOS region (0x01000000-0x01ffffff) is read-write. FREG2: Management Engine region (0x00001000-0x003d8fff) is read-write. Enabling hardware sequencing because some important opcode is locked. OK. Found Programmer flash chip \"Opaque flash chip\" (32768 kB, Programmer-specific) on internal. No operations were specified. That means you are good to go. Migrating SMBIOS unique data (optional) Before flashing you may migrate your serial number and UUID as described in Initial deployment . Applicable to Dasharo v1.1.0 (PRO Z690-A) / v0.9.0 (PRO Z790-P) and later. Flashing using flashrom PRO Z690-A boards PRO Z790-P boards Version v1.1.0 or newer Version v1.1.0 and v1.1.2 had to change the flashmap layout and requires usage of the procedure below when migrating from v1.0.0 or older. Only the RW_SECTION_A and RW_SECTION_B partitions of the flash needs to be updated. Flash it using the following command: flashrom -p internal -w [ path ] --fmap -i RW_SECTION_A -i RW_SECTION_B To flash newer firmware the command described in the section below might be also used. But remember, in that case, all Dasharo UEFI settings will be lost. Also, the memory training procedure will have to be carried out again. Version older than v1.1.0 In this case, the whole bios region must be updated. flashrom -p internal -w [ path ] --ifd -i bios There is only one version available for now. Please follow instructions described in Initial deployment to deploy the Dasharo. If updating firmware using custom builds without changing the flashmap, only the RW_SECTION_A and RW_SECTION_B partitions of the flash needs to be updated. Flash it using the following command: flashrom -p internal -w [ path ] --fmap -i RW_SECTION_A -i RW_SECTION_B Troubleshooting Possible errors are described in the Generic deployment problems with flashrom","title":"Firmware update"},{"location":"unified/msi/firmware-update/#firmware-update","text":"The following documentation describes the process of Dasharo open-source firmware update. The update process may be different, depending on which firmware version is currently installed on your device. The currently installed firmware version can be checked with the following command in a Linux environment: sudo dmidecode -t bios | grep Version Alternatively, it can be checked in the BIOS Setup Menu .","title":"Firmware update"},{"location":"unified/msi/firmware-update/#prerequisites","text":"Before proceeding, ensure that the firmware protections are disabled in Dasharo Security Options . Both BIOS boot medium lock and Enable SMM BIOS write protection should be unchecked. UEFI Secure Boot must be disabled as well (uncheck Attempt Secure Boot if Current Secure Boot State does not say Disabled ). To apply changes you will need to reboot. Please use one of the following environments to perform Dasharo update: Dasharo Tools Suite (DTS) Linux distribution of your choice We recommend using the DTS.","title":"Prerequisites"},{"location":"unified/msi/hcl/","text":"Hardware Compatibility Lists Following compatibility list is compiled thanks to community contribution and Dasharo Team work. Please note there are other good sources of information about compatibility like: OpenBenchmarking.org linux-hardware.org bsd-hardwre.info Feel free to refer to above sources or contact community , if you can't find your hardware. CPU HCL (20 Jul 2023) Memory HCL (20 Jul 2023) GPU HCL CPU Hardware Compatibility List presents the CPUs tested and verified to work with Dasharo by community. The following list does not include CPU which is tested and verfied in 3mdeb laboratory - this information might be found in MSI PRO Z690-A Hardware Matrix and MSI PRO Z790-P Hardware Matrix documentation. Legend: CPU Model: CPU Model name. Dasharo version: Dasharo version on which report was created. - if version was not reported Source: Link to report if it is public. Dasharo HCL report if it was reported using DTS . PRO Z690-A (WIFI) DDR4 PRO Z690-A (WIFI) PRO Z790-P (WIFI) DDR4 PRO Z790-P (WIFI) CPU Model Dasharo version Source 12th Gen Intel(R) Core(TM) i5-12400F - Github PR 12th Gen Intel(R) Core(TM) i5-12400F v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12500T v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12500T v1.1.0 Dasharo HCL report 12th Gen Intel(R) Core(TM) i5-12600 v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600 v1.1.0 Dasharo HCL report 12th Gen Intel(R) Core(TM) i5-12600K v1.0.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v1.0.0 Dasharo HCL report 12th Gen Intel(R) Core(TM) i5-12600K v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v1.1.0 Dasharo HCL report 12th Gen Intel(R) Core(TM) i5-12600K v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v1.1.1-rc4 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700K v1.0.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700K v1.0.0 Dasharo HCL report 12th Gen Intel(R) Core(TM) i7-12700K v1.0.0 Qubes HCL reports 12th Gen Intel(R) Core(TM) i7-12700K v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700K v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i9-12900K v0.4.0 Qubes HCL reports 12th Gen Intel(R) Core(TM) i9-12900K v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i9-12900K v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i9-12900KS v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i9-12900T v1.1.0 Dasharo HCL Report CPU Model Dasharo version Source CPU Model Dasharo version Source CPU Model Dasharo version Source Memory hardware Compatibility List presents the DIMM modules tested and verified to work with Dasharo in 3mdeb laboratory. Memory Modules are tested in 1, 2 and 4 modules configurations. These follow the DIMM population procedures as stated in the Board Manual: 1 module in DIMMA2 Slot (Single Channel), 2 by adding another module in DIMMB2 (Dual Channel), and 4 by populating all 4 slots. Testing is defined as passing firmware POST and booting an OS, since what is being tested is that the Intel FSP (Firmware Support Package) component is initializing the Memory Modules. We don't stress test them for stability. Each SPD Profile is tested, so each Memory Module can have from 1 to 4 entries. You may also check out Intel memory validation results page and see the results for DDR4 UDIMM testing. Maximum ratings for Alder Lake S CPUs is also available in the CPU datasheet . Legend: Configuration 1/2/4 - means given memory module was tested in 1, 2 and 4 DIMMs populated configuration, \u2714 means successfully tested, \u2716 means platform did not boot with Dasharo, e.g. \u2714/\u2714/\u2714 means all configurations work, - means not tested Size: DIMM capacity in MB SPD profile: can be one of JEDEC(Standard) / XMP Profile #1 / XMP Profile #2. Profile data: Type/speed: for example DDR4-2400 means DDR4 module clocked at max 2400MHz for given profile Timings: for example CL17-17-17 means CAS Latency 17, tRCD 17, tRP 17 (numbers expressed in clock cycles) for given memory profile Voltage: memory voltage in Volts for given memory profile NOTE: some XMP profiles may have lower speeds than other ones, but also have smaller CAS latency. Also the memory frequency configured in the memory controller and reported by DMI/SMBIOS may be slightly lower than advertised in the module specifications. This can vary based on the board design, CPU and many other factors. PRO Z690-A (WIFI) DDR4 PRO Z690-A (WIFI) PRO Z790-P (WIFI) DDR4 PRO Z790-P (WIFI) Manufacturer Part Number Size Speed Configuration 1/2/4 Dasharo version Source Corsair CMK16GX4M2B3200C16 16384 MB 2133 MT/s (PC4-17000) \u2714/-/- v1.1.1 Dasharo HCL report Corsair CMK16GX4M2B3200C16 16384 MB 2133 MT/s (PC4-17000) -/-/\u2714 v1.1.0 Dasharo HCL report Corsair CMK16GX4M2B3200C16 32768 MB 2133 MT/s (PC4-17000) \u2714/-/- v1.1.1 Dasharo HCL report Crucial Technology BL16G32C16U4B.16FE 16384 MB 2666 MT/s (PC4-21300) \u2714/-/- v1.1.0 Dasharo HCL report Crucial Technology BL16G32C16U4B.16FE 16384 MB 2666 MT/s (PC4-21300) \u2714/-/- v1.1.1 Dasharo HCL report Crucial Technology CT8G4DFS8266.C8FJ 8192 MB 2666 MT/s (PC4-21300) \u2714/-/- v1.1.0 Dasharo HCL report Kingston KF3200C16D4/16GX 16384 MB 2400 MT/s (PC4-19200) \u2714/-/- v1.1.1 Dasharo HCL report Kingston KF3200C16D4/16GX 16384 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.1 Dasharo HCL report Kingston KF3200C16D4/32GX 32768 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.0 Dasharo HCL report Kingston KF3200C16D4/32GX 32768 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.1 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) \u2714/-/- v1.0.0 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.0.0 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.0 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.1 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.1-rc4 Dasharo HCL report Patriot Memory 4400 C19 Series 8192 MB 2133 MT/s (PC4-17000) \u2714/-/- v1.0.0 Dasharo HCL report Thermaltake Technology Co Ltd RG26D408GX2-3600C18A 8192 MB 2666 MT/s (PC4-21300) \u2714/-/- v1.1.0 Dasharo HCL report DIMM vendor Part Number Size SPD profile Configuration 1/2/4 Kingston KF556C40BB/8 8GB 5600MT/s 40-40-40 1.25V \u2714/\u2714/\u2714 Crucial CT8G48C40U5.M4A1/8 8GB 4800MT/s 40-39-39 1.1V \u2714/\u2714/\u2714 ADATA AD5U48008G-S 8GB 4800MT/s 40-40-40 1.1V \u2714/\u2714/\u2714 DIMM vendor Part Number Size SPD profile Configuration 1/2/4 DIMM vendor Part Number Size SPD profile Configuration 1/2/4 NOTE : Since we cannot extend following list based on automatic Dasharo HCL reports parsing until this issue would be addressed we decided to not update GPU HCL ourselves. We will merge PRs to GPU HCL, if following criteria would be addressed: Card has to be installed on main metal 16x slot, and there shouldn't be any other GPU except Intel integrated one if non-F CPU. Confirmation than Dasharo splash screen and Firmware menus were working. Actual GPU chip (PCI Vendor ID / Device ID). Video Card model (Subsystem Vendor ID / Device ID). Option ROM version. Secure Boot status (Enabled/Disabled, in case than there are Option ROM signing issues. This also means than the VBIOS should NOT be modded, factory original versions only) GPU Hardware Compatibility List presents the GPUs tested and verified to work with Dasharo by community. The following list does not include GPU which is tested and verfied in 3mdeb laboratory - this information might be found in MSI PRO Z690-A Hardware Matrix and MSI PRO Z790-P Hardware Matrix documentation. Legend: GPU name: the full name of GPU including vendor and model name. Memory size: total amount of GPU memory declared by vendor. Memory type: GPU's type of memory. Bandwidth: GPU's memory bandwidth. PCI-E Architecture: declared by producer generation of PCI-E architecture. Multi-Graphics Technology: information about support for Multi-Graphics Technology. Information about GPU might be read from GPU package or documentation. GPU name Memory size Memory type Bandwidth PCI-E Gen Multi-Graphics Technology Results Nvidia GeForce GTX 1060 3072 MB GDDR5 192GB/s Gen3 1 Qubes HCL reports MSI Radeon RX 6950 XT 16 GB GDDR6 576GB/s Gen4 1 EVGA NVidia RTX 2080 8 GB GDDR6 448GB/s Gen3 1 PNY NVidia RTX A5000 24 GB GDDR6 768GB/s Gen4 1 Nvidia GeForce GTX 1080TI 11264 MB GDDR5X x16 Gen3 1 Qubes HCL reports MSI Radeon RX 6500 XT MECH 2X 4G OC 4 GB GDDR6 180GB/s Gen4 1 Works only on Dasharo v1.1.0 or newer MSI GeForce RTX 3060 GAMING Z TRIO LHR 12 GB GDDR6 358GB/s Gen4 1 For details how to maintain this documentation please consult Dasharo HCL Maintainer documentation . Contributing PRO Z690-A (WIFI) DDR4 PRO Z690-A (WIFI) PRO Z790-P (WIFI) DDR4 PRO Z790-P (WIFI) Use Dasharo Tools Suite HCL report to upload report automatically. Create new issue in Dasharo issues repository . Create PR directly to Dasharo documentation repository . CPU HCL email your /proc/cpuinfo or relevant information using following template: CPU model: Dasharo version: Memory HCL email as attachments outputs of following command: decode-dimms > decode-dimms.log 2 > decode-dimms.err.log In email please include Dasharo version. Dasharo version: Use Dasharo Tools Suite HCL report to upload report automatically. Create new issue in Dasharo issues repository . Create PR directly to Dasharo documentation repository . CPU HCL email your /proc/cpuinfo or relevant information using following template: CPU model: Dasharo version: Memory HCL email as attachments outputs of following command: decode-dimms > decode-dimms.log 2 > decode-dimms.err.log In email please include Dasharo version. Dasharo version: Use Dasharo Tools Suite HCL report to upload report automatically. Create new issue in Dasharo issues repository . Create PR directly to Dasharo documentation repository . CPU HCL email your /proc/cpuinfo or relevant information using following template: CPU model: Dasharo version: Memory HCL email as attachments outputs of following command: decode-dimms > decode-dimms.log 2 > decode-dimms.err.log In email please include Dasharo version. Dasharo version: Use Dasharo Tools Suite HCL report to upload report automatically. Create new issue in Dasharo issues repository . Create PR directly to Dasharo documentation repository . CPU HCL email your /proc/cpuinfo or relevant information using following template: CPU model: Dasharo version: Memory HCL email as attachments outputs of following command: decode-dimms > decode-dimms.log 2 > decode-dimms.err.log In email please include Dasharo version. Dasharo version: If you already have reported your results and you change some hardware configuration we would appreciate an update.","title":"Hardware Compatibility"},{"location":"unified/msi/hcl/#hardware-compatibility-lists","text":"Following compatibility list is compiled thanks to community contribution and Dasharo Team work. Please note there are other good sources of information about compatibility like: OpenBenchmarking.org linux-hardware.org bsd-hardwre.info Feel free to refer to above sources or contact community , if you can't find your hardware. CPU HCL (20 Jul 2023) Memory HCL (20 Jul 2023) GPU HCL CPU Hardware Compatibility List presents the CPUs tested and verified to work with Dasharo by community. The following list does not include CPU which is tested and verfied in 3mdeb laboratory - this information might be found in MSI PRO Z690-A Hardware Matrix and MSI PRO Z790-P Hardware Matrix documentation. Legend: CPU Model: CPU Model name. Dasharo version: Dasharo version on which report was created. - if version was not reported Source: Link to report if it is public. Dasharo HCL report if it was reported using DTS . PRO Z690-A (WIFI) DDR4 PRO Z690-A (WIFI) PRO Z790-P (WIFI) DDR4 PRO Z790-P (WIFI) CPU Model Dasharo version Source 12th Gen Intel(R) Core(TM) i5-12400F - Github PR 12th Gen Intel(R) Core(TM) i5-12400F v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12500T v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12500T v1.1.0 Dasharo HCL report 12th Gen Intel(R) Core(TM) i5-12600 v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600 v1.1.0 Dasharo HCL report 12th Gen Intel(R) Core(TM) i5-12600K v1.0.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v1.0.0 Dasharo HCL report 12th Gen Intel(R) Core(TM) i5-12600K v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v1.1.0 Dasharo HCL report 12th Gen Intel(R) Core(TM) i5-12600K v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i5-12600K v1.1.1-rc4 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700K v1.0.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700K v1.0.0 Dasharo HCL report 12th Gen Intel(R) Core(TM) i7-12700K v1.0.0 Qubes HCL reports 12th Gen Intel(R) Core(TM) i7-12700K v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i7-12700K v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i9-12900K v0.4.0 Qubes HCL reports 12th Gen Intel(R) Core(TM) i9-12900K v1.1.0 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i9-12900K v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i9-12900KS v1.1.1 Dasharo HCL Report 12th Gen Intel(R) Core(TM) i9-12900T v1.1.0 Dasharo HCL Report CPU Model Dasharo version Source CPU Model Dasharo version Source CPU Model Dasharo version Source Memory hardware Compatibility List presents the DIMM modules tested and verified to work with Dasharo in 3mdeb laboratory. Memory Modules are tested in 1, 2 and 4 modules configurations. These follow the DIMM population procedures as stated in the Board Manual: 1 module in DIMMA2 Slot (Single Channel), 2 by adding another module in DIMMB2 (Dual Channel), and 4 by populating all 4 slots. Testing is defined as passing firmware POST and booting an OS, since what is being tested is that the Intel FSP (Firmware Support Package) component is initializing the Memory Modules. We don't stress test them for stability. Each SPD Profile is tested, so each Memory Module can have from 1 to 4 entries. You may also check out Intel memory validation results page and see the results for DDR4 UDIMM testing. Maximum ratings for Alder Lake S CPUs is also available in the CPU datasheet . Legend: Configuration 1/2/4 - means given memory module was tested in 1, 2 and 4 DIMMs populated configuration, \u2714 means successfully tested, \u2716 means platform did not boot with Dasharo, e.g. \u2714/\u2714/\u2714 means all configurations work, - means not tested Size: DIMM capacity in MB SPD profile: can be one of JEDEC(Standard) / XMP Profile #1 / XMP Profile #2. Profile data: Type/speed: for example DDR4-2400 means DDR4 module clocked at max 2400MHz for given profile Timings: for example CL17-17-17 means CAS Latency 17, tRCD 17, tRP 17 (numbers expressed in clock cycles) for given memory profile Voltage: memory voltage in Volts for given memory profile NOTE: some XMP profiles may have lower speeds than other ones, but also have smaller CAS latency. Also the memory frequency configured in the memory controller and reported by DMI/SMBIOS may be slightly lower than advertised in the module specifications. This can vary based on the board design, CPU and many other factors. PRO Z690-A (WIFI) DDR4 PRO Z690-A (WIFI) PRO Z790-P (WIFI) DDR4 PRO Z790-P (WIFI) Manufacturer Part Number Size Speed Configuration 1/2/4 Dasharo version Source Corsair CMK16GX4M2B3200C16 16384 MB 2133 MT/s (PC4-17000) \u2714/-/- v1.1.1 Dasharo HCL report Corsair CMK16GX4M2B3200C16 16384 MB 2133 MT/s (PC4-17000) -/-/\u2714 v1.1.0 Dasharo HCL report Corsair CMK16GX4M2B3200C16 32768 MB 2133 MT/s (PC4-17000) \u2714/-/- v1.1.1 Dasharo HCL report Crucial Technology BL16G32C16U4B.16FE 16384 MB 2666 MT/s (PC4-21300) \u2714/-/- v1.1.0 Dasharo HCL report Crucial Technology BL16G32C16U4B.16FE 16384 MB 2666 MT/s (PC4-21300) \u2714/-/- v1.1.1 Dasharo HCL report Crucial Technology CT8G4DFS8266.C8FJ 8192 MB 2666 MT/s (PC4-21300) \u2714/-/- v1.1.0 Dasharo HCL report Kingston KF3200C16D4/16GX 16384 MB 2400 MT/s (PC4-19200) \u2714/-/- v1.1.1 Dasharo HCL report Kingston KF3200C16D4/16GX 16384 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.1 Dasharo HCL report Kingston KF3200C16D4/32GX 32768 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.0 Dasharo HCL report Kingston KF3200C16D4/32GX 32768 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.1 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) \u2714/-/- v1.0.0 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.0.0 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.0 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.1 Dasharo HCL report Kingston KF3600C17D4/8GX 8192 MB 2400 MT/s (PC4-19200) -/-/\u2714 v1.1.1-rc4 Dasharo HCL report Patriot Memory 4400 C19 Series 8192 MB 2133 MT/s (PC4-17000) \u2714/-/- v1.0.0 Dasharo HCL report Thermaltake Technology Co Ltd RG26D408GX2-3600C18A 8192 MB 2666 MT/s (PC4-21300) \u2714/-/- v1.1.0 Dasharo HCL report DIMM vendor Part Number Size SPD profile Configuration 1/2/4 Kingston KF556C40BB/8 8GB 5600MT/s 40-40-40 1.25V \u2714/\u2714/\u2714 Crucial CT8G48C40U5.M4A1/8 8GB 4800MT/s 40-39-39 1.1V \u2714/\u2714/\u2714 ADATA AD5U48008G-S 8GB 4800MT/s 40-40-40 1.1V \u2714/\u2714/\u2714 DIMM vendor Part Number Size SPD profile Configuration 1/2/4 DIMM vendor Part Number Size SPD profile Configuration 1/2/4 NOTE : Since we cannot extend following list based on automatic Dasharo HCL reports parsing until this issue would be addressed we decided to not update GPU HCL ourselves. We will merge PRs to GPU HCL, if following criteria would be addressed: Card has to be installed on main metal 16x slot, and there shouldn't be any other GPU except Intel integrated one if non-F CPU. Confirmation than Dasharo splash screen and Firmware menus were working. Actual GPU chip (PCI Vendor ID / Device ID). Video Card model (Subsystem Vendor ID / Device ID). Option ROM version. Secure Boot status (Enabled/Disabled, in case than there are Option ROM signing issues. This also means than the VBIOS should NOT be modded, factory original versions only) GPU Hardware Compatibility List presents the GPUs tested and verified to work with Dasharo by community. The following list does not include GPU which is tested and verfied in 3mdeb laboratory - this information might be found in MSI PRO Z690-A Hardware Matrix and MSI PRO Z790-P Hardware Matrix documentation. Legend: GPU name: the full name of GPU including vendor and model name. Memory size: total amount of GPU memory declared by vendor. Memory type: GPU's type of memory. Bandwidth: GPU's memory bandwidth. PCI-E Architecture: declared by producer generation of PCI-E architecture. Multi-Graphics Technology: information about support for Multi-Graphics Technology. Information about GPU might be read from GPU package or documentation. GPU name Memory size Memory type Bandwidth PCI-E Gen Multi-Graphics Technology Results Nvidia GeForce GTX 1060 3072 MB GDDR5 192GB/s Gen3 1 Qubes HCL reports MSI Radeon RX 6950 XT 16 GB GDDR6 576GB/s Gen4 1 EVGA NVidia RTX 2080 8 GB GDDR6 448GB/s Gen3 1 PNY NVidia RTX A5000 24 GB GDDR6 768GB/s Gen4 1 Nvidia GeForce GTX 1080TI 11264 MB GDDR5X x16 Gen3 1 Qubes HCL reports MSI Radeon RX 6500 XT MECH 2X 4G OC 4 GB GDDR6 180GB/s Gen4 1 Works only on Dasharo v1.1.0 or newer MSI GeForce RTX 3060 GAMING Z TRIO LHR 12 GB GDDR6 358GB/s Gen4 1 For details how to maintain this documentation please consult Dasharo HCL Maintainer documentation .","title":"Hardware Compatibility Lists"},{"location":"unified/msi/hcl/#contributing","text":"PRO Z690-A (WIFI) DDR4 PRO Z690-A (WIFI) PRO Z790-P (WIFI) DDR4 PRO Z790-P (WIFI) Use Dasharo Tools Suite HCL report to upload report automatically. Create new issue in Dasharo issues repository . Create PR directly to Dasharo documentation repository . CPU HCL email your /proc/cpuinfo or relevant information using following template: CPU model: Dasharo version: Memory HCL email as attachments outputs of following command: decode-dimms > decode-dimms.log 2 > decode-dimms.err.log In email please include Dasharo version. Dasharo version: Use Dasharo Tools Suite HCL report to upload report automatically. Create new issue in Dasharo issues repository . Create PR directly to Dasharo documentation repository . CPU HCL email your /proc/cpuinfo or relevant information using following template: CPU model: Dasharo version: Memory HCL email as attachments outputs of following command: decode-dimms > decode-dimms.log 2 > decode-dimms.err.log In email please include Dasharo version. Dasharo version: Use Dasharo Tools Suite HCL report to upload report automatically. Create new issue in Dasharo issues repository . Create PR directly to Dasharo documentation repository . CPU HCL email your /proc/cpuinfo or relevant information using following template: CPU model: Dasharo version: Memory HCL email as attachments outputs of following command: decode-dimms > decode-dimms.log 2 > decode-dimms.err.log In email please include Dasharo version. Dasharo version: Use Dasharo Tools Suite HCL report to upload report automatically. Create new issue in Dasharo issues repository . Create PR directly to Dasharo documentation repository . CPU HCL email your /proc/cpuinfo or relevant information using following template: CPU model: Dasharo version: Memory HCL email as attachments outputs of following command: decode-dimms > decode-dimms.log 2 > decode-dimms.err.log In email please include Dasharo version. Dasharo version: If you already have reported your results and you change some hardware configuration we would appreciate an update.","title":"Contributing"},{"location":"unified/msi/initial-deployment/","text":"Initial Deployment Initial deployment of Dasharo firmware on MSI PRO Z690-A and PRO Z790-P can be done: using DTS, manually. Initial deployment using DTS To ensure a smooth deployment process, it is recommended to use the latest version of DTS available from the releases page . Once you have obtained it, you can then proceed with following the Dasharo zero-touch initial deployment section procedure. This will help you set up Dasharo effectively and without manual intervention. Initial deployment manually Flashing coreboot can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 22.04. Build flashrom Please follow generic guide for Dasharo flashrom fork . Flashing All flash operations require UEFI Secure Boot to be disabled. You may download the binary using scp (need to install openssh-server package) or wget command. The binaries can be found on the MSI PRO Z690-A release page MSI PRO Z790-P release page . Reading flash contents Always prepare a backup of the current firmware image. To read the original firmware from the flash and save it to a file ( dump.rom ), execute the following command: sudo flashrom -p internal -r dump.rom IMPORTANT! You will need a second USB storage to keep the dumped firmware backup or alternatively upload it to some cloud or network drive (Ubuntu live has a Firefox browser installed). Ubuntu live image is volatile and has no persistent storage. All changes made in the live image will be lost after reboot. Migrating SMBIOS unique data To migrate the SMBIOS system UUID and board serial number follow the Linux instructions below before attempting to flash the binary. The procedure is supported on Dasharo version v1.0.0 and later and requires cbfstool built from coreboot tree. Follow the Building Manual using the Z690-A v1.0.0/Z790-P v0.9.0 version or newer and then: echo -n ` sudo dmidecode -s system-uuid ` > system_uuid.txt echo -n ` sudo dmidecode -s baseboard-serial-number ` > serial_number.txt # assuming in coreboot root directory ./build/cbfstool build/coreboot.rom expand -r FW_MAIN_A ./build/cbfstool build/coreboot.rom expand -r FW_MAIN_B ./build/cbfstool build/coreboot.rom add \\ -f serial_number.txt -n serial_number -t raw -r FW_MAIN_A ./build/cbfstool build/coreboot.rom add \\ -f serial_number.txt -n serial_number -t raw -r FW_MAIN_B ./build/cbfstool build/coreboot.rom add \\ -f serial_number.txt -n serial_number -t raw -r COREBOOT ./build/cbfstool build/coreboot.rom add \\ -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_A ./build/cbfstool build/coreboot.rom add \\ -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_B ./build/cbfstool build/coreboot.rom add \\ -f system_uuid.txt -n system_uuid -t raw -r COREBOOT ./build/cbfstool build/coreboot.rom truncate -r FW_MAIN_A ./build/cbfstool build/coreboot.rom truncate -r FW_MAIN_B PRO Z690-A (WIFI) DDR4 PRO Z690-A (WIFI) PRO Z790-P (WIFI) DDR4 PRO Z790-P (WIFI) One may use msi_ms7d25_v1.1.1_ddr4.rom (or newer) binary directly and simply build the cbfstool only from coreboot repository: git clone https://github.com/Dasharo/coreboot -b msi_ms7d25/release cd coreboot make -C util/cbfstool echo -n ` sudo dmidecode -s system-uuid ` > system_uuid.txt echo -n ` sudo dmidecode -s baseboard-serial-number ` > serial_number.txt # assuming in coreboot root directory ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom expand -r FW_MAIN_A ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom expand -r FW_MAIN_B ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom add \\ -f serial_number.txt -n serial_number -t raw -r FW_MAIN_A ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom add \\ -f serial_number.txt -n serial_number -t raw -r FW_MAIN_B ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom add \\ -f serial_number.txt -n serial_number -t raw -r COREBOOT ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom add \\ -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_A ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom add \\ -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_B ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom add \\ -f system_uuid.txt -n system_uuid -t raw -r COREBOOT ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom truncate -r FW_MAIN_A ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr4.rom truncate -r FW_MAIN_B One may use msi_ms7d25_v1.1.1_ddr5.rom (or newer) binary directly and simply build the cbfstool only from coreboot repository: git clone https://github.com/Dasharo/coreboot -b msi_ms7d25/release cd coreboot make -C util/cbfstool echo -n ` sudo dmidecode -s system-uuid ` > system_uuid.txt echo -n ` sudo dmidecode -s baseboard-serial-number ` > serial_number.txt # assuming in coreboot root directory ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom expand -r FW_MAIN_A ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom expand -r FW_MAIN_B ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom add \\ -f serial_number.txt -n serial_number -t raw -r FW_MAIN_A ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom add \\ -f serial_number.txt -n serial_number -t raw -r FW_MAIN_B ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom add \\ -f serial_number.txt -n serial_number -t raw -r COREBOOT ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom add \\ -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_A ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom add \\ -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_B ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom add \\ -f system_uuid.txt -n system_uuid -t raw -r COREBOOT ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom truncate -r FW_MAIN_A ./util/cbfstool/cbfstool /path/to/msi_ms7d25_v1.1.1_ddr5.rom truncate -r FW_MAIN_B One may use msi_ms7e06_v0.9.0_ddr4.rom (or newer) binary directly and simply build the cbfstool only from coreboot repository: git clone https://github.com/Dasharo/coreboot -b msi_ms7d25/release cd coreboot make -C util/cbfstool echo -n ` sudo dmidecode -s system-uuid ` > system_uuid.txt echo -n ` sudo dmidecode -s baseboard-serial-number ` > serial_number.txt # assuming in coreboot root directory ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom expand -r FW_MAIN_A ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom expand -r FW_MAIN_B ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom add \\ -f serial_number.txt -n serial_number -t raw -r FW_MAIN_A ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom add \\ -f serial_number.txt -n serial_number -t raw -r FW_MAIN_B ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom add \\ -f serial_number.txt -n serial_number -t raw -r COREBOOT ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom add \\ -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_A ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom add \\ -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_B ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom add \\ -f system_uuid.txt -n system_uuid -t raw -r COREBOOT ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom truncate -r FW_MAIN_A ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr4.rom truncate -r FW_MAIN_B One may use msi_ms7e06_v0.9.0_ddr5.rom (or newer) binary directly and simply build the cbfstool only from coreboot repository: git clone https://github.com/Dasharo/coreboot -b msi_ms7d25/release cd coreboot make -C util/cbfstool echo -n ` sudo dmidecode -s system-uuid ` > system_uuid.txt echo -n ` sudo dmidecode -s baseboard-serial-number ` > serial_number.txt # assuming in coreboot root directory ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom expand -r FW_MAIN_A ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom expand -r FW_MAIN_B ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom add \\ -f serial_number.txt -n serial_number -t raw -r FW_MAIN_A ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom add \\ -f serial_number.txt -n serial_number -t raw -r FW_MAIN_B ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom add \\ -f serial_number.txt -n serial_number -t raw -r COREBOOT ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom add \\ -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_A ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom add \\ -f system_uuid.txt -n system_uuid -t raw -r FW_MAIN_B ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom add \\ -f system_uuid.txt -n system_uuid -t raw -r COREBOOT ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom truncate -r FW_MAIN_A ./util/cbfstool/cbfstool /path/to/msi_ms7e06_v0.9.0_ddr5.rom truncate -r FW_MAIN_B Note you will need to resign the binary after adding the SMBIOS data. Please check Vboot documentation how to resign the data. It is the machine owner's responsibility to generate and use own keys during updates. Flashing Dasharo WARNING : If you use an external/discrete GPU and migrate to Dasharo, be sure to unplug the dGPU first (when the machine is powered off before proceeding with flashing), as Dasharo firmware does not support all GPU cards properly yet (as of version v1.0.0). There is a high risk for the graphical output to break in the firmware when dGPU is connected. Effectively it leaves the only option to boot in blind into a previously installed OS (if the platform does not brick and if an OS is present on a disk). The first boot may take up to 2 minutes to fully train the memory, so be patient and wait for the Dasharo logo to appear, subsequent boots will take only seconds. MSI EZ debug leds are not supported by Dasharo and you may notice a red led to be lit. If the platform boots with an integrated GPU, you may try to plug the external GPU back and boot again. To flash Dasharo on the platform, execute the following command: PRO Z690-A (WIFI) DDR4 PRO Z690-A (WIFI) PRO Z790-P (WIFI) DDR4 PRO Z790-P (WIFI) Replace the VERSION in firmware file name with the version you want to flash. For example: msi_ms7d25_v1.1.1_ddr4.rom . sudo flashrom -p internal -w msi_ms7d25_vVERSION_ddr4.rom --ifd -i bios Replace the VERSION in firmware file name with the version you want to flash. For example: msi_ms7d25_v1.1.1_ddr5.rom . sudo flashrom -p internal -w msi_ms7d25_vVERSION_ddr5.rom --ifd -i bios Replace the VERSION in firmware file name with the version you want to flash. For example: msi_ms7e06_v0.9.0_ddr4.rom . sudo flashrom -p internal -w msi_ms7e06_vVERSION_ddr4.rom --ifd -i bios Replace the VERSION in firmware file name with the version you want to flash. For example: msi_ms7e06_v0.9.0_ddr5.rom . sudo flashrom -p internal -w msi_ms7e06_vVERSION_ddr5.rom --ifd -i bios IMPORTANT! After the command succeeds, invoke sudo reboot or click the reboot/restart in the GUI to reboot the board. Press ENTER when prompted on the screen to remove the installation media (if Ubuntu live is used). DO NOT POWEROFF THE BOARD as SMI handlers of original MSI firmware may overwrite flash contents and cause a brick. After migration from MSI firmware to Dasharo and reboot, the firmware will fail the memory training. After reboot wait approximately 30 seconds and then power the board off by holding the power button pushed for 5 seconds. Dasharo v1.1.0 or newer will signal the memory training failure with PC speaker beeps and blinking SATA LED. When it happens use the power button to power the board off (no need to wait 30 seconds in such case). Power on the board back. Now the memory training should not fail and after approximately 1 minute (can be nearly 2 minutes for DDR5 memory), you should get a Dasharo splash screen on the monitor. Subsequent boots will take only a few seconds. Flashing back vendor firmware sudo flashrom -p internal -w dump.rom --ifd -i bios NOTE: Dasharo version v0.1.0 will not have a network connection. Use a different USB storage or a USB to Ethernet/USB WiFi adapter to move the binary to the live system.","title":"Initial deployment"},{"location":"unified/msi/initial-deployment/#initial-deployment","text":"Initial deployment of Dasharo firmware on MSI PRO Z690-A and PRO Z790-P can be done: using DTS, manually.","title":"Initial Deployment"},{"location":"unified/msi/initial-deployment/#initial-deployment-using-dts","text":"To ensure a smooth deployment process, it is recommended to use the latest version of DTS available from the releases page . Once you have obtained it, you can then proceed with following the Dasharo zero-touch initial deployment section procedure. This will help you set up Dasharo effectively and without manual intervention.","title":"Initial deployment using DTS"},{"location":"unified/msi/initial-deployment/#initial-deployment-manually","text":"Flashing coreboot can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 22.04.","title":"Initial deployment manually"},{"location":"unified/msi/overview/","text":"Overview PRO Z690-A (WIFI) (DDR4) PRO Z790-P (WIFI) (DDR4) Releases - groups information about all releases compatible with MSI PRO Z690-A. Hardware configuration matrix - describes the platform's hardware configuration used during the Dasharo firmware validation procedure. Test matrix - describes the validation scope used during the Dasharo firmware validation procedure. Releases - groups information about all releases compatible with MSI PRO Z790-P. Hardware configuration matrix - describes the platform's hardware configuration used during the Dasharo firmware validation procedure. Test matrix - describes the validation scope used during the Dasharo firmware validation procedure. Building manual - describes how to build Dasharo for the MSI boards. Initial deployment - describes initial Dasharo deployment methods (i. e. flashing new firmware) for the MSI PRO Z690-A. Firmware update - explains supported Dasharo open-source firmware update methods. Recovery - gathers information on how to recover the platform from potential failure. Development - describes information for Dasharo developers. Hardware Compatibility List - describes compatible memory modules, processors and graphics cards tested by the community. Community test results - describes the test results performed by the community. FAQ - answers for frequently asked questions. Useful documents PRO Z690-A (WIFI) (DDR4) PRO Z790-P (WIFI) (DDR4) MSI Z690-A PRO DDR4 WIFI site MSI Z690-A PRO DDR4 Board manual MSI Z690-A PRO WIFI site MSI Z690-A PRO WIFI Board manual MSI Z790-P PRO DDR4 WIFI site MSI Z790-P PRO DDR4 Board manual MSI Z790-P PRO WIFI site MSI Z790-P PRO WIFI Board manual Press releases PC Gamer Phoronix Tom's Hardware Root.cz GN24 ITBusiness Buy the MSI PRO Z690-A DDR4 with Dasharo firmware The Full PC Build with MSI PRO Z690-A DDR4 motherboard with Dasharo firmware is available at the official 3mdeb store . You can also buy the product by mailing us at: shopping@3mdeb.com . Device assembly and presale validation will be carried out in accordance with the following procedure .","title":"Overview"},{"location":"unified/msi/overview/#overview","text":"PRO Z690-A (WIFI) (DDR4) PRO Z790-P (WIFI) (DDR4) Releases - groups information about all releases compatible with MSI PRO Z690-A. Hardware configuration matrix - describes the platform's hardware configuration used during the Dasharo firmware validation procedure. Test matrix - describes the validation scope used during the Dasharo firmware validation procedure. Releases - groups information about all releases compatible with MSI PRO Z790-P. Hardware configuration matrix - describes the platform's hardware configuration used during the Dasharo firmware validation procedure. Test matrix - describes the validation scope used during the Dasharo firmware validation procedure. Building manual - describes how to build Dasharo for the MSI boards. Initial deployment - describes initial Dasharo deployment methods (i. e. flashing new firmware) for the MSI PRO Z690-A. Firmware update - explains supported Dasharo open-source firmware update methods. Recovery - gathers information on how to recover the platform from potential failure. Development - describes information for Dasharo developers. Hardware Compatibility List - describes compatible memory modules, processors and graphics cards tested by the community. Community test results - describes the test results performed by the community. FAQ - answers for frequently asked questions.","title":"Overview"},{"location":"unified/msi/overview/#useful-documents","text":"PRO Z690-A (WIFI) (DDR4) PRO Z790-P (WIFI) (DDR4) MSI Z690-A PRO DDR4 WIFI site MSI Z690-A PRO DDR4 Board manual MSI Z690-A PRO WIFI site MSI Z690-A PRO WIFI Board manual MSI Z790-P PRO DDR4 WIFI site MSI Z790-P PRO DDR4 Board manual MSI Z790-P PRO WIFI site MSI Z790-P PRO WIFI Board manual","title":"Useful documents"},{"location":"unified/msi/overview/#press-releases","text":"PC Gamer Phoronix Tom's Hardware Root.cz GN24 ITBusiness","title":"Press releases"},{"location":"unified/msi/overview/#buy-the-msi-pro-z690-a-ddr4-with-dasharo-firmware","text":"The Full PC Build with MSI PRO Z690-A DDR4 motherboard with Dasharo firmware is available at the official 3mdeb store . You can also buy the product by mailing us at: shopping@3mdeb.com . Device assembly and presale validation will be carried out in accordance with the following procedure .","title":"Buy the MSI PRO Z690-A DDR4 with Dasharo firmware"},{"location":"unified/msi/recovery/","text":"Recovery Intro This project is in early development phase. On certain hardware configurations, the Dasharo firmware may not boot correctly (i.e. we will have \"bricked\" the platform). In such a case, the recovery procedure can reinstall the original firmware from the board manufacturer. There are two documented recovery methods: using a CH341A programming kit or an RTE . Since Dasharo v1.1.2 (PRO Z690-A) / v0.9.0 (PRO Z790-P) release it is also possible to use MSI FlashBIOS button feature to recover using an image placed in the USB stick. Using MSI FlashBIOS button Format an empty USB drive with FAT32 filesystem. Place Dasharo release binary or official MSI binary on the drive's root directory and name it MSI.ROM . Put the drive in the rear USB 2.0 port marked as FlashBIOS . Be sure that your machine is powered off (ATX supply must be still connected). Press the FlashBIOS button near the FlashBIOS port. After a few seconds the machine should power on the ATX supply and begin flashing (the red diode will be blinking). Wait approximately 5 minutes for the process to finish. The board will automatically restart and boot. Here is a video showing the process . External flashing with programmer RTE In this case, using external programmer is necessary. We are using RTE here. Connect programmer to the flash chip as shown in the Hardware connection / SPI section of the Development documentation. Download official BIOS from vendor's website (this is the newest version, you may choose an older one too or in the best case use your firmware backup): wget https://download.msi.com/bos_exe/mb/7D25v13.zip unzip 7D25v13.zip Flash via external programmer: The command line will be different, depending on the programmer you use flashrom -p linux_spi:dev = /dev/spidev1.0,spispeed = 16000 -w 7D25v13/E7D25IMS.130 First boot after the recovery process is significantly longer CH341A Prerequisites The full set is now available at our online shop . CH341A kit with 1.8V level-shifter. Can be bought on e.g. Amazon WSON8 probe. Can be bought from China on Aliexpress or eBay. USB2.0 Female-Male extension cord 0.5m or longer (optional) Machine with Linux and flashrom. Connection First start with assembling the CH341A and the 1.8V adapter. Pay attention to which holes you attach the adapter. You should use the holes marked as 25XX (closer to the USB plug): Place the 1.8V adapter in the holes and lock it with the lever. Be sure that the arrow on the adapter is facing the black lever (opposite side of USB plug): Now take the breakout board with pin headers: and plug it into the other 1.8V adapter, be sure that numbers 1-4 on the breakout match the numbers 1 and 4 on the adapter: Numbers should be visible on the upper side after assembling: Next, take the WSON8 probe and locate the white dot on the needles side (it will indicate the first reference pin, although you may use any other corner pin): Check which wire is connecting to this pin (the connection should be 1 to 1). In my case it is white wire and it will be used as reference to connect the wires to the breakout board: The wires should follow the same order of colors as on the probe (keep them straight, and do not cross). Repeat with the other 4 wires on the other side of the probe: Now the connection is ready. Time to locate the flash chip of the board. Flashing Connect the CH341A USB plug to the host machine which will be doing the flashing process (optionally use the USB extension cord for convenience). Locate the flash chip on the MSI PRO Z690-A DDR4 board: Locate the first pin on the flash chip (marked with a circle on the flash chip package and indicated by number 1 printed on the board - red circle): Attach the WSON8 probe matching the first pin of the probe (white wire) and first pin of the flash chip: Now on the Linux machine check if the flash is detected using a sample command sudo flashrom -p ch341a_spi -r firmware.bin You should see something like this: flashrom v1.2-567-gf4eb405 on Linux 5 .19.9-200.fc36.x86_64 ( x86_64 ) flashrom is free software, get the source code at https://flashrom.org Using clock_gettime for delay loops ( clk_id: 1 , resolution: 1ns ) . Found Winbond flash chip \"W25Q256.W\" ( 32768 kB, SPI ) on ch341a_spi. Reading flash... done . You don't need to wait for the command completion and interrupt it with Ctrl+C shortcut, it just serves as a confirmation of good connection. If you decide to interrupt it, reset the CH341A programmer by unpluging and repluging it to USB port. Now stabilize your hand holding the WSON8 probe on the flash chip and invoke the real flashing command (e.g. if your original/working firmware backup is saved as firmware_backup.bin ): sudo flashrom -p ch341a_spi -w firmware_backup.bin Note that USB programmers are pretty slow, the whole operation make take several minutes (can be 10-15 minutes in worst case). At the end of operation you should see: flashrom v1.2-567-gf4eb405 on Linux 5 .19.9-200.fc36.x86_64 ( x86_64 ) flashrom is free software, get the source code at https://flashrom.org Using clock_gettime for delay loops ( clk_id: 1 , resolution: 1ns ) . Found Winbond flash chip \"W25Q256.W\" ( 32768 kB, SPI ) on ch341a_spi. Reading old flash chip contents... done . Erasing and writing flash chip... Erase/write done . Verifying flash... VERIFIED. SMBIOS unique data recovery Serial number format and recovery SMBIOS specification sections 7.2 and 7.3 defines two spaces for serial number: the system serial number and baseboard serial number. The original MSI PRO Z690-A firmware provides only the baseboard serial number. In case you have lost your serial number in the process of flashing Dasharo or newer MSI firmware, there is a way to retrieve it. The board has a QR code printed on the mainboard between the chipset heatsink and dPGU PCIe slot: If you read the QR code with your smartphone you will get the full serial number. The serial number has the format 07D25xx_LyzEaaaaaa where: 07D25 - is the board model, i.e. MS-7D25 for this particular board xx is the mainboard revision which should match the revision imprinted between the M2_1 slot and dGPU slot. E.g. xx=11 means VER:1.1 yz is the manufacturing date in hex, i.e. y is the month, z is the year, for example A1 means October 202 1 , 12 means January 202 2 aaaaaa is the unique 6-digit number which is imprinted under the serial number QR code System UUID format and recovery SMBIOS specification section 7.2 defines a field for unique system identification with a special number called UUID (Universally Unique IDentifier). UUID is specified by RFC 4122 . MSI firmware provides the system UUID in the SMBIOS system information structure. The problem with UUID is that it cannot be recovered if the backup binary or SMBIOS logs are lost. You can backup the SMBIOS information with our Dasharo Tools Suite bootablestick . The dmidecode.log will have all the necessary information. Things we know about MSI system UUID: UUID format is as follows: 33221100-5544-7766-8899-AABBCCDDEEFF , the hex numbers represent the order of bytes in memory for the little-endian format as required by SMBIOS MSI UUIDs do not conform to any of the RFC 4122 UUID variants/versions (the bits responsible for UUID version and variant identification are not constant across multiple boards) the last octet group AABBCCDDEEFF is equal to the MAC address of the on-board Intel i225 Ethernet, so be sure to NOT share the UUID with anybody as it contains system sensitive information the first four groups are either random numbers or some cryptographically acquired value from e.g. combination of some board data, unfortunately it is not known by us The MAC address is printed on a sticker placed on the 2x2 SATA connector: SMBIOS data migration For Dasharo simply follow the Initial Deployment how to migrate the data. For MSI firmware you will probably need an AMI DMI/SMBIOS editor to save those values back if you do not have a backup binary.","title":"Recovery"},{"location":"unified/msi/recovery/#recovery","text":"","title":"Recovery"},{"location":"unified/msi/recovery/#intro","text":"This project is in early development phase. On certain hardware configurations, the Dasharo firmware may not boot correctly (i.e. we will have \"bricked\" the platform). In such a case, the recovery procedure can reinstall the original firmware from the board manufacturer. There are two documented recovery methods: using a CH341A programming kit or an RTE . Since Dasharo v1.1.2 (PRO Z690-A) / v0.9.0 (PRO Z790-P) release it is also possible to use MSI FlashBIOS button feature to recover using an image placed in the USB stick.","title":"Intro"},{"location":"unified/msi/recovery/#using-msi-flashbios-button","text":"Format an empty USB drive with FAT32 filesystem. Place Dasharo release binary or official MSI binary on the drive's root directory and name it MSI.ROM . Put the drive in the rear USB 2.0 port marked as FlashBIOS . Be sure that your machine is powered off (ATX supply must be still connected). Press the FlashBIOS button near the FlashBIOS port. After a few seconds the machine should power on the ATX supply and begin flashing (the red diode will be blinking). Wait approximately 5 minutes for the process to finish. The board will automatically restart and boot. Here is a video showing the process .","title":"Using MSI FlashBIOS button"},{"location":"unified/msi/recovery/#smbios-unique-data-recovery","text":"","title":"SMBIOS unique data recovery"},{"location":"unified/novacustom/battery-management/","text":"NovaCustom power and battery subsystem NovaCustom laptops equipped with Dasharo firmware provide several battery management mechanisms to optimize user experience and further prolong the battery's lifespan. Boot blocking when the battery is low To prevent corruption of the bootloader, which may occur due to sudden power cut off during the OS boot process, booting the OS is blocked when the battery level sits below 5%. When trying to boot the OS with the battery level below the defined threshold, following message will be displayed on screen: Disconnected battery warning When the firmware encounters problems with detecting the battery, following message will appear suggesting checking the physical connection between the battery and mainboard: Power information error When the firmware encounters problems with retrieving information about AC and battery state, following error message will be displayed: Charge thresholds Dasharo firmware implements battery charge thresholds, which aim to extend the lifespan of the battery: charging will only start when the battery level is below 95% charging will stop once the battery level reaches 98% Custom charge thresholds can be configured using the Dasharo setup menu or using third-party software like tlp .","title":"Battery management"},{"location":"unified/novacustom/battery-management/#novacustom-power-and-battery-subsystem","text":"NovaCustom laptops equipped with Dasharo firmware provide several battery management mechanisms to optimize user experience and further prolong the battery's lifespan.","title":"NovaCustom power and battery subsystem"},{"location":"unified/novacustom/battery-management/#boot-blocking-when-the-battery-is-low","text":"To prevent corruption of the bootloader, which may occur due to sudden power cut off during the OS boot process, booting the OS is blocked when the battery level sits below 5%. When trying to boot the OS with the battery level below the defined threshold, following message will be displayed on screen:","title":"Boot blocking when the battery is low"},{"location":"unified/novacustom/battery-management/#disconnected-battery-warning","text":"When the firmware encounters problems with detecting the battery, following message will appear suggesting checking the physical connection between the battery and mainboard:","title":"Disconnected battery warning"},{"location":"unified/novacustom/battery-management/#power-information-error","text":"When the firmware encounters problems with retrieving information about AC and battery state, following error message will be displayed:","title":"Power information error"},{"location":"unified/novacustom/battery-management/#charge-thresholds","text":"Dasharo firmware implements battery charge thresholds, which aim to extend the lifespan of the battery: charging will only start when the battery level is below 95% charging will stop once the battery level reaches 98% Custom charge thresholds can be configured using the Dasharo setup menu or using third-party software like tlp .","title":"Charge thresholds"},{"location":"unified/novacustom/building-manual/","text":"Dasharo firmware building guide Intro This guide shows how to build Dasharo firmware for NovaCustom devices. It contains two components: BIOS firmware EC firmware Requirements This guide was verified on Ubuntu 22.04. In practice, any Linux distribution with Docker support should be enough to complete it. Make sure that you have following packages installed: Docker follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux Git sudo apt -y install git Build Dasharo BIOS firmware Clone the Dasharo coreboot repository: git clone https://github.com/Dasharo/coreboot.git Navigate to the source code directory and checkout to the desired revision: cd coreboot Replace X.Y.Z with a valid version NS5x ADL NV4x ADL NS5x TGL NV4x TGL git checkout novacustom_ns5x_adl_vX.Y.Z git checkout novacustom_nv4x_adl_vX.Y.Z git checkout novacustom_ns5x_tgl_vX.Y.Z git checkout novacustom_nv4x_tgl_vX.Y.Z Checkout submodules: git submodule update --init --recursive --checkout Start docker container: NS5x ADL NV4x ADL NS5x TGL NV4x TGL docker run --rm -it -u $UID \\ -v $PWD :/home/coreboot/coreboot \\ -w /home/coreboot/coreboot \\ coreboot/coreboot-sdk:2021-09-23_b0d87f753c /bin/bash docker run --rm -it -u $UID \\ -v $PWD :/home/coreboot/coreboot \\ -w /home/coreboot/coreboot \\ coreboot/coreboot-sdk:2021-09-23_b0d87f753c /bin/bash docker run --rm -it -u $UID \\ -v $PWD :/home/coreboot/coreboot \\ -w /home/coreboot/coreboot \\ coreboot/coreboot-sdk:0ad5fbd48d /bin/bash docker run --rm -it -u $UID \\ -v $PWD :/home/coreboot/coreboot \\ -w /home/coreboot/coreboot \\ coreboot/coreboot-sdk:0ad5fbd48d /bin/bash Inside of the container, configure the build process: NS5x ADL NV4x ADL NS5x TGL NV4x TGL make distclean && cp configs/config.novacustom_ns5x_adl .config make distclean && cp configs/config.novacustom_nv4x_adl .config make distclean && cp configs/config.novacustom_ns5x_tgl .config make distclean && cp configs/config.novacustom_nv4x_tgl .config Start the build process: make olddefconfig && make This will produce a Dasharo binary placed in build/coreboot.rom . At the end of the build process, the following warning will be displayed: ** WARNING ** coreboot has been built without an Intel Firmware Descriptor. Never write a complete coreboot.rom without an IFD to your board's flash chip! You can use flashrom's IFD or layout parameters to flash only to the BIOS region. This is expected, and something you have to pay attention to if you would like to flash your Dasharo binary. Make sure to only overwrite the BIOS region, leaving everything else untouched. Otherwise, expect that your device will no longer be able to boot unless fixed using an external programmer. The binary will not contain a boot splash logo. Refer to logo customization for including one. Build Dasharo EC firmware Clone the Dasharo ec repository: git clone https://github.com/Dasharo/ec.git Navigate to the source code directory and checkout to the desired revision: cd ec Replace X.Y.Z with a valid version NS5x ADL NV4x ADL NS5x TGL NV4x TGL git checkout novacustom_ns5x_adl_vX.Y.Z git checkout novacustom_nv4x_adl_vX.Y.Z git checkout novacustom_ns5x_tgl_vX.Y.Z git checkout novacustom_nv4x_tgl_vX.Y.Z Checkout submodules: git submodule update --init --recursive --checkout Build the EC firmware: NS5x ADL NV4x ADL NS5x TGL NV4x TGL EC_BOARD_VENDOR = novacustom EC_BOARD_MODEL = ns5x_adl ./build.sh The resulting image will be placed in: novacustom_ns5x_adl_ec.rom . EC_BOARD_VENDOR = novacustom EC_BOARD_MODEL = nv4x_adl ./build.sh The resulting image will be placed in: novacustom_nv4x_adl_ec.rom . EC_BOARD_VENDOR = novacustom EC_BOARD_MODEL = ns5x_tgl ./build.sh The resulting image will be placed in: novacustom_ns5x_tgl_ec.rom . EC_BOARD_VENDOR = novacustom EC_BOARD_MODEL = nv4x_tgl ./build.sh The resulting image will be placed in: novacustom_nv4x_tgl_ec.rom . Install Dasharo firmware The Dasharo firmware can be flashed in following ways, depending on your situation: To flash Dasharo for the first time, refer to the initial deployment guide . To update Dasharo, refer to the firmware update guide .","title":"Building manual"},{"location":"unified/novacustom/building-manual/#dasharo-firmware-building-guide","text":"","title":"Dasharo firmware building guide"},{"location":"unified/novacustom/building-manual/#intro","text":"This guide shows how to build Dasharo firmware for NovaCustom devices. It contains two components: BIOS firmware EC firmware","title":"Intro"},{"location":"unified/novacustom/building-manual/#requirements","text":"This guide was verified on Ubuntu 22.04. In practice, any Linux distribution with Docker support should be enough to complete it. Make sure that you have following packages installed: Docker follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux Git sudo apt -y install git","title":"Requirements"},{"location":"unified/novacustom/building-manual/#build-dasharo-bios-firmware","text":"Clone the Dasharo coreboot repository: git clone https://github.com/Dasharo/coreboot.git Navigate to the source code directory and checkout to the desired revision: cd coreboot Replace X.Y.Z with a valid version NS5x ADL NV4x ADL NS5x TGL NV4x TGL git checkout novacustom_ns5x_adl_vX.Y.Z git checkout novacustom_nv4x_adl_vX.Y.Z git checkout novacustom_ns5x_tgl_vX.Y.Z git checkout novacustom_nv4x_tgl_vX.Y.Z Checkout submodules: git submodule update --init --recursive --checkout Start docker container: NS5x ADL NV4x ADL NS5x TGL NV4x TGL docker run --rm -it -u $UID \\ -v $PWD :/home/coreboot/coreboot \\ -w /home/coreboot/coreboot \\ coreboot/coreboot-sdk:2021-09-23_b0d87f753c /bin/bash docker run --rm -it -u $UID \\ -v $PWD :/home/coreboot/coreboot \\ -w /home/coreboot/coreboot \\ coreboot/coreboot-sdk:2021-09-23_b0d87f753c /bin/bash docker run --rm -it -u $UID \\ -v $PWD :/home/coreboot/coreboot \\ -w /home/coreboot/coreboot \\ coreboot/coreboot-sdk:0ad5fbd48d /bin/bash docker run --rm -it -u $UID \\ -v $PWD :/home/coreboot/coreboot \\ -w /home/coreboot/coreboot \\ coreboot/coreboot-sdk:0ad5fbd48d /bin/bash Inside of the container, configure the build process: NS5x ADL NV4x ADL NS5x TGL NV4x TGL make distclean && cp configs/config.novacustom_ns5x_adl .config make distclean && cp configs/config.novacustom_nv4x_adl .config make distclean && cp configs/config.novacustom_ns5x_tgl .config make distclean && cp configs/config.novacustom_nv4x_tgl .config Start the build process: make olddefconfig && make This will produce a Dasharo binary placed in build/coreboot.rom . At the end of the build process, the following warning will be displayed: ** WARNING ** coreboot has been built without an Intel Firmware Descriptor. Never write a complete coreboot.rom without an IFD to your board's flash chip! You can use flashrom's IFD or layout parameters to flash only to the BIOS region. This is expected, and something you have to pay attention to if you would like to flash your Dasharo binary. Make sure to only overwrite the BIOS region, leaving everything else untouched. Otherwise, expect that your device will no longer be able to boot unless fixed using an external programmer. The binary will not contain a boot splash logo. Refer to logo customization for including one.","title":"Build Dasharo BIOS firmware"},{"location":"unified/novacustom/building-manual/#build-dasharo-ec-firmware","text":"Clone the Dasharo ec repository: git clone https://github.com/Dasharo/ec.git Navigate to the source code directory and checkout to the desired revision: cd ec Replace X.Y.Z with a valid version NS5x ADL NV4x ADL NS5x TGL NV4x TGL git checkout novacustom_ns5x_adl_vX.Y.Z git checkout novacustom_nv4x_adl_vX.Y.Z git checkout novacustom_ns5x_tgl_vX.Y.Z git checkout novacustom_nv4x_tgl_vX.Y.Z Checkout submodules: git submodule update --init --recursive --checkout Build the EC firmware: NS5x ADL NV4x ADL NS5x TGL NV4x TGL EC_BOARD_VENDOR = novacustom EC_BOARD_MODEL = ns5x_adl ./build.sh The resulting image will be placed in: novacustom_ns5x_adl_ec.rom . EC_BOARD_VENDOR = novacustom EC_BOARD_MODEL = nv4x_adl ./build.sh The resulting image will be placed in: novacustom_nv4x_adl_ec.rom . EC_BOARD_VENDOR = novacustom EC_BOARD_MODEL = ns5x_tgl ./build.sh The resulting image will be placed in: novacustom_ns5x_tgl_ec.rom . EC_BOARD_VENDOR = novacustom EC_BOARD_MODEL = nv4x_tgl ./build.sh The resulting image will be placed in: novacustom_nv4x_tgl_ec.rom .","title":"Build Dasharo EC firmware"},{"location":"unified/novacustom/building-manual/#install-dasharo-firmware","text":"The Dasharo firmware can be flashed in following ways, depending on your situation: To flash Dasharo for the first time, refer to the initial deployment guide . To update Dasharo, refer to the firmware update guide .","title":"Install Dasharo firmware"},{"location":"unified/novacustom/fan-profiles/","text":"Fan profiles settings There are two fan profiles implemented. The profiles can be selected via the Power Management Options menu in Setup Menu. Fan profiles are defined as follows: Silent fan profile Releases newer than v1.4.0 TGL and v1.6.0 ADL Temperature [\u00b0C] Fan speed [%] 0 20 65 25 75 35 85 100 Releases v1.4.0 TGL and v1.6.0 ADL or older Temperature [\u00b0C] Fan speed [%] 0 25 65 30 75 35 100 100 Performance fan profile Releases newer than v1.4.0 TGL and v1.6.0 ADL Temperature [\u00b0C] Fan speed [%] 0 25 55 35 75 60 85 100 Releases v1.4.0 TGL and v1.6.0 ADL or older Temperature [\u00b0C] Fan speed [%] 0 25 55 35 75 60 100 100 Values in-between curve points are interpolated linearly.","title":"Fan profiles"},{"location":"unified/novacustom/fan-profiles/#fan-profiles-settings","text":"There are two fan profiles implemented. The profiles can be selected via the Power Management Options menu in Setup Menu. Fan profiles are defined as follows:","title":"Fan profiles settings"},{"location":"unified/novacustom/fan-profiles/#silent-fan-profile","text":"","title":"Silent fan profile"},{"location":"unified/novacustom/fan-profiles/#releases-newer-than-v140-tgl-and-v160-adl","text":"Temperature [\u00b0C] Fan speed [%] 0 20 65 25 75 35 85 100","title":"Releases newer than v1.4.0 TGL and v1.6.0 ADL"},{"location":"unified/novacustom/fan-profiles/#releases-v140-tgl-and-v160-adl-or-older","text":"Temperature [\u00b0C] Fan speed [%] 0 25 65 30 75 35 100 100","title":"Releases v1.4.0 TGL and v1.6.0 ADL or older"},{"location":"unified/novacustom/fan-profiles/#performance-fan-profile","text":"","title":"Performance fan profile"},{"location":"unified/novacustom/fan-profiles/#releases-newer-than-v140-tgl-and-v160-adl_1","text":"Temperature [\u00b0C] Fan speed [%] 0 25 55 35 75 60 85 100","title":"Releases newer than v1.4.0 TGL and v1.6.0 ADL"},{"location":"unified/novacustom/fan-profiles/#releases-v140-tgl-and-v160-adl-or-older_1","text":"Temperature [\u00b0C] Fan speed [%] 0 25 55 35 75 60 100 100 Values in-between curve points are interpolated linearly.","title":"Releases v1.4.0 TGL and v1.6.0 ADL or older"},{"location":"unified/novacustom/firmware-update/","text":"Firmware update Introduction This document describes the firmware update for NovaCustom laptops running Dasharo firmware to the latest version available. Update using Dasharo Tools Suite Boot into Dasharo Tools Suite Follow the procedure described in DTS firmware update documentation","title":"Firmware update"},{"location":"unified/novacustom/firmware-update/#firmware-update","text":"","title":"Firmware update"},{"location":"unified/novacustom/firmware-update/#introduction","text":"This document describes the firmware update for NovaCustom laptops running Dasharo firmware to the latest version available.","title":"Introduction"},{"location":"unified/novacustom/fn-lock-hotkey/","text":"NovaCustom Fn lock hotkey By default, the Function Keys ( F1 - F12 ) must be used with a combination of Fn key to change display brightness, keyboard illumination, etc. The Fn lock capability provides a way of using these actions without the necessity of using the Fn key. Usage Enabling Press the Fn + Caps Lock keys combination. Disabling Press the Fn + Caps Lock keys combination again.","title":"Fn lock hotkey"},{"location":"unified/novacustom/fn-lock-hotkey/#novacustom-fn-lock-hotkey","text":"By default, the Function Keys ( F1 - F12 ) must be used with a combination of Fn key to change display brightness, keyboard illumination, etc. The Fn lock capability provides a way of using these actions without the necessity of using the Fn key.","title":"NovaCustom Fn lock hotkey"},{"location":"unified/novacustom/fn-lock-hotkey/#usage","text":"","title":"Usage"},{"location":"unified/novacustom/fwupd-usage/","text":"Updating firmware using fwupd This document describes the process of installing firmware updates from LVFS using fwupd. Installing fwupd Using binary packages Only .deb packages are provided. The procudure was verified on Ubuntu 20.04 LTS , but is should also apply to other Debian-based dsitributions. If you are using different distribution, you might need to build from source . Download and extract the fwupd archive: wget --content-disposition \\ https://cloud.3mdeb.com/index.php/s/mZyN4NgR8SngJ4j/download \\ https://cloud.3mdeb.com/index.php/s/Z765y233CdJGKy2/download \\ https://cloud.3mdeb.com/index.php/s/KkNaL6dbWs2ei3E/download unzip fwupd-novacustom-v1.2.0.zip This is an example how to verify the binaries (in this case fwupd-novacustom-v1.2.0.zip ): gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/keys/master-key/3mdeb-master-key.asc gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/oss_master_key/open-source-software/3mdeb-open-source-software-master-key.asc gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/customer-keys/novacustom/novacustom-open-source-firmware-release-1.x-key.asc sha256sum -c fwupd-novacustom-v1.2.0.zip.sha256 gpg -v --verify fwupd-novacustom-v1.2.0.zip.sha256.sig fwupd-novacustom-v1.2.0.zip.sha256 flashrom packages are located inside flashrom-1.2-2-3mdeb.zip : unzip flashrom-1.2-2-3mdeb.zip sudo apt install ./flashrom_1.2-2_amd64.deb sudo apt install ./libflashrom1_1.2-2_amd64.deb fwupd packages are located inside fwupd-2.0.0.0-3mdeb.zip : unzip fwupd-2.0.0.0-3mdeb.zip sudo apt install ./fwupd_2.0.0_amd64.deb \\ ./fwupd-doc_2.0.0_all.deb \\ ./fwupd-tests_2.0.0_amd64.deb \\ ./gir1.2-fwupd-2.0_2.0.0_amd64.deb \\ ./gir1.2-fwupdplugin-1.0_2.0.0_amd64.deb \\ ./gir1.2-gusb-1.0_0.3.5-1_amd64.deb \\ ./libfwupd2_2.0.0_amd64.deb \\ ./libfwupd-dev_2.0.0_amd64.deb \\ ./libfwupdplugin4_2.0.0_amd64.deb \\ ./libfwupdplugin-dev_2.0.0_amd64.deb \\ ./libgusb2_0.3.5-1_amd64.deb \\ ./libgusb-dev_0.3.5-1_amd64.deb Building from source There is no need to do any of these steps unless you can't use the packages provided in the previous step You might need to adjust the package manager commands and package names to your distribution. Flashrom Install build dependencies: sudo apt update sudo apt install -y build-essential pciutils libpci-dev libusb-1.0-0-dev \\ cmake meson pkg-config libftdi1-dev debhelper git wget python3-markdown \\ gcab Obtain source code: git clone https://github.com/Dasharo/flashrom.git -b v1.2.0.1 cd flashrom Build and install flashrom: meson build ninja -C build sudo ninja -C build install fwupd Obtain source code: git clone https://github.com/Dasharo/fwupd.git -b v1.7.3.3 cd fwupd Install build dependencies: ./contrib/setup Build and install fwupd: sudo depmod meson build -Ddocs = none -Dplugin_flashrom = true ninja -C build sudo ninja -C build install Updating firmware from LVFS Disable Secure Boot. To do this you can follow steps described in Secure Boot test . Refresh the fwupd database: sudo fwupdmgr refresh Updating lvfs Downloading\u2026 [ *************************************** ] Downloading\u2026 [ *************************************** ] Successfully downloaded new metadata: 1 local device supported Use the following command to update firmware with fwupd - example for NV41MZ: Note: You may be asked which device to update. If you see a prompt, select NV4XMB,ME,MZ sudo fwupdmgr update Selected device: NV4XMB,ME,MZ \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 Update NV4XMB,ME,MZ to 0 .5.0? \u2551 \u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563 \u2551 This release adds the following features: \u2551 \u2551 \u2551 \u2551 \u2022 vboot Verified Boot \u2551 \u2551 \u2022 TPM Measured Boot \u2551 \u2551 \u2022 Custom fan curve \u2551 \u2551 \u2022 Microcode for Tiger Lake stepping 0x2 \u2551 \u2551 \u2551 \u2551 This release changes the following features: \u2551 \u2551 \u2551 \u2551 \u2022 Disabled unused DPTF device \u2551 \u2551 \u2551 \u2551 NV4XMB,ME,MZ and all connected devices may not be usable while updating. \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d Perform operation? [ Y | n ] : Downloading\u2026 [ *************************************** ] Downloading\u2026 [ *************************************** ] Decompressing\u2026 [ *************************************** ] Decompressing\u2026 [ *************************************** ] Authenticating\u2026 [ *************************************** ] Authenticating\u2026 [ *************************************** ] Restarting device\u2026 [ *************************************** ] Writing\u2026 [ *************************************** ] Decompressing\u2026 [ *************************************** ] Writing\u2026 [ *************************************** ] Verifying\u2026 [ *************************************** ] Writing\u2026 [ *************************************** ] Restarting device\u2026 [ *************************************** ] Waiting\u2026 [ *************************************** ] Successfully installed firmware An update requires the system to shutdown to complete. Shutdown now? [ y | N ] : Shut down the computer when prompted, or manually later on. Power on the laptop again. Log in and run the following command to verify results: sudo fwupdmgr get-results Choose a device: 0 . Cancel 1 . 4bde70ba4e39b28f9eab1628f9dd6e6244c03027 ( 11th Gen Intel Core\u2122 i7-1165G7 @ 2 .80GHz ) 2 . 5792b48846ce271fab11c4a545f7a3df0d36e00a ( Display controller ) 3 . 073c01931cb0e9889bbfb2ea4a4c2fc558805fc6 ( Display controller ) 4 . dbee8bd3b1ae0316ad143336155651eedb495a0e ( NV4XMB,ME,MZ ) 5 . 71b677ca0f1bc2c5b804fa1d59e52064ce589293 ( SSD 980 PRO 1TB ) 6 . c6a80ac3a22083423992a3cb15018989f37834d6 ( TPM ) 7 . eefcbd318bd31fc1eba6358e628b3f9dceb87206 ( USB4 host controller ) Select NV4XMB,ME,MZ when prompted, and the results will be displayed: NV4XMB,ME,MZ: Device ID: dbee8bd3b1ae0316ad143336155651eedb495a0e Previous version: 0 .5.0 Update State: Success Last modified: 2022 -01-13 11 :09 GUID: 230c8b18-8d9b-53ec-838b-6cfc0383493a Device Flags: \u2022 Internal device \u2022 Updatable \u2022 System requires external power source \u2022 Needs shutdown after installation \u2022 Cryptographic hash verification is available","title":"Firmware update using fwupd"},{"location":"unified/novacustom/fwupd-usage/#updating-firmware-using-fwupd","text":"This document describes the process of installing firmware updates from LVFS using fwupd.","title":"Updating firmware using fwupd"},{"location":"unified/novacustom/fwupd-usage/#installing-fwupd","text":"","title":"Installing fwupd"},{"location":"unified/novacustom/fwupd-usage/#updating-firmware-from-lvfs","text":"Disable Secure Boot. To do this you can follow steps described in Secure Boot test . Refresh the fwupd database: sudo fwupdmgr refresh Updating lvfs Downloading\u2026 [ *************************************** ] Downloading\u2026 [ *************************************** ] Successfully downloaded new metadata: 1 local device supported Use the following command to update firmware with fwupd - example for NV41MZ: Note: You may be asked which device to update. If you see a prompt, select NV4XMB,ME,MZ sudo fwupdmgr update Selected device: NV4XMB,ME,MZ \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557 \u2551 Update NV4XMB,ME,MZ to 0 .5.0? \u2551 \u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563 \u2551 This release adds the following features: \u2551 \u2551 \u2551 \u2551 \u2022 vboot Verified Boot \u2551 \u2551 \u2022 TPM Measured Boot \u2551 \u2551 \u2022 Custom fan curve \u2551 \u2551 \u2022 Microcode for Tiger Lake stepping 0x2 \u2551 \u2551 \u2551 \u2551 This release changes the following features: \u2551 \u2551 \u2551 \u2551 \u2022 Disabled unused DPTF device \u2551 \u2551 \u2551 \u2551 NV4XMB,ME,MZ and all connected devices may not be usable while updating. \u2551 \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d Perform operation? [ Y | n ] : Downloading\u2026 [ *************************************** ] Downloading\u2026 [ *************************************** ] Decompressing\u2026 [ *************************************** ] Decompressing\u2026 [ *************************************** ] Authenticating\u2026 [ *************************************** ] Authenticating\u2026 [ *************************************** ] Restarting device\u2026 [ *************************************** ] Writing\u2026 [ *************************************** ] Decompressing\u2026 [ *************************************** ] Writing\u2026 [ *************************************** ] Verifying\u2026 [ *************************************** ] Writing\u2026 [ *************************************** ] Restarting device\u2026 [ *************************************** ] Waiting\u2026 [ *************************************** ] Successfully installed firmware An update requires the system to shutdown to complete. Shutdown now? [ y | N ] : Shut down the computer when prompted, or manually later on. Power on the laptop again. Log in and run the following command to verify results: sudo fwupdmgr get-results Choose a device: 0 . Cancel 1 . 4bde70ba4e39b28f9eab1628f9dd6e6244c03027 ( 11th Gen Intel Core\u2122 i7-1165G7 @ 2 .80GHz ) 2 . 5792b48846ce271fab11c4a545f7a3df0d36e00a ( Display controller ) 3 . 073c01931cb0e9889bbfb2ea4a4c2fc558805fc6 ( Display controller ) 4 . dbee8bd3b1ae0316ad143336155651eedb495a0e ( NV4XMB,ME,MZ ) 5 . 71b677ca0f1bc2c5b804fa1d59e52064ce589293 ( SSD 980 PRO 1TB ) 6 . c6a80ac3a22083423992a3cb15018989f37834d6 ( TPM ) 7 . eefcbd318bd31fc1eba6358e628b3f9dceb87206 ( USB4 host controller ) Select NV4XMB,ME,MZ when prompted, and the results will be displayed: NV4XMB,ME,MZ: Device ID: dbee8bd3b1ae0316ad143336155651eedb495a0e Previous version: 0 .5.0 Update State: Success Last modified: 2022 -01-13 11 :09 GUID: 230c8b18-8d9b-53ec-838b-6cfc0383493a Device Flags: \u2022 Internal device \u2022 Updatable \u2022 System requires external power source \u2022 Needs shutdown after installation \u2022 Cryptographic hash verification is available","title":"Updating firmware from LVFS"},{"location":"unified/novacustom/initial-deployment/","text":"Initial Deployment Intro This document is a guide for the initial installation of Dasharo on a supported device. It assumes some knowledge about external flashing and is primarily aimed at technicians performing initial installation and not for end users of the devices. Installing Dasharo Initial Installation 12th Gen (Alder Lake) 11th Gen (Tiger Lake) During the initial installation of Dasharo, you should deploy the supported Intel ME version (and configuration) on the device. Since vendor firmware has enabled Intel Boot Guard and BIOS Guard, it is not possible to do this from within the operating system and external flashing of the whole flash chip using a programmer like the CH341a is required. Publicly released binaries do not contain ME binary. If you need an Intel ME update for your device, contact us via already established commercial support channel. Preparation Install flashrom: apt update apt upgrade sudo apt -y install flashrom BIOS installation Steps for installing Dasharo BIOS: Remove the bottom cover of the laptop. NS5x / NS7x NV4x Disconnect the primary battery. (1) Disconnect the CMOS battery. (2) Attach a WSON-8 probe to the SPI flash chip. (3) For TGL devices use SOIC clip instead of WSON Backup the current firmware, in case you want to be able to restore it at some point: flashrom -p ch341a_spi -r bios_backup.rom Install Dasharo BIOS, replacing [path] with the path to the firmware image you want to flash, e.g. novacustom_ns5x_adl_full_v1.4.0.rom flashrom -p ch341a_spi -w [ path ] Detach the WSON-8 probe. Connect the primary battery and reconnect the CMOS battery Power on the laptop. The laptop may shut down once after training the memory. EC firmware installation Currently, the latest flashrom release lacks support for flashing ITE embedded controllers such as the ones present in NovaCustom laptops. Because of this, we need to build flashrom from source. Run the following commands on the target laptop: Install build dependencies: apt update apt upgrade apt install git build-essential debhelper pkg-config libpci-dev libusb-1.0-0-dev libftdi1-dev meson Obtain source code: git clone https://github.com/dasharo/flashrom.git cd flashrom Build flashrom: make sudo make install Make a backup of the EC firmware: Remember to store the backup on the separate device in case flashing fails. flashrom -p ite_ec -r ec_backup.rom Install the EC firmware: Warning: After running this command, the internal keyboard and power button will stop responding until the device is power cycled (all power must be removed, including the internal battery). Be prepared to disconnect the battery after updating the EC. Alternatively, you can boot up the laptop without the battery connected and power it from an AC adapter. Then, once the EC update is complete, disconnect the AC adapter to power off the laptop. Run the following command, replacing [path] with the path to the EC firmware you want to flash, e.g. novacustom_ns5x_adl_ec_v1.4.0.rom flashrom -p ite_ec -w [ path ] Successful installation of Dasharo EC finishes the initial deployment process. Initial deployment To ensure a smooth deployment process, it is recommended to use the latest version of DTS available from the releases page . Once you have obtained it, you can then proceed with following the Dasharo zero-touch initial deployment section procedure. This will help you set up Dasharo effectively and without manual intervention. If something went wrong or EC installation was not done, the firmware will print an error string during boot: OR In such case please follow the EC firmware update instructions for a specific board variant.","title":"Initial deployment"},{"location":"unified/novacustom/initial-deployment/#initial-deployment","text":"","title":"Initial Deployment"},{"location":"unified/novacustom/initial-deployment/#intro","text":"This document is a guide for the initial installation of Dasharo on a supported device. It assumes some knowledge about external flashing and is primarily aimed at technicians performing initial installation and not for end users of the devices.","title":"Intro"},{"location":"unified/novacustom/initial-deployment/#installing-dasharo","text":"","title":"Installing Dasharo"},{"location":"unified/novacustom/overview/","text":"Overview Hardware NS5x ADL NV4x ADL NS5x TGL NV4x TGL The NovaCustom NS5x/7x 12th Gen section is related to the two physical NovaCustom laptops based on the 12th generation Intel Core processor: NS51 series NS70 series The NovaCustom NV4x 12th Gen section is related to the one physical NovaCustom laptops based on the 12th generation Intel Core processor: NV41 series The NovaCustom NS5x/7x 11th Gen section is related to the two physical NovaCustom laptops based on the 11th generation Intel Core processor: NS51 series NS70 series The NovaCustom NV4x 11th Gen section is related to the one physical NovaCustom laptops based on the 11th generation Intel Core processor: NV41 series For more information on the hardware, please refer to the references in above links. Firmware Each firmware release contains of two parts: BIOS firmware, EC (Embedded Controller) firmware. They both interact with each other tightly, so keeping their compatible versions in in sync is important. Information on compatibility should be always explained in the release pages: NV4x ADL NV4x TGL NS5x ADL NS5x TGL","title":"Overview"},{"location":"unified/novacustom/overview/#overview","text":"","title":"Overview"},{"location":"unified/novacustom/overview/#hardware","text":"NS5x ADL NV4x ADL NS5x TGL NV4x TGL The NovaCustom NS5x/7x 12th Gen section is related to the two physical NovaCustom laptops based on the 12th generation Intel Core processor: NS51 series NS70 series The NovaCustom NV4x 12th Gen section is related to the one physical NovaCustom laptops based on the 12th generation Intel Core processor: NV41 series The NovaCustom NS5x/7x 11th Gen section is related to the two physical NovaCustom laptops based on the 11th generation Intel Core processor: NS51 series NS70 series The NovaCustom NV4x 11th Gen section is related to the one physical NovaCustom laptops based on the 11th generation Intel Core processor: NV41 series For more information on the hardware, please refer to the references in above links.","title":"Hardware"},{"location":"unified/novacustom/overview/#firmware","text":"Each firmware release contains of two parts: BIOS firmware, EC (Embedded Controller) firmware. They both interact with each other tightly, so keeping their compatible versions in in sync is important. Information on compatibility should be always explained in the release pages: NV4x ADL NV4x TGL NS5x ADL NS5x TGL","title":"Firmware"},{"location":"unified/novacustom/recovery/","text":"Recovery Prerequisites To proceed with the recovery procedure the backup with the vendor firmware or vendor EC firmware will be necessary eg. bios_backup.rom , ec_backup.rom . The backup file should be generated before making any changes in the device flash chip according to documentation: Firmware backup EC firmware backup Restoring vendor BIOS requires restoring a compatible version of EC firmware. There is currently no way to do this internally. External flashing BIOS recovery Follow the Initial deployment section to perform the external flash. When running the flashrom commands use a backup file you've prepared previously, like bios_backup.rom . EC firmware recovery The procedure will be slightly different depending on the model of your laptop. NS5x / NS7x NV4x You will need: an Arduino Mega 2560 a 24-pin FFC cable with a 1.0mm pitch, same-sided (connectors on the same side on both ends of the cable) a 24-pin FFC breakout board with a 1.0mm pitch FFC connector and a 2.54mm pitch pin header USB-A to USB-B cable to connect the Arduino to the host USB-C cable for grounding You will need: an Arduino Mega 2560 a 24-pin FFC cable with a 0.5mm pitch, same-sided (connectors on the same side on both ends of the cable) a 24-pin FFC breakout board with a 0.5mm pitch FFC connector and a 2.54mm pitch pin header USB-A to USB-B cable to connect the Arduino to the host USB-C cable for grounding The full set for EC firmware recovery is available at our online shop . Preparation Clone the EC repository: git clone https://github.com/Dasharo/ec.git cd ec Install dependencies: ./scripts/deps.sh If rustup was installed as part of the previous step, run: source $HOME /.cargo/env Connect the Arduino to the computer using a USB-A to USB-B cable Build and flash firmware for the Arduino, which will serve as the flasher: make BOARD = arduino/mega2560 make BOARD = arduino/mega2560 flash Flashing Unscrew the bottom cover from the laptop NS5x / NS7x NV4x Disconnect the battery (1) All power must be removed from the laptop during flashing. Reattach the bottom cover (without screwing it in) and flip the laptop over Using a prying tool like a credit card, pull up the keyboard from the laptop Start prying at the top of the keyboard. Be extra careful when removing the keyboard to avoid damaging the keyboard cable, which is extremely fragile NS5x / NS7x NV4x Disconnect the keyboard from the laptop NS5x / NS7x NV4x Connect the USB-C cable to the Thunderbolt port on the laptop and to the host computer. This will provide grounding Connect the FFC cable to the FFC breakout board NS5x / NS7x NV4x Note: In the example above, the FFC connector on the breakout has the pins on the bottom side of the connector and is located on the same side as the pins connecting to the Arduino. If your breakout is different, you may need an FFC cable with connectors on the opposite sides. Note: In the example above, the FFC connector on the breakout has the pins on the upper side of the connector and is located on the side opposite of the pins connecting to the Arduino. If your breakout is different, you may need an FFC cable with connectors on the opposite sides. Insert the breakout into Arduino's digital pin header, pins 22-45, with the FFC connector facing outwards Connect the other end of the FFC cable to the keyboard connector on the laptop, taking care to align pin 1 of the FFC cable to pin 1 (leftmost) pin of the connector NS5x / NS7x NV4x Connect the Arduino to the host using the USB-A to USB-B cable Build the flashing utility: cargo build --manifest-path ecflash/Cargo.toml --example isp --release Flash the firmware: sudo ecflash/target/release/examples/isp [ path to EC backup ] The output will contain: Buffer size: 128 ID: 5570 VER: 2 If it contains other ID value or the connection times out, reattach the FFC cable to the laptop and the breakout board. VER value may vary between models. Reassemble the laptop: disconnect the Arduino from the laptop, reattach the keyboard, disconnect the USB-C cable, reconnect the battery and screw in the bottom cover","title":"Recovery"},{"location":"unified/novacustom/recovery/#recovery","text":"","title":"Recovery"},{"location":"unified/novacustom/recovery/#prerequisites","text":"To proceed with the recovery procedure the backup with the vendor firmware or vendor EC firmware will be necessary eg. bios_backup.rom , ec_backup.rom . The backup file should be generated before making any changes in the device flash chip according to documentation: Firmware backup EC firmware backup Restoring vendor BIOS requires restoring a compatible version of EC firmware. There is currently no way to do this internally.","title":"Prerequisites"},{"location":"unified/novacustom/recovery/#external-flashing","text":"","title":"External flashing"},{"location":"unified/novacustom/rgb-keyboard/","text":"NovaCustom NS5x/7x RGB keyboard The NS5x/7x laptop features an RGB backlight keyboard. Dasharo implements full driverless backlight control using only the hotkeys on the keyboard. The keyboard backlight configuration set in the operating system is saved when the system is shut down and restored just before next system boot. Usage The backlight can be operated using the hotkeys on the numpad: Fn + / - Next color Fn + * - Toggle On / Off Fn + - - Brightness down Fn + + - Brightness up The backlight has the following color modes: White (default) Red Green Blue Yellow Magenta Cyan","title":"RGB keyboard"},{"location":"unified/novacustom/rgb-keyboard/#novacustom-ns5x7x-rgb-keyboard","text":"The NS5x/7x laptop features an RGB backlight keyboard. Dasharo implements full driverless backlight control using only the hotkeys on the keyboard. The keyboard backlight configuration set in the operating system is saved when the system is shut down and restored just before next system boot.","title":"NovaCustom NS5x/7x RGB keyboard"},{"location":"unified/novacustom/rgb-keyboard/#usage","text":"The backlight can be operated using the hotkeys on the numpad: Fn + / - Next color Fn + * - Toggle On / Off Fn + - - Brightness down Fn + + - Brightness up The backlight has the following color modes: White (default) Red Green Blue Yellow Magenta Cyan","title":"Usage"},{"location":"unified-test-documentation/generic-test-setup/","text":"Dasharo Compatibility: Generic test setup Test setup Test setup is a set of procedures to be executed before the test execution. Typically, the same setup can be reused by multiple test cases, so there is no need to execute the setup actions before each independent case. Generic test setup Firmware Obtain FIRMWARE binary: you can download it from release document dedicated for platform which is used by you. or you can build one yourself as shown in the building document dedicated for platform which is used by you. Flash FIRMWARE binary to the DUT. Device flashing procedure should be carried out in accordance with the guidelines in Flashing document dedicated for platform which is in use. OS installer Download OPERATING_SYSTEM installer image. Attach USB stick to the PC. Flash OPERATING_SYSTEM image to the USB stick. Attach the USB stick to the DUT . OS installation Power on the DUT Enter the boot menu using the BIOS_SETUP_KEY . Select the Boot Menu and press Enter . Select the USB stick and press Enter . In case of the Ubuntu 22.04 , select the Ubuntu (safe graphics) in the GRUB menu. Wait for the OPERATING_SYSTEM installer to start. Install OPERATING_SYSTEM on the disk. Power off the DUT. Remove the installation media (USB stick with installer). NVIDIA drivers - Ubuntu 22.04 Power on the DUT. Wait until the OPERATING_SYSTEM boots from disk. Login into the OPERATING_SYSTEM . Open a terminal window and execute the following commands: sudo apt update sudo apt install nvidia-driver-470 A password prompt for secure boot configuration will appear. Choose a password (you can use your system password) and press Enter . Reboot the DUT. Upon entry into MOKUtil, select Enroll MOK and enter the password you chose during driver installation. Select the option Continue boot . Wait until the OPERATING_SYSTEM boots from disk. Login into the OPERATING_SYSTEM . Open the NVIDIA X Server Settings application. Open the PRIME Profiles section. Select NVIDIA On-demand and apply. Enter the OPERATING_SYSTEM password when prompted. OS boot from disk Power on the DUT. Wait until the OPERATING_SYSTEM boots from disk. Login into the OPERATING_SYSTEM .","title":"Generic Test Setup"},{"location":"unified-test-documentation/generic-test-setup/#dasharo-compatibility-generic-test-setup","text":"","title":"Dasharo Compatibility: Generic test setup"},{"location":"unified-test-documentation/generic-test-setup/#test-setup","text":"Test setup is a set of procedures to be executed before the test execution. Typically, the same setup can be reused by multiple test cases, so there is no need to execute the setup actions before each independent case.","title":"Test setup"},{"location":"unified-test-documentation/overview/","text":"Dasharo Test Specifiaction - overview The release procedure is always preceded by validation procedure. It is done on the basis of the test documentation, which can be found in this submenu. To properly use the documentation, it is advisable to read the following brief description of its components. Test Matrix Test Matrix is the document which shows platform-dedicated test suites and test cases. Based on it, the customer may scope the checks performed by the validation team each time before firmware release. Generic test setup Generic test setup is the document which describes all the steps that are performed before testing the various functionalities. Dasharo modules Tests performed during validation procedure can be divided into test modules, test suites and test cases. Test cases are the smallest component of validation procedure. Their task is to check, that the given functionality works properly under a certain conditions. Test suites group test cases related to the given functionality, while test modules groups test cases related to the similar functionalities (i. e. test suites which task is to check if differently OS boot properly on the platform). Currently in Dasharo test specification the following test modules can be distinguished: Dasharo Compatibility which contains test suites related to the basic functionailited of the device. Dasharo Security which contains test suites related to the platform security and supporting security modules. Dasharo Performance which contains test suites related to the platform booting performance.","title":"Overview"},{"location":"unified-test-documentation/overview/#dasharo-test-specifiaction-overview","text":"The release procedure is always preceded by validation procedure. It is done on the basis of the test documentation, which can be found in this submenu. To properly use the documentation, it is advisable to read the following brief description of its components.","title":"Dasharo Test Specifiaction - overview"},{"location":"unified-test-documentation/overview/#test-matrix","text":"Test Matrix is the document which shows platform-dedicated test suites and test cases. Based on it, the customer may scope the checks performed by the validation team each time before firmware release.","title":"Test Matrix"},{"location":"unified-test-documentation/overview/#generic-test-setup","text":"Generic test setup is the document which describes all the steps that are performed before testing the various functionalities.","title":"Generic test setup"},{"location":"unified-test-documentation/overview/#dasharo-modules","text":"Tests performed during validation procedure can be divided into test modules, test suites and test cases. Test cases are the smallest component of validation procedure. Their task is to check, that the given functionality works properly under a certain conditions. Test suites group test cases related to the given functionality, while test modules groups test cases related to the similar functionalities (i. e. test suites which task is to check if differently OS boot properly on the platform). Currently in Dasharo test specification the following test modules can be distinguished: Dasharo Compatibility which contains test suites related to the basic functionailited of the device. Dasharo Security which contains test suites related to the platform security and supporting security modules. Dasharo Performance which contains test suites related to the platform booting performance.","title":"Dasharo modules"},{"location":"unified-test-documentation/dasharo-compatibility/100-coreboot-base-port/","text":"Dasharo: coreboot base port Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Connect to the UART debug interface and open a serial console. CBP001.001 Boot into coreboot stage bootblock Test description This test aims to verify that DUT during booting procedure reaches stage bootblock. The bootblock is the first stage executed after CPU reset, its main task is to set up everything for a C-environment. Test setup Proceed with the Test cases common documentation section. Test steps Power ON the DUT. By using the serial console read the booting procedure stage. Test steps Power on the DUT. Read the booting procedure stage. Expected result The console output should contain string with the phrase: bootblock starting CBP002.001 Boot into coreboot stage romstage Test description This test aims to verify that DUT during booting procedure reaches stage romstage. The romstage initializes the DRAM and prepares everything for device init. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power ON the DUT. By using the serial console read the booting procedure stage. Expected result The console output should contain string with the phrase: romstage starting CBP003.001 Boot into coreboot stage postcar Test description This test aims to verify that DUT during booting procedure reaches stage postcar. The postcar tears down CAR and loads the ramstage. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power ON the DUT. By using the serial console read the booting procedure stage. Expected result The console output should contain string with the phrase: postcar starting CBP004.001 Boot into coreboot stage ramstage Test description This test aims to verify that DUT during booting procedure reaches stage ramstage. The ramstage does the main device init. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power ON the DUT. By using the serial console read the booting procedure stage. Expected result The console output should contain string the with phrase: ramstage starting CBP005.001 Resource allocator v4 - gathering requirements Test description This test aims to verify that DUT reaches the gathering requirements stage for Resource Allocator v4 during booting procedure. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power ON the DUT. By using the serial console read the booting procedure stage. Expected result The console output should contain a string with the phrase: Pass 1 ( gathering requirements ) CBP006.001 Resource allocator v4 - allocating resources Test description This test aims to verify that DUT reaches the allocating resources stage for Resource Allocator v4 during booting procedure. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power ON the DUT. By using the serial console read the booting procedure stage. Expected result The console output should contain a string with the phrase: Pass 2 ( allocating resources )","title":"Coreboot Base Port"},{"location":"unified-test-documentation/dasharo-compatibility/100-coreboot-base-port/#dasharo-coreboot-base-port","text":"","title":"Dasharo: coreboot base port"},{"location":"unified-test-documentation/dasharo-compatibility/100-coreboot-base-port/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Connect to the UART debug interface and open a serial console.","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/100-coreboot-base-port/#cbp001001-boot-into-coreboot-stage-bootblock","text":"Test description This test aims to verify that DUT during booting procedure reaches stage bootblock. The bootblock is the first stage executed after CPU reset, its main task is to set up everything for a C-environment. Test setup Proceed with the Test cases common documentation section. Test steps Power ON the DUT. By using the serial console read the booting procedure stage. Test steps Power on the DUT. Read the booting procedure stage. Expected result The console output should contain string with the phrase: bootblock starting","title":"CBP001.001 Boot into coreboot stage bootblock"},{"location":"unified-test-documentation/dasharo-compatibility/100-coreboot-base-port/#cbp002001-boot-into-coreboot-stage-romstage","text":"Test description This test aims to verify that DUT during booting procedure reaches stage romstage. The romstage initializes the DRAM and prepares everything for device init. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power ON the DUT. By using the serial console read the booting procedure stage. Expected result The console output should contain string with the phrase: romstage starting","title":"CBP002.001 Boot into coreboot stage romstage"},{"location":"unified-test-documentation/dasharo-compatibility/100-coreboot-base-port/#cbp003001-boot-into-coreboot-stage-postcar","text":"Test description This test aims to verify that DUT during booting procedure reaches stage postcar. The postcar tears down CAR and loads the ramstage. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power ON the DUT. By using the serial console read the booting procedure stage. Expected result The console output should contain string with the phrase: postcar starting","title":"CBP003.001 Boot into coreboot stage postcar"},{"location":"unified-test-documentation/dasharo-compatibility/100-coreboot-base-port/#cbp004001-boot-into-coreboot-stage-ramstage","text":"Test description This test aims to verify that DUT during booting procedure reaches stage ramstage. The ramstage does the main device init. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power ON the DUT. By using the serial console read the booting procedure stage. Expected result The console output should contain string the with phrase: ramstage starting","title":"CBP004.001 Boot into coreboot stage ramstage"},{"location":"unified-test-documentation/dasharo-compatibility/100-coreboot-base-port/#cbp005001-resource-allocator-v4-gathering-requirements","text":"Test description This test aims to verify that DUT reaches the gathering requirements stage for Resource Allocator v4 during booting procedure. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power ON the DUT. By using the serial console read the booting procedure stage. Expected result The console output should contain a string with the phrase: Pass 1 ( gathering requirements )","title":"CBP005.001 Resource allocator v4 - gathering requirements"},{"location":"unified-test-documentation/dasharo-compatibility/100-coreboot-base-port/#cbp006001-resource-allocator-v4-allocating-resources","text":"Test description This test aims to verify that DUT reaches the allocating resources stage for Resource Allocator v4 during booting procedure. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power ON the DUT. By using the serial console read the booting procedure stage. Expected result The console output should contain a string with the phrase: Pass 2 ( allocating resources )","title":"CBP006.001 Resource allocator v4 - allocating resources"},{"location":"unified-test-documentation/dasharo-compatibility/301-memory-hcl/","text":"Dasharo compatibility: Memory HCL HCL001.001 Memory HCL - boot into OS (Ubuntu 22.04) Test description This test aims to verify that the DUT can boot with the memory module combinations specified in the HCL. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Prepare the memory modules specified in the HCL. Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Test steps Insert the memory module into the DUT's memory port, starting with the first position from the HCL. Power on the DUT. Boot into the system. Power off the DUT. Repeat the test steps for all positions in the HCL. Expected result The expected result is that the OS boots successfully with all memory combinations specified in the HCL If the OPERATING_SYSTEM boots, note the success and power the DUT OFF If the OPERATING_SYSTEM doesn't boot, check the logs (optional - if connected over serial console) for the FSP Memory Init has returned an error and note the failure","title":"Memory HCL"},{"location":"unified-test-documentation/dasharo-compatibility/301-memory-hcl/#dasharo-compatibility-memory-hcl","text":"","title":"Dasharo compatibility: Memory HCL"},{"location":"unified-test-documentation/dasharo-compatibility/301-memory-hcl/#hcl001001-memory-hcl-boot-into-os-ubuntu-2204","text":"Test description This test aims to verify that the DUT can boot with the memory module combinations specified in the HCL. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Prepare the memory modules specified in the HCL. Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Test steps Insert the memory module into the DUT's memory port, starting with the first position from the HCL. Power on the DUT. Boot into the system. Power off the DUT. Repeat the test steps for all positions in the HCL. Expected result The expected result is that the OS boots successfully with all memory combinations specified in the HCL If the OPERATING_SYSTEM boots, note the success and power the DUT OFF If the OPERATING_SYSTEM doesn't boot, check the logs (optional - if connected over serial console) for the FSP Memory Init has returned an error and note the failure","title":"HCL001.001 Memory HCL - boot into OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/303-custom-boot-menu-key/","text":"Dasharo compatibility: Custom Boot Keys CBK001.001 Custom Boot Menu Key Test description This test aims to verify that the DUT is configured to use custom Boot Menu hotkey (if it exists). Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the Boot Menu. Expected result The DUT boots into the Boot Menu after using the specified hotkey. CBK002.001 Custom BIOS Menu Key Test description This test aims to verify that the DUT is configured to use custom BIOS Menu hotkey. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Hold the BIOS_MENU_KEY to enter the BIOS menu. Expected result The DUT boots into the BIOS menu after using the specified hotkey.","title":"Custom Boot Keys"},{"location":"unified-test-documentation/dasharo-compatibility/303-custom-boot-menu-key/#dasharo-compatibility-custom-boot-keys","text":"","title":"Dasharo compatibility: Custom Boot Keys"},{"location":"unified-test-documentation/dasharo-compatibility/303-custom-boot-menu-key/#cbk001001-custom-boot-menu-key","text":"Test description This test aims to verify that the DUT is configured to use custom Boot Menu hotkey (if it exists). Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the Boot Menu. Expected result The DUT boots into the Boot Menu after using the specified hotkey.","title":"CBK001.001 Custom Boot Menu Key"},{"location":"unified-test-documentation/dasharo-compatibility/303-custom-boot-menu-key/#cbk002001-custom-bios-menu-key","text":"Test description This test aims to verify that the DUT is configured to use custom BIOS Menu hotkey. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Hold the BIOS_MENU_KEY to enter the BIOS menu. Expected result The DUT boots into the BIOS menu after using the specified hotkey.","title":"CBK002.001 Custom BIOS Menu Key"},{"location":"unified-test-documentation/dasharo-compatibility/304-custom-logo/","text":"Dasharo compatibility: Custom Logo CLG001.001 Custom boot logo Test description This test aims to verify that the DUT is configured to display the specified (customized) logo at boot. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for the boot logo to appear. Expected result The displayed logo should depend on the Dasharo variant: if the Dasharo variant is NovaCustom - the NovaCustom logo should be displayed, if the Dasharo variant is Protectli - the Protectli logo should be displayed, if the Dasharo variant is Tuxedo - the Tuxedo logo should be displayed, for all other variants Dasharo custom logo should be displayed. Keep in mind that the end-user's customized boot logo might also be displayed - if before the custom logo checking procedure described in the Logo customization documentation has been performed.","title":"Custom Logo"},{"location":"unified-test-documentation/dasharo-compatibility/304-custom-logo/#dasharo-compatibility-custom-logo","text":"","title":"Dasharo compatibility: Custom Logo"},{"location":"unified-test-documentation/dasharo-compatibility/304-custom-logo/#clg001001-custom-boot-logo","text":"Test description This test aims to verify that the DUT is configured to display the specified (customized) logo at boot. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for the boot logo to appear. Expected result The displayed logo should depend on the Dasharo variant: if the Dasharo variant is NovaCustom - the NovaCustom logo should be displayed, if the Dasharo variant is Protectli - the Protectli logo should be displayed, if the Dasharo variant is Tuxedo - the Tuxedo logo should be displayed, for all other variants Dasharo custom logo should be displayed. Keep in mind that the end-user's customized boot logo might also be displayed - if before the custom logo checking procedure described in the Logo customization documentation has been performed.","title":"CLG001.001 Custom boot logo"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/","text":"Dasharo compatibility: USB HID and MSC Support Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . USB001.001 USB devices detection (firmware) Test description This test aims to verify that the external USB devices are detected correctly by the firmware and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Connect the flash drive using the USB port. Test steps Power on the DUT. Enter the boot menu using the BIOS_SETUP_KEY . Select the Boot Menu , press Enter and note the result. Expected result Flash drive entry is listed in the boot menu. USB001.002 USB devices detection in OS (Ubuntu 22.04) Test description This test aims to verify that the external USB devices are detected correctly by the OPERATING_SYSTEM and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: watch -n1 lsusb Connect external USB devices to DUT USB A port and note the result. Expected result After each device is connected to the USB port, a new USB device entry in lsusb command output should appear. USB001.003 USB devices detection in OS (Windows 11) Test description This test aims to verify that the external USB devices are detected correctly by the OPERATING_SYSTEM and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell and and run the following command: Get-PnpDevice -PresentOnly | Where-Object { $_ .InstanceId -match '^USB' } Note the results. Expected result After executing the command, a list containing all USB devices should be displayed. All devices' status should be OK . Example output: Status Class FriendlyName ------ ----- ------------ OK DiskDrive Mass Storage Device USB Device OK USB Generic USB Hub OK HIDClass USB Input Device OK Bluetooth Intel ( R ) Wireless Bluetooth ( R ) OK USB USB Root Hub ( USB 3 .0 ) OK Net TP-LINK Gigabit Ethernet USB Adapter OK USB Generic USB Hub OK USB USB Mass Storage Device USB002.001 USB keyboard detection (firmware) Test description This test aims to verify that the external USB keyboard is detected correctly by the firmware and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Connect the external USB keyboard using the USB port. Test steps Power on the DUT Enter the boot menu using the BIOS_SETUP_KEY . Use the arrow keys, Esc key and the Enter key to navigate the menus. Expected result All menus can be entered using the external USB keyboard. USB002.002 USB keyboard detection (Ubuntu 22.04) Test description This test aims to verify that the external USB keyboard is detected correctly by the OPERATING_SYSTEM and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install libinput-tools on the DUT. Connect the external USB keyboard using the USB port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Run the following command in the terminal: libinput debug-events --show-keycodes Test the alphanumeric keys and note the generated keycodes. Test non-alphanumeric keys and verify that they generate the correct keycodes. Test key combinations with the Shift , Ctrl and Alt modifier keys (this tests 2-key rollover). Expected result The external USB keyboard is detected in OS. All standard keyboard keys generate the correct keycodes and events as per their labels. Key combinations are detected correctly. USB002.003 USB keyboard detection (Windows 11) Test description This test aims to verify that the external USB keyboard is detected correctly by the OPERATING_SYSTEM and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Connect the external USB keyboard using the USB port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell and run the following command: Get-CimInstance win32_KEYBOARD Note the results. Open notepad . Test the alphanumeric keys and note the generated characters. Test non-alphanumeric keys and verify that they generate the signs. Test key combinations with the Shift , and Alt modifier keys. Open On-Screen Keyboard and press Ctrl key on the hardware keyboard. Check if On-Screen Keyboard correctly highlights it. Open Start menu and press Esc . Check if Start menu is properly closed. Expected result After running the PowerShell command information about connected keyboard should be displayed. Example output: Caption : Enhanced ( 101 - or 102 -key ) Description : USB Input Device InstallDate : Name : Enhanced ( 101 - or 102 -key ) Status : OK Availability : ConfigManagerErrorCode : 0 ConfigManagerUserConfig : False CreationClassName : Win32_Keyboard DeviceID : USB \\V ID_046D & PID_C31C & MI_00 \\6 & 26C21341 & 0 & 0000 ErrorCleared : ErrorDescription : LastErrorCode : PNPDeviceID : USB \\V ID_046D & PID_C31C & MI_00 \\6 & 26C21341 & 0 & 0000 PowerManagementCapabilities : PowerManagementSupported : False StatusInfo : SystemCreationClassName : Win32_ComputerSystem SystemName : DESKTOP-CUR9H2J IsLocked : Layout : 00000409 NumberOfFunctionKeys : 12 Password : PSComputerName : All standard keyboard keys generate correct characters or actions when pressed. Key combinations are detected correctly. USB003.001 Upload 1GB file on USB storage (Ubuntu 22.04) Test description This test aims to verify that the 1GB file can be transferred from the OPERATING_SYSTEM to the USB storage . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 USB storage - at least 1GB of free space Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command to generate 1GB file: openssl rand -out test_file.txt -base64 $(( 2 ** 30 * 3 / 4 )) Plug in the USB storage to the USB port. Read the path to the USB storage by running the following command: lsblk Copy the generated file to the USB storage by running the following command: cp test_file.txt { path_to_usb_storage } Verify that the files are the same by running the following command: sha256sum test_file.txt { path_to_usb_storage } /test_file.txt Expected result The output from the last command should contain 2 identical checksums: f46597c0c63a1eefb200d40edf654e52f10c3d5d21565886ad603fabaf8d39fb test_file.txt f46597c0c63a1eefb200d40edf654e52f10c3d5d21565886ad603fabaf8d39fb { path_to_usb_storage } /test_file.txt USB003.002 Upload 1GB file on USB storage (Windows 11) Test description This test aims to verify that the 1GB file can be transferred from the OPERATING_SYSTEM to the USB storage . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 USB storage - at least 1GB of free space Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open powershell as administrator and run the following command to generate 1GB file: fsutil file createnew test_file . txt 1073741824 Plug in the USB storage to the USB port. Read the drive letter assigned to the USB storage by running the following command: ( Get-Volume | where drivetype -eq removable ). driveletter Copy the generated file to the USB storage by running the following command: Copy-Item -Path C :\\ Windows \\ system32 \\ test_file . txt { drive_letter }: Verify that the files are the same by running the following commands: Get-FileHash test_file . txt Get-FileHash { drive_letter }:\\ test_file . txt Expected result The output from the last commands should have equal hash: Algorithm Hash Path --------- ---- ---- SHA256 F46597C0C63A1EEFB200D40EDF654E52F10C3D5D21565886AD603FABAF8D39FB C \\ Windows \\ system3 ... Algorithm Hash Path --------- ---- ---- SHA256 F46597C0C63A1EEFB200D40EDF654E52F10C3D5D21565886AD603FABAF8D39FB E :\\ test_file . txt","title":"USB HID and MSC support"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/#dasharo-compatibility-usb-hid-and-msc-support","text":"","title":"Dasharo compatibility: USB HID and MSC Support"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/#usb001001-usb-devices-detection-firmware","text":"Test description This test aims to verify that the external USB devices are detected correctly by the firmware and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Connect the flash drive using the USB port. Test steps Power on the DUT. Enter the boot menu using the BIOS_SETUP_KEY . Select the Boot Menu , press Enter and note the result. Expected result Flash drive entry is listed in the boot menu.","title":"USB001.001 USB devices detection (firmware)"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/#usb001002-usb-devices-detection-in-os-ubuntu-2204","text":"Test description This test aims to verify that the external USB devices are detected correctly by the OPERATING_SYSTEM and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: watch -n1 lsusb Connect external USB devices to DUT USB A port and note the result. Expected result After each device is connected to the USB port, a new USB device entry in lsusb command output should appear.","title":"USB001.002 USB devices detection in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/#usb001003-usb-devices-detection-in-os-windows-11","text":"Test description This test aims to verify that the external USB devices are detected correctly by the OPERATING_SYSTEM and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell and and run the following command: Get-PnpDevice -PresentOnly | Where-Object { $_ .InstanceId -match '^USB' } Note the results. Expected result After executing the command, a list containing all USB devices should be displayed. All devices' status should be OK . Example output: Status Class FriendlyName ------ ----- ------------ OK DiskDrive Mass Storage Device USB Device OK USB Generic USB Hub OK HIDClass USB Input Device OK Bluetooth Intel ( R ) Wireless Bluetooth ( R ) OK USB USB Root Hub ( USB 3 .0 ) OK Net TP-LINK Gigabit Ethernet USB Adapter OK USB Generic USB Hub OK USB USB Mass Storage Device","title":"USB001.003 USB devices detection in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/#usb002001-usb-keyboard-detection-firmware","text":"Test description This test aims to verify that the external USB keyboard is detected correctly by the firmware and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Connect the external USB keyboard using the USB port. Test steps Power on the DUT Enter the boot menu using the BIOS_SETUP_KEY . Use the arrow keys, Esc key and the Enter key to navigate the menus. Expected result All menus can be entered using the external USB keyboard.","title":"USB002.001 USB keyboard detection (firmware)"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/#usb002002-usb-keyboard-detection-ubuntu-2204","text":"Test description This test aims to verify that the external USB keyboard is detected correctly by the OPERATING_SYSTEM and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install libinput-tools on the DUT. Connect the external USB keyboard using the USB port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Run the following command in the terminal: libinput debug-events --show-keycodes Test the alphanumeric keys and note the generated keycodes. Test non-alphanumeric keys and verify that they generate the correct keycodes. Test key combinations with the Shift , Ctrl and Alt modifier keys (this tests 2-key rollover). Expected result The external USB keyboard is detected in OS. All standard keyboard keys generate the correct keycodes and events as per their labels. Key combinations are detected correctly.","title":"USB002.002 USB keyboard detection (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/#usb002003-usb-keyboard-detection-windows-11","text":"Test description This test aims to verify that the external USB keyboard is detected correctly by the OPERATING_SYSTEM and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Connect the external USB keyboard using the USB port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell and run the following command: Get-CimInstance win32_KEYBOARD Note the results. Open notepad . Test the alphanumeric keys and note the generated characters. Test non-alphanumeric keys and verify that they generate the signs. Test key combinations with the Shift , and Alt modifier keys. Open On-Screen Keyboard and press Ctrl key on the hardware keyboard. Check if On-Screen Keyboard correctly highlights it. Open Start menu and press Esc . Check if Start menu is properly closed. Expected result After running the PowerShell command information about connected keyboard should be displayed. Example output: Caption : Enhanced ( 101 - or 102 -key ) Description : USB Input Device InstallDate : Name : Enhanced ( 101 - or 102 -key ) Status : OK Availability : ConfigManagerErrorCode : 0 ConfigManagerUserConfig : False CreationClassName : Win32_Keyboard DeviceID : USB \\V ID_046D & PID_C31C & MI_00 \\6 & 26C21341 & 0 & 0000 ErrorCleared : ErrorDescription : LastErrorCode : PNPDeviceID : USB \\V ID_046D & PID_C31C & MI_00 \\6 & 26C21341 & 0 & 0000 PowerManagementCapabilities : PowerManagementSupported : False StatusInfo : SystemCreationClassName : Win32_ComputerSystem SystemName : DESKTOP-CUR9H2J IsLocked : Layout : 00000409 NumberOfFunctionKeys : 12 Password : PSComputerName : All standard keyboard keys generate correct characters or actions when pressed. Key combinations are detected correctly.","title":"USB002.003 USB keyboard detection (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/#usb003001-upload-1gb-file-on-usb-storage-ubuntu-2204","text":"Test description This test aims to verify that the 1GB file can be transferred from the OPERATING_SYSTEM to the USB storage . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 USB storage - at least 1GB of free space Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command to generate 1GB file: openssl rand -out test_file.txt -base64 $(( 2 ** 30 * 3 / 4 )) Plug in the USB storage to the USB port. Read the path to the USB storage by running the following command: lsblk Copy the generated file to the USB storage by running the following command: cp test_file.txt { path_to_usb_storage } Verify that the files are the same by running the following command: sha256sum test_file.txt { path_to_usb_storage } /test_file.txt Expected result The output from the last command should contain 2 identical checksums: f46597c0c63a1eefb200d40edf654e52f10c3d5d21565886ad603fabaf8d39fb test_file.txt f46597c0c63a1eefb200d40edf654e52f10c3d5d21565886ad603fabaf8d39fb { path_to_usb_storage } /test_file.txt","title":"USB003.001 Upload 1GB file on USB storage (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/306-usb-hid-and-msc-support/#usb003002-upload-1gb-file-on-usb-storage-windows-11","text":"Test description This test aims to verify that the 1GB file can be transferred from the OPERATING_SYSTEM to the USB storage . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 USB storage - at least 1GB of free space Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open powershell as administrator and run the following command to generate 1GB file: fsutil file createnew test_file . txt 1073741824 Plug in the USB storage to the USB port. Read the drive letter assigned to the USB storage by running the following command: ( Get-Volume | where drivetype -eq removable ). driveletter Copy the generated file to the USB storage by running the following command: Copy-Item -Path C :\\ Windows \\ system32 \\ test_file . txt { drive_letter }: Verify that the files are the same by running the following commands: Get-FileHash test_file . txt Get-FileHash { drive_letter }:\\ test_file . txt Expected result The output from the last commands should have equal hash: Algorithm Hash Path --------- ---- ---- SHA256 F46597C0C63A1EEFB200D40EDF654E52F10C3D5D21565886AD603FABAF8D39FB C \\ Windows \\ system3 ... Algorithm Hash Path --------- ---- ---- SHA256 F46597C0C63A1EEFB200D40EDF654E52F10C3D5D21565886AD603FABAF8D39FB E :\\ test_file . txt","title":"USB003.002 Upload 1GB file on USB storage (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/307-freebsd-support/","text":"Dasharo Compatibility: FreeBSD support Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installation . BSD001.001 FreeBSD installation and boot Test description This test verifies that FreeBSD distribution could be installed on the DUT and works properly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = FreeBSD 13 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"FreeBSD support"},{"location":"unified-test-documentation/dasharo-compatibility/307-freebsd-support/#dasharo-compatibility-freebsd-support","text":"","title":"Dasharo Compatibility: FreeBSD support"},{"location":"unified-test-documentation/dasharo-compatibility/307-freebsd-support/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installation .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/307-freebsd-support/#bsd001001-freebsd-installation-and-boot","text":"Test description This test verifies that FreeBSD distribution could be installed on the DUT and works properly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = FreeBSD 13 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BSD001.001 FreeBSD installation and boot"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/","text":"Dasharo Compatibility: Debian Stable and Ubuntu LTS support Test cases common documentation Test setup Proceed with the Generic test setup: firmware . LBT001.001 Debian Stable installation on USB storage Test description This test aims to verify that Debian Stable distribution could be installed on USB storage attached to the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11 Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. As disk choose the USB stick. Expected result The information about successful installation should be displayed. LBT001.002 Boot Debian from USB Test description This test aims to verify that Debian Stable distribution could be booted from USB storage attached to the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the USB_STORAGE on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. LBT002.001 Ubuntu LTS installation on USB storage Test description This test aims to verify that Ubuntu LTS modern distribution could be installed on USB storage attached to the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. As disk choose the USB stick. Expected result The information about successful installation should be displayed. LBT002.002 Boot Ubuntu from USB Test description This test aims to verify that Ubuntu LTS modern distribution could be booted from USB storage attached to the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the USB_STORAGE on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. LBT003.001 Debian Stable installation on Hard Disk Test description This test aims to verify that Debian Stable distribution could be installed on the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11 Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. As disk choose the mounted in the DUT Hard Disk. Expected result The information about successful installation should be displayed. LBT003.002 Boot Debian from Hard Disk Test description This test aims to verify that Debian Stable distribution could be booted from the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the hard disk on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. LBT004.001 Ubuntu LTS installation on Hard Disk Test description This test aims to verify that Ubuntu LTS modern distribution could be installed on the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. As disk choose the mounted in the DUT Hard Disk. Expected result The information about successful installation should be displayed. LBT004.002 Boot Ubuntu From Hard Disk Test description This test aims to verify that Ubuntu LTS modern distribution could be booted from the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the hard disk on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"Debian Stable and Ubuntu LTS support"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/#dasharo-compatibility-debian-stable-and-ubuntu-lts-support","text":"","title":"Dasharo Compatibility: Debian Stable and Ubuntu LTS support"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/#lbt001001-debian-stable-installation-on-usb-storage","text":"Test description This test aims to verify that Debian Stable distribution could be installed on USB storage attached to the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11 Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. As disk choose the USB stick. Expected result The information about successful installation should be displayed.","title":"LBT001.001 Debian Stable installation on USB storage"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/#lbt001002-boot-debian-from-usb","text":"Test description This test aims to verify that Debian Stable distribution could be booted from USB storage attached to the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the USB_STORAGE on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"LBT001.002 Boot Debian from USB"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/#lbt002001-ubuntu-lts-installation-on-usb-storage","text":"Test description This test aims to verify that Ubuntu LTS modern distribution could be installed on USB storage attached to the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. As disk choose the USB stick. Expected result The information about successful installation should be displayed.","title":"LBT002.001 Ubuntu LTS installation on USB storage"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/#lbt002002-boot-ubuntu-from-usb","text":"Test description This test aims to verify that Ubuntu LTS modern distribution could be booted from USB storage attached to the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the USB_STORAGE on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"LBT002.002 Boot Ubuntu from USB"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/#lbt003001-debian-stable-installation-on-hard-disk","text":"Test description This test aims to verify that Debian Stable distribution could be installed on the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11 Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. As disk choose the mounted in the DUT Hard Disk. Expected result The information about successful installation should be displayed.","title":"LBT003.001 Debian Stable installation on Hard Disk"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/#lbt003002-boot-debian-from-hard-disk","text":"Test description This test aims to verify that Debian Stable distribution could be booted from the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the hard disk on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"LBT003.002 Boot Debian from Hard Disk"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/#lbt004001-ubuntu-lts-installation-on-hard-disk","text":"Test description This test aims to verify that Ubuntu LTS modern distribution could be installed on the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. As disk choose the mounted in the DUT Hard Disk. Expected result The information about successful installation should be displayed.","title":"LBT004.001 Ubuntu LTS installation on Hard Disk"},{"location":"unified-test-documentation/dasharo-compatibility/308-debian-stable-and-ubuntu-lts-support/#lbt004002-boot-ubuntu-from-hard-disk","text":"Test description This test aims to verify that Ubuntu LTS modern distribution could be booted from the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the hard disk on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"LBT004.002 Boot Ubuntu From Hard Disk"},{"location":"unified-test-documentation/dasharo-compatibility/309-qubesos-support/","text":"Dasharo Compatibility: QubesOS support Test cases common documentation Test setup Proceed with the Generic test setup: firmware . QBS001.001 QubesOS installation Test description This test aims to verify that QubesOS Stable distribution could be installed. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = QubesOS 4.1.1 Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. Expected result The information about successful installation should be displayed. QBS001.002 Boot QubesOS Test description This test aims to verify that QubesOS Stable distribution could be booted. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = QubesOS 4.1.1 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the DISK on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"QubesOS support"},{"location":"unified-test-documentation/dasharo-compatibility/309-qubesos-support/#dasharo-compatibility-qubesos-support","text":"","title":"Dasharo Compatibility: QubesOS support"},{"location":"unified-test-documentation/dasharo-compatibility/309-qubesos-support/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/309-qubesos-support/#qbs001001-qubesos-installation","text":"Test description This test aims to verify that QubesOS Stable distribution could be installed. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = QubesOS 4.1.1 Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. Expected result The information about successful installation should be displayed.","title":"QBS001.001 QubesOS installation"},{"location":"unified-test-documentation/dasharo-compatibility/309-qubesos-support/#qbs001002-boot-qubesos","text":"Test description This test aims to verify that QubesOS Stable distribution could be booted. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = QubesOS 4.1.1 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the DISK on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"QBS001.002 Boot QubesOS"},{"location":"unified-test-documentation/dasharo-compatibility/30A-custom-network-boot-entries/","text":"Dasharo Compatibility: Custom Network Boot entries CNB001.002 Only one iPXE in boot menu Test description This test aims to verify that thenetwork boot option with iPXE appears only once in the boot option list. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Check the iPXE is listed only once on the boot option list. Expected result There is only one iPXE entry on the boot option list.","title":"Custom Network Boot entries"},{"location":"unified-test-documentation/dasharo-compatibility/30A-custom-network-boot-entries/#dasharo-compatibility-custom-network-boot-entries","text":"","title":"Dasharo Compatibility: Custom Network Boot entries"},{"location":"unified-test-documentation/dasharo-compatibility/30A-custom-network-boot-entries/#cnb001002-only-one-ipxe-in-boot-menu","text":"Test description This test aims to verify that thenetwork boot option with iPXE appears only once in the boot option list. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Check the iPXE is listed only once on the boot option list. Expected result There is only one iPXE entry on the boot option list.","title":"CNB001.002 Only one iPXE in boot menu"},{"location":"unified-test-documentation/dasharo-compatibility/30L-memtest-payload-support/","text":"Dasharo Compatibility: Memtest payload support MEM001.001 Memtest availability Test description This test aims to verify that the Memtest entry is available in DUT boot menu. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Check if Payload [memtest] is available in the boot menu. Expected result The Payload [memtest] option should be visible as the one of boot menu options. MEM002.001 Enter Memtest Test description This test aims to verify that the DUT enters the Memtestboot option. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Select the key with a proper number for Payload [memtest] . Check if Memtest86+ is available. Expected result The Memtest86+ is visible at the top of the output. MEM003.001 Memtest stability Test description This test aims to verify that the Memtest starts does not hang under DUT. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Select the key with a proper number for Payload [memtest] . Check if State: - Running... is available. Expected result The State: - Running... is visible after a few seconds and confirms that the the test is in progress. MEM004.001 Memtest refreshing by 'L' key Test description This test aims to verify that DUT refreshes Memtest properly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Select the key with a proper number for BOOT_MENU_ENTRY . Press the L key. Check if L refreshes output. Expected result The Memtest86+ is visible before and after pressing L . MEM005.001 Memtest refreshing by 'l' key Test description This test aims to verify that DUT refreshes Memtest properly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Select the key with a proper number for BOOT_MENU_ENTRY . Press the l key. Check if l refreshes output. Expected result The Memtest86+ is visible before and after pressing l . MEM006.001 Memtest completing Test description This test aims to verify that DUT completes Memtest. FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Select the key with a proper number for Payload [memtest] . Make sure that State: - Running... is available. Wait until ** Pass complete, no errors, press Esc to exit ** appears. Expected result After the test completes without any errors ** Pass complete, no errors, press Esc to exit ** message is visible on the bottom of the screen.","title":"Memtest payload support"},{"location":"unified-test-documentation/dasharo-compatibility/30L-memtest-payload-support/#dasharo-compatibility-memtest-payload-support","text":"","title":"Dasharo Compatibility: Memtest payload support"},{"location":"unified-test-documentation/dasharo-compatibility/30L-memtest-payload-support/#mem001001-memtest-availability","text":"Test description This test aims to verify that the Memtest entry is available in DUT boot menu. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Check if Payload [memtest] is available in the boot menu. Expected result The Payload [memtest] option should be visible as the one of boot menu options.","title":"MEM001.001 Memtest availability"},{"location":"unified-test-documentation/dasharo-compatibility/30L-memtest-payload-support/#mem002001-enter-memtest","text":"Test description This test aims to verify that the DUT enters the Memtestboot option. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Select the key with a proper number for Payload [memtest] . Check if Memtest86+ is available. Expected result The Memtest86+ is visible at the top of the output.","title":"MEM002.001 Enter Memtest"},{"location":"unified-test-documentation/dasharo-compatibility/30L-memtest-payload-support/#mem003001-memtest-stability","text":"Test description This test aims to verify that the Memtest starts does not hang under DUT. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Select the key with a proper number for Payload [memtest] . Check if State: - Running... is available. Expected result The State: - Running... is visible after a few seconds and confirms that the the test is in progress.","title":"MEM003.001 Memtest stability"},{"location":"unified-test-documentation/dasharo-compatibility/30L-memtest-payload-support/#mem004001-memtest-refreshing-by-l-key","text":"Test description This test aims to verify that DUT refreshes Memtest properly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Select the key with a proper number for BOOT_MENU_ENTRY . Press the L key. Check if L refreshes output. Expected result The Memtest86+ is visible before and after pressing L .","title":"MEM004.001 Memtest refreshing by 'L' key"},{"location":"unified-test-documentation/dasharo-compatibility/30L-memtest-payload-support/#mem005001-memtest-refreshing-by-l-key","text":"Test description This test aims to verify that DUT refreshes Memtest properly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Select the key with a proper number for BOOT_MENU_ENTRY . Press the l key. Check if l refreshes output. Expected result The Memtest86+ is visible before and after pressing l .","title":"MEM005.001 Memtest refreshing by 'l' key"},{"location":"unified-test-documentation/dasharo-compatibility/30L-memtest-payload-support/#mem006001-memtest-completing","text":"Test description This test aims to verify that DUT completes Memtest. FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Select the key with a proper number for Payload [memtest] . Make sure that State: - Running... is available. Wait until ** Pass complete, no errors, press Esc to exit ** appears. Expected result After the test completes without any errors ** Pass complete, no errors, press Esc to exit ** message is visible on the bottom of the screen.","title":"MEM006.001 Memtest completing"},{"location":"unified-test-documentation/dasharo-compatibility/30M-uefi-compatible-interface/","text":"Dasharo Compatibility: UEFI compatible interface EFI001.001 Boot into UEFI OS (Ubuntu 22.04) Test description This test verifies the presence of UEFI compatible interface by booting UEFI-aware Operating System. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Test steps Power on the DUT. Enter the boot menu using the BIOS_SETUP_KEY . Select the Boot Menu and press Enter . Select the USB stick and press Enter . Select the Ubuntu (safe graphics) in the GRUB menu. Wait for the OPERATING_SYSTEM to finalize booting, by either of the: OPERATING_SYSTEM installer initialization, login form initialization. Power OFF the DUT. Expected result Either the login screen or the OPERATING_SYSTEM installer appears on the internal LCD. EFI001.002 Boot into UEFI OS (Windows 11) Test description This test aims to verify the presence of UEFI compatible interface by booting UEFI-aware Operating System. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Test steps Power on the DUT. Enter the boot menu using the BIOS_SETUP_KEY . Select the Boot Menu and press Enter . Select the USB stick and press Enter . Wait for the OPERATING_SYSTEM to boot finalize booting, by either of the: OPERATING_SYSTEM installer initialization, login form initialization. Power OFF the DUT. Expected result Either the login screen or the OPERATING_SYSTEM installer appears on the internal LCD.","title":"UEFI compatible interface"},{"location":"unified-test-documentation/dasharo-compatibility/30M-uefi-compatible-interface/#dasharo-compatibility-uefi-compatible-interface","text":"","title":"Dasharo Compatibility: UEFI compatible interface"},{"location":"unified-test-documentation/dasharo-compatibility/30M-uefi-compatible-interface/#efi001001-boot-into-uefi-os-ubuntu-2204","text":"Test description This test verifies the presence of UEFI compatible interface by booting UEFI-aware Operating System. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Test steps Power on the DUT. Enter the boot menu using the BIOS_SETUP_KEY . Select the Boot Menu and press Enter . Select the USB stick and press Enter . Select the Ubuntu (safe graphics) in the GRUB menu. Wait for the OPERATING_SYSTEM to finalize booting, by either of the: OPERATING_SYSTEM installer initialization, login form initialization. Power OFF the DUT. Expected result Either the login screen or the OPERATING_SYSTEM installer appears on the internal LCD.","title":"EFI001.001 Boot into UEFI OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/30M-uefi-compatible-interface/#efi001002-boot-into-uefi-os-windows-11","text":"Test description This test aims to verify the presence of UEFI compatible interface by booting UEFI-aware Operating System. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Test steps Power on the DUT. Enter the boot menu using the BIOS_SETUP_KEY . Select the Boot Menu and press Enter . Select the USB stick and press Enter . Wait for the OPERATING_SYSTEM to boot finalize booting, by either of the: OPERATING_SYSTEM installer initialization, login form initialization. Power OFF the DUT. Expected result Either the login screen or the OPERATING_SYSTEM installer appears on the internal LCD.","title":"EFI001.002 Boot into UEFI OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/30P-uefi-shell/","text":"Dasharo Compatibility: UEFI Shell USH001.001 UEFI Shell Test description This test aims to verify that the DUT has the ability to boot into an integrated UEFI Shell application. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: Firmware . Test steps Power on the DUT. While the DUT is booting, hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the UEFI Shell option using the arrow keys and press Enter . Expected result The DUT boots into an UEFI Shell successfully, as indicated by the example console output shown on the screen: UEFI Interactive Shell v2.2 EDK II UEFI v2.70 (EDK II, 0x00010000) Mapping table FS0: Alias(s):HD1b:;BLK2: PciRoot(0x0)/Pci(0x6,0x0)/Pci(0x0,0x0)/NVMe(0x1,9C-BB-50-01-BB-38-25-5 -4BB4-4FDD-9534-B097CD497222,0x800,0x100000) FS1: Alias(s):HD1c:;BLK3: PciRoot(0x0)/Pci(0x6,0x0)/Pci(0x0,0x0)/NVMe(0x1,9C-BB-50-01-BB-38-25-1 -C6AB-4400-AE03-0BF2960DD525,0x100800,0x1D0C5000) BLK1: Alias(s): PciRoot(0x0)/Pci(0x6,0x0)/Pci(0x0,0x0)/NVMe(0x1,9C-BB-50-01-BB-38-25-) BLK0: Alias(s): PciRoot(0x0)/Pci(0x14,0x0)/USB(0x0,0x2) Press ESC in 1 seconds to skip startup.nsh or any other key to continue.","title":"UEFI Shell"},{"location":"unified-test-documentation/dasharo-compatibility/30P-uefi-shell/#dasharo-compatibility-uefi-shell","text":"","title":"Dasharo Compatibility: UEFI Shell"},{"location":"unified-test-documentation/dasharo-compatibility/30P-uefi-shell/#ush001001-uefi-shell","text":"Test description This test aims to verify that the DUT has the ability to boot into an integrated UEFI Shell application. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: Firmware . Test steps Power on the DUT. While the DUT is booting, hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the UEFI Shell option using the arrow keys and press Enter . Expected result The DUT boots into an UEFI Shell successfully, as indicated by the example console output shown on the screen: UEFI Interactive Shell v2.2 EDK II UEFI v2.70 (EDK II, 0x00010000) Mapping table FS0: Alias(s):HD1b:;BLK2: PciRoot(0x0)/Pci(0x6,0x0)/Pci(0x0,0x0)/NVMe(0x1,9C-BB-50-01-BB-38-25-5 -4BB4-4FDD-9534-B097CD497222,0x800,0x100000) FS1: Alias(s):HD1c:;BLK3: PciRoot(0x0)/Pci(0x6,0x0)/Pci(0x0,0x0)/NVMe(0x1,9C-BB-50-01-BB-38-25-1 -C6AB-4400-AE03-0BF2960DD525,0x100800,0x1D0C5000) BLK1: Alias(s): PciRoot(0x0)/Pci(0x6,0x0)/Pci(0x0,0x0)/NVMe(0x1,9C-BB-50-01-BB-38-25-) BLK0: Alias(s): PciRoot(0x0)/Pci(0x14,0x0)/USB(0x0,0x2) Press ESC in 1 seconds to skip startup.nsh or any other key to continue.","title":"USH001.001 UEFI Shell"},{"location":"unified-test-documentation/dasharo-compatibility/310-fedora-support/","text":"Dasharo Compatibility: Fedora support Test cases common documentation Test setup Proceed with the Generic test setup: firmware . FED001.001 Fedora installation Test description This test aims to verify that Fedora Stable distribution could be installed. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Fedora 37 Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. Expected result The information about successful installation should be displayed. FED001.002 Boot Fedora Test description This test aims to verify that Fedora Stable distribution could be booted. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Fedora 37 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the DISK on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"Fedora support"},{"location":"unified-test-documentation/dasharo-compatibility/310-fedora-support/#dasharo-compatibility-fedora-support","text":"","title":"Dasharo Compatibility: Fedora support"},{"location":"unified-test-documentation/dasharo-compatibility/310-fedora-support/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/310-fedora-support/#fed001001-fedora-installation","text":"Test description This test aims to verify that Fedora Stable distribution could be installed. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Fedora 37 Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. Expected result The information about successful installation should be displayed.","title":"FED001.001 Fedora installation"},{"location":"unified-test-documentation/dasharo-compatibility/310-fedora-support/#fed001002-boot-fedora","text":"Test description This test aims to verify that Fedora Stable distribution could be booted. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Fedora 37 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the DISK on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"FED001.002 Boot Fedora"},{"location":"unified-test-documentation/dasharo-compatibility/312-nvme-support/","text":"Dasharo Compatibility: NVMe support NVM001.001 NVMe support (firmware) Test description This test aims to verify that firmware is able to correctly detect NVMe disk in the M.2 slot. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Insert a NVMe disk into the M.2 slot on the DUT. Power on the DUT. While the DUT is booting, hold the BOOT_MENU_KEY to enter the UEFI Boot Menu and note the result. Expected result The NVMe disk should be listed on the bootable devices list. NVM001.002 NVMe support (Ubuntu 22.04) Test description This test aims to verify booting the Operating System from NVMe disk in the M.2 slot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Insert a NVMe disk into the M.2 slot on the DUT. Proceed with the Generic test setup: OS installer . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo mount | grep 'on / ' Expected result The OPERATING_SYSTEM has been booted from the NVMe disk correctly. Output in Terminal indicates that system partition is installed on the NVMe disk: /dev/nvme* on / tpe ext4 ( rw,relatime,errors = remount-ro ) NVM001.003 NVMe support in OS (Windows 11) Test description This test aims to verify booting the Operating System from NVMe disk in the M.2 slot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Generic test setup: firmware . Insert a NVMe disk into the M.2 slot on the DUT. Proceed with the Generic test setup: OS installer . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell as administrator. Run below command and note the result: Get-PnpDevice -Status \"OK\" | where { $_ . InstanceId -like \"SCSI\\DISK&VEN_NVME&*\" } Expected result The OPERATING_SYSTEM booting from the NVMe disk Command should output at least one NVMe drive. Similar as below: Status Class FriendlyName ------ ----- ------------ OK DiskDrive Samsung SSD 980 PRO 500GB","title":"NVME support"},{"location":"unified-test-documentation/dasharo-compatibility/312-nvme-support/#dasharo-compatibility-nvme-support","text":"","title":"Dasharo Compatibility: NVMe support"},{"location":"unified-test-documentation/dasharo-compatibility/312-nvme-support/#nvm001001-nvme-support-firmware","text":"Test description This test aims to verify that firmware is able to correctly detect NVMe disk in the M.2 slot. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Insert a NVMe disk into the M.2 slot on the DUT. Power on the DUT. While the DUT is booting, hold the BOOT_MENU_KEY to enter the UEFI Boot Menu and note the result. Expected result The NVMe disk should be listed on the bootable devices list.","title":"NVM001.001 NVMe support (firmware)"},{"location":"unified-test-documentation/dasharo-compatibility/312-nvme-support/#nvm001002-nvme-support-ubuntu-2204","text":"Test description This test aims to verify booting the Operating System from NVMe disk in the M.2 slot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Insert a NVMe disk into the M.2 slot on the DUT. Proceed with the Generic test setup: OS installer . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo mount | grep 'on / ' Expected result The OPERATING_SYSTEM has been booted from the NVMe disk correctly. Output in Terminal indicates that system partition is installed on the NVMe disk: /dev/nvme* on / tpe ext4 ( rw,relatime,errors = remount-ro )","title":"NVM001.002 NVMe support (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/312-nvme-support/#nvm001003-nvme-support-in-os-windows-11","text":"Test description This test aims to verify booting the Operating System from NVMe disk in the M.2 slot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Generic test setup: firmware . Insert a NVMe disk into the M.2 slot on the DUT. Proceed with the Generic test setup: OS installer . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell as administrator. Run below command and note the result: Get-PnpDevice -Status \"OK\" | where { $_ . InstanceId -like \"SCSI\\DISK&VEN_NVME&*\" } Expected result The OPERATING_SYSTEM booting from the NVMe disk Command should output at least one NVMe drive. Similar as below: Status Class FriendlyName ------ ----- ------------ OK DiskDrive Samsung SSD 980 PRO 500GB","title":"NVM001.003 NVMe support in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/","text":"Dasharo Compatibility: Network Boot Test cases common documentation Test setup Proceed with the Generic test setup: firmware . The DUT should be connected to the Internet by using an Ethernet cable. PXE001.001 Dasharo Network Boot is bootable Test description This test aims to verify, that the iPXE Network boot is bootable in the boot menu and whether, after selecting this boot option, Dasharo Network Boot Menu is displayed. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the iPXE Network boot option using the arrow keys and press Enter . Expected result After selecting the iPXE Network boot , the Dasharo Network Boot Menu should be displayed. PXE002.001 Dasharo network boot menu boot options order is correct Test description This test aims to verify that Dasharo Network Boot Menu contains all of the needed options which are in the correct order. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the iPXE Network boot option using the arrow keys and press Enter . Expected result Dasharo Network Boot Menu contains all of the needed options. Dasharo Network Boot Menu options are in order as follows: Autoboot Dasharo Tools Suite OS installation iPXE Shell PXE003.001 Autoboot option is available and works correctly Test description This test aims to verify that the Autoboot option in Dasharo Network Boot Menu works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the iPXE Network boot option using the arrow keys and press Enter . Select the Autoboot option using the arrow keys, then press Enter . Expected result If the server assigned to the Autoboot option is available in the local network, the boot menu should appear. If the server assigned to the Autoboot option isn't available in the local network, selecting this option will result in configuring the network interfaces and return to the Setup Menu . PXE004.001 DTS option is available and works correctly Test description This test aims to verify that the Dasharo Tools Suite option in Dasharo Network Boot Menu allows booting into DTS. Test configuration data FIRMWARE = coreboot Test setup Proceed with the Test cases common documentation section. Proceed with the Requirements for DTS . Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the iPXE Network boot option using the arrow keys and press Enter . Select the Dasharo Tools Suite option using the arrow keys, then press Enter . Expected result After configuring the network interfaces, connecting to the server and booting, Dasharo Tools Suite menu should appear. PXE005.001 OS installation option is available and works correctly Test description This test aims to verify that the OS installation option in Dasharo Network Boot Menu allows booting into netboot.xyz server. Test configuration data FIRMWARE = coreboot Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the iPXE Network boot option using the arrow keys and press Enter . Select the OS installation option using the arrow keys and press Enter . Expected result After configuring the network interfaces, connecting to the server and booting, netboot.xyz menu should appear. PXE006.001 iPXE shell option is available and works correctly Test description This test aims to verify that the iPXE Shell option in Dasharo Network Boot Menu works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the boot menu. Select the iPXE Network boot option using the arrow keys and press Enter . Select the iPXE Shell option using the arrow keys and press Enter . Obtain an IP address by executing the following command: dhcp Load netboot.xyz server menu by executing the following command: chain --autofree http://boot.netboot.xyz/ Expected result After configuring the network interfaces, connecting to the server and booting, netboot.xyz menu should appear. PXE007.001 iPXE network boot Test description This test aims to verify that the DUT is capable of network booting from a PXE server. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the iPXE Network boot option using the arrow keys and press Enter . Press Ctrl+B when prompted to stop iPXE from booting automatically. Type in dhcp to obtain an IP address. Type in chain --autofree http://boot.netboot.xyz/ to load a boot menu Enter the \"Live CDs\" submenu using the arrow keys and Enter. Select Debian -> Debian Live 11 (bullseye) -> Debian 11 Gnome and press Enter. Expected result The iPXE application boots successfully. iPXE obtains an IP address. iPXE boots an Debian 11 from netboot.xyz.","title":"Network boot"},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/#dasharo-compatibility-network-boot","text":"","title":"Dasharo Compatibility: Network Boot"},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . The DUT should be connected to the Internet by using an Ethernet cable.","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/#pxe001001-dasharo-network-boot-is-bootable","text":"Test description This test aims to verify, that the iPXE Network boot is bootable in the boot menu and whether, after selecting this boot option, Dasharo Network Boot Menu is displayed. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the iPXE Network boot option using the arrow keys and press Enter . Expected result After selecting the iPXE Network boot , the Dasharo Network Boot Menu should be displayed.","title":"PXE001.001 Dasharo Network Boot is bootable"},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/#pxe002001-dasharo-network-boot-menu-boot-options-order-is-correct","text":"Test description This test aims to verify that Dasharo Network Boot Menu contains all of the needed options which are in the correct order. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the iPXE Network boot option using the arrow keys and press Enter . Expected result Dasharo Network Boot Menu contains all of the needed options. Dasharo Network Boot Menu options are in order as follows: Autoboot Dasharo Tools Suite OS installation iPXE Shell","title":"PXE002.001 Dasharo network boot menu boot options order is correct"},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/#pxe003001-autoboot-option-is-available-and-works-correctly","text":"Test description This test aims to verify that the Autoboot option in Dasharo Network Boot Menu works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the iPXE Network boot option using the arrow keys and press Enter . Select the Autoboot option using the arrow keys, then press Enter . Expected result If the server assigned to the Autoboot option is available in the local network, the boot menu should appear. If the server assigned to the Autoboot option isn't available in the local network, selecting this option will result in configuring the network interfaces and return to the Setup Menu .","title":"PXE003.001 Autoboot option is available and works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/#pxe004001-dts-option-is-available-and-works-correctly","text":"Test description This test aims to verify that the Dasharo Tools Suite option in Dasharo Network Boot Menu allows booting into DTS. Test configuration data FIRMWARE = coreboot Test setup Proceed with the Test cases common documentation section. Proceed with the Requirements for DTS . Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the iPXE Network boot option using the arrow keys and press Enter . Select the Dasharo Tools Suite option using the arrow keys, then press Enter . Expected result After configuring the network interfaces, connecting to the server and booting, Dasharo Tools Suite menu should appear.","title":"PXE004.001 DTS option is available and works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/#pxe005001-os-installation-option-is-available-and-works-correctly","text":"Test description This test aims to verify that the OS installation option in Dasharo Network Boot Menu allows booting into netboot.xyz server. Test configuration data FIRMWARE = coreboot Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the iPXE Network boot option using the arrow keys and press Enter . Select the OS installation option using the arrow keys and press Enter . Expected result After configuring the network interfaces, connecting to the server and booting, netboot.xyz menu should appear.","title":"PXE005.001 OS installation option is available and works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/#pxe006001-ipxe-shell-option-is-available-and-works-correctly","text":"Test description This test aims to verify that the iPXE Shell option in Dasharo Network Boot Menu works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the boot menu. Select the iPXE Network boot option using the arrow keys and press Enter . Select the iPXE Shell option using the arrow keys and press Enter . Obtain an IP address by executing the following command: dhcp Load netboot.xyz server menu by executing the following command: chain --autofree http://boot.netboot.xyz/ Expected result After configuring the network interfaces, connecting to the server and booting, netboot.xyz menu should appear.","title":"PXE006.001 iPXE shell option is available and works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/315-network-boot/#pxe007001-ipxe-network-boot","text":"Test description This test aims to verify that the DUT is capable of network booting from a PXE server. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the iPXE Network boot option using the arrow keys and press Enter . Press Ctrl+B when prompted to stop iPXE from booting automatically. Type in dhcp to obtain an IP address. Type in chain --autofree http://boot.netboot.xyz/ to load a boot menu Enter the \"Live CDs\" submenu using the arrow keys and Enter. Select Debian -> Debian Live 11 (bullseye) -> Debian 11 Gnome and press Enter. Expected result The iPXE application boots successfully. iPXE obtains an IP address. iPXE boots an Debian 11 from netboot.xyz.","title":"PXE007.001 iPXE network boot"},{"location":"unified-test-documentation/dasharo-compatibility/315b-netboot-utilities/","text":"Dasharo Compatibility: Network boot utilities Test cases common documentation Test setup Proceed with the Generic test setup: firmware . NBT001.001 Netboot is available Test description This test aims to verify that the Network Boot and Utilities menu is available and its content is right. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the Network Boot and Utilities option using the arrow keys and press Enter . Expected result Network Boot and Utilities option should be present in the UEFI Boot Menu. After selecting the Network Boot and Utilities option the following menu should appear: ------------------------ Network Boot and Utilities ---------------------- ------------------------ Please Select an Option ------------------------- OS Selection & Utilities iPXE Boot iPXE Shell Advanced NBT002.001 OS Selection & Utilities is available Test description This test aims to verify that the OS Selection & Utilities menu is available and its content is right. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the Network Boot and Utilities option using the arrow keys and press Enter . Select the OS Selection & Utilities option using the arrow keys and press Enter . Expected result OS Selection & Utilities option should be present in the Network Boot and Utilities menu. After selecting the OS Selection & Utilities option iPXE menu should be displayed. NBT003.001 iPXE boot is available Test description This test aims to verify that the iPXE Boot menu is available and it content is right. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the Network Boot and Utilities option using the arrow keys and press Enter . Select the iPXE Boot option using the arrow keys and press Enter . Expected result iPXE Boot option should be present in the Network Boot and Utilities menu. After selecting the iPXE Boot option the autoboot procedure should be started. NBT004.001 iPXE shell is available Test description This test aims to verify that the iPXE Shell menu is available and it content is right. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the Network Boot and Utilities option using the arrow keys and press Enter . Select the iPXE Shell option using the arrow keys and press Enter . Expected result iPXE Shell option should be present in the Network Boot and Utilities menu. After selecting the iPXE Shell option the following menu should appear: You are now in iPXE shell. Type \"exit\" to go back to the main menu. iPXE> NBT005.001 iPXE shell works correctly Test description This test aims to verify that the iPXE shell works correctly by configuring network interface and booting from selected address. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the Network Boot and Utilities option using the arrow keys and press Enter . Select the iPXE Shell option using the arrow keys and press Enter . Configure communication interface by using the following command: dhcp net0 Connect to the DTS ipxe menu by using the following command: chain http://boot.3mdeb.com/dts.ipxe Expected result Communication interface configuration procedure should be successful. DTS boot menu should appear. NBT006.001 Advanced option is available Test description This test aims to verify that the Advanced menu is available and its content is right. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the Network Boot and Utilities option using the arrow keys and press Enter . Select the Advanced option using the arrow keys and press Enter . Expected result Advanced option should be present in the Network Boot and Utilities menu. After selecting the Advanced option the following menu should appear: ------------------------ Network Boot and Utilities ---------------------- ------------------------ Please Select an Option ------------------------- Change Netboot iPXE Payload URL Exit NBT007.001 Change netboot URL works correctly Test description This test aims to verify that it's possible to change the netboot URL and boot from it. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the Network Boot and Utilities option using the arrow keys and press Enter . Select the Advanced option using the arrow keys and press Enter . Select the Change Netboot iPXE Payload URL option using the arrow keys and press Enter . Select the Change Netboot iPXE Payload URL option again using the arrow keys and press Enter . Replace the existing address with another iPXE payload URL address, for example: http://boot.3mdeb.com/dts.ipxe . Apply changes by selecting option Apply and Exit and pressing Enter . Select the OS Selection & Utilities option using the arrow keys and press Enter . Expected result Proper boot menu should appear.","title":"Network boot utilities"},{"location":"unified-test-documentation/dasharo-compatibility/315b-netboot-utilities/#dasharo-compatibility-network-boot-utilities","text":"","title":"Dasharo Compatibility: Network boot utilities"},{"location":"unified-test-documentation/dasharo-compatibility/315b-netboot-utilities/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/315b-netboot-utilities/#nbt001001-netboot-is-available","text":"Test description This test aims to verify that the Network Boot and Utilities menu is available and its content is right. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the Network Boot and Utilities option using the arrow keys and press Enter . Expected result Network Boot and Utilities option should be present in the UEFI Boot Menu. After selecting the Network Boot and Utilities option the following menu should appear: ------------------------ Network Boot and Utilities ---------------------- ------------------------ Please Select an Option ------------------------- OS Selection & Utilities iPXE Boot iPXE Shell Advanced","title":"NBT001.001 Netboot is available"},{"location":"unified-test-documentation/dasharo-compatibility/315b-netboot-utilities/#nbt002001-os-selection-utilities-is-available","text":"Test description This test aims to verify that the OS Selection & Utilities menu is available and its content is right. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the Network Boot and Utilities option using the arrow keys and press Enter . Select the OS Selection & Utilities option using the arrow keys and press Enter . Expected result OS Selection & Utilities option should be present in the Network Boot and Utilities menu. After selecting the OS Selection & Utilities option iPXE menu should be displayed.","title":"NBT002.001 OS Selection &amp; Utilities is available"},{"location":"unified-test-documentation/dasharo-compatibility/315b-netboot-utilities/#nbt003001-ipxe-boot-is-available","text":"Test description This test aims to verify that the iPXE Boot menu is available and it content is right. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the Network Boot and Utilities option using the arrow keys and press Enter . Select the iPXE Boot option using the arrow keys and press Enter . Expected result iPXE Boot option should be present in the Network Boot and Utilities menu. After selecting the iPXE Boot option the autoboot procedure should be started.","title":"NBT003.001 iPXE boot is available"},{"location":"unified-test-documentation/dasharo-compatibility/315b-netboot-utilities/#nbt004001-ipxe-shell-is-available","text":"Test description This test aims to verify that the iPXE Shell menu is available and it content is right. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the Network Boot and Utilities option using the arrow keys and press Enter . Select the iPXE Shell option using the arrow keys and press Enter . Expected result iPXE Shell option should be present in the Network Boot and Utilities menu. After selecting the iPXE Shell option the following menu should appear: You are now in iPXE shell. Type \"exit\" to go back to the main menu. iPXE>","title":"NBT004.001 iPXE shell is available"},{"location":"unified-test-documentation/dasharo-compatibility/315b-netboot-utilities/#nbt005001-ipxe-shell-works-correctly","text":"Test description This test aims to verify that the iPXE shell works correctly by configuring network interface and booting from selected address. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the Network Boot and Utilities option using the arrow keys and press Enter . Select the iPXE Shell option using the arrow keys and press Enter . Configure communication interface by using the following command: dhcp net0 Connect to the DTS ipxe menu by using the following command: chain http://boot.3mdeb.com/dts.ipxe Expected result Communication interface configuration procedure should be successful. DTS boot menu should appear.","title":"NBT005.001 iPXE shell works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/315b-netboot-utilities/#nbt006001-advanced-option-is-available","text":"Test description This test aims to verify that the Advanced menu is available and its content is right. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the Network Boot and Utilities option using the arrow keys and press Enter . Select the Advanced option using the arrow keys and press Enter . Expected result Advanced option should be present in the Network Boot and Utilities menu. After selecting the Advanced option the following menu should appear: ------------------------ Network Boot and Utilities ---------------------- ------------------------ Please Select an Option ------------------------- Change Netboot iPXE Payload URL Exit","title":"NBT006.001 Advanced option is available"},{"location":"unified-test-documentation/dasharo-compatibility/315b-netboot-utilities/#nbt007001-change-netboot-url-works-correctly","text":"Test description This test aims to verify that it's possible to change the netboot URL and boot from it. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the Network Boot and Utilities option using the arrow keys and press Enter . Select the Advanced option using the arrow keys and press Enter . Select the Change Netboot iPXE Payload URL option using the arrow keys and press Enter . Select the Change Netboot iPXE Payload URL option again using the arrow keys and press Enter . Replace the existing address with another iPXE payload URL address, for example: http://boot.3mdeb.com/dts.ipxe . Apply changes by selecting option Apply and Exit and pressing Enter . Select the OS Selection & Utilities option using the arrow keys and press Enter . Expected result Proper boot menu should appear.","title":"NBT007.001 Change netboot URL works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/316-sdcard-reader/","text":"Dasharo Compatibility: SD Card Reader Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Insert an SD card into the SD Card reader. SDC001.001 SD Card reader detection (Ubuntu 22.04) Test description This test aims to verify that the SD Card reader is enumerated correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: lspci | grep RTS522A Expected result The output from the command should contain the line: 2d:00.0 Unassigned class [ ff00 ] : Realtek Semiconductor Co., Ltd. RTS522A PCI Express Card Reader ( rev 01 ) SDC001.002 SD Card reader detection (Windows 11) Test description This test aims to verify that the SD Card reader is enumerated correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell as administrator. Run below command and note result: Get-PnpDevice -Status \"OK\" -Class \"MTD\" Expected result The output of the command should contain basic information about mounted SD card reader. Output example: Status Class FriendlyName ------ ----- ------------ OK MTD Realtek PCIE CardReader SDC002.001 SD Card read/write (Ubuntu 22.04) Test description This test aims to verify that the SD Card reader is initialized correctly and can be used from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following commands as root: dd if = /dev/urandom of = /tmp/in.bin bs = 4K count = 100 dd if = /tmp/in.bin of = /dev/mmcblk0 bs = 4K count = 100 dd if = /dev/mmcblk0 of = /tmp/out.bin bs = 4K count = 100 sha256sum /tmp/in.bin /tmp/out.bin Expected result The output from the last command should contain 2 identical checksums: 2083776668ed0c8095a9ac42188153c02f360e116c14b36d2ef5c98665d75dcb /tmp/in.bin 2083776668ed0c8095a9ac42188153c02f360e116c14b36d2ef5c98665d75dcb /tmp/out.bin SDC002.002 SD Card read/write (Windows 11) Test description This test aims to verify that the SD Card reader is initialized correctly and can be used from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Determine the localization of the mounted SD card. Open PowerShell as administrator. Run below commands and note results: New-Item -Path \"${drive_lacation}:\\\" -Name \"testfile.txt\" -ItemType \"file\" -Value \"This is a test string.\" Get-Content -Path \"${drive_lacation}:\\testfile.txt\" Expected result Last command should return This is a test string.","title":"SD card reader"},{"location":"unified-test-documentation/dasharo-compatibility/316-sdcard-reader/#dasharo-compatibility-sd-card-reader","text":"","title":"Dasharo Compatibility: SD Card Reader"},{"location":"unified-test-documentation/dasharo-compatibility/316-sdcard-reader/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Insert an SD card into the SD Card reader.","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/316-sdcard-reader/#sdc001001-sd-card-reader-detection-ubuntu-2204","text":"Test description This test aims to verify that the SD Card reader is enumerated correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: lspci | grep RTS522A Expected result The output from the command should contain the line: 2d:00.0 Unassigned class [ ff00 ] : Realtek Semiconductor Co., Ltd. RTS522A PCI Express Card Reader ( rev 01 )","title":"SDC001.001 SD Card reader detection (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/316-sdcard-reader/#sdc001002-sd-card-reader-detection-windows-11","text":"Test description This test aims to verify that the SD Card reader is enumerated correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell as administrator. Run below command and note result: Get-PnpDevice -Status \"OK\" -Class \"MTD\" Expected result The output of the command should contain basic information about mounted SD card reader. Output example: Status Class FriendlyName ------ ----- ------------ OK MTD Realtek PCIE CardReader","title":"SDC001.002 SD Card reader detection (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/316-sdcard-reader/#sdc002001-sd-card-readwrite-ubuntu-2204","text":"Test description This test aims to verify that the SD Card reader is initialized correctly and can be used from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following commands as root: dd if = /dev/urandom of = /tmp/in.bin bs = 4K count = 100 dd if = /tmp/in.bin of = /dev/mmcblk0 bs = 4K count = 100 dd if = /dev/mmcblk0 of = /tmp/out.bin bs = 4K count = 100 sha256sum /tmp/in.bin /tmp/out.bin Expected result The output from the last command should contain 2 identical checksums: 2083776668ed0c8095a9ac42188153c02f360e116c14b36d2ef5c98665d75dcb /tmp/in.bin 2083776668ed0c8095a9ac42188153c02f360e116c14b36d2ef5c98665d75dcb /tmp/out.bin","title":"SDC002.001 SD Card read/write (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/316-sdcard-reader/#sdc002002-sd-card-readwrite-windows-11","text":"Test description This test aims to verify that the SD Card reader is initialized correctly and can be used from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Determine the localization of the mounted SD card. Open PowerShell as administrator. Run below commands and note results: New-Item -Path \"${drive_lacation}:\\\" -Name \"testfile.txt\" -ItemType \"file\" -Value \"This is a test string.\" Get-Content -Path \"${drive_lacation}:\\testfile.txt\" Expected result Last command should return This is a test string.","title":"SDC002.002 SD Card read/write (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/317-usb-camera/","text":"Dasharo Compatibility: USB Camera CAM001.001 USB Camera (Ubuntu 22.04) Test description This test aims to verify that the integrated USB camera is initialized correctly and can be accessed from the operating system Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Install ffprobe: sudo apt install ffmpeg . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following commands: ffprobe /dev/video0 ffprobe /dev/video2 Expected result The output from the first command should contain the lines: Input #0, video4linux2,v4l2, from '/dev/video0': Stream #0:0: Video: rawvideo (YUY2 / 0x32595559), yuyv422, 640x480, 147456 kb/s, 30 fps, 30 tbr, 1000k tbn, 1000k tbc The output from the second command should contain the lines: Input #0, video4linux2,v4l2, from '/dev/video2': Stream #0:0: Video: rawvideo (Y800 / 0x30303859), gray, 640x360, 55296 kb/s, 30 fps, 30 tbr, 1000k tbn, 1000k tbc CAM001.002 USB Camera (Windows 11) Test description This test aims to verify that the integrated USB camera is initialized correctly and can be accessed from the operating system Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Run PowerShell as administrator. Execute below command and note the result: Get-PnpDevice -PresentOnly | Where-Object { $_ . InstanceId -match '^USB' } Expected result Output should contain Chicony USB2.0 Camera . Example output: Status Class FriendlyName ------ ----- ------------ OK Camera Chicony USB2 . 0 Camera OK Bluetooth Intel ( R ) Wireless Bluetooth ( R ) OK Camera IR Camera OK USB USB Root Hub ( USB 3 . 0 ) OK USB USB Root Hub ( USB 3 . 0 ) OK USB USB Composite Device","title":"USB camera"},{"location":"unified-test-documentation/dasharo-compatibility/317-usb-camera/#dasharo-compatibility-usb-camera","text":"","title":"Dasharo Compatibility: USB Camera"},{"location":"unified-test-documentation/dasharo-compatibility/317-usb-camera/#cam001001-usb-camera-ubuntu-2204","text":"Test description This test aims to verify that the integrated USB camera is initialized correctly and can be accessed from the operating system Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Install ffprobe: sudo apt install ffmpeg . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following commands: ffprobe /dev/video0 ffprobe /dev/video2 Expected result The output from the first command should contain the lines: Input #0, video4linux2,v4l2, from '/dev/video0': Stream #0:0: Video: rawvideo (YUY2 / 0x32595559), yuyv422, 640x480, 147456 kb/s, 30 fps, 30 tbr, 1000k tbn, 1000k tbc The output from the second command should contain the lines: Input #0, video4linux2,v4l2, from '/dev/video2': Stream #0:0: Video: rawvideo (Y800 / 0x30303859), gray, 640x360, 55296 kb/s, 30 fps, 30 tbr, 1000k tbn, 1000k tbc","title":"CAM001.001 USB Camera (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/317-usb-camera/#cam001002-usb-camera-windows-11","text":"Test description This test aims to verify that the integrated USB camera is initialized correctly and can be accessed from the operating system Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Run PowerShell as administrator. Execute below command and note the result: Get-PnpDevice -PresentOnly | Where-Object { $_ . InstanceId -match '^USB' } Expected result Output should contain Chicony USB2.0 Camera . Example output: Status Class FriendlyName ------ ----- ------------ OK Camera Chicony USB2 . 0 Camera OK Bluetooth Intel ( R ) Wireless Bluetooth ( R ) OK Camera IR Camera OK USB USB Root Hub ( USB 3 . 0 ) OK USB USB Root Hub ( USB 3 . 0 ) OK USB USB Composite Device","title":"CAM001.002 USB Camera (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/318-m2-wifi-bluetooth/","text":"Dasharo Compatibility: M.2 WiFi/Bluetooth Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . WLE001.001 Wireless card detection (Ubuntu 22.04) Test description This test aims to verify that the Wi-Fi/Bluetooth card is enumerated correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: lspci | grep \"Network Controller\" Expected result The output of the command should contain information about mounted on the board network controller. Example output: 2f:00.0 Network controller: Intel Corporation Wi-Fi 6 AX201 ( rev 1a ) WLE001.002 Wireless card detection (Windows 11) Test description This test aims to verify that the Wi-Fi/Bluetooth card is enumerated correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell and execute following command: Get-PnpDevice -PresentOnly | Select-String -Pattern \"Wi-Fi\" Note the result. Expected result The output of the command should contain information about mounted on the board network controller. Example output: Intel ( R ) Wi-Fi 6AX200 160MHz WLE002.001 Wi-Fi scanning (Ubuntu 22.04) Test description This test aims to verify that the Wi-Fi functionality of card is initialized correctly and can be used from within the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Make sure to have any Wi-Fi signal available. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following commands as root: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Expected result The output of the last command should return a list of available Wi-Fi networks, for example: IN-USE BSSID SSID MODE CHAN RATE SIGNAL BARS SECURITY XX:XX:XX:XX:XX:XX DIRECT-ny Infra 6 65 Mbit/s 75 \u2582\u2584\u2586_ WPA2 * XX:XX:XX:XX:XX:XX 3mdeb_abr_5GHz Infra 48 405 Mbit/s 72 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX 3mdeb_abr Infra 11 54 Mbit/s 69 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX FunBox2-F9BF_2.4GHz Infra 1 130 Mbit/s 50 \u2582\u2584__ WPA1 WPA2 XX:XX:XX:XX:XX:XX H_Office Infra 2 270 Mbit/s 35 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-xpPhaser 3330 Infra 1 65 Mbit/s 34 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 108 540 Mbit/s 32 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-KRM288x Series Infra 11 54 Mbit/s 22 \u2582___ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 11 130 Mbit/s 20 \u2582___ WPA2 XX:XX:XX:XX:XX:XX DIRECT-ejPhaser 3330 Infra 1 65 Mbit/s 17 \u2582___ WPA2 XX:XX:XX:XX:XX:XX NED-WIFI Infra 11 270 Mbit/s 17 \u2582___ WPA2 WLE002.002 Wi-Fi scanning (Windows 11) Test description This test aims to verify that the Wi-Fi functionality of card is initialized correctly and can be used from within the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Make sure to have any Wi-Fi signal available Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell and execute following command: netsh wlan show network Note the result. Expected result The output of the command should return a list of available Wi-Fi networks. Output example: SSID 1 : Orange_Swiatlowod_A79A Network type : Infrastructure Authentication : WPA2-Personal Encryption : CCMP SSID 2 : DIRECT-Y9Phaser 3330 Network type : Infrastructure Authentication : WPA2-Personal Encryption : CCMP SSID 3 : 3mdeb_abr_5GHz Network type : Infrastructure Authentication : WPA2-Personal Encryption : CCMP SSID 4 : 3mdeb_abr Network type : Infrastructure Authentication : WPA2-Personal Encryption : CCMP WLE003.001 Bluetooth scanning (Ubuntu 22.04) Test description This test aims to verify that the Bluetooth functionality of card is initialized correctly and can be used from within the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Enable Bluetooth and make it discoverable in any device nearby DUT. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following commands: bluetoothctl power on scan on # Wait ~5 seconds devices Expected result The output of the last command should return a list of detectable Bluetooth devices, for example: Device XX:XX:XX:XX:XX:XX Device 1 Device XX:XX:XX:XX:XX:XX Wojtek N Device XX:XX:XX:XX:XX:XX Mi Smart Band 4 Device XX:XX:XX:XX:XX:XX Galaxy Watch4 Classic ( PHLM ) Device XX:XX:XX:XX:XX:XX Galaxy Watch4 Classic ( PHLM ) Device XX:XX:XX:XX:XX:XX Device 2 Device XX:XX:XX:XX:XX:XX [ Signage ] Samsung QMR Series Device XX:XX:XX:XX:XX:XX [ Signage ] Samsung QMR Series Device XX:XX:XX:XX:XX:XX Device 3 Device XX:XX:XX:XX:XX:XX Device 4 Device XX:XX:XX:XX:XX:XX Device 5 Device XX:XX:XX:XX:XX:XX Device 6 WLE003.002 Bluetooth scanning (Windows 11) Test description This test aims to verify that the Bluetooth functionality of card is initialized correctly and can be used from within the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Enable Bluetooth and make it discoverable in any device nearby DUT Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Enter Notification Center in the bottom right part of the screen. Using right mouse button, click on the Bluetooth icon. In shown drop-down menu click Go to settings . Click the + icon described as Add Bluetooth or other device . In the Add a device menu, click Bluetooth . Wait a few moments until DUT scans for nearby Bluetooth devices and note the result. Expected result Available Bluetooth devices should appear in the Add a device window.","title":"Wi-Fi and Bluetooth support"},{"location":"unified-test-documentation/dasharo-compatibility/318-m2-wifi-bluetooth/#dasharo-compatibility-m2-wifibluetooth","text":"","title":"Dasharo Compatibility: M.2 WiFi/Bluetooth"},{"location":"unified-test-documentation/dasharo-compatibility/318-m2-wifi-bluetooth/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/318-m2-wifi-bluetooth/#wle001001-wireless-card-detection-ubuntu-2204","text":"Test description This test aims to verify that the Wi-Fi/Bluetooth card is enumerated correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: lspci | grep \"Network Controller\" Expected result The output of the command should contain information about mounted on the board network controller. Example output: 2f:00.0 Network controller: Intel Corporation Wi-Fi 6 AX201 ( rev 1a )","title":"WLE001.001 Wireless card detection (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/318-m2-wifi-bluetooth/#wle001002-wireless-card-detection-windows-11","text":"Test description This test aims to verify that the Wi-Fi/Bluetooth card is enumerated correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell and execute following command: Get-PnpDevice -PresentOnly | Select-String -Pattern \"Wi-Fi\" Note the result. Expected result The output of the command should contain information about mounted on the board network controller. Example output: Intel ( R ) Wi-Fi 6AX200 160MHz","title":"WLE001.002 Wireless card detection (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/318-m2-wifi-bluetooth/#wle002001-wi-fi-scanning-ubuntu-2204","text":"Test description This test aims to verify that the Wi-Fi functionality of card is initialized correctly and can be used from within the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Make sure to have any Wi-Fi signal available. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following commands as root: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Expected result The output of the last command should return a list of available Wi-Fi networks, for example: IN-USE BSSID SSID MODE CHAN RATE SIGNAL BARS SECURITY XX:XX:XX:XX:XX:XX DIRECT-ny Infra 6 65 Mbit/s 75 \u2582\u2584\u2586_ WPA2 * XX:XX:XX:XX:XX:XX 3mdeb_abr_5GHz Infra 48 405 Mbit/s 72 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX 3mdeb_abr Infra 11 54 Mbit/s 69 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX FunBox2-F9BF_2.4GHz Infra 1 130 Mbit/s 50 \u2582\u2584__ WPA1 WPA2 XX:XX:XX:XX:XX:XX H_Office Infra 2 270 Mbit/s 35 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-xpPhaser 3330 Infra 1 65 Mbit/s 34 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 108 540 Mbit/s 32 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-KRM288x Series Infra 11 54 Mbit/s 22 \u2582___ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 11 130 Mbit/s 20 \u2582___ WPA2 XX:XX:XX:XX:XX:XX DIRECT-ejPhaser 3330 Infra 1 65 Mbit/s 17 \u2582___ WPA2 XX:XX:XX:XX:XX:XX NED-WIFI Infra 11 270 Mbit/s 17 \u2582___ WPA2","title":"WLE002.001 Wi-Fi scanning (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/318-m2-wifi-bluetooth/#wle002002-wi-fi-scanning-windows-11","text":"Test description This test aims to verify that the Wi-Fi functionality of card is initialized correctly and can be used from within the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Make sure to have any Wi-Fi signal available Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell and execute following command: netsh wlan show network Note the result. Expected result The output of the command should return a list of available Wi-Fi networks. Output example: SSID 1 : Orange_Swiatlowod_A79A Network type : Infrastructure Authentication : WPA2-Personal Encryption : CCMP SSID 2 : DIRECT-Y9Phaser 3330 Network type : Infrastructure Authentication : WPA2-Personal Encryption : CCMP SSID 3 : 3mdeb_abr_5GHz Network type : Infrastructure Authentication : WPA2-Personal Encryption : CCMP SSID 4 : 3mdeb_abr Network type : Infrastructure Authentication : WPA2-Personal Encryption : CCMP","title":"WLE002.002 Wi-Fi scanning (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/318-m2-wifi-bluetooth/#wle003001-bluetooth-scanning-ubuntu-2204","text":"Test description This test aims to verify that the Bluetooth functionality of card is initialized correctly and can be used from within the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Enable Bluetooth and make it discoverable in any device nearby DUT. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following commands: bluetoothctl power on scan on # Wait ~5 seconds devices Expected result The output of the last command should return a list of detectable Bluetooth devices, for example: Device XX:XX:XX:XX:XX:XX Device 1 Device XX:XX:XX:XX:XX:XX Wojtek N Device XX:XX:XX:XX:XX:XX Mi Smart Band 4 Device XX:XX:XX:XX:XX:XX Galaxy Watch4 Classic ( PHLM ) Device XX:XX:XX:XX:XX:XX Galaxy Watch4 Classic ( PHLM ) Device XX:XX:XX:XX:XX:XX Device 2 Device XX:XX:XX:XX:XX:XX [ Signage ] Samsung QMR Series Device XX:XX:XX:XX:XX:XX [ Signage ] Samsung QMR Series Device XX:XX:XX:XX:XX:XX Device 3 Device XX:XX:XX:XX:XX:XX Device 4 Device XX:XX:XX:XX:XX:XX Device 5 Device XX:XX:XX:XX:XX:XX Device 6","title":"WLE003.001 Bluetooth scanning (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/318-m2-wifi-bluetooth/#wle003002-bluetooth-scanning-windows-11","text":"Test description This test aims to verify that the Bluetooth functionality of card is initialized correctly and can be used from within the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Enable Bluetooth and make it discoverable in any device nearby DUT Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Enter Notification Center in the bottom right part of the screen. Using right mouse button, click on the Bluetooth icon. In shown drop-down menu click Go to settings . Click the + icon described as Add Bluetooth or other device . In the Add a device menu, click Bluetooth . Wait a few moments until DUT scans for nearby Bluetooth devices and note the result. Expected result Available Bluetooth devices should appear in the Add a device window.","title":"WLE003.002 Bluetooth scanning (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/319-nvidia-graphics/","text":"Dasharo Compatibility: NVIDIA Graphics support Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . NVI001.001 NVIDIA Graphics detect (Ubuntu 22.04) Test description This test aims to verify that the NVIDIA graphics card is correctly initialized and can be detected by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: lspci | grep -i nvidia Expected result The command should return one line containing the name of the graphics card, e.g: 2d:00.0 3D controller: NVIDIA Corporation TU117M ( rev a1 ) NVI001.002 NVIDIA Graphics detect (Windows 11) Test description This test aims to verify that the NVIDIA graphics card is correctly initialized and can be detected by the operating system Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Install the driver for the graphics card (GTX 1650) from the official page . Test steps Run PowerShell as administrator and execute following command: Get-WmiObject -Class Win32_VideoController | Select Description , Name , Status Expected result The output should contain the information about installed Nvidia Graphics card. Example output: Description Name Status ----------- ---- ------ Intel ( R ) Iris ( R ) Xe Graphics Intel ( R ) Iris ( R ) Xe Graphics OK NVIDIA GeForce GTX 1650 NVIDIA GeForce GTX 1650 OK NVI002.001 NVIDIA Graphics power management (Ubuntu 22.04) Test description This test aims to verify that the NVIDIA graphics power management is functional and the card powers on only while it's used. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the package mesa-utils with the following command: sudo apt install mesa-utils Test steps Open a terminal window. Run the following command to see whether the card is off: cat /sys/class/drm/card1/device/power/runtime_status Launch a test application on the discrete graphics card using the following command: __NV_PRIME_RENDER_OFFLOAD = 1 __GLX_VENDOR_LIBRARY_NAME = nvidia glxgears Run the following command to see whether the card has turned on: cat /sys/class/drm/card1/device/power/runtime_status Close the test application and wait ~20 seconds to let the graphics card shut itself down. Run the following command to see whether the card has turned off again: cat /sys/class/drm/card1/device/power/runtime_status Expected result The output from the first command should be the word suspended . The output from the second command should be the word active . The output from the third command should be the word suspended . NVI002.002 NVIDIA Graphics power management (Windows 11) Test description This test aims to verify that the NVIDIA graphics power management is functional and the card powers on only while it's used. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Install the driver for the graphics card (GTX 1650) from the official page . Download and extract gputest from Geeks3D . Test steps Open the NVIDIA Control Panel window. In the menu bar, open the Desktop menu. Enable the Display GPU Activity Icon in Notification Area option. Open the system tray located in the bottom right corner of the screen and locate the GPU activity icon: Open the previously extracted gputest directory and open the GPUTest_GUI application. Click on the Run stress test button to start the test application. Locate the GPU activity icon and check that it indicates that the GPU has powered on. Close the test application. Locate the GPU activity icon and check that it indicates that the GPU has powered off again. Expected result The GPU activity icon should indicate that the GPU is OFF when no application is using the GPU. The GPU activity icon should indicate that the GPU is ON when an application is using the GPU. The GPU activity icon should indicate that the GPU is OFF again after the test application is closed.","title":"Nvidia Graphics support"},{"location":"unified-test-documentation/dasharo-compatibility/319-nvidia-graphics/#dasharo-compatibility-nvidia-graphics-support","text":"","title":"Dasharo Compatibility: NVIDIA Graphics support"},{"location":"unified-test-documentation/dasharo-compatibility/319-nvidia-graphics/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/319-nvidia-graphics/#nvi001001-nvidia-graphics-detect-ubuntu-2204","text":"Test description This test aims to verify that the NVIDIA graphics card is correctly initialized and can be detected by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: lspci | grep -i nvidia Expected result The command should return one line containing the name of the graphics card, e.g: 2d:00.0 3D controller: NVIDIA Corporation TU117M ( rev a1 )","title":"NVI001.001 NVIDIA Graphics detect (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/319-nvidia-graphics/#nvi001002-nvidia-graphics-detect-windows-11","text":"Test description This test aims to verify that the NVIDIA graphics card is correctly initialized and can be detected by the operating system Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Install the driver for the graphics card (GTX 1650) from the official page . Test steps Run PowerShell as administrator and execute following command: Get-WmiObject -Class Win32_VideoController | Select Description , Name , Status Expected result The output should contain the information about installed Nvidia Graphics card. Example output: Description Name Status ----------- ---- ------ Intel ( R ) Iris ( R ) Xe Graphics Intel ( R ) Iris ( R ) Xe Graphics OK NVIDIA GeForce GTX 1650 NVIDIA GeForce GTX 1650 OK","title":"NVI001.002 NVIDIA Graphics detect (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/319-nvidia-graphics/#nvi002001-nvidia-graphics-power-management-ubuntu-2204","text":"Test description This test aims to verify that the NVIDIA graphics power management is functional and the card powers on only while it's used. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the package mesa-utils with the following command: sudo apt install mesa-utils Test steps Open a terminal window. Run the following command to see whether the card is off: cat /sys/class/drm/card1/device/power/runtime_status Launch a test application on the discrete graphics card using the following command: __NV_PRIME_RENDER_OFFLOAD = 1 __GLX_VENDOR_LIBRARY_NAME = nvidia glxgears Run the following command to see whether the card has turned on: cat /sys/class/drm/card1/device/power/runtime_status Close the test application and wait ~20 seconds to let the graphics card shut itself down. Run the following command to see whether the card has turned off again: cat /sys/class/drm/card1/device/power/runtime_status Expected result The output from the first command should be the word suspended . The output from the second command should be the word active . The output from the third command should be the word suspended .","title":"NVI002.001 NVIDIA Graphics power management (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/319-nvidia-graphics/#nvi002002-nvidia-graphics-power-management-windows-11","text":"Test description This test aims to verify that the NVIDIA graphics power management is functional and the card powers on only while it's used. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Install the driver for the graphics card (GTX 1650) from the official page . Download and extract gputest from Geeks3D . Test steps Open the NVIDIA Control Panel window. In the menu bar, open the Desktop menu. Enable the Display GPU Activity Icon in Notification Area option. Open the system tray located in the bottom right corner of the screen and locate the GPU activity icon: Open the previously extracted gputest directory and open the GPUTest_GUI application. Click on the Run stress test button to start the test application. Locate the GPU activity icon and check that it indicates that the GPU has powered on. Close the test application. Locate the GPU activity icon and check that it indicates that the GPU has powered off again. Expected result The GPU activity icon should indicate that the GPU is OFF when no application is using the GPU. The GPU activity icon should indicate that the GPU is ON when an application is using the GPU. The GPU activity icon should indicate that the GPU is OFF again after the test application is closed.","title":"NVI002.002 NVIDIA Graphics power management (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31A-windows-booting/","text":"Dasharo Compatibility: Windows booting Test cases common documentation Test setup Proceed with the Generic test setup: Firmware . Proceed with the Generic test setup: OS installation . WBT001.001 Windows 11 installation and boot Test description This test aims to verify that Windows 11 OS could be installed on the DUT and works properly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The Windows 11 login screen should be displayed. WBT002.001 Windows 10 installation and boot Test description This test aims to verify that Windows 10 OS could be installed on the DUT and works properly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 10 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The Windows 10 login screen should be displayed.","title":"Windows booting"},{"location":"unified-test-documentation/dasharo-compatibility/31A-windows-booting/#dasharo-compatibility-windows-booting","text":"","title":"Dasharo Compatibility: Windows booting"},{"location":"unified-test-documentation/dasharo-compatibility/31A-windows-booting/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: Firmware . Proceed with the Generic test setup: OS installation .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/31A-windows-booting/#wbt001001-windows-11-installation-and-boot","text":"Test description This test aims to verify that Windows 11 OS could be installed on the DUT and works properly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The Windows 11 login screen should be displayed.","title":"WBT001.001 Windows 11 installation and boot"},{"location":"unified-test-documentation/dasharo-compatibility/31A-windows-booting/#wbt002001-windows-10-installation-and-boot","text":"Test description This test aims to verify that Windows 10 OS could be installed on the DUT and works properly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 10 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The Windows 10 login screen should be displayed.","title":"WBT002.001 Windows 10 installation and boot"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/","text":"Dasharo Compatibility: Display ports and LCD support Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . DSP001.001 Internal LCD in firmware Test description This test aims to verify initialization of the laptop's embedded LCD screen during firmware execution phase. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Observe the internal LCD during firmware execution phase. Power off the DUT. Expected result Logo appears on the screen during firmware execution phase. DSP001.002 Internal LCD in OS (Ubuntu 22.04) Test description This test aims to verify initialization of the laptop's embedded LCD in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Observe the internal LCD after the OPERATING_SYSTEM has booted. Expected result Either the login screen or the OPERATING_SYSTEM installer appears on the internal LCD. DSP001.003 Internal LCD in OS (Windows 11) Test description This test aims to verify initialization of the laptop's embedded LCD in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log in by using the proper login and password. Observe the internal LCD after the OPERATING_SYSTEM has booted. Expected result Either the login screen or the OPERATING_SYSTEM installer appears on the internal LCD. DSP002.001 External HDMI display in OS (Ubuntu 22.04) Test description This test aims to verify initialization of the external HDMI display in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect an HDMI cable to the DUT and a display. Test steps Power on the DUT. Boot into the system. Log in by using the proper login and password. If using more than one display, switch the display mode between Mirror and Join Displays . Expected result The image should be displayed on the external HDMI display in Mirror and Join Displays modes. DSP002.002 External HDMI display in OS (Windows 11) Test description This test aims to verify initialization of the external HDMI display in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Connect a HDMI cable to the DUT and a display. Test steps Power on the DUT. Boot into the system. Log in by using the proper login and password. If using more than one display, switch the display mode between Duplicate and Extend . Expected result The image should be displayed on the external HDMI display in Duplicate and Extend modes. DSP002.003 External HDMI display in firmware This test aims to verify initialization of the external HDMI display during firmware execution phase. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Connect an HDMI cable to the DUT and a display. Test steps Power on the DUT. Observe the external HDMI display during firmware execution phase. Power off the DUT. Expected result Logo appears on the screen during firmware execution phase. DSP003.001 External DP display in OS (Ubuntu 22.04) Test description This test aims to verify initialization of the external Display Port connected in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect a Display Port cable to the DUT and a display. Test steps Power on the DUT. Boot into the system. Log in by using the proper login and password. If using more than one display, switch the display mode between Mirror and Join Displays . Expected result The image should be displayed on the external Display Port connected display in Mirror and Join Displays modes. DSP003.002 External DP display in OS (Windows 11) Test description This test aims to verify initialization of the external Display Port connected display in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Connect a Display Port cable to the DUT and a display. Test steps Power on the DUT. Boot into the system. Log in by using the proper login and password. If using more than one display, switch the display mode between Duplicate and Extend . Expected result The image should be displayed on the external Display Port connected display in Duplicate and Extend modes. DSP003.003 External DP display in firmware This test aims to verify initialization of the external Display Port connected display during firmware execution phase. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Connect a Display Port cable to the DUT and a display. Test steps Power on the DUT. Observe the external Display Port connected display during firmware execution phase. Power off the DUT. Expected result Logo appears on the screen during firmware execution phase. DSP004.001 External VGA display in OS (Ubuntu 22.04) Test description This test aims to verify initialization of the external VGA in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect a video input connector to the VGA and a display. Test steps Power on the DUT. Boot into the system. Log the by using the proper login and password. If using more than one display, switch the display mode between Mirror and Join Displays . Expected result The image should be displayed on the external VGA connected display in Mirror and Join Displays modes. DSP004.002 External VGA display in OS (Windows 11) Test description This test aims to verify initialization of the external VGA in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect a video input connector to the VGA and a display. Test steps Power on the DUT. Boot into the system. Log the by using the proper login and password. If using more than one display, switch the display mode between Duplicate and Extend . Expected result The image should be displayed on the external Display Port connected display in Duplicate and Extend modes. DSP004.003 External VGA display in firmware This test aims to verify initialization of the external VGA during firmware execution phase. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Connect a video input connector to the VGA and a display. Test steps Power on the DUT. During boot, press BOOT MENU KEY . Observe the external VGA connected display during firmware execution phase. Power off the DUT. Expected result Boot menu appears on the screen during firmware execution phase.","title":"Display ports and LCD"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dasharo-compatibility-display-ports-and-lcd-support","text":"","title":"Dasharo Compatibility: Display ports and LCD support"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp001001-internal-lcd-in-firmware","text":"Test description This test aims to verify initialization of the laptop's embedded LCD screen during firmware execution phase. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Observe the internal LCD during firmware execution phase. Power off the DUT. Expected result Logo appears on the screen during firmware execution phase.","title":"DSP001.001 Internal LCD in firmware"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp001002-internal-lcd-in-os-ubuntu-2204","text":"Test description This test aims to verify initialization of the laptop's embedded LCD in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Observe the internal LCD after the OPERATING_SYSTEM has booted. Expected result Either the login screen or the OPERATING_SYSTEM installer appears on the internal LCD.","title":"DSP001.002 Internal LCD in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp001003-internal-lcd-in-os-windows-11","text":"Test description This test aims to verify initialization of the laptop's embedded LCD in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log in by using the proper login and password. Observe the internal LCD after the OPERATING_SYSTEM has booted. Expected result Either the login screen or the OPERATING_SYSTEM installer appears on the internal LCD.","title":"DSP001.003 Internal LCD in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp002001-external-hdmi-display-in-os-ubuntu-2204","text":"Test description This test aims to verify initialization of the external HDMI display in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect an HDMI cable to the DUT and a display. Test steps Power on the DUT. Boot into the system. Log in by using the proper login and password. If using more than one display, switch the display mode between Mirror and Join Displays . Expected result The image should be displayed on the external HDMI display in Mirror and Join Displays modes.","title":"DSP002.001 External HDMI display in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp002002-external-hdmi-display-in-os-windows-11","text":"Test description This test aims to verify initialization of the external HDMI display in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Connect a HDMI cable to the DUT and a display. Test steps Power on the DUT. Boot into the system. Log in by using the proper login and password. If using more than one display, switch the display mode between Duplicate and Extend . Expected result The image should be displayed on the external HDMI display in Duplicate and Extend modes.","title":"DSP002.002 External HDMI display in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp002003-external-hdmi-display-in-firmware","text":"This test aims to verify initialization of the external HDMI display during firmware execution phase. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Connect an HDMI cable to the DUT and a display. Test steps Power on the DUT. Observe the external HDMI display during firmware execution phase. Power off the DUT. Expected result Logo appears on the screen during firmware execution phase.","title":"DSP002.003 External HDMI display in firmware"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp003001-external-dp-display-in-os-ubuntu-2204","text":"Test description This test aims to verify initialization of the external Display Port connected in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect a Display Port cable to the DUT and a display. Test steps Power on the DUT. Boot into the system. Log in by using the proper login and password. If using more than one display, switch the display mode between Mirror and Join Displays . Expected result The image should be displayed on the external Display Port connected display in Mirror and Join Displays modes.","title":"DSP003.001 External DP display in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp003002-external-dp-display-in-os-windows-11","text":"Test description This test aims to verify initialization of the external Display Port connected display in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Connect a Display Port cable to the DUT and a display. Test steps Power on the DUT. Boot into the system. Log in by using the proper login and password. If using more than one display, switch the display mode between Duplicate and Extend . Expected result The image should be displayed on the external Display Port connected display in Duplicate and Extend modes.","title":"DSP003.002 External DP display in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp003003-external-dp-display-in-firmware","text":"This test aims to verify initialization of the external Display Port connected display during firmware execution phase. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Connect a Display Port cable to the DUT and a display. Test steps Power on the DUT. Observe the external Display Port connected display during firmware execution phase. Power off the DUT. Expected result Logo appears on the screen during firmware execution phase.","title":"DSP003.003 External DP display in firmware"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp004001-external-vga-display-in-os-ubuntu-2204","text":"Test description This test aims to verify initialization of the external VGA in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect a video input connector to the VGA and a display. Test steps Power on the DUT. Boot into the system. Log the by using the proper login and password. If using more than one display, switch the display mode between Mirror and Join Displays . Expected result The image should be displayed on the external VGA connected display in Mirror and Join Displays modes.","title":"DSP004.001 External VGA display in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp004002-external-vga-display-in-os-windows-11","text":"Test description This test aims to verify initialization of the external VGA in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect a video input connector to the VGA and a display. Test steps Power on the DUT. Boot into the system. Log the by using the proper login and password. If using more than one display, switch the display mode between Duplicate and Extend . Expected result The image should be displayed on the external Display Port connected display in Duplicate and Extend modes.","title":"DSP004.002 External VGA display in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31E-display-ports-and-lcd/#dsp004003-external-vga-display-in-firmware","text":"This test aims to verify initialization of the external VGA during firmware execution phase. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Connect a video input connector to the VGA and a display. Test steps Power on the DUT. During boot, press BOOT MENU KEY . Observe the external VGA connected display during firmware execution phase. Power off the DUT. Expected result Boot menu appears on the screen during firmware execution phase.","title":"DSP004.003 External VGA display in firmware"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/","text":"Dasharo Compatibility: Audio subsystem Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . AUD001.001 Audio subsystem detection (Ubuntu 22.04) Test description This test aims to verify that the audio subsystem is initialized correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: cat /sys/class/sound/card0/hwC0D*/chip_name Expected result The output of the command should return a list of detected audio devices. Depending on mounted devices, the output might be different. Example output: ALC293 Tigerlake HDMI AUD001.002 Audio subsystem detection (Windows 11) Test description This test aims to verify that the audio subsystem is initialized correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Install package AudioDeviceCmdlets : Install-PackageProvider -Name NuGet -Force Install-Module -Name AudioDeviceCmdlets -Force Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Run PowerShell as administrator and execute the following command: Get-AudioDevice -list | ft Index , Default , Type , Name Expected result Microphone (Realtek(R) Audio) and Speakers (Realtek(R) Audio) should be listed in the output: Index Default Type Name ----- ------- ---- ---- 1 True Playback Speakers ( Realtek ( R ) Audio ) 2 True Recording Microphone ( Realtek ( R ) Audio ) AUD002.001 Audio playback (Ubuntu 22.04) Test description This test aims to verify that the audio subsystem is able to playback audio recordings. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the alsa-utils package: sudo apt install alsa-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: pactl set-sink-mute alsa_output.pci-0000_00_1f.3.analog-stereo 0 pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo 65535 speaker-test Expected result Sound should be played from the integrated speakers. AUD002.002 Audio playback (Windows 11) Test description This test aims to verify that the audio subsystem is able to playback audio recordings. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Find the Speakers icon in the bottom right part of the screen and click it using the left mouse button to open the volume menu. In the volume menu, click the rightmost part of it and note the result. Expected result Sound should be played from the integrated speakers. AUD003.001 Audio capture (Ubuntu 22.04) Test description This test aims to verify that the audio subsystem is able to capture audio. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the alsa-utils package: sudo apt install alsa-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: arecord -f S16_LE -d 10 -r 16000 /tmp/test-mic.wav Make some noise around DUT. For example, say something. Execute the following command: aplay /tmp/test-mic.wav Expected result The recorded audio clip is recorded correctly and played back. AUD003.002 Audio capture (Windows 11) Test description This test aims to verify that the audio subsystem is able to capture audio. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Find the Speakers icon in the bottom right part of the screen and click it using the right mouse button then using the left mouse button click Sound Settings . Locate the All sound device bar and click on it. Select the Microphone position in the Input devices section. Click on the Start Test bar in the Input settings section. Create some noise for the DUT to capture and note the result. For example, say something. Click on the Stop Test bar. Expected result The Input volume bar located in the Input settings section should raise when some noise is being created. The result of the test after clicking the Stop Test bar should be more than 0% of the total volume. AUD004.001 External headset recognition (Ubuntu 22.04) Test description This test aims to verify that the external headset is properly recognized after plugging the 3.5 mm jack into the slot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the alsa-utils package: sudo apt install alsa-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug a headset jack into a micro jack slot located on the right side of the laptop. When the Select Audio Device menu appears, select what type of external device has been connected to the laptop (headset). Open a terminal window and execute the following command: amixer -c 0 contents | grep -A 2 'Front Headphone Jack' Disconnect the headset from the laptop. Execute the following command again: amixer -c 0 contents | grep -A 2 'Front Headphone Jack' Expected result The output of the first command should not be empty and contains the line: : values=on The output of the second command should not be empty and contains the line: : values=off AUD004.002 External headset recognition (Windows 11) Test description This test aims to verify that the external headset is properly recognized after plugging the 3.5 mm jack into the slot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug a headset jack into a micro jack slot located on the right side of the laptop. After the Which device did you plug in menu appears, select what type of external device has been connected to the laptop (headset). Find the Speakers icon in the bottom right part of the screen and click it using the right mouse button then using the left mouse button click Sound Settings . Locate the More sound settings bar and click on it. Click on the Speakers bar using the right mouse button then using the left mouse button click Properties . Locate in General the section field named Jack Information . Close the windows Speakers Properties and Sound . Disconnect a headset from the laptop. Repeat steps 7-9. Expected result Jack Information field in the first case should show the position Front Panel 3.5 mm Jack . After disconnecting a headset from the laptop and checking again field Jack Information should not contain the phrase Front Panel 3.5 mm Jack . AUD005.001 External headset audio playback (Ubuntu 22.04) Test description This test aims to verify that the audio subsystem is able to playback audio recordings by using the external headset speakers. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the alsa-utils package: sudo apt install alsa-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug a headset jack into a micro jack slot located on the right side of the laptop. Open a terminal window and execute the following command: pactl set-sink-mute alsa_output.pci-0000_00_1f.3.analog-stereo 0 pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo 65535 speaker-test Expected result Sound should be played from external speakers. AUD005.002 External headset audio playback (Windows 11) Test description This test aims to verify that the audio subsystem is able to playback audio recordings by using the external headset speakers. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug a headset jack into a micro jack slot located on the right side of the laptop. Find the Speakers icon in the bottom right part of the screen and click it using the left mouse button to open the volume menu. In the volume menu, click the rightmost part of it and note the result. Expected result Sound should be played from external speakers. AUD006.001 External headset audio capture (Ubuntu 22.04) Test description This test aims to verify that the audio subsystem is able to capture audio from an external headset. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the alsa-utils package: sudo apt install alsa-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug a headset jack into a micro jack slot located on the right side of the laptop. Open a terminal window and execute the following command: arecord -f S16_LE -d 10 -r 16000 /tmp/test-mic.wav Make some noise for the headset. For example, say something. Execute the following command: aplay /tmp/test-mic.wav Execute the following command: arecord -f S16_LE -d 10 -r 16000 /tmp/test-mic-1.wav Make some noise for the DUT. For example, tap a few times in the laptop casing. Execute the following command: aplay /tmp/test-mic.wav Expected result During playback of the first recording, all noise that was made for the headset should be clearly heard. During playback of the second recording, all noise that was made for DUT should be quiet or not heard. AUD006.002 External headset audio capture (Windows 11) Test description This test aims to verify that the audio subsystem is able to capture audio from an external headset. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug a headset jack into a micro jack slot located on the right side of the laptop. Find the Speakers icon in the bottom right part of the screen and click it using the right mouse button then using the left mouse button click Sound Settings . Locate the All sound device bar and click on it. Select the Microphone position in the Input devices section. Click on the Start Test bar in the Input settings section. Create some noise for the headset to capture and note the result. For example, say something. Create some noise for the DUT. For example, tap a few times in the laptop casing. Click on the Stop Test bar. Expected result The Input volume bar located in the Input settings section should raise when some noise has been created for the headset. The Input volume bar located in the Input settings section should not raise when some noise has been created for the DUT. The result of the test after clicking the Stop Test bar should be more than 0% of the total volume. AUD007.001 HDMI Audio recognition (Ubuntu 22.04) Test description This test aims to verify that the output audio is properly assigned after connecting the external display using the HDMI cable. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the alsa-utils package: sudo apt install alsa-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Connect the external display to the HDMI slot. Open a terminal window and execute the following command: amixer -c 0 contents | grep -A 2 'HDMI/DP,pcm=3' Disconnect the headset from the laptop. Execute the following command again: amixer -c 0 contents | grep -A 2 'HDMI/DP,pcm=3' Expected result The output of the first command should not be empty and contains the line: : values=on The output of the second command should not be empty and contains the line: : values=off AUD007.002 HDMI Audio recognition (Windows 11) Test description This test aims to verify that the output audio is properly assigned after connecting the external display using the HDMI cable. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Find the Speakers icon in the bottom right part of the screen and click it using the right mouse button then using the left mouse button click Sound Settings . Locate the All sound device bar and click on it. Locate the Output devices and Input devices section. Connect the external display to the HDMI slot. Expected result The connected display should appear in the Output devices and Input devices section. AUD008.001 HDMI audio playback (Ubuntu 22.04) Test description This test aims to verify that the audio subsystem is able to playback audio recordings by using the external display connected to the HDMI slot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the alsa-utils package: sudo apt install alsa-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Connect the external display to the HDMI slot. Open a terminal window and execute the following commands: pacmd set-card-profile 0 output:hdmi-stereo pactl set-sink-mute alsa_output.pci-0000_00_1f.3.analog-stereo 0 pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo 65535 speaker-test Expected result Sound should be played from the external display. AUD008.002 HDMI audio playback (Windows 11) Test description This test aims to verify that the audio subsystem is able to playback audio recordings by using the external display connected to the HDMI slot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Connect the external display to the HDMI slot. Find the Speakers icon in the bottom right part of the screen and click it using the right mouse button then using the left mouse button click Sound Settings . Locate the All sound device bar and click on it. Select the external display position in the Output devices section. Click on the Test bar in the Output settings section. Expected result Sound should be played from the external display.","title":"Audio Subsystem"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#dasharo-compatibility-audio-subsystem","text":"","title":"Dasharo Compatibility: Audio subsystem"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud001001-audio-subsystem-detection-ubuntu-2204","text":"Test description This test aims to verify that the audio subsystem is initialized correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: cat /sys/class/sound/card0/hwC0D*/chip_name Expected result The output of the command should return a list of detected audio devices. Depending on mounted devices, the output might be different. Example output: ALC293 Tigerlake HDMI","title":"AUD001.001 Audio subsystem detection (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud001002-audio-subsystem-detection-windows-11","text":"Test description This test aims to verify that the audio subsystem is initialized correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Install package AudioDeviceCmdlets : Install-PackageProvider -Name NuGet -Force Install-Module -Name AudioDeviceCmdlets -Force Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Run PowerShell as administrator and execute the following command: Get-AudioDevice -list | ft Index , Default , Type , Name Expected result Microphone (Realtek(R) Audio) and Speakers (Realtek(R) Audio) should be listed in the output: Index Default Type Name ----- ------- ---- ---- 1 True Playback Speakers ( Realtek ( R ) Audio ) 2 True Recording Microphone ( Realtek ( R ) Audio )","title":"AUD001.002 Audio subsystem detection (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud002001-audio-playback-ubuntu-2204","text":"Test description This test aims to verify that the audio subsystem is able to playback audio recordings. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the alsa-utils package: sudo apt install alsa-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: pactl set-sink-mute alsa_output.pci-0000_00_1f.3.analog-stereo 0 pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo 65535 speaker-test Expected result Sound should be played from the integrated speakers.","title":"AUD002.001 Audio playback (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud002002-audio-playback-windows-11","text":"Test description This test aims to verify that the audio subsystem is able to playback audio recordings. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Find the Speakers icon in the bottom right part of the screen and click it using the left mouse button to open the volume menu. In the volume menu, click the rightmost part of it and note the result. Expected result Sound should be played from the integrated speakers.","title":"AUD002.002 Audio playback (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud003001-audio-capture-ubuntu-2204","text":"Test description This test aims to verify that the audio subsystem is able to capture audio. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the alsa-utils package: sudo apt install alsa-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: arecord -f S16_LE -d 10 -r 16000 /tmp/test-mic.wav Make some noise around DUT. For example, say something. Execute the following command: aplay /tmp/test-mic.wav Expected result The recorded audio clip is recorded correctly and played back.","title":"AUD003.001 Audio capture (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud003002-audio-capture-windows-11","text":"Test description This test aims to verify that the audio subsystem is able to capture audio. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Find the Speakers icon in the bottom right part of the screen and click it using the right mouse button then using the left mouse button click Sound Settings . Locate the All sound device bar and click on it. Select the Microphone position in the Input devices section. Click on the Start Test bar in the Input settings section. Create some noise for the DUT to capture and note the result. For example, say something. Click on the Stop Test bar. Expected result The Input volume bar located in the Input settings section should raise when some noise is being created. The result of the test after clicking the Stop Test bar should be more than 0% of the total volume.","title":"AUD003.002 Audio capture (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud004001-external-headset-recognition-ubuntu-2204","text":"Test description This test aims to verify that the external headset is properly recognized after plugging the 3.5 mm jack into the slot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the alsa-utils package: sudo apt install alsa-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug a headset jack into a micro jack slot located on the right side of the laptop. When the Select Audio Device menu appears, select what type of external device has been connected to the laptop (headset). Open a terminal window and execute the following command: amixer -c 0 contents | grep -A 2 'Front Headphone Jack' Disconnect the headset from the laptop. Execute the following command again: amixer -c 0 contents | grep -A 2 'Front Headphone Jack' Expected result The output of the first command should not be empty and contains the line: : values=on The output of the second command should not be empty and contains the line: : values=off","title":"AUD004.001 External headset recognition (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud004002-external-headset-recognition-windows-11","text":"Test description This test aims to verify that the external headset is properly recognized after plugging the 3.5 mm jack into the slot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug a headset jack into a micro jack slot located on the right side of the laptop. After the Which device did you plug in menu appears, select what type of external device has been connected to the laptop (headset). Find the Speakers icon in the bottom right part of the screen and click it using the right mouse button then using the left mouse button click Sound Settings . Locate the More sound settings bar and click on it. Click on the Speakers bar using the right mouse button then using the left mouse button click Properties . Locate in General the section field named Jack Information . Close the windows Speakers Properties and Sound . Disconnect a headset from the laptop. Repeat steps 7-9. Expected result Jack Information field in the first case should show the position Front Panel 3.5 mm Jack . After disconnecting a headset from the laptop and checking again field Jack Information should not contain the phrase Front Panel 3.5 mm Jack .","title":"AUD004.002 External headset recognition (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud005001-external-headset-audio-playback-ubuntu-2204","text":"Test description This test aims to verify that the audio subsystem is able to playback audio recordings by using the external headset speakers. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the alsa-utils package: sudo apt install alsa-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug a headset jack into a micro jack slot located on the right side of the laptop. Open a terminal window and execute the following command: pactl set-sink-mute alsa_output.pci-0000_00_1f.3.analog-stereo 0 pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo 65535 speaker-test Expected result Sound should be played from external speakers.","title":"AUD005.001 External headset audio playback (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud005002-external-headset-audio-playback-windows-11","text":"Test description This test aims to verify that the audio subsystem is able to playback audio recordings by using the external headset speakers. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug a headset jack into a micro jack slot located on the right side of the laptop. Find the Speakers icon in the bottom right part of the screen and click it using the left mouse button to open the volume menu. In the volume menu, click the rightmost part of it and note the result. Expected result Sound should be played from external speakers.","title":"AUD005.002 External headset audio playback (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud006001-external-headset-audio-capture-ubuntu-2204","text":"Test description This test aims to verify that the audio subsystem is able to capture audio from an external headset. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the alsa-utils package: sudo apt install alsa-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug a headset jack into a micro jack slot located on the right side of the laptop. Open a terminal window and execute the following command: arecord -f S16_LE -d 10 -r 16000 /tmp/test-mic.wav Make some noise for the headset. For example, say something. Execute the following command: aplay /tmp/test-mic.wav Execute the following command: arecord -f S16_LE -d 10 -r 16000 /tmp/test-mic-1.wav Make some noise for the DUT. For example, tap a few times in the laptop casing. Execute the following command: aplay /tmp/test-mic.wav Expected result During playback of the first recording, all noise that was made for the headset should be clearly heard. During playback of the second recording, all noise that was made for DUT should be quiet or not heard.","title":"AUD006.001 External headset audio capture (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud006002-external-headset-audio-capture-windows-11","text":"Test description This test aims to verify that the audio subsystem is able to capture audio from an external headset. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug a headset jack into a micro jack slot located on the right side of the laptop. Find the Speakers icon in the bottom right part of the screen and click it using the right mouse button then using the left mouse button click Sound Settings . Locate the All sound device bar and click on it. Select the Microphone position in the Input devices section. Click on the Start Test bar in the Input settings section. Create some noise for the headset to capture and note the result. For example, say something. Create some noise for the DUT. For example, tap a few times in the laptop casing. Click on the Stop Test bar. Expected result The Input volume bar located in the Input settings section should raise when some noise has been created for the headset. The Input volume bar located in the Input settings section should not raise when some noise has been created for the DUT. The result of the test after clicking the Stop Test bar should be more than 0% of the total volume.","title":"AUD006.002 External headset audio capture (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud007001-hdmi-audio-recognition-ubuntu-2204","text":"Test description This test aims to verify that the output audio is properly assigned after connecting the external display using the HDMI cable. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the alsa-utils package: sudo apt install alsa-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Connect the external display to the HDMI slot. Open a terminal window and execute the following command: amixer -c 0 contents | grep -A 2 'HDMI/DP,pcm=3' Disconnect the headset from the laptop. Execute the following command again: amixer -c 0 contents | grep -A 2 'HDMI/DP,pcm=3' Expected result The output of the first command should not be empty and contains the line: : values=on The output of the second command should not be empty and contains the line: : values=off","title":"AUD007.001 HDMI Audio recognition (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud007002-hdmi-audio-recognition-windows-11","text":"Test description This test aims to verify that the output audio is properly assigned after connecting the external display using the HDMI cable. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Find the Speakers icon in the bottom right part of the screen and click it using the right mouse button then using the left mouse button click Sound Settings . Locate the All sound device bar and click on it. Locate the Output devices and Input devices section. Connect the external display to the HDMI slot. Expected result The connected display should appear in the Output devices and Input devices section.","title":"AUD007.002 HDMI Audio recognition (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud008001-hdmi-audio-playback-ubuntu-2204","text":"Test description This test aims to verify that the audio subsystem is able to playback audio recordings by using the external display connected to the HDMI slot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the alsa-utils package: sudo apt install alsa-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Connect the external display to the HDMI slot. Open a terminal window and execute the following commands: pacmd set-card-profile 0 output:hdmi-stereo pactl set-sink-mute alsa_output.pci-0000_00_1f.3.analog-stereo 0 pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo 65535 speaker-test Expected result Sound should be played from the external display.","title":"AUD008.001 HDMI audio playback (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31F-audio-subsystem/#aud008002-hdmi-audio-playback-windows-11","text":"Test description This test aims to verify that the audio subsystem is able to playback audio recordings by using the external display connected to the HDMI slot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Connect the external display to the HDMI slot. Find the Speakers icon in the bottom right part of the screen and click it using the right mouse button then using the left mouse button click Sound Settings . Locate the All sound device bar and click on it. Select the external display position in the Output devices section. Click on the Test bar in the Output settings section. Expected result Sound should be played from the external display.","title":"AUD008.002 HDMI audio playback (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/","text":"Dasharo Compatibility: Embedded Controller and Super I/O initialization Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . ECR001.001 Battery monitoring - charge level in OS (Ubuntu 22.04) Test description This test verifies whether the battery charge level is reported in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Locate the power menu in the upper right corner of the screen. Open the power menu and locate the battery status indicator. Expected result The battery status indicator should show the current charge level (percentage left). ECR001.002 Battery monitoring - charge level in OS (Windows 11) Test description This test verifies whether the battery charge level is reported in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Locate the power menu in the lower right corner of the screen. Expected result The battery status indicator should show the current charge level (percentage left). ECR002.001 Battery monitoring - charging state in OS (Ubuntu 22.04) Test description This test verifies that the power supply state is detected correctly in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Locate the power menu in the upper right corner of the screen. Open the power menu and locate the battery status indicator. Note the current state. Unplug the power supply and wait for the battery charge state to change to Discharging . Plug in the power supply and wait for the battery charge state to change to Charging . Expected result The battery charge indicator should correctly show whether the power supply is plugged in or not. The battery charge indicator should detect the AC adapter state change within seconds of the adapter being plugged in/out. ECR002.002 Battery monitoring - charging state in OS (Windows 11) Test description This test verifies that the power supply state is detected correctly in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Locate the power menu in the lower right corner of the screen. Open the power menu and locate the battery status indicator. Note the current state. Unplug the power supply and wait for the battery charge state to change to on battery . Plug in the power supply and wait for the battery charge state to change to plugged in . Expected result The battery charge indicator should correctly show whether the power supply is plugged in or not. The battery charge indicator should detect the AC adapter state change within seconds of the adapter being plugged in / out. ECR003.001 Touchpad in OS - (Ubuntu 22.04) Test description This test verifies that the touchpad is initialized correctly and is detected by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install libinput-tools on the DUT. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Verify that the cursor can be moved with the touchpad and that clicking works (test both clicking and tapping). Run sudo libinput debug-events in the terminal: Verify that scrolling with 2 fingers generates a POINTER_AXIS event, Verify that pinching with 2 fingers generates a GESTURE_PINCH_UPDATE event. Press Ctrl + C to terminate the libinput program. Expected result Moving the cursor, clicking, zooming and scrolling are detected correctly by the operating system. ECR003.002 Touchpad in OS - (Windows 11) Test description This test verifies that the touchpad is initialized correctly and is detected by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Verify that the cursor can be moved with the touchpad and that clicking works (test both clicking and tapping). Open C:\\Windows in Windows Explorer Verify that scrolling with 2 fingers moves the content of the window, Verify that pinching with 2 fingers zooms in and zooms out the content. Expected result Moving the cursor, clicking, zooming and scrolling are detected correctly by the operating system. ECR004.001 Keyboard (standard keypad) in firmware Test description This test verifies that the keyboard is detected correctly by the firmware and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware Test steps Power on the DUT and press the BIOS_SETUP_KEY to enter the setup menu. Use the arrow keys and the Enter key to navigate the menus. Expected result All menus can be entered using the internal keyboard. ECR004.002 Keyboard (standard keypad) in OS (Ubuntu 22.04) Test description This test verifies that the keyboard is detected correctly by the operating system and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install libinput-tools on the DUT. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Run sudo libinput debug-events --show-keycodes in the terminal. Press each keyboard key and check the generated keycode. Expected result All standard keyboard keys generate the correct keycodes and events as per their labels. Key combinations are detected correctly. ECR004.003 Keyboard (standard keypad) in OS (Windows 11) Test description This test verifies that the keyboard is detected correctly by the operating system and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open notepad Test the alphanumeric keys and note the generated characters Test non-alphanumeric keys and verify that they generate the signs Test key combinations with the Shift , and Alt modifier keys Open On-Screen Keyboard and press Ctrl key on the hardware keyboard. Check if On-Screen Keyboard correctly highlights it. Open Start menu and press Esc . Check if Start menu is properly closed. Expected result All standard keyboard keys generate correct characters or actions when pressed. Key combinations are detected correctly. ECR005.001 Keyboard (function key: play/pause) in OS (Ubuntu 22.04) Test description This test verifies that the play/pause hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Install libinput-tools on the DUT. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Run sudo libinput debug-events --show-keycodes in the terminal. Verify that pressing the play/pause key generates a KEY_PLAYPAUSE event. Expected result Pressing the play/pause hotkey generates a KEY_PLAYPAUSE event. ECR005.002 Keyboard (function key: play/pause) in OS (Windows 11) Test description This test verifies that the play/pause hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Start Groove Music Verify that when pressing the play/pause button, player menu appears in the upper left part of the screen for a few seconds. Expected result Pressing the play/pause hotkey is properly detected by the OS ECR006.001 Keyboard (function key: cooling mode) in OS (Ubuntu 22.04) Test description This test verifies that the cooling mode hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the cooling mode hotkey (Fn + 1) once and note the effect. Press the cooling mode hotkey once again and note the effect. Expected result Pressing the hotkey once should activate the cooling mode (fans should spin up to their maximum speed). Pressing the hotkey again should deactivate the cooling mode (fans should return to normal). ECR006.002 Keyboard (function key: cooling mode) in OS (Windows 11) Test description This test verifies that the cooling mode hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the cooling mode hotkey (Fn + 1) once and note the effect. Press the cooling mode hotkey once again and note the effect. Expected result Pressing the hotkey once should activate the cooling mode (fans should spin up to their maximum speed). Pressing the hotkey again should deactivate the cooling mode (fans should return to normal). ECR007.001 Keyboard (function key: touchpad on/off) in OS (Ubuntu 22.04) Test description This test verifies that the touchpad on/off hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Proceed with the Test cases common documentation section. Create a file /etc/udev/hwdb.d/60-keyboard.hwdb with the following contents: evdev:atkbd:dmi:bvn*:bvr*:svnNotebook:pnNV4XMB,ME,MZ:* KEYBOARD_KEY_f7 = 191 KEYBOARD_KEY_f8 = 191 Execute the following commands: sudo systemd-hwdb update sudo udevadm trigger Test steps Press the touchpad on/off key and try to use the touchpad. Press the touchpad on/off key once again and try to use the touchpad again. Expected result Pressing the hotkey once should deactivate the touchpad (touchpad should be completely inoperable). Pressing the hotkey again should reactivate the touchpad. ECR007.002 Keyboard (function key: touchpad on/off) in OS (Windows 11) Test description This test verifies that the touchpad on/off hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the touchpad on/off key and try to use the touchpad. Press the touchpad on/off key once again and try to use the touchpad again. Expected result Pressing the hotkey once should deactivate the touchpad (touchpad should be completely inoperable). Pressing the hotkey again should reactivate the touchpad. ECR008.001 Keyboard (function key: display on/off) in OS (Ubuntu 22.04) Test description This test verifies that the display on/off hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the display on/off hotkey once and note the effect. Press any key on the keyboard and note the effect. Expected result Pressing the hotkey once should turn the internal LCD panel off. Pressing any key on the keyboard should power the internal LCD panel back on. ECR008.002 Keyboard (function key: display on/off) in OS (Windows 11) Test description This test verifies that the display on/off hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the display on/off hotkey once and note the effect. Press any key on the keyboard and note the effect. Expected result Pressing the hotkey once should turn the internal LCD panel off. Pressing any key on the keyboard should power the internal LCD panel back on. ECR009.001 Keyboard (function key: mute) in OS (Ubuntu 22.04) Test description This test verifies that the volume mute hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the volume mute hotkey twice and note the effect each keypress has. Expected result Pressing the hotkey should mute or unmute the currently enabled audio output. Each keypress should cause a mute/unmute notification to appear in the middle of the screen. ECR009.002 Keyboard (function key: mute) in OS (Windows 11) Test description This test verifies that the mute hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the mute hotkey once and check the volume indicator in the bottom right part of the screen. Press the mute hotkey once and check the volume indicator again. Expected result Pressing the hotkey once should mute the device Pressing the hotkey again should re-enable the sound ECR010.001 Keyboard (function key: keyboard backlight) in OS (Ubuntu 22.04) Test description This test verifies that the keyboard backlight hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the keyboard backlight hotkey 6 times and note the effect on the keyboard backlight after each keypress. Expected result The keyboard has 6 backlight settings from 0% to 100% Each keypress should set the keyboard to the next mode, with the last mode wrapping back around to the first. ECR010.002 Keyboard (function key: keyboard backlight) in OS (Windows 11) Test description This test verifies that the keyboard backlight hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the keyboard backlight hotkey 6 times and note the effect on the keyboard backlight after each keypress. Expected result The keyboard has 6 backlight settings from 0% to 100% Each keypress should set the keyboard to the next mode, with the last mode wrapping back around to the first. ECR011.001 Keyboard (function key: volume down) in OS (Ubuntu 22.04) Test description This test verifies that the volume down hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the volume down hotkey once and note the effects. Expected result Pressing the hotkey should decrease the volume of the currently enabled audio output. Each key press should cause a volume down notification to appear in the middle of the screen. ECR011.002 Keyboard (function key: volume down) in OS (Windows 11) Test description This test verifies that the volume down hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the volume down hotkey once and note the effects. Expected result Pressing the hotkey should decrease the volume of the currently enabled audio output. Each key press should cause a volume down notification to appear in the upper left part of the screen. ECR012.001 Keyboard (function key: volume up) in OS (Ubuntu 22.04) Test description This test verifies that the volume up hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the volume up hotkey once and note the effects. Expected result Pressing the hotkey should increase the volume of the currently enabled audio output. Each key press should cause a volume up notification to appear in the middle of the screen. ECR012.002 Keyboard (function key: volume up) in OS (Windows 11) Test description This test verifies that the volume up hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the volume down hotkey once and note the effects. Expected result Pressing the hotkey should increase the volume of the currently enabled audio output. Each key press should cause a volume up notification to appear in the upper left part of the screen. ECR013.001 Keyboard (function key: display switch) in OS (Ubuntu 22.04) Test description This test verifies that the display switch hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install libinput-tools on the DUT. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Run sudo libinput debug-events --show-keycodes in the terminal. Press the display switch hotkey once and note the effect. Expected result Pressing the hotkey should yield the following output in the terminal: -event3 KEYBOARD_KEY +0.000s KEY_LEFTMETA ( 125 ) pressed event3 KEYBOARD_KEY +0.004s KEY_P ( 25 ) pressed event3 KEYBOARD_KEY +0.010s KEY_P ( 25 ) released event3 KEYBOARD_KEY +0.015s KEY_LEFTMETA ( 125 ) released ECR013.002 Keyboard (function key: display switch) in OS (Windows 11) Test description This test verifies that the display switch hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the display switch hotkey once and note the effect. Expected result Pressing the hotkey should cause the display settings bar to appear on the right part of the screen. ECR014.001 Keyboard (function key: brightness down) in OS (Ubuntu 22.04) Test description This test verifies that the brightness down hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test steps Press the brightness down hotkey once and note the effects. Expected result Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Pressing the hotkey should decrease the brightness of the internal LCD display. Each key press should cause a brightness down notification to appear in the middle of the screen. ECR014.002 Keyboard (function key: brightness down) in OS (Windows 11) Test description This test verifies that the brightness down hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the brightness down hotkey once and note the effects. Expected result Pressing the hotkey should decrease the brightness of the internal LCD display. Each key press should cause a brightness down notification to appear in the top left of the screen. ECR015.001 Keyboard (function key: brightness up) in OS (Ubuntu 22.04) Test description This test verifies that the brightness up hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the brightness up hotkey once and note the effects. Expected result Pressing the hotkey should increase the brightness of the internal LCD display. Each key press should cause a brightness up notification to appear in the middle of the screen. ECR015.002 Keyboard (function key: brightness up) in OS (Windows 11) Test description This test verifies that the brightness down hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the brightness up hotkey once and note the effects. Expected result Pressing the hotkey should increase the brightness of the internal LCD display. Each key press should cause a brightness up notification to appear in the top left of the screen. ECR016.001 Keyboard (function key: camera on/off) in OS (Ubuntu 22.04) Test description This test verifies that the camera on/off hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open the terminal and run the command: watch -n1 lsusb . Press the camera on/off hotkey twice and note the effect after each keypress. Expected result Pressing the hotkey once should make the Chicony Electronics Co., Ltd Chicony USB2.0 Camera device disappear from the output of lsusb . Pressing the hotkey again should make the USB device reappear. ECR016.002 Keyboard (function key: camera on/off) in OS (Windows 11) Test description This test verifies that the camera on/off hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open the Camera app. Press the camera on/off hotkey twice and note the effect after a few seconds after the keypress. Expected result Pressing the hotkey once should make the camera image disappear. Pressing the hotkey again should make the camera image appear again after a few seconds. ECR017.001 Keyboard (function key: flight mode) in OS (Ubuntu 22.04) Test description This test verifies that the flight mode hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Locate and open the power menu in the upper right corner of the screen. Enter Settings and navigate to the Wi-Fi panel. Note the current state of the Airplane Mode switch. Press the flight mode hotkey twice and note the result of each keypress. Expected result Pressing the hotkey once should enable airplane mode. Pressing the hotkey again should disable airplane mode. ECR017.002 Keyboard (function key: flight mode) in OS (Windows 11) Test description This test verifies that the flight mode hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the camera on/off hotkey twice and note the effect after the key press. Expected result Pressing the hotkey once should enable airplane mode and cause airplane mode on notification to appear in the top right part of the screen. Pressing the hotkey again should disable airplane mode and cause airplane mode off notification to appear in the top right part of the screen. ECR018.001 Keyboard (function key: sleep) in OS (Ubuntu 22.04) Test description This test verifies that the sleep hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the sleep hotkey once and note the result. Expected result The laptop should go to sleep within seconds of the hotkey being pressed. The power LED should be blinking green, indicating the laptop is sleeping. ECR018.002 Keyboard (function key: sleep) in OS (Windows 11) Test description This test verifies that the sleep hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Proceed with the Installing updates and drivers section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Wait 30 seconds for the system to load fully. Press the sleep hotkey once and note the result. Expected result The laptop should go to sleep within seconds of the hotkey being pressed. The power LED should be blinking green, indicating the laptop is sleeping. ECR019.001 Buttons (button: power) in OS (Ubuntu 22.04) Test description This test verifies that the power button is detected correctly by the operating system. In Ubuntu 22.04 OS the default function assigned to this key is suspend mode. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open the terminal and run the following command to check the power button action: gsettings get org.gnome.settings-daemon.plugins.power power-button-action If the status is other than suspend run the following command to change the power button action: gsettings set org.gnome.settings-daemon.plugins.power power-button-action \"suspend\" Check the power button action again by running the following command: gsettings get org.gnome.settings-daemon.plugins.power power-button-action Press the power button once and note the result. Press Enter and note the result. Run the following command to check last finished operation: journalctl | grep systemd-logind | tail -1 Expected result Pressing the button once should make laptop enter sleep mode. The power LED should be blinking green, indicating the laptop is sleeping. After completing the 5th step device should wake up. The output of the last command should contain the line: Operation 'sleep' finished ECR019.002 Buttons (button: power) in OS (Windows 11) Test description This test verifies that the power button is detected correctly by the operating system. In Windows 11 OS the default function assigned to this key is sleep mode. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Proceed with the Installing updates and drivers section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Wait 30 seconds for the system to load fully. Press the power button once and note the result. Expected result Pressing the button once should make laptop enter sleep mode. The power LED should be blinking green, indicating the laptop is sleeping. ECR020.001 Buttons (button: lid switch) in OS (Ubuntu 22.04) Test description This test verifies that the lid switch is detected correctly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open one terminal window and run the following command: sudo systemd-inhibit --what handle-lid-switch --mode block watch echo \"Inhibiting lid switch\" Open another terminal and run the command sleep 5 && cat /proc/acpi/button/lid/LID0/state to read the state of the lid while it is closed. Close the lid and wait 5 seconds. Open the lid and note the output of the command. Run the command cat /proc/acpi/button/lid/LID0/state while the lid is open and note the output. Expected result The output of the second command should report that the lid is closed. The output of the third command should report that the lid is open. ECR020.002 Buttons (button: lid switch) in OS (Windows 11) Test description This test verifies that the lid switch is detected correctly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Proceed with the Installing updates and drivers section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Wait 30 seconds for the system to load fully. Close the lid and note the effect on the power LED. Expected result Pressing the button once should make laptop enter sleep mode. The power LED should be blinking green, indicating the laptop is sleeping. ECR021.001 Keyboard (function key: RGB keyboard toggle) in OS (Ubuntu 22.04) Test description This test verifies that the RGB keyboard toggle hotkey is handled properly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the RGB keyboard toggle hotkey twice and note the result each time. Expected result Pressing the button once should disable the keyboard backlight. Pressing the button again should re-enable the keyboard backlight. ECR021.002 Keyboard (function key: RGB keyboard toggle) in OS (Windows 11) Test description This test verifies that the RGB keyboard toggle hotkey is handled properly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the RGB keyboard toggle hotkey twice and note the result each time. Expected result Pressing the button once should disable the keyboard backlight. Pressing the button again should re-enable the keyboard backlight. ECR022.001 RGB keyboard next color FN key in OS (Ubuntu 22.04) Test description This test verifies that the RGB keyboard's next color hotkey is handled properly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the RGB keyboard color hotkey repeatedly until the keyboard cycles through all color modes. Expected result Pressing the button once should switch the keyboard color. All color modes according to product documentation should be accessible. ECR022.002 RGB keyboard next color FN key in OS (Windows 11) Test description This test verifies that the RGB keyboard's next color hotkey is handled properly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the RGB keyboard color hotkey repeatedly until the keyboard cycles through all color modes. Expected result Pressing the button once should switch the keyboard color. All color modes according to product documentation should be accessible. ECR023.001 RGB keyboard brightness down FN key in OS (Ubuntu 22.04) Test description This test verifies that the RGB keyboard brightness down hotkey is handled properly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the RGB keyboard brightness down hotkey and note the result. Expected result Pressing the button once should lower the keyboard backlight ECR023.002 RGB keyboard brightness down FN key in OS (Windows 11) Test description This test verifies that the RGB keyboard brightness down hotkey is handled properly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the RGB keyboard brightness down hotkey and note the result. Expected result Pressing the button once should lower the keyboard backlight. ECR024.001 RGB keyboard brightness up FN key in OS (Ubuntu 22.04) Test description This test verifies that the RGB keyboard brightness up hotkey is handled properly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the RGB keyboard brightness up hotkey and note the result. Expected result Pressing the button once should increase the keyboard backlight. ECR024.002 RGB keyboard brightness up FN key in OS (Windows 11) Test description This test verifies that the RGB keyboard brightness up hotkey is handled properly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the RGB keyboard brightness up hotkey and note the result. Expected result Pressing the button once should increase the keyboard backlight. ECR025.001 Permanent keyboard illumination after cold-boot (Firmware) Test description This test aims to verify that after performing cold-boot, keyboard still illuminates in firmware. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware Test steps Power on the DUT and press the BIOS_SETUP_KEY to enter the setup menu. Set keyboard brightness and color to arbitrary settings. Disconnect power source, and remove battery if present. Connect power and battery again. Power on the DUT again and press the BIOS_SETUP_KEY to enter the setup menu. Expected result After cold-boot keyboard brightness and colors settings remain the same. ECR025.002 Permanent keyboard illumination after cold-boot (Ubuntu 22.04) Test description This test aims to verify that after performing cold-boot, keyboard still illuminates in Ubuntu 22.04. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the OPERATING_SYSTEM . Log into the OPERATING_SYSTEM by using the proper login and password. Set keyboard brightness and color to arbitrary settings. Disconnect power source, and remove battery if present. Connect power and battery again. Power on the DUT. Boot into the OPERATING_SYSTEM . Log into the OPERATING_SYSTEM by using the proper login and password. Expected result After cold-boot keyboard brightness and colors settings remain the same. ECR025.003 Permanent keyboard illumination after cold-boot (Windows 11) Test description This test aims to verify that after performing cold-boot, keyboard still illuminates in Windows 11. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the OPERATING_SYSTEM . Log into the OPERATING_SYSTEM by using the proper login and password. Set keyboard brightness and color to arbitrary settings. Disconnect power source, and remove battery if present. Connect power and battery again. Power on the DUT. Boot into the OPERATING_SYSTEM . Log into the OPERATING_SYSTEM by using the proper login and password. Expected result After cold-boot keyboard brightness and colors settings remain the same. ECR026.001 Permanent keyboard illumination after warm-boot (Firmware) Test description This test aims to verify that after performing warm-boot, keyboard still illuminates in firmware. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware Test steps Power on the DUT and press the BIOS_SETUP_KEY to enter the setup menu. Set keyboard brightness and color to arbitrary settings. Power off the DUT using power button. Power on the DUT again and press the BIOS_SETUP_KEY to enter the setup menu. Expected result After warm-boot keyboard brightness and colors settings remain the same. ECR026.002 Permanent keyboard illumination after warm-boot (Ubuntu 22.04) Test description This test aims to verify that after performing warm-boot, keyboard still illuminates in Ubuntu 22.04. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the OPERATING_SYSTEM . Log into the OPERATING_SYSTEM by using the proper login and password. Set keyboard brightness and color to arbitrary settings. Power off the DUT using power button. Power on the DUT. Boot into the OPERATING_SYSTEM . Log into the OPERATING_SYSTEM by using the proper login and password. Expected result After warm-boot keyboard brightness and colors settings remain the same. ECR026.003 Permanent keyboard illumination after warm-boot (Windows 11) Test description This test aims to verify that after performing warm-boot, keyboard still illuminates in Windows 11. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the OPERATING_SYSTEM . Log into the OPERATING_SYSTEM by using the proper login and password. Set keyboard brightness and color to arbitrary settings. Power off the DUT using power button. Power on the DUT. Boot into the OPERATING_SYSTEM . Log into the OPERATING_SYSTEM by using the proper login and password. Expected result After warm-boot keyboard brightness and colors settings remain the same. ECR027.001 Permanent keyboard illumination after reboot (Firmware) Test description This test aims to verify that after performing reboot, keyboard still illuminates in firmware. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware Test steps Power on the DUT and press the BIOS_SETUP_KEY to enter the setup menu. Set keyboard brightness and color to arbitrary settings. Select Reset option from the bottom of the list. During boot press the BIOS_SETUP_KEY to enter the setup menu. Expected result After reboot keyboard brightness and colors settings remain the same. ECR027.002 Permanent keyboard illumination after reboot (Ubuntu 22.04) Test description This test aims to verify that after performing reboot, keyboard still illuminates in Ubuntu 22.04 Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Set keyboard brightness and color to arbitrary settings. Reboot the device using: sudo reboot now Expected result After reboot keyboard brightness and colors settings remain the same. ECR027.003 Permanent keyboard illumination after reboot (Windows 11) Test description This test aims to verify that after performing reboot, keyboard still illuminates in Windows 11. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Set keyboard brightness and color to arbitrary settings. Reboot the device executing in PowerShell: Restart-Computer Expected result After reboot keyboard brightness and colors settings remain the same. ECR028.001 Permanent keyboard illumination after suspension (Firmware) Test description This test aims to verify that after performing suspension, keyboard still illuminates in firmware. Test configuration data FIRMWARE = Dasharo SUSPEND_KEY = Fn + F12 Test setup Proceed with the Generic test setup: firmware Test steps Power on the DUT and press the BIOS_SETUP_KEY to enter the setup menu. Set keyboard brightness and color to arbitrary settings. Suspend the DUT using SUSPEND_KEY . Wake the device from suspend pressing any key on keyboard. Expected result After suspend keyboard brightness and colors settings remain the same. ECR028.002 Permanent keyboard illumination after suspension (Ubuntu 22.04) Test description This test aims to verify that after performing suspension, keyboard still illuminates in Ubuntu 22.04 Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 SUSPEND_KEY = Fn + F12 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Set keyboard brightness and color to arbitrary settings. Suspend the DUT using SUSPEND_KEY . Wake the device from suspend pressing any key on keyboard. Expected result After suspend keyboard brightness and colors settings remain the same. ECR028.003 Permanent keyboard illumination after suspension (Windows 11) Test description This test aims to verify that after performing suspension, keyboard still illuminates in Windows 11. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 SUSPEND_KEY = Fn + F12 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Set keyboard brightness and color to arbitrary settings. Suspend the DUT using SUSPEND_KEY . Wake the device from suspend pressing any key on keyboard. Expected result After suspend keyboard brightness and colors settings remain the same. ECR029.001 FnLock Hotkey (Ubuntu 22.04) Test description This test aims to verify that FnLock hotkey functionality works properly on Ubuntu 22.04. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 FN_LOCK_KEY = Fn + CapsLock Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Use FN_LOCK_KEY to activate Fn lock functionality. Test function keys F1 - F12 and note the results. Expected result The function keys F1 - F12 behave as if Fn key is pressed. ECR029.002 FnLock Hotkey (Windows 11) Test description This test aims to verify that FnLock hotkey functionality works properly on Windows 11. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 FN_LOCK_KEY = Fn + CapsLock Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Use FN_LOCK_KEY to activate Fn lock functionality. Test function keys F1 - F12 and note the results. Expected result The function keys F1 - F12 behave as if Fn key is pressed. ECR030.001 Charging until 98% battery level (Ubuntu 22.04) Test description This test aims to verify if charging the battery stops when the battery level reaches 98% mark. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute following command to check current battery charge level percentage: cat /sys/class/power_supply/BAT0/capacity Note the results. If the battery level sits below 95% mark, plug the charger into the DUT. If the battery level sits above 95% mark, wait until the DUT's battery discharges to below 95% level and then plug the charger into the DUT. Wait until the DUT's battery charge level reaches 98%. Open a terminal window and execute following command to confirm that the battery charging stops at 98% mark: cat /sys/class/power_supply/BAT0/status Note the results. Expected result The output of the cat /sys/class/power_supply/BAT0/capacity command should contain information about the current battery charge level. The output of the cat /sys/class/power_supply/BAT0/status command should contain information about the current battery charging status. Example output: not charging ECR030.001 Not charging between 95% and 98% levels (Ubuntu 22.04) Test description This test aims to verify if charging the battery does not start after plugging in the charger into the DUT when the battery level sits between 95% and 98%. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute following command to check current battery charge level percentage: cat /sys/class/power_supply/BAT0/capacity Note the results. If the battery level sits between 95% and 98%, plug the charger into the DUT. If the battery level sits below 95%, plug the charger into the DUT, wait until the battery reaches the level between 95% and 98% and then unplug the charger and plug it back in into the DUT. Open a terminal window and execute following command to confirm that the battery does not start charging: cat /sys/class/power_supply/BAT0/status The output of the cat /sys/class/power_supply/BAT0/capacity command should contain information about the current battery charge level. The output of the cat /sys/class/power_supply/BAT0/status command should contain information about the current battery charging status. Example output: not charging SIO001.001 PS/2 mouse in OS - (Ubuntu 22.04) Test description This test verifies that the touchpad is initialized correctly and is detected by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect PS/2 mouse to the green PS/2 port on the board or the PS/2 splitter (if the board has a unified, black PS/2 connector) Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Verify that the cursor can be moved with the PS/2 mouse and that clicking works. Expected result Moving the cursor and clicking working correctly in the operating system. SIO001.002 PS/2 mouse in OS - (Windows 11) Test description This test verifies that the touchpad is initialized correctly and is detected by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Connect PS/2 mouse to the green PS/2 port on the board or the PS/2 splitter (if the board has a unified, black PS/2 connector) Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Verify that the cursor can be moved with the PS/2 mouse and that clicking works. Expected result Moving the cursor and clicking working correctly in the operating system. SIO002.001 PS/2 keyboard in firmware Test description This test verifies that the keyboard is detected correctly by the firmware and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo BIOS_SETUP_KEY = Esc Test setup Proceed with the Generic test setup: firmware Connect PS/2 keyboard to the violet PS/2 port on the board or the PS/2 splitter (if the board has a unified, black PS/2 connector) Test steps Power on the DUT and press the BIOS_SETUP_KEY to enter the setup menu. Use the arrow keys and the Enter key to navigate the menus. Expected result All menus can be entered using the PS/2 keyboard. SIO002.002 PS/2 keyboard in OS (Ubuntu 22.04) Test description This test verifies that the keyboard is detected correctly by the operating system and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo BIOS_SETUP_KEY = Esc OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect PS/2 keyboard to the violet PS/2 port on the board or the PS/2 splitter (if the board has a unified, black PS/2 connector) Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Run sudo libinput debug-events --show-keycodes in the terminal. Press keyboard keys and check the generated keycode. Expected result All standard keyboard keys generate the correct keycodes and events as per their labels. Key combinations are detected correctly. SIO002.003 PS/2 keyboard in OS (Windows 11) Test description This test verifies that the keyboard is detected correctly by the operating system and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Connect PS/2 keyboard to the violet PS/2 port on the board or the PS/2 splitter (if the board has a unified, black PS/2 connector) Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open notepad Test the alphanumeric keys and note the generated characters Test non-alphanumeric keys and verify that they generate the signs Test key combinations with the Shift , and Alt modifier keys Open On-Screen Keyboard and press Ctrl key on the hardware keyboard. Check if On-Screen Keyboard correctly highlights it. Open Start menu and press Esc . Check if Start menu is properly closed. Expected result All standard keyboard keys generate correct characters or actions when pressed. Key combinations are detected correctly. SIO003.001 PS/2 keyboard wake in OS (Ubuntu 22.04) Test description This test verifies that the keyboard is detected correctly by the operating system and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo BIOS_SETUP_KEY = Esc OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect PS/2 keyboard to the violet PS/2 port on the board or the PS/2 splitter (if the board has a unified, black PS/2 connector) Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Suspend the system to RAM. Press a keyboard key to wake the platform. Expected result Platform is resuming to the OS from sleep after pressing the key. SIO003.002 PS/2 keyboard wake in OS (Windows 11) Test description This test verifies that the keyboard is detected correctly by the operating system and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Connect PS/2 keyboard to the violet PS/2 port on the board or the PS/2 splitter (if the board has a unified, black PS/2 connector) Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Suspend the system to RAM. Press a keyboard key to wake the platform. Expected result Platform is resuming to the OS from sleep after pressing the key. SIO004.001 Serial port in firmware Test description This test verifies that the serial port is detected correctly by the firmware and the menu can be traversed with serial console. Test configuration data FIRMWARE = Dasharo BIOS_SETUP_KEY = Esc Test setup Proceed with the Generic test setup: firmware Connect DB9 null modem cable to RS232/USB adapter and the onboard serial port connector. Test steps Open the terminal emulator, e.g. minicom, on the RS232/USB adapter. Power on the DUT and press the BIOS_SETUP_KEY to enter the setup menu. Use the arrow keys and the Enter key to navigate the menus. Expected result All menus can be entered using the serial console. SIO004.002 Serial port in OS (Ubuntu 22.04) Test description This test verifies that the serial port is detected correctly by the operating system and can be utilized as serial console. Test configuration data FIRMWARE = Dasharo BIOS_SETUP_KEY = Esc OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect DB9 null modem cable to RS232/USB adapter and the onboard serial port connector. Configure Linux kernel parameters to use serial console, e.g. console=ttyS0,115200 Test steps Open the terminal emulator, e.g. minicom, on the RS232/USB adapter. Power on the DUT. Boot into the system. Log into the system by using the proper login and password through serial console. Expected result Serial port can be used as Linux console to log in. Serial port can be used to execute commands in bash/shell.","title":"Embedded Controller and Super I/O initialization "},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#dasharo-compatibility-embedded-controller-and-super-io-initialization","text":"","title":"Dasharo Compatibility: Embedded Controller and Super I/O initialization"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr001001-battery-monitoring-charge-level-in-os-ubuntu-2204","text":"Test description This test verifies whether the battery charge level is reported in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Locate the power menu in the upper right corner of the screen. Open the power menu and locate the battery status indicator. Expected result The battery status indicator should show the current charge level (percentage left).","title":"ECR001.001 Battery monitoring - charge level in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr001002-battery-monitoring-charge-level-in-os-windows-11","text":"Test description This test verifies whether the battery charge level is reported in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Locate the power menu in the lower right corner of the screen. Expected result The battery status indicator should show the current charge level (percentage left).","title":"ECR001.002 Battery monitoring - charge level in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr002001-battery-monitoring-charging-state-in-os-ubuntu-2204","text":"Test description This test verifies that the power supply state is detected correctly in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Locate the power menu in the upper right corner of the screen. Open the power menu and locate the battery status indicator. Note the current state. Unplug the power supply and wait for the battery charge state to change to Discharging . Plug in the power supply and wait for the battery charge state to change to Charging . Expected result The battery charge indicator should correctly show whether the power supply is plugged in or not. The battery charge indicator should detect the AC adapter state change within seconds of the adapter being plugged in/out.","title":"ECR002.001 Battery monitoring - charging state in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr002002-battery-monitoring-charging-state-in-os-windows-11","text":"Test description This test verifies that the power supply state is detected correctly in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Locate the power menu in the lower right corner of the screen. Open the power menu and locate the battery status indicator. Note the current state. Unplug the power supply and wait for the battery charge state to change to on battery . Plug in the power supply and wait for the battery charge state to change to plugged in . Expected result The battery charge indicator should correctly show whether the power supply is plugged in or not. The battery charge indicator should detect the AC adapter state change within seconds of the adapter being plugged in / out.","title":"ECR002.002 Battery monitoring - charging state in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr003001-touchpad-in-os-ubuntu-2204","text":"Test description This test verifies that the touchpad is initialized correctly and is detected by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install libinput-tools on the DUT. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Verify that the cursor can be moved with the touchpad and that clicking works (test both clicking and tapping). Run sudo libinput debug-events in the terminal: Verify that scrolling with 2 fingers generates a POINTER_AXIS event, Verify that pinching with 2 fingers generates a GESTURE_PINCH_UPDATE event. Press Ctrl + C to terminate the libinput program. Expected result Moving the cursor, clicking, zooming and scrolling are detected correctly by the operating system.","title":"ECR003.001 Touchpad in OS - (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr003002-touchpad-in-os-windows-11","text":"Test description This test verifies that the touchpad is initialized correctly and is detected by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Verify that the cursor can be moved with the touchpad and that clicking works (test both clicking and tapping). Open C:\\Windows in Windows Explorer Verify that scrolling with 2 fingers moves the content of the window, Verify that pinching with 2 fingers zooms in and zooms out the content. Expected result Moving the cursor, clicking, zooming and scrolling are detected correctly by the operating system.","title":"ECR003.002 Touchpad in OS - (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr004001-keyboard-standard-keypad-in-firmware","text":"Test description This test verifies that the keyboard is detected correctly by the firmware and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware Test steps Power on the DUT and press the BIOS_SETUP_KEY to enter the setup menu. Use the arrow keys and the Enter key to navigate the menus. Expected result All menus can be entered using the internal keyboard.","title":"ECR004.001 Keyboard (standard keypad) in firmware"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr004002-keyboard-standard-keypad-in-os-ubuntu-2204","text":"Test description This test verifies that the keyboard is detected correctly by the operating system and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install libinput-tools on the DUT. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Run sudo libinput debug-events --show-keycodes in the terminal. Press each keyboard key and check the generated keycode. Expected result All standard keyboard keys generate the correct keycodes and events as per their labels. Key combinations are detected correctly.","title":"ECR004.002 Keyboard (standard keypad) in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr004003-keyboard-standard-keypad-in-os-windows-11","text":"Test description This test verifies that the keyboard is detected correctly by the operating system and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open notepad Test the alphanumeric keys and note the generated characters Test non-alphanumeric keys and verify that they generate the signs Test key combinations with the Shift , and Alt modifier keys Open On-Screen Keyboard and press Ctrl key on the hardware keyboard. Check if On-Screen Keyboard correctly highlights it. Open Start menu and press Esc . Check if Start menu is properly closed. Expected result All standard keyboard keys generate correct characters or actions when pressed. Key combinations are detected correctly.","title":"ECR004.003 Keyboard (standard keypad) in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr005001-keyboard-function-key-playpause-in-os-ubuntu-2204","text":"Test description This test verifies that the play/pause hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Install libinput-tools on the DUT. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Run sudo libinput debug-events --show-keycodes in the terminal. Verify that pressing the play/pause key generates a KEY_PLAYPAUSE event. Expected result Pressing the play/pause hotkey generates a KEY_PLAYPAUSE event.","title":"ECR005.001 Keyboard (function key: play/pause) in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr005002-keyboard-function-key-playpause-in-os-windows-11","text":"Test description This test verifies that the play/pause hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Start Groove Music Verify that when pressing the play/pause button, player menu appears in the upper left part of the screen for a few seconds. Expected result Pressing the play/pause hotkey is properly detected by the OS","title":"ECR005.002 Keyboard (function key: play/pause) in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr006001-keyboard-function-key-cooling-mode-in-os-ubuntu-2204","text":"Test description This test verifies that the cooling mode hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the cooling mode hotkey (Fn + 1) once and note the effect. Press the cooling mode hotkey once again and note the effect. Expected result Pressing the hotkey once should activate the cooling mode (fans should spin up to their maximum speed). Pressing the hotkey again should deactivate the cooling mode (fans should return to normal).","title":"ECR006.001 Keyboard (function key: cooling mode) in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr006002-keyboard-function-key-cooling-mode-in-os-windows-11","text":"Test description This test verifies that the cooling mode hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the cooling mode hotkey (Fn + 1) once and note the effect. Press the cooling mode hotkey once again and note the effect. Expected result Pressing the hotkey once should activate the cooling mode (fans should spin up to their maximum speed). Pressing the hotkey again should deactivate the cooling mode (fans should return to normal).","title":"ECR006.002 Keyboard (function key: cooling mode) in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr007001-keyboard-function-key-touchpad-onoff-in-os-ubuntu-2204","text":"Test description This test verifies that the touchpad on/off hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Proceed with the Test cases common documentation section. Create a file /etc/udev/hwdb.d/60-keyboard.hwdb with the following contents: evdev:atkbd:dmi:bvn*:bvr*:svnNotebook:pnNV4XMB,ME,MZ:* KEYBOARD_KEY_f7 = 191 KEYBOARD_KEY_f8 = 191 Execute the following commands: sudo systemd-hwdb update sudo udevadm trigger Test steps Press the touchpad on/off key and try to use the touchpad. Press the touchpad on/off key once again and try to use the touchpad again. Expected result Pressing the hotkey once should deactivate the touchpad (touchpad should be completely inoperable). Pressing the hotkey again should reactivate the touchpad.","title":"ECR007.001 Keyboard (function key: touchpad on/off) in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr007002-keyboard-function-key-touchpad-onoff-in-os-windows-11","text":"Test description This test verifies that the touchpad on/off hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the touchpad on/off key and try to use the touchpad. Press the touchpad on/off key once again and try to use the touchpad again. Expected result Pressing the hotkey once should deactivate the touchpad (touchpad should be completely inoperable). Pressing the hotkey again should reactivate the touchpad.","title":"ECR007.002 Keyboard (function key: touchpad on/off) in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr008001-keyboard-function-key-display-onoff-in-os-ubuntu-2204","text":"Test description This test verifies that the display on/off hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the display on/off hotkey once and note the effect. Press any key on the keyboard and note the effect. Expected result Pressing the hotkey once should turn the internal LCD panel off. Pressing any key on the keyboard should power the internal LCD panel back on.","title":"ECR008.001 Keyboard (function key: display on/off) in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr008002-keyboard-function-key-display-onoff-in-os-windows-11","text":"Test description This test verifies that the display on/off hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the display on/off hotkey once and note the effect. Press any key on the keyboard and note the effect. Expected result Pressing the hotkey once should turn the internal LCD panel off. Pressing any key on the keyboard should power the internal LCD panel back on.","title":"ECR008.002 Keyboard (function key: display on/off) in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr009001-keyboard-function-key-mute-in-os-ubuntu-2204","text":"Test description This test verifies that the volume mute hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the volume mute hotkey twice and note the effect each keypress has. Expected result Pressing the hotkey should mute or unmute the currently enabled audio output. Each keypress should cause a mute/unmute notification to appear in the middle of the screen.","title":"ECR009.001 Keyboard (function key: mute) in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr009002-keyboard-function-key-mute-in-os-windows-11","text":"Test description This test verifies that the mute hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the mute hotkey once and check the volume indicator in the bottom right part of the screen. Press the mute hotkey once and check the volume indicator again. Expected result Pressing the hotkey once should mute the device Pressing the hotkey again should re-enable the sound","title":"ECR009.002 Keyboard (function key: mute) in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr010001-keyboard-function-key-keyboard-backlight-in-os-ubuntu-2204","text":"Test description This test verifies that the keyboard backlight hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the keyboard backlight hotkey 6 times and note the effect on the keyboard backlight after each keypress. Expected result The keyboard has 6 backlight settings from 0% to 100% Each keypress should set the keyboard to the next mode, with the last mode wrapping back around to the first.","title":"ECR010.001 Keyboard (function key: keyboard backlight) in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr010002-keyboard-function-key-keyboard-backlight-in-os-windows-11","text":"Test description This test verifies that the keyboard backlight hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the keyboard backlight hotkey 6 times and note the effect on the keyboard backlight after each keypress. Expected result The keyboard has 6 backlight settings from 0% to 100% Each keypress should set the keyboard to the next mode, with the last mode wrapping back around to the first.","title":"ECR010.002 Keyboard (function key: keyboard backlight) in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr011001-keyboard-function-key-volume-down-in-os-ubuntu-2204","text":"Test description This test verifies that the volume down hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the volume down hotkey once and note the effects. Expected result Pressing the hotkey should decrease the volume of the currently enabled audio output. Each key press should cause a volume down notification to appear in the middle of the screen.","title":"ECR011.001 Keyboard (function key: volume down) in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr011002-keyboard-function-key-volume-down-in-os-windows-11","text":"Test description This test verifies that the volume down hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the volume down hotkey once and note the effects. Expected result Pressing the hotkey should decrease the volume of the currently enabled audio output. Each key press should cause a volume down notification to appear in the upper left part of the screen.","title":"ECR011.002 Keyboard (function key: volume down) in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr012001-keyboard-function-key-volume-up-in-os-ubuntu-2204","text":"Test description This test verifies that the volume up hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the volume up hotkey once and note the effects. Expected result Pressing the hotkey should increase the volume of the currently enabled audio output. Each key press should cause a volume up notification to appear in the middle of the screen.","title":"ECR012.001 Keyboard (function key: volume up) in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr012002-keyboard-function-key-volume-up-in-os-windows-11","text":"Test description This test verifies that the volume up hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the volume down hotkey once and note the effects. Expected result Pressing the hotkey should increase the volume of the currently enabled audio output. Each key press should cause a volume up notification to appear in the upper left part of the screen.","title":"ECR012.002 Keyboard (function key: volume up) in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr013001-keyboard-function-key-display-switch-in-os-ubuntu-2204","text":"Test description This test verifies that the display switch hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install libinput-tools on the DUT. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Run sudo libinput debug-events --show-keycodes in the terminal. Press the display switch hotkey once and note the effect. Expected result Pressing the hotkey should yield the following output in the terminal: -event3 KEYBOARD_KEY +0.000s KEY_LEFTMETA ( 125 ) pressed event3 KEYBOARD_KEY +0.004s KEY_P ( 25 ) pressed event3 KEYBOARD_KEY +0.010s KEY_P ( 25 ) released event3 KEYBOARD_KEY +0.015s KEY_LEFTMETA ( 125 ) released","title":"ECR013.001 Keyboard (function key: display switch) in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr013002-keyboard-function-key-display-switch-in-os-windows-11","text":"Test description This test verifies that the display switch hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the display switch hotkey once and note the effect. Expected result Pressing the hotkey should cause the display settings bar to appear on the right part of the screen.","title":"ECR013.002 Keyboard (function key: display switch) in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr014001-keyboard-function-key-brightness-down-in-os-ubuntu-2204","text":"Test description This test verifies that the brightness down hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test steps Press the brightness down hotkey once and note the effects. Expected result Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Pressing the hotkey should decrease the brightness of the internal LCD display. Each key press should cause a brightness down notification to appear in the middle of the screen.","title":"ECR014.001 Keyboard (function key: brightness down) in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr014002-keyboard-function-key-brightness-down-in-os-windows-11","text":"Test description This test verifies that the brightness down hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the brightness down hotkey once and note the effects. Expected result Pressing the hotkey should decrease the brightness of the internal LCD display. Each key press should cause a brightness down notification to appear in the top left of the screen.","title":"ECR014.002 Keyboard (function key: brightness down) in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr015001-keyboard-function-key-brightness-up-in-os-ubuntu-2204","text":"Test description This test verifies that the brightness up hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the brightness up hotkey once and note the effects. Expected result Pressing the hotkey should increase the brightness of the internal LCD display. Each key press should cause a brightness up notification to appear in the middle of the screen.","title":"ECR015.001 Keyboard (function key: brightness up) in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr015002-keyboard-function-key-brightness-up-in-os-windows-11","text":"Test description This test verifies that the brightness down hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the brightness up hotkey once and note the effects. Expected result Pressing the hotkey should increase the brightness of the internal LCD display. Each key press should cause a brightness up notification to appear in the top left of the screen.","title":"ECR015.002 Keyboard (function key: brightness up) in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr016001-keyboard-function-key-camera-onoff-in-os-ubuntu-2204","text":"Test description This test verifies that the camera on/off hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open the terminal and run the command: watch -n1 lsusb . Press the camera on/off hotkey twice and note the effect after each keypress. Expected result Pressing the hotkey once should make the Chicony Electronics Co., Ltd Chicony USB2.0 Camera device disappear from the output of lsusb . Pressing the hotkey again should make the USB device reappear.","title":"ECR016.001 Keyboard (function key: camera on/off) in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr016002-keyboard-function-key-camera-onoff-in-os-windows-11","text":"Test description This test verifies that the camera on/off hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open the Camera app. Press the camera on/off hotkey twice and note the effect after a few seconds after the keypress. Expected result Pressing the hotkey once should make the camera image disappear. Pressing the hotkey again should make the camera image appear again after a few seconds.","title":"ECR016.002 Keyboard (function key: camera on/off) in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr017001-keyboard-function-key-flight-mode-in-os-ubuntu-2204","text":"Test description This test verifies that the flight mode hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Locate and open the power menu in the upper right corner of the screen. Enter Settings and navigate to the Wi-Fi panel. Note the current state of the Airplane Mode switch. Press the flight mode hotkey twice and note the result of each keypress. Expected result Pressing the hotkey once should enable airplane mode. Pressing the hotkey again should disable airplane mode.","title":"ECR017.001 Keyboard (function key: flight mode) in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr017002-keyboard-function-key-flight-mode-in-os-windows-11","text":"Test description This test verifies that the flight mode hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the camera on/off hotkey twice and note the effect after the key press. Expected result Pressing the hotkey once should enable airplane mode and cause airplane mode on notification to appear in the top right part of the screen. Pressing the hotkey again should disable airplane mode and cause airplane mode off notification to appear in the top right part of the screen.","title":"ECR017.002 Keyboard (function key: flight mode) in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr018001-keyboard-function-key-sleep-in-os-ubuntu-2204","text":"Test description This test verifies that the sleep hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the sleep hotkey once and note the result. Expected result The laptop should go to sleep within seconds of the hotkey being pressed. The power LED should be blinking green, indicating the laptop is sleeping.","title":"ECR018.001 Keyboard (function key: sleep) in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr018002-keyboard-function-key-sleep-in-os-windows-11","text":"Test description This test verifies that the sleep hotkey works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Proceed with the Installing updates and drivers section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Wait 30 seconds for the system to load fully. Press the sleep hotkey once and note the result. Expected result The laptop should go to sleep within seconds of the hotkey being pressed. The power LED should be blinking green, indicating the laptop is sleeping.","title":"ECR018.002 Keyboard (function key: sleep) in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr019001-buttons-button-power-in-os-ubuntu-2204","text":"Test description This test verifies that the power button is detected correctly by the operating system. In Ubuntu 22.04 OS the default function assigned to this key is suspend mode. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open the terminal and run the following command to check the power button action: gsettings get org.gnome.settings-daemon.plugins.power power-button-action If the status is other than suspend run the following command to change the power button action: gsettings set org.gnome.settings-daemon.plugins.power power-button-action \"suspend\" Check the power button action again by running the following command: gsettings get org.gnome.settings-daemon.plugins.power power-button-action Press the power button once and note the result. Press Enter and note the result. Run the following command to check last finished operation: journalctl | grep systemd-logind | tail -1 Expected result Pressing the button once should make laptop enter sleep mode. The power LED should be blinking green, indicating the laptop is sleeping. After completing the 5th step device should wake up. The output of the last command should contain the line: Operation 'sleep' finished","title":"ECR019.001 Buttons (button: power) in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr019002-buttons-button-power-in-os-windows-11","text":"Test description This test verifies that the power button is detected correctly by the operating system. In Windows 11 OS the default function assigned to this key is sleep mode. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Proceed with the Installing updates and drivers section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Wait 30 seconds for the system to load fully. Press the power button once and note the result. Expected result Pressing the button once should make laptop enter sleep mode. The power LED should be blinking green, indicating the laptop is sleeping.","title":"ECR019.002 Buttons (button: power) in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr020001-buttons-button-lid-switch-in-os-ubuntu-2204","text":"Test description This test verifies that the lid switch is detected correctly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open one terminal window and run the following command: sudo systemd-inhibit --what handle-lid-switch --mode block watch echo \"Inhibiting lid switch\" Open another terminal and run the command sleep 5 && cat /proc/acpi/button/lid/LID0/state to read the state of the lid while it is closed. Close the lid and wait 5 seconds. Open the lid and note the output of the command. Run the command cat /proc/acpi/button/lid/LID0/state while the lid is open and note the output. Expected result The output of the second command should report that the lid is closed. The output of the third command should report that the lid is open.","title":"ECR020.001 Buttons (button: lid switch) in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr020002-buttons-button-lid-switch-in-os-windows-11","text":"Test description This test verifies that the lid switch is detected correctly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Proceed with the Installing updates and drivers section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Wait 30 seconds for the system to load fully. Close the lid and note the effect on the power LED. Expected result Pressing the button once should make laptop enter sleep mode. The power LED should be blinking green, indicating the laptop is sleeping.","title":"ECR020.002 Buttons (button: lid switch) in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr021001-keyboard-function-key-rgb-keyboard-toggle-in-os-ubuntu-2204","text":"Test description This test verifies that the RGB keyboard toggle hotkey is handled properly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the RGB keyboard toggle hotkey twice and note the result each time. Expected result Pressing the button once should disable the keyboard backlight. Pressing the button again should re-enable the keyboard backlight.","title":"ECR021.001 Keyboard (function key: RGB keyboard toggle) in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr021002-keyboard-function-key-rgb-keyboard-toggle-in-os-windows-11","text":"Test description This test verifies that the RGB keyboard toggle hotkey is handled properly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the RGB keyboard toggle hotkey twice and note the result each time. Expected result Pressing the button once should disable the keyboard backlight. Pressing the button again should re-enable the keyboard backlight.","title":"ECR021.002 Keyboard (function key: RGB keyboard toggle) in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr022001-rgb-keyboard-next-color-fn-key-in-os-ubuntu-2204","text":"Test description This test verifies that the RGB keyboard's next color hotkey is handled properly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the RGB keyboard color hotkey repeatedly until the keyboard cycles through all color modes. Expected result Pressing the button once should switch the keyboard color. All color modes according to product documentation should be accessible.","title":"ECR022.001 RGB keyboard next color FN key in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr022002-rgb-keyboard-next-color-fn-key-in-os-windows-11","text":"Test description This test verifies that the RGB keyboard's next color hotkey is handled properly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the RGB keyboard color hotkey repeatedly until the keyboard cycles through all color modes. Expected result Pressing the button once should switch the keyboard color. All color modes according to product documentation should be accessible.","title":"ECR022.002 RGB keyboard next color FN key in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr023001-rgb-keyboard-brightness-down-fn-key-in-os-ubuntu-2204","text":"Test description This test verifies that the RGB keyboard brightness down hotkey is handled properly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the RGB keyboard brightness down hotkey and note the result. Expected result Pressing the button once should lower the keyboard backlight","title":"ECR023.001 RGB keyboard brightness down FN key in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr023002-rgb-keyboard-brightness-down-fn-key-in-os-windows-11","text":"Test description This test verifies that the RGB keyboard brightness down hotkey is handled properly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the RGB keyboard brightness down hotkey and note the result. Expected result Pressing the button once should lower the keyboard backlight.","title":"ECR023.002 RGB keyboard brightness down FN key in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr024001-rgb-keyboard-brightness-up-fn-key-in-os-ubuntu-2204","text":"Test description This test verifies that the RGB keyboard brightness up hotkey is handled properly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the RGB keyboard brightness up hotkey and note the result. Expected result Pressing the button once should increase the keyboard backlight.","title":"ECR024.001 RGB keyboard brightness up FN key in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr024002-rgb-keyboard-brightness-up-fn-key-in-os-windows-11","text":"Test description This test verifies that the RGB keyboard brightness up hotkey is handled properly by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Press the RGB keyboard brightness up hotkey and note the result. Expected result Pressing the button once should increase the keyboard backlight.","title":"ECR024.002 RGB keyboard brightness up FN key in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr025001-permanent-keyboard-illumination-after-cold-boot-firmware","text":"Test description This test aims to verify that after performing cold-boot, keyboard still illuminates in firmware. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware Test steps Power on the DUT and press the BIOS_SETUP_KEY to enter the setup menu. Set keyboard brightness and color to arbitrary settings. Disconnect power source, and remove battery if present. Connect power and battery again. Power on the DUT again and press the BIOS_SETUP_KEY to enter the setup menu. Expected result After cold-boot keyboard brightness and colors settings remain the same.","title":"ECR025.001 Permanent keyboard illumination after cold-boot (Firmware)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr025002-permanent-keyboard-illumination-after-cold-boot-ubuntu-2204","text":"Test description This test aims to verify that after performing cold-boot, keyboard still illuminates in Ubuntu 22.04. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the OPERATING_SYSTEM . Log into the OPERATING_SYSTEM by using the proper login and password. Set keyboard brightness and color to arbitrary settings. Disconnect power source, and remove battery if present. Connect power and battery again. Power on the DUT. Boot into the OPERATING_SYSTEM . Log into the OPERATING_SYSTEM by using the proper login and password. Expected result After cold-boot keyboard brightness and colors settings remain the same.","title":"ECR025.002 Permanent keyboard illumination after cold-boot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr025003-permanent-keyboard-illumination-after-cold-boot-windows-11","text":"Test description This test aims to verify that after performing cold-boot, keyboard still illuminates in Windows 11. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the OPERATING_SYSTEM . Log into the OPERATING_SYSTEM by using the proper login and password. Set keyboard brightness and color to arbitrary settings. Disconnect power source, and remove battery if present. Connect power and battery again. Power on the DUT. Boot into the OPERATING_SYSTEM . Log into the OPERATING_SYSTEM by using the proper login and password. Expected result After cold-boot keyboard brightness and colors settings remain the same.","title":"ECR025.003 Permanent keyboard illumination after cold-boot (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr026001-permanent-keyboard-illumination-after-warm-boot-firmware","text":"Test description This test aims to verify that after performing warm-boot, keyboard still illuminates in firmware. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware Test steps Power on the DUT and press the BIOS_SETUP_KEY to enter the setup menu. Set keyboard brightness and color to arbitrary settings. Power off the DUT using power button. Power on the DUT again and press the BIOS_SETUP_KEY to enter the setup menu. Expected result After warm-boot keyboard brightness and colors settings remain the same.","title":"ECR026.001 Permanent keyboard illumination after warm-boot (Firmware)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr026002-permanent-keyboard-illumination-after-warm-boot-ubuntu-2204","text":"Test description This test aims to verify that after performing warm-boot, keyboard still illuminates in Ubuntu 22.04. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the OPERATING_SYSTEM . Log into the OPERATING_SYSTEM by using the proper login and password. Set keyboard brightness and color to arbitrary settings. Power off the DUT using power button. Power on the DUT. Boot into the OPERATING_SYSTEM . Log into the OPERATING_SYSTEM by using the proper login and password. Expected result After warm-boot keyboard brightness and colors settings remain the same.","title":"ECR026.002 Permanent keyboard illumination after warm-boot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr026003-permanent-keyboard-illumination-after-warm-boot-windows-11","text":"Test description This test aims to verify that after performing warm-boot, keyboard still illuminates in Windows 11. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the OPERATING_SYSTEM . Log into the OPERATING_SYSTEM by using the proper login and password. Set keyboard brightness and color to arbitrary settings. Power off the DUT using power button. Power on the DUT. Boot into the OPERATING_SYSTEM . Log into the OPERATING_SYSTEM by using the proper login and password. Expected result After warm-boot keyboard brightness and colors settings remain the same.","title":"ECR026.003 Permanent keyboard illumination after warm-boot (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr027001-permanent-keyboard-illumination-after-reboot-firmware","text":"Test description This test aims to verify that after performing reboot, keyboard still illuminates in firmware. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware Test steps Power on the DUT and press the BIOS_SETUP_KEY to enter the setup menu. Set keyboard brightness and color to arbitrary settings. Select Reset option from the bottom of the list. During boot press the BIOS_SETUP_KEY to enter the setup menu. Expected result After reboot keyboard brightness and colors settings remain the same.","title":"ECR027.001 Permanent keyboard illumination after reboot (Firmware)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr027002-permanent-keyboard-illumination-after-reboot-ubuntu-2204","text":"Test description This test aims to verify that after performing reboot, keyboard still illuminates in Ubuntu 22.04 Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Set keyboard brightness and color to arbitrary settings. Reboot the device using: sudo reboot now Expected result After reboot keyboard brightness and colors settings remain the same.","title":"ECR027.002 Permanent keyboard illumination after reboot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr027003-permanent-keyboard-illumination-after-reboot-windows-11","text":"Test description This test aims to verify that after performing reboot, keyboard still illuminates in Windows 11. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Set keyboard brightness and color to arbitrary settings. Reboot the device executing in PowerShell: Restart-Computer Expected result After reboot keyboard brightness and colors settings remain the same.","title":"ECR027.003 Permanent keyboard illumination after reboot (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr028001-permanent-keyboard-illumination-after-suspension-firmware","text":"Test description This test aims to verify that after performing suspension, keyboard still illuminates in firmware. Test configuration data FIRMWARE = Dasharo SUSPEND_KEY = Fn + F12 Test setup Proceed with the Generic test setup: firmware Test steps Power on the DUT and press the BIOS_SETUP_KEY to enter the setup menu. Set keyboard brightness and color to arbitrary settings. Suspend the DUT using SUSPEND_KEY . Wake the device from suspend pressing any key on keyboard. Expected result After suspend keyboard brightness and colors settings remain the same.","title":"ECR028.001 Permanent keyboard illumination after suspension (Firmware)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr028002-permanent-keyboard-illumination-after-suspension-ubuntu-2204","text":"Test description This test aims to verify that after performing suspension, keyboard still illuminates in Ubuntu 22.04 Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 SUSPEND_KEY = Fn + F12 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Set keyboard brightness and color to arbitrary settings. Suspend the DUT using SUSPEND_KEY . Wake the device from suspend pressing any key on keyboard. Expected result After suspend keyboard brightness and colors settings remain the same.","title":"ECR028.002 Permanent keyboard illumination after suspension (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr028003-permanent-keyboard-illumination-after-suspension-windows-11","text":"Test description This test aims to verify that after performing suspension, keyboard still illuminates in Windows 11. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 SUSPEND_KEY = Fn + F12 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Set keyboard brightness and color to arbitrary settings. Suspend the DUT using SUSPEND_KEY . Wake the device from suspend pressing any key on keyboard. Expected result After suspend keyboard brightness and colors settings remain the same.","title":"ECR028.003 Permanent keyboard illumination after suspension (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr029001-fnlock-hotkey-ubuntu-2204","text":"Test description This test aims to verify that FnLock hotkey functionality works properly on Ubuntu 22.04. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 FN_LOCK_KEY = Fn + CapsLock Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Use FN_LOCK_KEY to activate Fn lock functionality. Test function keys F1 - F12 and note the results. Expected result The function keys F1 - F12 behave as if Fn key is pressed.","title":"ECR029.001 FnLock Hotkey (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr029002-fnlock-hotkey-windows-11","text":"Test description This test aims to verify that FnLock hotkey functionality works properly on Windows 11. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 FN_LOCK_KEY = Fn + CapsLock Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Use FN_LOCK_KEY to activate Fn lock functionality. Test function keys F1 - F12 and note the results. Expected result The function keys F1 - F12 behave as if Fn key is pressed.","title":"ECR029.002 FnLock Hotkey (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr030001-charging-until-98-battery-level-ubuntu-2204","text":"Test description This test aims to verify if charging the battery stops when the battery level reaches 98% mark. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute following command to check current battery charge level percentage: cat /sys/class/power_supply/BAT0/capacity Note the results. If the battery level sits below 95% mark, plug the charger into the DUT. If the battery level sits above 95% mark, wait until the DUT's battery discharges to below 95% level and then plug the charger into the DUT. Wait until the DUT's battery charge level reaches 98%. Open a terminal window and execute following command to confirm that the battery charging stops at 98% mark: cat /sys/class/power_supply/BAT0/status Note the results. Expected result The output of the cat /sys/class/power_supply/BAT0/capacity command should contain information about the current battery charge level. The output of the cat /sys/class/power_supply/BAT0/status command should contain information about the current battery charging status. Example output: not charging","title":"ECR030.001 Charging until 98% battery level (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#ecr030001-not-charging-between-95-and-98-levels-ubuntu-2204","text":"Test description This test aims to verify if charging the battery does not start after plugging in the charger into the DUT when the battery level sits between 95% and 98%. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute following command to check current battery charge level percentage: cat /sys/class/power_supply/BAT0/capacity Note the results. If the battery level sits between 95% and 98%, plug the charger into the DUT. If the battery level sits below 95%, plug the charger into the DUT, wait until the battery reaches the level between 95% and 98% and then unplug the charger and plug it back in into the DUT. Open a terminal window and execute following command to confirm that the battery does not start charging: cat /sys/class/power_supply/BAT0/status The output of the cat /sys/class/power_supply/BAT0/capacity command should contain information about the current battery charge level. The output of the cat /sys/class/power_supply/BAT0/status command should contain information about the current battery charging status. Example output: not charging","title":"ECR030.001 Not charging between 95% and 98% levels (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#sio001001-ps2-mouse-in-os-ubuntu-2204","text":"Test description This test verifies that the touchpad is initialized correctly and is detected by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect PS/2 mouse to the green PS/2 port on the board or the PS/2 splitter (if the board has a unified, black PS/2 connector) Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Verify that the cursor can be moved with the PS/2 mouse and that clicking works. Expected result Moving the cursor and clicking working correctly in the operating system.","title":"SIO001.001 PS/2 mouse in OS - (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#sio001002-ps2-mouse-in-os-windows-11","text":"Test description This test verifies that the touchpad is initialized correctly and is detected by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Connect PS/2 mouse to the green PS/2 port on the board or the PS/2 splitter (if the board has a unified, black PS/2 connector) Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Verify that the cursor can be moved with the PS/2 mouse and that clicking works. Expected result Moving the cursor and clicking working correctly in the operating system.","title":"SIO001.002 PS/2 mouse in OS - (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#sio002001-ps2-keyboard-in-firmware","text":"Test description This test verifies that the keyboard is detected correctly by the firmware and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo BIOS_SETUP_KEY = Esc Test setup Proceed with the Generic test setup: firmware Connect PS/2 keyboard to the violet PS/2 port on the board or the PS/2 splitter (if the board has a unified, black PS/2 connector) Test steps Power on the DUT and press the BIOS_SETUP_KEY to enter the setup menu. Use the arrow keys and the Enter key to navigate the menus. Expected result All menus can be entered using the PS/2 keyboard.","title":"SIO002.001 PS/2 keyboard in firmware"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#sio002002-ps2-keyboard-in-os-ubuntu-2204","text":"Test description This test verifies that the keyboard is detected correctly by the operating system and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo BIOS_SETUP_KEY = Esc OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect PS/2 keyboard to the violet PS/2 port on the board or the PS/2 splitter (if the board has a unified, black PS/2 connector) Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Run sudo libinput debug-events --show-keycodes in the terminal. Press keyboard keys and check the generated keycode. Expected result All standard keyboard keys generate the correct keycodes and events as per their labels. Key combinations are detected correctly.","title":"SIO002.002 PS/2 keyboard in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#sio002003-ps2-keyboard-in-os-windows-11","text":"Test description This test verifies that the keyboard is detected correctly by the operating system and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Connect PS/2 keyboard to the violet PS/2 port on the board or the PS/2 splitter (if the board has a unified, black PS/2 connector) Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open notepad Test the alphanumeric keys and note the generated characters Test non-alphanumeric keys and verify that they generate the signs Test key combinations with the Shift , and Alt modifier keys Open On-Screen Keyboard and press Ctrl key on the hardware keyboard. Check if On-Screen Keyboard correctly highlights it. Open Start menu and press Esc . Check if Start menu is properly closed. Expected result All standard keyboard keys generate correct characters or actions when pressed. Key combinations are detected correctly.","title":"SIO002.003 PS/2 keyboard in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#sio003001-ps2-keyboard-wake-in-os-ubuntu-2204","text":"Test description This test verifies that the keyboard is detected correctly by the operating system and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo BIOS_SETUP_KEY = Esc OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect PS/2 keyboard to the violet PS/2 port on the board or the PS/2 splitter (if the board has a unified, black PS/2 connector) Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Suspend the system to RAM. Press a keyboard key to wake the platform. Expected result Platform is resuming to the OS from sleep after pressing the key.","title":"SIO003.001 PS/2 keyboard wake in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#sio003002-ps2-keyboard-wake-in-os-windows-11","text":"Test description This test verifies that the keyboard is detected correctly by the operating system and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Connect PS/2 keyboard to the violet PS/2 port on the board or the PS/2 splitter (if the board has a unified, black PS/2 connector) Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Suspend the system to RAM. Press a keyboard key to wake the platform. Expected result Platform is resuming to the OS from sleep after pressing the key.","title":"SIO003.002 PS/2 keyboard wake in OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#sio004001-serial-port-in-firmware","text":"Test description This test verifies that the serial port is detected correctly by the firmware and the menu can be traversed with serial console. Test configuration data FIRMWARE = Dasharo BIOS_SETUP_KEY = Esc Test setup Proceed with the Generic test setup: firmware Connect DB9 null modem cable to RS232/USB adapter and the onboard serial port connector. Test steps Open the terminal emulator, e.g. minicom, on the RS232/USB adapter. Power on the DUT and press the BIOS_SETUP_KEY to enter the setup menu. Use the arrow keys and the Enter key to navigate the menus. Expected result All menus can be entered using the serial console.","title":"SIO004.001 Serial port in firmware"},{"location":"unified-test-documentation/dasharo-compatibility/31G-ec-and-superio/#sio004002-serial-port-in-os-ubuntu-2204","text":"Test description This test verifies that the serial port is detected correctly by the operating system and can be utilized as serial console. Test configuration data FIRMWARE = Dasharo BIOS_SETUP_KEY = Esc OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect DB9 null modem cable to RS232/USB adapter and the onboard serial port connector. Configure Linux kernel parameters to use serial console, e.g. console=ttyS0,115200 Test steps Open the terminal emulator, e.g. minicom, on the RS232/USB adapter. Power on the DUT. Boot into the system. Log into the system by using the proper login and password through serial console. Expected result Serial port can be used as Linux console to log in. Serial port can be used to execute commands in bash/shell.","title":"SIO004.002 Serial port in OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/","text":"Dasharo Compatibility: USB-C/Thunderbolt support with charging and display Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . UTC001.001 USB Type-A charging capability Test description This test verifies that the USB-A ports are able to provide charging to a connected smartphone. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Connect a phone to the USB Type-A port located on the left side of the laptop using a USB cable. Note the charging status on the phone screen. Connect a phone to the USB Type-A port located on the right side of the laptop using a USB cable. Note the charging status on the phone screen. Expected result The smartphone should indicate that it's charging when connected to either USB Type-A port. UTC002.001 Thunderbolt 4 USB Type-C charging capability Test description This test verifies that the Thunderbolt 4 port is able to provide charging to a connected smartphone. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Connect a phone to the Thunderbolt 4 USB Type-C port located on the left side of the laptop using a USB cable. Note the charging status on the phone screen. Expected result The smartphone should indicate that it's charging. UTC003.001 USB Type-C PD laptop charging (Ubuntu 22.04) Test description This test verifies that the laptop can be charged using a USB Type-C PD power supply connected to the Thunderbolt 4 port. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Disconnect any charger from the DUT. Connect the charger plug to the docking station. Open a terminal window and run the following command: cat /sys/class/power_supply/BAT0/status Expected result Output of the command should show one of this: Charging or Full . That means laptop is charged properly. UTC003.002 USB Type-C PD laptop charging (Windows 11) Test description This test verifies that the laptop can be charged using a USB Type-C PD power supply connected to the Thunderbolt 4 port. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Disconnect any charger from the DUT. Connect the charger plug to the docking station. Open PowerShell and and run the following command: Get-WmiObject win32_battery Expected result If BatteryStatus is equal 2, that means laptop is charged properly. Example part of output: BatteryStatus : 2 UTC004.001 USB Type-C Display output (Ubuntu 22.04) Test description This test verifies that DUT output video to a display connected via the Thunderbolt 4 USB Type-C port. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Connect a display to the Thunderbolt 4 USB Type-C port using a USB Type-C hub Open the Settings application and select the Displays panel in the left menu. Verify that the attached external monitor can be selected. Select and enable the monitor. Expected result The monitor connected to the laptop via the Thunderbolt 4 port should power on and display video from the laptop. UTC004.002 USB Type-C Display output (Windows 11) Test description This test verifies that DUT output video to a display connected via the Thunderbolt 4 USB Type-C port. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Connect a display to the Thunderbolt 4 USB Type-C port using a USB Type-C hub. Right click on the desktop to open the desktop context menu. Select Display Settings to open the display settings window. Verify that the attached external monitor can be selected. Select and enable the monitor. Expected result The monitor connected to the laptop via the Thunderbolt 4 port should power on and display video from the laptop. UTC005.001 USB Type-C docking station HDMI display (Ubuntu 22.04) Test description This test aims to verify that the display connected with the HDMI cable to the docking station is correctly recognized by the OPERATING_SYSTEM . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect an HDMI cable to the docking station and a display. The USB-C docking station connected to the USB-C port. If the docking station is not directly connected to the DUT, but with a USB-C to USB-C cable, make sure it is full-featured cable (>=5Gbps) with 5A current capability. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. If using more than one display, switch the display mode between Mirror and Join Displays . Expected result The image should be displayed on the external HDMI-connected display in Mirror and Join Displays modes. UTC005.002 USB Type-C docking station HDMI display (Windows 11) Test description This test aims to verify that the display connected with the HDMI cable to the docking station is correctly recognized by the OPERATING_SYSTEM . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Connect an HDMI cable to the docking station and a display. The USB-C docking station connected to the USB-C port. If the docking station is not directly connected to the DUT, but with a USB-C to USB-C cable, make sure it is full-featured cable (>=5Gbps) with 5A current capability. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. If using more than one display, switch the display mode between Duplicate and Extend . Expected result The image should be displayed on the external HDMI-connected display in Duplicate and Extend modes. UTC006.001 USB Type-C docking station DP display (Ubuntu 22.04) Test description This test aims to verify that the display connected with the HDMI cable to the docking station is correctly recognized by the OPERATING_SYSTEM . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect a Display Port cable to the docking station and a display. The USB-C docking station connected to the USB-C port. If the docking station is not directly connected to the DUT, but with a USB-C to USB-C cable, make sure it is full-featured cable (>=5Gbps) with 5A current capability. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. If using more than one display, switch the display mode between Mirror and Join Displays . Expected result The image should be displayed on the external DisplayPort-connected display in Mirror and Join Displays modes. UTC006.002 USB Type-C docking station DP display (Windows 11) Test description This test aims to verify that the display connected with the DisplayPort cable to the docking station is correctly recognized by the OPERATING_SYSTEM . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Connect a DisplayPort cable to the docking station and a display. The USB-C docking station connected to the USB-C port. If the docking station is not directly connected to the DUT, but with a USB-C to USB-C cable, make sure it is full-featured cable (>=5Gbps) with 5A current capability. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. If using more than one display, switch the display mode between Duplicate and Extend . Expected result The image should be displayed on the external DisplayPort-connected display in Duplicate and Extend modes. UTC007.001 USB Type-C docking station Triple display (Ubuntu 22.04) Test description This test aims to verify that the three display simultaneously connected to the docking station is correctly recognized by the OPERATING_SYSTEM . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect three displays using HDMI/DisplayPort cables, depending on the specifications of the docking station. The USB-C docking station connected to the USB-C port. If the docking station is not directly connected to the DUT, but with a USB-C to USB-C cable, make sure it is full-featured cable (>=5Gbps) with 5A current capability. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Switch the display mode between Mirror and Join Displays . Expected result The image should be displayed on the three external displays in Mirror and Join Displays modes. UTC007.002 USB Type-C docking station Triple display (Windows 11) Test description This test aims to verify that the three display simultaneously connected to the docking station is correctly recognized by the OPERATING_SYSTEM . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Connect three displays using HDMI/DisplayPort cables, depending on the specifications of the docking station. The USB-C docking station connected to the USB-C port. If the docking station is not directly connected to the DUT, but with a USB-C to USB-C cable, make sure it is full-featured cable (>=5Gbps) with 5A current capability. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. If using more than one display, switch the display mode between Duplicate and Extend . Expected result The image should be displayed on the three external displays in Duplicate and Extend modes. UTC008.001 USB Type-C docking station detection after coldboot (Ubuntu 22.04) Test description This test aims to verify that the DUT properly detects the docking station after coldboot (realized by power supply cutting off then restoring back). This test case may be re-done several times to specify the platform and connection stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Expected result After lsusb command the docking station entries should be displayed, but output can be different depending on the model of the docking station. Example entries signifing the docking station: Bus 002 Device 010 : Realtek Semiconductor Corp. RTL8153 Gigabit Ethernet Adapter Bus 002 Device 009 : Prolific Technology, Inc. USB SD Card Reader Bus 002 Device 008 : VIA Labs, Inc. USB3.0 Hub UTC009.001 USB Type-C docking station detection after warmboot (Ubuntu 22.04) Test description This test aims to verify that the DUT properly detects the docking station after warmboot (realized by device turning off then turning on). This test case may be re-done several times to specify the platform and connection stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Expected result After lsusb command the docking station entries should be displayed, but output can be different depending on the model of the docking station. Example entries signifing the docking station: Bus 002 Device 010 : Realtek Semiconductor Corp. RTL8153 Gigabit Ethernet Adapter Bus 002 Device 009 : Prolific Technology, Inc. USB SD Card Reader Bus 002 Device 008 : VIA Labs, Inc. USB3.0 Hub UTC010.001 USB Type-C docking station detection after reboot (Ubuntu 22.04) Test description This test aims to verify that the DUT properly detects the docking station after system reboot (performed by relevant command). This test case may be re-done several times to specify the platform and connection stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Expected result After lsusb command the docking station entries should be displayed, but output can be different depending on the model of the docking station. Example entries signifing the docking station: Bus 002 Device 010 : Realtek Semiconductor Corp. RTL8153 Gigabit Ethernet Adapter Bus 002 Device 009 : Prolific Technology, Inc. USB SD Card Reader Bus 002 Device 008 : VIA Labs, Inc. USB3.0 Hub UTC011.001 USB Type-C docking station USB devices recognition (firmware) Test description This test aims to verify that the external USB devices connected to the docking station are recognized correctly by the FIRMWARE . Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The USB storage connected to the USB-C docking station . Test steps Power on the DUT. Hold the BIOS_MENU_KEY to enter the BIOS Menu. Check if the USB storage is available on the list. Expected result The USB storage is available which confirms successful recognition. UTC011.002 USB Type-C docking station USB devices recognition (Ubuntu 22.04) Test description This test aims to verify that the external USB devices connected to the docking station are recognized correctly by the OPERATING_SYSTEM . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The USB storage connected to the USB-C docking station . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: watch -n1 lsusb Connect(or Disconnect) external USB devices to the USB ports on the docking station and note the result. Expected result After each device is connected to the USB port, a new USB device entry in lsusb command output should appear. After each device is disconnected from the USB port, a USB device entry in lsusb command output should disappear. UTC011.003 USB Type-C docking station USB devices recognition (Windows 11) Test description This test aims to verify that the external USB devices connected to the docking station are recognized correctly by the OPERATING_SYSTEM . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The USB storage connected to the USB-C docking station . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell and and run the following command: Get-PnpDevice -PresentOnly | Where-Object { $_ . InstanceId -match '^USB' } Note the results. Expected result After executing the command, a list containing all USB devices should be displayed. The list should contain the USB storage , which is plug in. Example output: ```bash Status Class FriendlyName ------ ----- ------------ OK DiskDrive Mass Storage Device USB Device OK USB Generic USB Hub OK HIDClass USB Input Device OK Bluetooth Intel(R) Wireless Bluetooth(R) OK DiskDrive USB SanDisk 3.2Gen1 USB Device OK USB USB Root Hub (USB 3.0) OK Net TP-LINK Gigabit Ethernet USB Adapter OK USB Generic USB Hub OK USB USB Mass Storage Device ``` UTC012.001 USB Type-C docking station USB keyboard (firmware) Test description This test aims to verify that the external USB keyboard connected to the docking station is detected correctly by the FIRMWARE and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The external USB keyboard connected to the docking station. Test steps Power on the DUT Hold the BIOS_MENU_KEY to enter the Bios Menu. Use the arrow keys, Esc key and the Enter key to navigate the menus. Expected result All menus can be entered using the external USB keyboard. UTC012.002 USB Type-C docking station USB keyboard (Ubuntu 22.04) Test description This test aims to verify that the external USB keyboard connected to the docking station is detected correctly by the OPERATING_SYSTEM and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the libinput-tools package: sudo apt install libinput-tools . The USB-C docking station connected to the USB-C port. The external USB keyboard connected to the docking station. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Run the following command in the terminal: libinput debug-events --show-keycodes Test the alphanumeric keys and note the generated keycodes. Test non-alphanumeric keys and verify that they generate the correct keycodes. Test key combinations with the Shift , Ctrl and Alt modifier keys (this tests 2-key rollover). Expected result The external USB keyboard is detected in OS. All standard keyboard keys generate the correct keycodes and events as per their labels. Key combinations are detected correctly. UTC012.003 USB Type-C docking station USB keyboard (Windows 11) Test description This test aims to verify that the external USB keyboard is detected correctly by the OPERATING_SYSTEM and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The external USB keyboard connected to the docking station. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell and and run the following command: Get-CimInstance win32_KEYBOARD Note the results. Open notepad . Test the alphanumeric keys and note the generated characters. Test non-alphanumeric keys and verify that they generate the signs. Test key combinations with the Shift , and Alt modifier keys. Open On-Screen Keyboard and press Ctrl key on the hardware keyboard. Check if On-Screen Keyboard correctly highlights it. Open Start menu and press Esc . Check if Start menu is properly closed. Expected result After running the PowerShell command information about connected keyboards should be displayed. One of keyboard should have identical part of output: Description : USB Input Device All standard keyboard keys generate correct characters or actions when pressed. Key combinations are detected correctly. UTC013.001 USB Type-C docking station upload 1GB file on USB storage (Ubuntu 22.04) Test description This test aims to verify that the 1GB file can be transferred from the OPERATING_SYSTEM to the USB storage connected to the docking station. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The USB storage connected to the USB-C docking station . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command to generate 1GB file: openssl rand -out test_file.txt -base64 $(( 2 ** 30 * 3 / 4 )) Read the path to the USB storage by running the following command: lsblk Copy the generated file to the USB storage by running the following command: cp test_file.txt { path_to_usb_storage } Verify that the files are the same by running the following command: sha256sum test_file.txt { path_to_usb_storage } /test_file.txt Expected result The output from the last command should contain 2 identical checksums: f46597c0c63a1eefb200d40edf654e52f10c3d5d21565886ad603fabaf8d39fb test_file.txt f46597c0c63a1eefb200d40edf654e52f10c3d5d21565886ad603fabaf8d39fb { path_to_usb_storage } /test_file.txt UTC013.002 USB Type-C docking station upload 1GB file on USB storage(Windows 11) Test description This test aims to verify that the 1GB file can be transferred from the OPERATING_SYSTEM to the USB storage connected to the docking station. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The USB storage connected to the USB-C docking station . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open powershell as administrator and run the following command to generate 1GB file: fsutil file createnew test_file . txt 1073741824 Read the drive letter assigned to the USB storage by running the following command: ( Get-Volume | where drivetype -eq removable ). driveletter Copy the generated file to the USB storage by running the following command: Copy-Item -Path C :\\ Windows \\ system32 \\ test_file . txt { drive_letter }: Verify that the files are the same by running the following commands: Get-FileHash test_file . txt Get-FileHash { drive_letter }:\\ test_file . txt Expected result The output from the last commands should have equal hash: Algorithm Hash Path --------- ---- ---- SHA256 F46597C0C63A1EEFB200D40EDF654E52F10C3D5D21565886AD603FABAF8D39FB C \\ Windows \\ system3 ... Algorithm Hash Path --------- ---- ---- SHA256 F46597C0C63A1EEFB200D40EDF654E52F10C3D5D21565886AD603FABAF8D39FB E :\\ test_file . txt UTC014.001 USB Type-C docking station Ethernet connection (Ubuntu 22.04) Test description This test aims to verify that the connection to internet via docking station's Ethernet port can be obtained on Ubuntu 22.04. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a Ethernet cable with internet connection to docking station. Wait for internet connection to initialize. Ping 3mdeb.com using command in terminal: ping 3mdeb.com Expected result Command should return ping info: PING 3mdeb.com ( 178 .32.205.96 ) 56 ( 84 ) bytes of data. 64 bytes from cluster026.hosting.ovh.net ( 178 .32.205.96 ) : icmp_seq = 1 ttl = 50 time = 44 .3 ms 64 bytes from cluster026.hosting.ovh.net ( 178 .32.205.96 ) : icmp_seq = 2 ttl = 50 time = 47 .7 ms 64 bytes from cluster026.hosting.ovh.net ( 178 .32.205.96 ) : icmp_seq = 3 ttl = 50 time = 41 .1 ms ... Log should not contain phrase information that host is unreachable. Failed ping for Ubuntu 22.04: ping: connect: Network is unreachable UTC014.002 USB Type-C docking station Ethernet connection (Windows 11) Test description This test aims to verify that the connection to internet via docking station's Ethernet port can be obtained on Windows 11. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a Ethernet cable with internet connection to docking station. Wait for internet connection to initialize. Ping 3mdeb.com using command in PowerShell: ping 3mdeb . com Expected result Command should return ping info: Pinging 3mdeb . com [ 178 . 32 . 205 . 96 ] with 32 bytes of data : Reply from 178 . 32 . 205 . 96 : bytes = 32 time = 50ms TTL = 50 Reply from 178 . 32 . 205 . 96 : bytes = 32 time = 47ms TTL = 50 Reply from 178 . 32 . 205 . 96 : bytes = 32 time = 46ms TTL = 50 Log should not contain phrase information that host is unreachable. Failed ping for Windows 11: Ping request could not find host 3mdeb . com . Please check the name and try again . UTC015.001 USB Type-C docking station audio recognition (Ubuntu 22.04) Test description This test aims to verify that the external headset is properly recognized after plugging in the 3.5 mm jack into the docking station. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a headset jack into the docking station. When the Select Audio Device menu appears, select what type of external device has been connected to the laptop (headset). Open a terminal window and run the following command: watch -n1 lsusb Connect(or Disconnect) external headset to the 3.5 mm jack on the docking station and note the result. Expected result After connecting the external headset to the 3.5 mm jack, a new entry in lsusb command output should appear. After disconnecting the external headset from the 3.5 mm jack, a headset entry in lsusb command output should disappear. UTC015.002 USB Type-C docking station audio recognition (Windows 11) Test description This test aims to verify that the external headset is properly recognized after plugging in the 3.5 mm jack into the docking station. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a headset jack into the docking station After the Which device did you plug in menu appearing, select what type of external device has been connected to the laptop (headset). Find the Speakers icon in the bottom right part of the screen and click it using the right mouse button then using the left mouse button click Sound Settings . Locate the All sound device bar and click on it. Connect(or Disconnect) external headset to the 3.5 mm jack on the docking station and note the result. Expected result After connecting the external headset to the 3.5 mm jack, new entries regarding the connected headphones should appear in the Output devices and Input devices sections. After disconnecting the external headset from the 3.5 mm jack, the entries for connected headset should disappear from the Output devices and Input devices sections. UTC016.001 USB Type-C docking station audio playback (Ubuntu 22.04) Test description This test aims to verify that the audio subsystem is able to playback audio recordings by using the external headset speakers connected to the docking station. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a headset jack into the docking station. When the Select Audio Device menu appears, select what type of external device has been connected to the laptop (headset). Open a terminal window and execute the following command: pactl set-sink-mute alsa_output.pci-0000_00_1f.3.analog-stereo 0 pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo 65535 speaker-test Expected result Sound should be played from the external speakers. UTC016.002 USB Type-C docking station audio playback (Windows 11) Test description This test aims to verify that the audio subsystem is able to playback audio recordings by using the external headset speakers connected to the docking station. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a headset jack into the docking station. Find the Speakers icon in the bottom right part of the screen and click it using the left mouse button to open volume menu. After the Which device did you plug in menu appearing, select what type of external device has been connected to the laptop (headset). In the volume menu, click the rightmost part of it and note the reult. Expected result Sound should be played from the external speakers. UTC017.001 USB Type-C docking station audio capture (Ubuntu 22.04) Test description This test aims to verify that the audio subsystem is able to capture audio from external headset connected to the docking station. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a headset jack into the docking station. When the Select Audio Device menu appears, select what type of external device has been connected to the laptop (headset). Open a terminal window and execute the following command: arecord -f S16_LE -d 10 -r 16000 /tmp/test-mic.wav Make some noise for the headset. For example, say something. Execute the following command: aplay /tmp/test-mic.wav Expected result The recorded audio clip is recorded correctly and played back. UTC017.002 USB Type-C docking station audio capture (Windows 11) Test description This test aims to verify that the audio subsystem is able to capture audio from external headset connected to the docking station. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a headset jack into the docking station. After the Which device did you plug in menu appearing, select what type of external device has been connected to the laptop (headset). Find the Speakers icon in the bottom right part of the screen and click it using the right mouse button then using the left mouse button click Sound Settings . Locate the All sound device bar and click on it. Select the Microphone position in the Input devices section. Click on the Start Test bar in the Input settings section. Create some noise for the DUT to capture and note the result. For example, say something. Click on the Stop Test bar. Expected result The Input volume bar located in the Input settings section should raise when some noise is being created. The result of the test after clicking the Stop Test bar should be more than 0% of the total volume. UTC018.001 USB Type-C docking station SD Card reader detection (Ubuntu 22.04) Test description This test aims to verify that the SD Card reader built into the docking station is enumerated correctly and might be detected by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The SD card put into the slot on the USB-C docking station . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: lsusb | grep \"Card Reader\" Note the result. Expected result The output from the command should contain information about the connected USB SD Card Reader. Example output: Bus 002 Device 007 : ID 067b:2733 Prolific Technology, Inc. USB SD Card Reader UTC018.002 USB Type-C docking station SD Card reader detection (Windows 11) Test description This test aims to verify that the SD Card reader built into the docking station is enumerated correctly and can be detected by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The SD card put into the slot on the USB-C docking station . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell and execute the following command: Get-PnpDevice -Status \"OK\" -Class \"DiskDrive\" Note the result. Expected result The output from the command should contain information about the connected USB SD Card Reader. Example output: OK DiskDrive SD Card Reader USB Device UTC019.001 USB Type-C docking station SD Card read/write (Ubuntu 22.04) Test description This test aims to verify that the SD Card reader is initialized correctly and can be used from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The SD card put into the slot on the USB-C docking station . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following commands to identify the SD card mounting point: lsblk | grep \"sd\" Execute the following commands for generating, copying and comparing generated file: dd if = /dev/urandom of = /tmp/in.bin bs = 4K count = 100 dd if = /tmp/in.bin of = /dev/sda bs = 4K count = 100 dd if = /dev/sda of = /tmp/out.bin bs = 4K count = 100 sha256sum /tmp/in.bin /tmp/out.bin Note the result. Expected result The output from the command to identify the SD card mounting point should return information about the SD card mounting location. Example output: sda 8 :0 1 29 ,5G 0 disk \u2514\u2500sda1 8 :1 1 29 ,5G 0 part /media/user/DCB0-C7E8 sdb 8 :16 1 0B 0 disk The output from the last command should contain 2 identical checksums. Example output 2083776668ed0c8095a9ac42188153c02f360e116c14b36d2ef5c98665d75dcb /tmp/in.bin 2083776668ed0c8095a9ac42188153c02f360e116c14b36d2ef5c98665d75dcb /tmp/out.bin UTC019.002 USB Type-C docking station SD Card read/write (Windows 11) Test description This test aims to verify that the SD Card reader is initialized correctly and can be used from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The SD card put into the slot on the USB-C docking station . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Determine the localization of the mounted SD card. Open PowerShell and execute the following commands: New-Item -Path \"${drive_location}:\\\" -Name \"testfile.txt\" -ItemType \"file\" -Value \"This is a test string.\" Get-Content -Path \"${drive_location}:\\testfile.txt\" Note the result. Expected result The last command should return the following message: This is a test string.","title":"USB-C support"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#dasharo-compatibility-usb-cthunderbolt-support-with-charging-and-display","text":"","title":"Dasharo Compatibility: USB-C/Thunderbolt support with charging and display"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc001001-usb-type-a-charging-capability","text":"Test description This test verifies that the USB-A ports are able to provide charging to a connected smartphone. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Connect a phone to the USB Type-A port located on the left side of the laptop using a USB cable. Note the charging status on the phone screen. Connect a phone to the USB Type-A port located on the right side of the laptop using a USB cable. Note the charging status on the phone screen. Expected result The smartphone should indicate that it's charging when connected to either USB Type-A port.","title":"UTC001.001 USB Type-A charging capability"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc002001-thunderbolt-4-usb-type-c-charging-capability","text":"Test description This test verifies that the Thunderbolt 4 port is able to provide charging to a connected smartphone. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Connect a phone to the Thunderbolt 4 USB Type-C port located on the left side of the laptop using a USB cable. Note the charging status on the phone screen. Expected result The smartphone should indicate that it's charging.","title":"UTC002.001 Thunderbolt 4 USB Type-C charging capability"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc003001-usb-type-c-pd-laptop-charging-ubuntu-2204","text":"Test description This test verifies that the laptop can be charged using a USB Type-C PD power supply connected to the Thunderbolt 4 port. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Disconnect any charger from the DUT. Connect the charger plug to the docking station. Open a terminal window and run the following command: cat /sys/class/power_supply/BAT0/status Expected result Output of the command should show one of this: Charging or Full . That means laptop is charged properly.","title":"UTC003.001 USB Type-C PD laptop charging (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc003002-usb-type-c-pd-laptop-charging-windows-11","text":"Test description This test verifies that the laptop can be charged using a USB Type-C PD power supply connected to the Thunderbolt 4 port. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Disconnect any charger from the DUT. Connect the charger plug to the docking station. Open PowerShell and and run the following command: Get-WmiObject win32_battery Expected result If BatteryStatus is equal 2, that means laptop is charged properly. Example part of output: BatteryStatus : 2","title":"UTC003.002 USB Type-C PD laptop charging (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc004001-usb-type-c-display-output-ubuntu-2204","text":"Test description This test verifies that DUT output video to a display connected via the Thunderbolt 4 USB Type-C port. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Connect a display to the Thunderbolt 4 USB Type-C port using a USB Type-C hub Open the Settings application and select the Displays panel in the left menu. Verify that the attached external monitor can be selected. Select and enable the monitor. Expected result The monitor connected to the laptop via the Thunderbolt 4 port should power on and display video from the laptop.","title":"UTC004.001 USB Type-C Display output (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc004002-usb-type-c-display-output-windows-11","text":"Test description This test verifies that DUT output video to a display connected via the Thunderbolt 4 USB Type-C port. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Connect a display to the Thunderbolt 4 USB Type-C port using a USB Type-C hub. Right click on the desktop to open the desktop context menu. Select Display Settings to open the display settings window. Verify that the attached external monitor can be selected. Select and enable the monitor. Expected result The monitor connected to the laptop via the Thunderbolt 4 port should power on and display video from the laptop.","title":"UTC004.002 USB Type-C Display output (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc005001-usb-type-c-docking-station-hdmi-display-ubuntu-2204","text":"Test description This test aims to verify that the display connected with the HDMI cable to the docking station is correctly recognized by the OPERATING_SYSTEM . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect an HDMI cable to the docking station and a display. The USB-C docking station connected to the USB-C port. If the docking station is not directly connected to the DUT, but with a USB-C to USB-C cable, make sure it is full-featured cable (>=5Gbps) with 5A current capability. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. If using more than one display, switch the display mode between Mirror and Join Displays . Expected result The image should be displayed on the external HDMI-connected display in Mirror and Join Displays modes.","title":"UTC005.001 USB Type-C docking station HDMI display (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc005002-usb-type-c-docking-station-hdmi-display-windows-11","text":"Test description This test aims to verify that the display connected with the HDMI cable to the docking station is correctly recognized by the OPERATING_SYSTEM . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Connect an HDMI cable to the docking station and a display. The USB-C docking station connected to the USB-C port. If the docking station is not directly connected to the DUT, but with a USB-C to USB-C cable, make sure it is full-featured cable (>=5Gbps) with 5A current capability. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. If using more than one display, switch the display mode between Duplicate and Extend . Expected result The image should be displayed on the external HDMI-connected display in Duplicate and Extend modes.","title":"UTC005.002 USB Type-C docking station HDMI display (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc006001-usb-type-c-docking-station-dp-display-ubuntu-2204","text":"Test description This test aims to verify that the display connected with the HDMI cable to the docking station is correctly recognized by the OPERATING_SYSTEM . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect a Display Port cable to the docking station and a display. The USB-C docking station connected to the USB-C port. If the docking station is not directly connected to the DUT, but with a USB-C to USB-C cable, make sure it is full-featured cable (>=5Gbps) with 5A current capability. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. If using more than one display, switch the display mode between Mirror and Join Displays . Expected result The image should be displayed on the external DisplayPort-connected display in Mirror and Join Displays modes.","title":"UTC006.001 USB Type-C docking station DP display (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc006002-usb-type-c-docking-station-dp-display-windows-11","text":"Test description This test aims to verify that the display connected with the DisplayPort cable to the docking station is correctly recognized by the OPERATING_SYSTEM . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Connect a DisplayPort cable to the docking station and a display. The USB-C docking station connected to the USB-C port. If the docking station is not directly connected to the DUT, but with a USB-C to USB-C cable, make sure it is full-featured cable (>=5Gbps) with 5A current capability. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. If using more than one display, switch the display mode between Duplicate and Extend . Expected result The image should be displayed on the external DisplayPort-connected display in Duplicate and Extend modes.","title":"UTC006.002 USB Type-C docking station DP display (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc007001-usb-type-c-docking-station-triple-display-ubuntu-2204","text":"Test description This test aims to verify that the three display simultaneously connected to the docking station is correctly recognized by the OPERATING_SYSTEM . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Connect three displays using HDMI/DisplayPort cables, depending on the specifications of the docking station. The USB-C docking station connected to the USB-C port. If the docking station is not directly connected to the DUT, but with a USB-C to USB-C cable, make sure it is full-featured cable (>=5Gbps) with 5A current capability. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Switch the display mode between Mirror and Join Displays . Expected result The image should be displayed on the three external displays in Mirror and Join Displays modes.","title":"UTC007.001 USB Type-C docking station Triple display (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc007002-usb-type-c-docking-station-triple-display-windows-11","text":"Test description This test aims to verify that the three display simultaneously connected to the docking station is correctly recognized by the OPERATING_SYSTEM . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Connect three displays using HDMI/DisplayPort cables, depending on the specifications of the docking station. The USB-C docking station connected to the USB-C port. If the docking station is not directly connected to the DUT, but with a USB-C to USB-C cable, make sure it is full-featured cable (>=5Gbps) with 5A current capability. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. If using more than one display, switch the display mode between Duplicate and Extend . Expected result The image should be displayed on the three external displays in Duplicate and Extend modes.","title":"UTC007.002 USB Type-C docking station Triple display (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc008001-usb-type-c-docking-station-detection-after-coldboot-ubuntu-2204","text":"Test description This test aims to verify that the DUT properly detects the docking station after coldboot (realized by power supply cutting off then restoring back). This test case may be re-done several times to specify the platform and connection stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Expected result After lsusb command the docking station entries should be displayed, but output can be different depending on the model of the docking station. Example entries signifing the docking station: Bus 002 Device 010 : Realtek Semiconductor Corp. RTL8153 Gigabit Ethernet Adapter Bus 002 Device 009 : Prolific Technology, Inc. USB SD Card Reader Bus 002 Device 008 : VIA Labs, Inc. USB3.0 Hub","title":"UTC008.001 USB Type-C docking station detection after coldboot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc009001-usb-type-c-docking-station-detection-after-warmboot-ubuntu-2204","text":"Test description This test aims to verify that the DUT properly detects the docking station after warmboot (realized by device turning off then turning on). This test case may be re-done several times to specify the platform and connection stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Expected result After lsusb command the docking station entries should be displayed, but output can be different depending on the model of the docking station. Example entries signifing the docking station: Bus 002 Device 010 : Realtek Semiconductor Corp. RTL8153 Gigabit Ethernet Adapter Bus 002 Device 009 : Prolific Technology, Inc. USB SD Card Reader Bus 002 Device 008 : VIA Labs, Inc. USB3.0 Hub","title":"UTC009.001  USB Type-C docking station detection after warmboot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc010001-usb-type-c-docking-station-detection-after-reboot-ubuntu-2204","text":"Test description This test aims to verify that the DUT properly detects the docking station after system reboot (performed by relevant command). This test case may be re-done several times to specify the platform and connection stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Expected result After lsusb command the docking station entries should be displayed, but output can be different depending on the model of the docking station. Example entries signifing the docking station: Bus 002 Device 010 : Realtek Semiconductor Corp. RTL8153 Gigabit Ethernet Adapter Bus 002 Device 009 : Prolific Technology, Inc. USB SD Card Reader Bus 002 Device 008 : VIA Labs, Inc. USB3.0 Hub","title":"UTC010.001 USB Type-C docking station detection after reboot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc011001-usb-type-c-docking-station-usb-devices-recognition-firmware","text":"Test description This test aims to verify that the external USB devices connected to the docking station are recognized correctly by the FIRMWARE . Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The USB storage connected to the USB-C docking station . Test steps Power on the DUT. Hold the BIOS_MENU_KEY to enter the BIOS Menu. Check if the USB storage is available on the list. Expected result The USB storage is available which confirms successful recognition.","title":"UTC011.001 USB Type-C docking station USB devices recognition (firmware)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc011002-usb-type-c-docking-station-usb-devices-recognition-ubuntu-2204","text":"Test description This test aims to verify that the external USB devices connected to the docking station are recognized correctly by the OPERATING_SYSTEM . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The USB storage connected to the USB-C docking station . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: watch -n1 lsusb Connect(or Disconnect) external USB devices to the USB ports on the docking station and note the result. Expected result After each device is connected to the USB port, a new USB device entry in lsusb command output should appear. After each device is disconnected from the USB port, a USB device entry in lsusb command output should disappear.","title":"UTC011.002 USB Type-C docking station USB devices recognition (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc011003-usb-type-c-docking-station-usb-devices-recognition-windows-11","text":"Test description This test aims to verify that the external USB devices connected to the docking station are recognized correctly by the OPERATING_SYSTEM . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The USB storage connected to the USB-C docking station . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell and and run the following command: Get-PnpDevice -PresentOnly | Where-Object { $_ . InstanceId -match '^USB' } Note the results. Expected result After executing the command, a list containing all USB devices should be displayed. The list should contain the USB storage , which is plug in. Example output: ```bash Status Class FriendlyName ------ ----- ------------ OK DiskDrive Mass Storage Device USB Device OK USB Generic USB Hub OK HIDClass USB Input Device OK Bluetooth Intel(R) Wireless Bluetooth(R) OK DiskDrive USB SanDisk 3.2Gen1 USB Device OK USB USB Root Hub (USB 3.0) OK Net TP-LINK Gigabit Ethernet USB Adapter OK USB Generic USB Hub OK USB USB Mass Storage Device ```","title":"UTC011.003 USB Type-C docking station USB devices recognition (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc012001-usb-type-c-docking-station-usb-keyboard-firmware","text":"Test description This test aims to verify that the external USB keyboard connected to the docking station is detected correctly by the FIRMWARE and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The external USB keyboard connected to the docking station. Test steps Power on the DUT Hold the BIOS_MENU_KEY to enter the Bios Menu. Use the arrow keys, Esc key and the Enter key to navigate the menus. Expected result All menus can be entered using the external USB keyboard.","title":"UTC012.001 USB Type-C docking station USB keyboard (firmware)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc012002-usb-type-c-docking-station-usb-keyboard-ubuntu-2204","text":"Test description This test aims to verify that the external USB keyboard connected to the docking station is detected correctly by the OPERATING_SYSTEM and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the libinput-tools package: sudo apt install libinput-tools . The USB-C docking station connected to the USB-C port. The external USB keyboard connected to the docking station. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Run the following command in the terminal: libinput debug-events --show-keycodes Test the alphanumeric keys and note the generated keycodes. Test non-alphanumeric keys and verify that they generate the correct keycodes. Test key combinations with the Shift , Ctrl and Alt modifier keys (this tests 2-key rollover). Expected result The external USB keyboard is detected in OS. All standard keyboard keys generate the correct keycodes and events as per their labels. Key combinations are detected correctly.","title":"UTC012.002 USB Type-C docking station USB keyboard (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc012003-usb-type-c-docking-station-usb-keyboard-windows-11","text":"Test description This test aims to verify that the external USB keyboard is detected correctly by the OPERATING_SYSTEM and all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The external USB keyboard connected to the docking station. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell and and run the following command: Get-CimInstance win32_KEYBOARD Note the results. Open notepad . Test the alphanumeric keys and note the generated characters. Test non-alphanumeric keys and verify that they generate the signs. Test key combinations with the Shift , and Alt modifier keys. Open On-Screen Keyboard and press Ctrl key on the hardware keyboard. Check if On-Screen Keyboard correctly highlights it. Open Start menu and press Esc . Check if Start menu is properly closed. Expected result After running the PowerShell command information about connected keyboards should be displayed. One of keyboard should have identical part of output: Description : USB Input Device All standard keyboard keys generate correct characters or actions when pressed. Key combinations are detected correctly.","title":"UTC012.003 USB Type-C docking station USB keyboard (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc013001-usb-type-c-docking-station-upload-1gb-file-on-usb-storage-ubuntu-2204","text":"Test description This test aims to verify that the 1GB file can be transferred from the OPERATING_SYSTEM to the USB storage connected to the docking station. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The USB storage connected to the USB-C docking station . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command to generate 1GB file: openssl rand -out test_file.txt -base64 $(( 2 ** 30 * 3 / 4 )) Read the path to the USB storage by running the following command: lsblk Copy the generated file to the USB storage by running the following command: cp test_file.txt { path_to_usb_storage } Verify that the files are the same by running the following command: sha256sum test_file.txt { path_to_usb_storage } /test_file.txt Expected result The output from the last command should contain 2 identical checksums: f46597c0c63a1eefb200d40edf654e52f10c3d5d21565886ad603fabaf8d39fb test_file.txt f46597c0c63a1eefb200d40edf654e52f10c3d5d21565886ad603fabaf8d39fb { path_to_usb_storage } /test_file.txt","title":"UTC013.001 USB Type-C docking station upload 1GB file on USB storage (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc013002-usb-type-c-docking-station-upload-1gb-file-on-usb-storagewindows-11","text":"Test description This test aims to verify that the 1GB file can be transferred from the OPERATING_SYSTEM to the USB storage connected to the docking station. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The USB storage connected to the USB-C docking station . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open powershell as administrator and run the following command to generate 1GB file: fsutil file createnew test_file . txt 1073741824 Read the drive letter assigned to the USB storage by running the following command: ( Get-Volume | where drivetype -eq removable ). driveletter Copy the generated file to the USB storage by running the following command: Copy-Item -Path C :\\ Windows \\ system32 \\ test_file . txt { drive_letter }: Verify that the files are the same by running the following commands: Get-FileHash test_file . txt Get-FileHash { drive_letter }:\\ test_file . txt Expected result The output from the last commands should have equal hash: Algorithm Hash Path --------- ---- ---- SHA256 F46597C0C63A1EEFB200D40EDF654E52F10C3D5D21565886AD603FABAF8D39FB C \\ Windows \\ system3 ... Algorithm Hash Path --------- ---- ---- SHA256 F46597C0C63A1EEFB200D40EDF654E52F10C3D5D21565886AD603FABAF8D39FB E :\\ test_file . txt","title":"UTC013.002 USB Type-C docking station upload 1GB file on USB storage(Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc014001-usb-type-c-docking-station-ethernet-connection-ubuntu-2204","text":"Test description This test aims to verify that the connection to internet via docking station's Ethernet port can be obtained on Ubuntu 22.04. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a Ethernet cable with internet connection to docking station. Wait for internet connection to initialize. Ping 3mdeb.com using command in terminal: ping 3mdeb.com Expected result Command should return ping info: PING 3mdeb.com ( 178 .32.205.96 ) 56 ( 84 ) bytes of data. 64 bytes from cluster026.hosting.ovh.net ( 178 .32.205.96 ) : icmp_seq = 1 ttl = 50 time = 44 .3 ms 64 bytes from cluster026.hosting.ovh.net ( 178 .32.205.96 ) : icmp_seq = 2 ttl = 50 time = 47 .7 ms 64 bytes from cluster026.hosting.ovh.net ( 178 .32.205.96 ) : icmp_seq = 3 ttl = 50 time = 41 .1 ms ... Log should not contain phrase information that host is unreachable. Failed ping for Ubuntu 22.04: ping: connect: Network is unreachable","title":"UTC014.001 USB Type-C docking station Ethernet connection (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc014002-usb-type-c-docking-station-ethernet-connection-windows-11","text":"Test description This test aims to verify that the connection to internet via docking station's Ethernet port can be obtained on Windows 11. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a Ethernet cable with internet connection to docking station. Wait for internet connection to initialize. Ping 3mdeb.com using command in PowerShell: ping 3mdeb . com Expected result Command should return ping info: Pinging 3mdeb . com [ 178 . 32 . 205 . 96 ] with 32 bytes of data : Reply from 178 . 32 . 205 . 96 : bytes = 32 time = 50ms TTL = 50 Reply from 178 . 32 . 205 . 96 : bytes = 32 time = 47ms TTL = 50 Reply from 178 . 32 . 205 . 96 : bytes = 32 time = 46ms TTL = 50 Log should not contain phrase information that host is unreachable. Failed ping for Windows 11: Ping request could not find host 3mdeb . com . Please check the name and try again .","title":"UTC014.002 USB Type-C docking station Ethernet connection (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc015001-usb-type-c-docking-station-audio-recognition-ubuntu-2204","text":"Test description This test aims to verify that the external headset is properly recognized after plugging in the 3.5 mm jack into the docking station. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a headset jack into the docking station. When the Select Audio Device menu appears, select what type of external device has been connected to the laptop (headset). Open a terminal window and run the following command: watch -n1 lsusb Connect(or Disconnect) external headset to the 3.5 mm jack on the docking station and note the result. Expected result After connecting the external headset to the 3.5 mm jack, a new entry in lsusb command output should appear. After disconnecting the external headset from the 3.5 mm jack, a headset entry in lsusb command output should disappear.","title":"UTC015.001 USB Type-C docking station audio recognition (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc015002-usb-type-c-docking-station-audio-recognition-windows-11","text":"Test description This test aims to verify that the external headset is properly recognized after plugging in the 3.5 mm jack into the docking station. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a headset jack into the docking station After the Which device did you plug in menu appearing, select what type of external device has been connected to the laptop (headset). Find the Speakers icon in the bottom right part of the screen and click it using the right mouse button then using the left mouse button click Sound Settings . Locate the All sound device bar and click on it. Connect(or Disconnect) external headset to the 3.5 mm jack on the docking station and note the result. Expected result After connecting the external headset to the 3.5 mm jack, new entries regarding the connected headphones should appear in the Output devices and Input devices sections. After disconnecting the external headset from the 3.5 mm jack, the entries for connected headset should disappear from the Output devices and Input devices sections.","title":"UTC015.002 USB Type-C docking station audio recognition (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc016001-usb-type-c-docking-station-audio-playback-ubuntu-2204","text":"Test description This test aims to verify that the audio subsystem is able to playback audio recordings by using the external headset speakers connected to the docking station. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a headset jack into the docking station. When the Select Audio Device menu appears, select what type of external device has been connected to the laptop (headset). Open a terminal window and execute the following command: pactl set-sink-mute alsa_output.pci-0000_00_1f.3.analog-stereo 0 pactl set-sink-volume alsa_output.pci-0000_00_1f.3.analog-stereo 65535 speaker-test Expected result Sound should be played from the external speakers.","title":"UTC016.001 USB Type-C docking station audio playback (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc016002-usb-type-c-docking-station-audio-playback-windows-11","text":"Test description This test aims to verify that the audio subsystem is able to playback audio recordings by using the external headset speakers connected to the docking station. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a headset jack into the docking station. Find the Speakers icon in the bottom right part of the screen and click it using the left mouse button to open volume menu. After the Which device did you plug in menu appearing, select what type of external device has been connected to the laptop (headset). In the volume menu, click the rightmost part of it and note the reult. Expected result Sound should be played from the external speakers.","title":"UTC016.002 USB Type-C docking station audio playback (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc017001-usb-type-c-docking-station-audio-capture-ubuntu-2204","text":"Test description This test aims to verify that the audio subsystem is able to capture audio from external headset connected to the docking station. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a headset jack into the docking station. When the Select Audio Device menu appears, select what type of external device has been connected to the laptop (headset). Open a terminal window and execute the following command: arecord -f S16_LE -d 10 -r 16000 /tmp/test-mic.wav Make some noise for the headset. For example, say something. Execute the following command: aplay /tmp/test-mic.wav Expected result The recorded audio clip is recorded correctly and played back.","title":"UTC017.001 USB Type-C docking station audio capture (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc017002-usb-type-c-docking-station-audio-capture-windows-11","text":"Test description This test aims to verify that the audio subsystem is able to capture audio from external headset connected to the docking station. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a headset jack into the docking station. After the Which device did you plug in menu appearing, select what type of external device has been connected to the laptop (headset). Find the Speakers icon in the bottom right part of the screen and click it using the right mouse button then using the left mouse button click Sound Settings . Locate the All sound device bar and click on it. Select the Microphone position in the Input devices section. Click on the Start Test bar in the Input settings section. Create some noise for the DUT to capture and note the result. For example, say something. Click on the Stop Test bar. Expected result The Input volume bar located in the Input settings section should raise when some noise is being created. The result of the test after clicking the Stop Test bar should be more than 0% of the total volume.","title":"UTC017.002 USB Type-C docking station audio capture (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc018001-usb-type-c-docking-station-sd-card-reader-detection-ubuntu-2204","text":"Test description This test aims to verify that the SD Card reader built into the docking station is enumerated correctly and might be detected by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The SD card put into the slot on the USB-C docking station . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: lsusb | grep \"Card Reader\" Note the result. Expected result The output from the command should contain information about the connected USB SD Card Reader. Example output: Bus 002 Device 007 : ID 067b:2733 Prolific Technology, Inc. USB SD Card Reader","title":"UTC018.001 USB Type-C docking station SD Card reader detection (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc018002-usb-type-c-docking-station-sd-card-reader-detection-windows-11","text":"Test description This test aims to verify that the SD Card reader built into the docking station is enumerated correctly and can be detected by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The SD card put into the slot on the USB-C docking station . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell and execute the following command: Get-PnpDevice -Status \"OK\" -Class \"DiskDrive\" Note the result. Expected result The output from the command should contain information about the connected USB SD Card Reader. Example output: OK DiskDrive SD Card Reader USB Device","title":"UTC018.002 USB Type-C docking station SD Card reader detection (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc019001-usb-type-c-docking-station-sd-card-readwrite-ubuntu-2204","text":"Test description This test aims to verify that the SD Card reader is initialized correctly and can be used from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The SD card put into the slot on the USB-C docking station . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following commands to identify the SD card mounting point: lsblk | grep \"sd\" Execute the following commands for generating, copying and comparing generated file: dd if = /dev/urandom of = /tmp/in.bin bs = 4K count = 100 dd if = /tmp/in.bin of = /dev/sda bs = 4K count = 100 dd if = /dev/sda of = /tmp/out.bin bs = 4K count = 100 sha256sum /tmp/in.bin /tmp/out.bin Note the result. Expected result The output from the command to identify the SD card mounting point should return information about the SD card mounting location. Example output: sda 8 :0 1 29 ,5G 0 disk \u2514\u2500sda1 8 :1 1 29 ,5G 0 part /media/user/DCB0-C7E8 sdb 8 :16 1 0B 0 disk The output from the last command should contain 2 identical checksums. Example output 2083776668ed0c8095a9ac42188153c02f360e116c14b36d2ef5c98665d75dcb /tmp/in.bin 2083776668ed0c8095a9ac42188153c02f360e116c14b36d2ef5c98665d75dcb /tmp/out.bin","title":"UTC019.001 USB Type-C docking station SD Card read/write (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31H-usb-type-c/#utc019002-usb-type-c-docking-station-sd-card-readwrite-windows-11","text":"Test description This test aims to verify that the SD Card reader is initialized correctly and can be used from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. The USB-C docking station connected to the USB-C port. The SD card put into the slot on the USB-C docking station . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Determine the localization of the mounted SD card. Open PowerShell and execute the following commands: New-Item -Path \"${drive_location}:\\\" -Name \"testfile.txt\" -ItemType \"file\" -Value \"This is a test string.\" Get-Content -Path \"${drive_location}:\\testfile.txt\" Note the result. Expected result The last command should return the following message: This is a test string.","title":"UTC019.002 USB Type-C docking station SD Card read/write (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31I-nvme-switching/","text":"Dasharo Compatibility: M.2 automatic SATA/NVMe switching support MSS001.001 M.2 automatic SATA/NVMe switching support (Ubuntu 22.04) Test description This test aims to verify detection of the NVMe and SATA disk in M.2 hybrid slot via the Operating System slot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Insert an NVMe disk into the M.2 slot on the DUT. Proceed with the Generic test setup: OS installer . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute sudo parted -l . Check if the connected disk is present on the list. Power off the DUT. Replace the NVMe disk with SATA M.2 disk. Repeat steps 1-5. Expected result The NVMe M.2 disk is detected in OS: Model: SAMSUNG MZVLB256HBHQ-00000 ( nvme ) Disk /dev/nvme0n1: 256GB Sector size ( logical/physical ) : 512B/512B Partition Table: gpt Disk Flags: Number Start End Size File system Name Flags 1 1049kB 2097kB 1049kB 2 2097kB 540MB 538MB fat32 EFI System Partition boot, esp 3 540MB 67 ,6GB 67 ,1GB ext4 6 67 ,6GB 126GB 57 ,9GB ext4 4 126GB 193GB 67 ,7GB ext4 5 193GB 256GB 62 ,9GB ext4 The SATA M.2 disk is detected in OS: Model: ATA Hoodisk SSD ( scsi ) Disk /dev/sda: 32 ,0GB Sector size ( logical/physical ) : 512B/512B Partition Table: gpt Disk Flags: Number Start End Size File system Name Flags 1 1049kB 538MB 537MB fat32 EFI System Partition boot, esp 2 538MB 32 ,0GB 31 ,5GB ext4","title":"M.2 automatic SATA/NVMe switching support"},{"location":"unified-test-documentation/dasharo-compatibility/31I-nvme-switching/#dasharo-compatibility-m2-automatic-satanvme-switching-support","text":"","title":"Dasharo Compatibility: M.2 automatic SATA/NVMe switching support"},{"location":"unified-test-documentation/dasharo-compatibility/31I-nvme-switching/#mss001001-m2-automatic-satanvme-switching-support-ubuntu-2204","text":"Test description This test aims to verify detection of the NVMe and SATA disk in M.2 hybrid slot via the Operating System slot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Insert an NVMe disk into the M.2 slot on the DUT. Proceed with the Generic test setup: OS installer . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute sudo parted -l . Check if the connected disk is present on the list. Power off the DUT. Replace the NVMe disk with SATA M.2 disk. Repeat steps 1-5. Expected result The NVMe M.2 disk is detected in OS: Model: SAMSUNG MZVLB256HBHQ-00000 ( nvme ) Disk /dev/nvme0n1: 256GB Sector size ( logical/physical ) : 512B/512B Partition Table: gpt Disk Flags: Number Start End Size File system Name Flags 1 1049kB 2097kB 1049kB 2 2097kB 540MB 538MB fat32 EFI System Partition boot, esp 3 540MB 67 ,6GB 67 ,1GB ext4 6 67 ,6GB 126GB 57 ,9GB ext4 4 126GB 193GB 67 ,7GB ext4 5 193GB 256GB 62 ,9GB ext4 The SATA M.2 disk is detected in OS: Model: ATA Hoodisk SSD ( scsi ) Disk /dev/sda: 32 ,0GB Sector size ( logical/physical ) : 512B/512B Partition Table: gpt Disk Flags: Number Start End Size File system Name Flags 1 1049kB 538MB 537MB fat32 EFI System Partition boot, esp 2 538MB 32 ,0GB 31 ,5GB ext4","title":"MSS001.001 M.2 automatic SATA/NVMe switching support (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31J-sleep-mode/","text":"Dasharo Compatibility: Sleep mode Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . SLM001.001 Sleep mode - battery monitoring (Ubuntu 22.04) Test description This test verifies how quickly the battery discharges while in sleep mode in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Charge the battery fully (note: due to the manufacturer's settings the maximum battery charge level is limited to 90%; also, the battery charging process can only be started if the current battery level is less than 80%). Disconnect the power supply. Close the lid. Wake up the DUT in the following timestamps and note the battery level: 1 hour from fully charging, 2 hours from fully charging, 3 hours from fully charging, 6 hours from fully charging, (optional) 24 hours from fully charging. Expected result The battery should discharge at a similar rate as in the table below (take the battery wear into account). Time Battery level 0h 90% 1h 88% 2h 86% 3h 84% 6h 80% 24h (optional) 57% SLM000.002 Sleep mode - battery monitoring (Windows 11) Test description This test verifies how quickly the battery discharges while in sleep mode in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Charge the battery fully (note: due to the manufacturer's settings the maximum battery charge level is limited to 90%; also, the battery charging process can only be started if the current battery level is less than 80%). Wait 30 seconds for the system to load fully. Disconnect the power supply. Close the lid. Wake up the DUT in the following timestamps and note the battery level: 1 hour from fully charging, 2 hours from fully charging, 3 hours from fully charging, 6 hours from fully charging, Expected result The battery should discharge at a similar rate as in the table below (take the battery wear into account). Time Battery level 0h 90% 1h 79% 2h 69% 3h 58% 6h 26%","title":"Sleep mode"},{"location":"unified-test-documentation/dasharo-compatibility/31J-sleep-mode/#dasharo-compatibility-sleep-mode","text":"","title":"Dasharo Compatibility: Sleep mode"},{"location":"unified-test-documentation/dasharo-compatibility/31J-sleep-mode/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/31J-sleep-mode/#slm001001-sleep-mode-battery-monitoring-ubuntu-2204","text":"Test description This test verifies how quickly the battery discharges while in sleep mode in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Charge the battery fully (note: due to the manufacturer's settings the maximum battery charge level is limited to 90%; also, the battery charging process can only be started if the current battery level is less than 80%). Disconnect the power supply. Close the lid. Wake up the DUT in the following timestamps and note the battery level: 1 hour from fully charging, 2 hours from fully charging, 3 hours from fully charging, 6 hours from fully charging, (optional) 24 hours from fully charging. Expected result The battery should discharge at a similar rate as in the table below (take the battery wear into account). Time Battery level 0h 90% 1h 88% 2h 86% 3h 84% 6h 80% 24h (optional) 57%","title":"SLM001.001 Sleep mode - battery monitoring (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31J-sleep-mode/#slm000002-sleep-mode-battery-monitoring-windows-11","text":"Test description This test verifies how quickly the battery discharges while in sleep mode in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Charge the battery fully (note: due to the manufacturer's settings the maximum battery charge level is limited to 90%; also, the battery charging process can only be started if the current battery level is less than 80%). Wait 30 seconds for the system to load fully. Disconnect the power supply. Close the lid. Wake up the DUT in the following timestamps and note the battery level: 1 hour from fully charging, 2 hours from fully charging, 3 hours from fully charging, 6 hours from fully charging, Expected result The battery should discharge at a similar rate as in the table below (take the battery wear into account). Time Battery level 0h 90% 1h 79% 2h 69% 3h 58% 6h 26%","title":"SLM000.002 Sleep mode - battery monitoring (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31K-minipcie-verification/","text":"Dasharo Compatibility: miniPCIe slot verification Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . MWL001.001 Wireless card detection (Ubuntu 22.04) Test description This test aims to verify that the Wi-Fi/Bluetooth card is enumerated correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: lspci | grep \"Network controller\" Expected result The output of the command should contain information about mounted on the board network controller. Example output: 2f:00.0 Network controller: Intel Corporation Wi-Fi 6 AX201 ( rev 1a ) MWL001.002 Wireless card detection (Windows 11) Test description This test aims to verify that the Wi-Fi/Bluetooth card is enumerated correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell and execute following command: Get-PnpDevice -PresentOnly | Select-String -Pattern \"Wi-Fi\" Note the result. Expected result The output of the command should contain information about mounted on the board network controller. Example output: Intel ( R ) Wi-Fi 6AX200 160MHz MWL002.001 Wi-Fi scanning (Ubuntu 22.04) Test description This test aims to verify that the Wi-Fi functionality of card is initialized correctly and can be used from within the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Make sure to have any Wi-Fi signal available. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following commands as root: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Expected result The output of the last command should return a list of available Wi-Fi networks, for example: IN-USE BSSID SSID MODE CHAN RATE SIGNAL BARS SECURITY XX:XX:XX:XX:XX:XX DIRECT-ny Infra 6 65 Mbit/s 75 \u2582\u2584\u2586_ WPA2 * XX:XX:XX:XX:XX:XX 3mdeb_abr_5GHz Infra 48 405 Mbit/s 72 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX 3mdeb_abr Infra 11 54 Mbit/s 69 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX FunBox2-F9BF_2.4GHz Infra 1 130 Mbit/s 50 \u2582\u2584__ WPA1 WPA2 XX:XX:XX:XX:XX:XX H_Office Infra 2 270 Mbit/s 35 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-xpPhaser 3330 Infra 1 65 Mbit/s 34 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 108 540 Mbit/s 32 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-KRM288x Series Infra 11 54 Mbit/s 22 \u2582___ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 11 130 Mbit/s 20 \u2582___ WPA2 XX:XX:XX:XX:XX:XX DIRECT-ejPhaser 3330 Infra 1 65 Mbit/s 17 \u2582___ WPA2 XX:XX:XX:XX:XX:XX NED-WIFI Infra 11 270 Mbit/s 17 \u2582___ WPA2 MWL002.002 Wi-Fi scanning (Windows 11) Test description This test aims to verify that the Wi-Fi functionality of card is initialized correctly and can be used from within the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Make sure to have any Wi-Fi signal available Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell and execute following command: netsh wlan show network Note the result. Expected result Output should contain 3mdeb_abr and/or 3mdeb_abr_5GHz . Example output: SSID 1 : 3mdeb_abr Network type : Infrastructure Authentication : WPA2-Personal Encryption : CCMP SSID 2 : Sonoff1 192 . 168 . 4 . 208 Hotspot Network type : Infrastructure Authentication : WPA2-Personal Encryption : CCMP SSID 3 : Orange_Swiatlowod_F1A0 Network type : Infrastructure Authentication : WPA2-Personal Encryption : CCMP SSID 4 : Sonoff1 Fallback Hotspot Network type : Infrastructure Authentication : WPA2-Personal Encryption : CCMP SSID 5 : DIRECT-KRM288x Series Network type : Infrastructure Authentication : WPA2-Personal Encryption : CCMP MWL003.001 Bluetooth scanning (Ubuntu 22.04) Test description This test aims to verify that the Bluetooth functionality of card is initialized correctly and can be used from within the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Enable Bluetooth and make it discoverable in any device nearby DUT. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following commands: bluetoothctl power on scan on # Wait ~5 seconds devices Expected result The output of the last command should return a list of detectable Bluetooth devices, for example: Device XX:XX:XX:XX:XX:XX Device 1 Device XX:XX:XX:XX:XX:XX Wojtek N Device XX:XX:XX:XX:XX:XX Mi Smart Band 4 Device XX:XX:XX:XX:XX:XX Galaxy Watch4 Classic ( PHLM ) Device XX:XX:XX:XX:XX:XX Galaxy Watch4 Classic ( PHLM ) Device XX:XX:XX:XX:XX:XX Device 2 Device XX:XX:XX:XX:XX:XX [ Signage ] Samsung QMR Series Device XX:XX:XX:XX:XX:XX [ Signage ] Samsung QMR Series Device XX:XX:XX:XX:XX:XX Device 3 Device XX:XX:XX:XX:XX:XX Device 4 Device XX:XX:XX:XX:XX:XX Device 5 Device XX:XX:XX:XX:XX:XX Device 6 MWL003.002 Bluetooth scanning (Windows 11) Test description This test aims to verify that the Bluetooth functionality of card is initialized correctly and can be used from within the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Enable Bluetooth and make it discoverable in any device nearby DUT Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Enter Notification Center in the bottom right part of the screen. Using right mouse button click on the Bluetooth icon. In shown drop-down menu click Go to settings . Click the + icon described as Add Bluetooth or other device . In the Add a device menu click Bluetooth . Wait a few moments until DUT scans for nearby Bluetooth devices and note the result. Expected result Available Bluetooth devices should appear in the Add a device window. MWL004.001 LTE card detection (Ubuntu 22.04) Test description This test aims to verify that the LTE card is detected correctly in the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Plug the LTE card into miniPCIe slot. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute lsusb Expected result The output of the command should return a list of USB devices including LTE module, for example: Bus 001 Device 004 : ID 05c6:9215 Qualcomm, Inc. Quectel EC20 LTE modem","title":"miniPCIe slot verification"},{"location":"unified-test-documentation/dasharo-compatibility/31K-minipcie-verification/#dasharo-compatibility-minipcie-slot-verification","text":"","title":"Dasharo Compatibility: miniPCIe slot verification"},{"location":"unified-test-documentation/dasharo-compatibility/31K-minipcie-verification/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/31K-minipcie-verification/#mwl001001-wireless-card-detection-ubuntu-2204","text":"Test description This test aims to verify that the Wi-Fi/Bluetooth card is enumerated correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: lspci | grep \"Network controller\" Expected result The output of the command should contain information about mounted on the board network controller. Example output: 2f:00.0 Network controller: Intel Corporation Wi-Fi 6 AX201 ( rev 1a )","title":"MWL001.001 Wireless card detection (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31K-minipcie-verification/#mwl001002-wireless-card-detection-windows-11","text":"Test description This test aims to verify that the Wi-Fi/Bluetooth card is enumerated correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell and execute following command: Get-PnpDevice -PresentOnly | Select-String -Pattern \"Wi-Fi\" Note the result. Expected result The output of the command should contain information about mounted on the board network controller. Example output: Intel ( R ) Wi-Fi 6AX200 160MHz","title":"MWL001.002 Wireless card detection (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31K-minipcie-verification/#mwl002001-wi-fi-scanning-ubuntu-2204","text":"Test description This test aims to verify that the Wi-Fi functionality of card is initialized correctly and can be used from within the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Make sure to have any Wi-Fi signal available. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following commands as root: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Expected result The output of the last command should return a list of available Wi-Fi networks, for example: IN-USE BSSID SSID MODE CHAN RATE SIGNAL BARS SECURITY XX:XX:XX:XX:XX:XX DIRECT-ny Infra 6 65 Mbit/s 75 \u2582\u2584\u2586_ WPA2 * XX:XX:XX:XX:XX:XX 3mdeb_abr_5GHz Infra 48 405 Mbit/s 72 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX 3mdeb_abr Infra 11 54 Mbit/s 69 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX FunBox2-F9BF_2.4GHz Infra 1 130 Mbit/s 50 \u2582\u2584__ WPA1 WPA2 XX:XX:XX:XX:XX:XX H_Office Infra 2 270 Mbit/s 35 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-xpPhaser 3330 Infra 1 65 Mbit/s 34 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 108 540 Mbit/s 32 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-KRM288x Series Infra 11 54 Mbit/s 22 \u2582___ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 11 130 Mbit/s 20 \u2582___ WPA2 XX:XX:XX:XX:XX:XX DIRECT-ejPhaser 3330 Infra 1 65 Mbit/s 17 \u2582___ WPA2 XX:XX:XX:XX:XX:XX NED-WIFI Infra 11 270 Mbit/s 17 \u2582___ WPA2","title":"MWL002.001 Wi-Fi scanning (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31K-minipcie-verification/#mwl002002-wi-fi-scanning-windows-11","text":"Test description This test aims to verify that the Wi-Fi functionality of card is initialized correctly and can be used from within the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Make sure to have any Wi-Fi signal available Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open PowerShell and execute following command: netsh wlan show network Note the result. Expected result Output should contain 3mdeb_abr and/or 3mdeb_abr_5GHz . Example output: SSID 1 : 3mdeb_abr Network type : Infrastructure Authentication : WPA2-Personal Encryption : CCMP SSID 2 : Sonoff1 192 . 168 . 4 . 208 Hotspot Network type : Infrastructure Authentication : WPA2-Personal Encryption : CCMP SSID 3 : Orange_Swiatlowod_F1A0 Network type : Infrastructure Authentication : WPA2-Personal Encryption : CCMP SSID 4 : Sonoff1 Fallback Hotspot Network type : Infrastructure Authentication : WPA2-Personal Encryption : CCMP SSID 5 : DIRECT-KRM288x Series Network type : Infrastructure Authentication : WPA2-Personal Encryption : CCMP","title":"MWL002.002 Wi-Fi scanning (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31K-minipcie-verification/#mwl003001-bluetooth-scanning-ubuntu-2204","text":"Test description This test aims to verify that the Bluetooth functionality of card is initialized correctly and can be used from within the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Enable Bluetooth and make it discoverable in any device nearby DUT. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following commands: bluetoothctl power on scan on # Wait ~5 seconds devices Expected result The output of the last command should return a list of detectable Bluetooth devices, for example: Device XX:XX:XX:XX:XX:XX Device 1 Device XX:XX:XX:XX:XX:XX Wojtek N Device XX:XX:XX:XX:XX:XX Mi Smart Band 4 Device XX:XX:XX:XX:XX:XX Galaxy Watch4 Classic ( PHLM ) Device XX:XX:XX:XX:XX:XX Galaxy Watch4 Classic ( PHLM ) Device XX:XX:XX:XX:XX:XX Device 2 Device XX:XX:XX:XX:XX:XX [ Signage ] Samsung QMR Series Device XX:XX:XX:XX:XX:XX [ Signage ] Samsung QMR Series Device XX:XX:XX:XX:XX:XX Device 3 Device XX:XX:XX:XX:XX:XX Device 4 Device XX:XX:XX:XX:XX:XX Device 5 Device XX:XX:XX:XX:XX:XX Device 6","title":"MWL003.001 Bluetooth scanning (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31K-minipcie-verification/#mwl003002-bluetooth-scanning-windows-11","text":"Test description This test aims to verify that the Bluetooth functionality of card is initialized correctly and can be used from within the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Enable Bluetooth and make it discoverable in any device nearby DUT Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Enter Notification Center in the bottom right part of the screen. Using right mouse button click on the Bluetooth icon. In shown drop-down menu click Go to settings . Click the + icon described as Add Bluetooth or other device . In the Add a device menu click Bluetooth . Wait a few moments until DUT scans for nearby Bluetooth devices and note the result. Expected result Available Bluetooth devices should appear in the Add a device window.","title":"MWL003.002 Bluetooth scanning (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31K-minipcie-verification/#mwl004001-lte-card-detection-ubuntu-2204","text":"Test description This test aims to verify that the LTE card is detected correctly in the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Plug the LTE card into miniPCIe slot. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute lsusb Expected result The output of the command should return a list of USB devices including LTE module, for example: Bus 001 Device 004 : ID 05c6:9215 Qualcomm, Inc. Quectel EC20 LTE modem","title":"MWL004.001 LTE card detection (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31L-smbios/","text":"Dasharo compatibility: SMBIOS Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Install the dmidecode package: sudo apt-get install dmidecode . DMI001.001 Verify the serial number Test description This test aims to verify that the serial number field is filled in correctly according to the Dasharo SMBIOS guidelines . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: dmidecode -t system In the BIOS Information section, check the Serial number field against the Dasharo SMBIOS guidelines . Expected result The fields should be filled in according to the Dasharo SMBIOS guidelines. DMI002.001 Verify the firmware version Test description This test aims to verify that the firmware version field is filled in correctly according to the Dasharo SMBIOS guidelines . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: dmidecode -t bios In the BIOS Information section, check the Version field against the Dasharo SMBIOS guidelines . Expected result The fields should be filled in according to the Dasharo SMBIOS guidelines. DMI003.001 Verify the firmware product name Test description This test aims to verify that the firmware product name fields are filled in correctly according to the Dasharo SMBIOS guidelines . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: dmidecode -t system In the System Information section, check the Product Name field against the Dasharo SMBIOS guidelines . Execute the following command in the terminal: dmidecode -t baseboard In the Base Board Information section, check the Product Name field against the Dasharo SMBIOS guidelines . Expected result The fields should be filled in according to the Dasharo SMBIOS guidelines. DMI004.001 Verify the firmware release date Test description This test aims to verify that the firmware release date field are filled in correctly according to the Dasharo SMBIOS guidelines . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: dmidecode -t bios In the System Information section, check the Release Date field against the Dasharo SMBIOS guidelines . Expected result The field should be filled in according to the Dasharo SMBIOS guidelines. DMI005.001 Verify the firmware manufacturer Test description This test aims to verify that the firmware manufacturer fields are filled in correctly according to the Dasharo SMBIOS guidelines . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: dmidecode -t system In the System Information section, check the Manufacturer field against the Dasharo SMBIOS guidelines . Execute the following command in the terminal: dmidecode -t baseboard In the Base Board Information section, check the Manufacturer field against the Dasharo SMBIOS guidelines . Expected result The fields should be filled in according to the Dasharo SMBIOS guidelines. DMI006.001 Verify the firmware vendor Test description This test aims to verify that the firmware vendor field is filled in correctly according to the Dasharo SMBIOS guidelines . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: dmidecode -t bios In the BIOS Information section, check the Vendor field against the Dasharo SMBIOS guidelines . Expected result The field should be filled in according to the Dasharo SMBIOS guidelines. DMI007.001 Verify the firmware family Test description This test aims to verify that the firmware family field is filled in correctly according to the Dasharo SMBIOS guidelines . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: dmidecode -t system In the System Information section, check the Family field against the Dasharo SMBIOS guidelines . Expected result The field should be filled in according to the Dasharo SMBIOS guidelines. DMI008.001 Verify the firmware type Test description This test aims to verify that the firmware type field is filled in correctly according to the Dasharo SMBIOS guidelines . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: dmidecode -t chassis In the Chassis Information section, check the Type field against the Dasharo SMBIOS guidelines . Expected result The field should be filled in according to the Dasharo SMBIOS guidelines.","title":"SMBIOS"},{"location":"unified-test-documentation/dasharo-compatibility/31L-smbios/#dasharo-compatibility-smbios","text":"","title":"Dasharo compatibility: SMBIOS"},{"location":"unified-test-documentation/dasharo-compatibility/31L-smbios/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Install the dmidecode package: sudo apt-get install dmidecode .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/31L-smbios/#dmi001001-verify-the-serial-number","text":"Test description This test aims to verify that the serial number field is filled in correctly according to the Dasharo SMBIOS guidelines . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: dmidecode -t system In the BIOS Information section, check the Serial number field against the Dasharo SMBIOS guidelines . Expected result The fields should be filled in according to the Dasharo SMBIOS guidelines.","title":"DMI001.001 Verify the serial number"},{"location":"unified-test-documentation/dasharo-compatibility/31L-smbios/#dmi002001-verify-the-firmware-version","text":"Test description This test aims to verify that the firmware version field is filled in correctly according to the Dasharo SMBIOS guidelines . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: dmidecode -t bios In the BIOS Information section, check the Version field against the Dasharo SMBIOS guidelines . Expected result The fields should be filled in according to the Dasharo SMBIOS guidelines.","title":"DMI002.001 Verify the firmware version"},{"location":"unified-test-documentation/dasharo-compatibility/31L-smbios/#dmi003001-verify-the-firmware-product-name","text":"Test description This test aims to verify that the firmware product name fields are filled in correctly according to the Dasharo SMBIOS guidelines . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: dmidecode -t system In the System Information section, check the Product Name field against the Dasharo SMBIOS guidelines . Execute the following command in the terminal: dmidecode -t baseboard In the Base Board Information section, check the Product Name field against the Dasharo SMBIOS guidelines . Expected result The fields should be filled in according to the Dasharo SMBIOS guidelines.","title":"DMI003.001 Verify the firmware product name"},{"location":"unified-test-documentation/dasharo-compatibility/31L-smbios/#dmi004001-verify-the-firmware-release-date","text":"Test description This test aims to verify that the firmware release date field are filled in correctly according to the Dasharo SMBIOS guidelines . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: dmidecode -t bios In the System Information section, check the Release Date field against the Dasharo SMBIOS guidelines . Expected result The field should be filled in according to the Dasharo SMBIOS guidelines.","title":"DMI004.001 Verify the firmware release date"},{"location":"unified-test-documentation/dasharo-compatibility/31L-smbios/#dmi005001-verify-the-firmware-manufacturer","text":"Test description This test aims to verify that the firmware manufacturer fields are filled in correctly according to the Dasharo SMBIOS guidelines . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: dmidecode -t system In the System Information section, check the Manufacturer field against the Dasharo SMBIOS guidelines . Execute the following command in the terminal: dmidecode -t baseboard In the Base Board Information section, check the Manufacturer field against the Dasharo SMBIOS guidelines . Expected result The fields should be filled in according to the Dasharo SMBIOS guidelines.","title":"DMI005.001 Verify the firmware manufacturer"},{"location":"unified-test-documentation/dasharo-compatibility/31L-smbios/#dmi006001-verify-the-firmware-vendor","text":"Test description This test aims to verify that the firmware vendor field is filled in correctly according to the Dasharo SMBIOS guidelines . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: dmidecode -t bios In the BIOS Information section, check the Vendor field against the Dasharo SMBIOS guidelines . Expected result The field should be filled in according to the Dasharo SMBIOS guidelines.","title":"DMI006.001 Verify the firmware vendor"},{"location":"unified-test-documentation/dasharo-compatibility/31L-smbios/#dmi007001-verify-the-firmware-family","text":"Test description This test aims to verify that the firmware family field is filled in correctly according to the Dasharo SMBIOS guidelines . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: dmidecode -t system In the System Information section, check the Family field against the Dasharo SMBIOS guidelines . Expected result The field should be filled in according to the Dasharo SMBIOS guidelines.","title":"DMI007.001 Verify the firmware family"},{"location":"unified-test-documentation/dasharo-compatibility/31L-smbios/#dmi008001-verify-the-firmware-type","text":"Test description This test aims to verify that the firmware type field is filled in correctly according to the Dasharo SMBIOS guidelines . Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: dmidecode -t chassis In the Chassis Information section, check the Type field against the Dasharo SMBIOS guidelines . Expected result The field should be filled in according to the Dasharo SMBIOS guidelines.","title":"DMI008.001 Verify the firmware type"},{"location":"unified-test-documentation/dasharo-compatibility/31M-emmc-support/","text":"Dasharo Compatibility: eMMC support MMC001.001 eMMC support (Ubuntu 22.04) Test description This test aims to verify detection of the eMMC driver via the Operating System. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute sudo parted -l . Check if the eMMC is present on the list. Expected result The eMMC disk is detected in OS: Model: MMC 8GTF4R ( sd/mmc ) Disk /dev/mmcblk0: 7818MB Sector size ( logical/physical ) : 512B/512B Partition Table: msdos Disk Flags: Number Start End Size Type File system Flags 1 1049kB 538MB 537MB primary fat32 2 538MB 1076MB 538MB primary fat32 boot, esp 3 1077MB 7817MB 6740MB extended 5 1077MB 7817MB 6740MB logical ext4","title":"eMMC support"},{"location":"unified-test-documentation/dasharo-compatibility/31M-emmc-support/#dasharo-compatibility-emmc-support","text":"","title":"Dasharo Compatibility: eMMC support"},{"location":"unified-test-documentation/dasharo-compatibility/31M-emmc-support/#mmc001001-emmc-support-ubuntu-2204","text":"Test description This test aims to verify detection of the eMMC driver via the Operating System. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute sudo parted -l . Check if the eMMC is present on the list. Expected result The eMMC disk is detected in OS: Model: MMC 8GTF4R ( sd/mmc ) Disk /dev/mmcblk0: 7818MB Sector size ( logical/physical ) : 512B/512B Partition Table: msdos Disk Flags: Number Start End Size Type File system Flags 1 1049kB 538MB 537MB primary fat32 2 538MB 1076MB 538MB primary fat32 boot, esp 3 1077MB 7817MB 6740MB extended 5 1077MB 7817MB 6740MB logical ext4","title":"MMC001.001 eMMC support (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/","text":"Dasharo Compatibility: Platform suspend and resume Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . SUSP001.001 Platform suspend and resume (Ubuntu 22.04, wakeup flag) Test description This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, the wakeup flag is tested in this case. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the pm-utils package: sudo apt-get install pm-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command to set the wakeup flag: rtcwake --mode no --seconds 60 Execute the following command to enter the DUT into sleep mode: pm-suspend Wait 60 seconds. Log into the system again. Execute the following command to get the results of suspend process: cat /var/log/pm-suspend.log | grep 'suspend suspend: ' Execute the following command to get the results of resume process: cat /var/log/pm-suspend.log | grep 'resume suspend: ' Note the results. Expected result After entering the second command the DUT should enter sleep mode. The DUT should automatically awaken after 60 seconds. The output of the third and fourth commands should contain information about suspend and resume procedure hooks' status. For none of them, an error message should be returned. Example output for the suspend process: /usr/lib/pm-utils/sleep.d/000kernel-change suspend suspend: success. /usr/lib/pm-utils/sleep.d/000record-status suspend suspend: success. /usr/lib/pm-utils/sleep.d/00logging suspend suspend: success. /usr/lib/pm-utils/sleep.d/00powersave suspend suspend: success. /etc/pm/sleep.d/10_grub-common suspend suspend: success. /etc/pm/sleep.d/10_unattended-upgrades-hibernate suspend suspend: success. /usr/lib/pm-utils/sleep.d/40inputattach suspend suspend: success. /usr/lib/pm-utils/sleep.d/50unload_alx suspend suspend: success. /usr/lib/pm-utils/sleep.d/60_wpa_supplicant suspend suspend: success. /usr/lib/pm-utils/sleep.d/75modules suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/90clock suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/94cpufreq suspend suspend: success. /usr/lib/pm-utils/sleep.d/95hdparm-apm suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/95led suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/98video-quirk-db-handler suspend suspend: success. /usr/lib/pm-utils/sleep.d/99video suspend suspend: success. Example output for the resume process: /usr/lib/pm-utils/sleep.d/99video resume suspend: success. /usr/lib/pm-utils/sleep.d/98video-quirk-db-handler resume suspend: success. /usr/lib/pm-utils/sleep.d/95led resume suspend: not applicable. /usr/lib/pm-utils/sleep.d/95hdparm-apm resume suspend: success. /usr/lib/pm-utils/sleep.d/94cpufreq resume suspend: success. /usr/lib/pm-utils/sleep.d/90clock resume suspend: not applicable. /usr/lib/pm-utils/sleep.d/75modules resume suspend: success. /usr/lib/pm-utils/sleep.d/60_wpa_supplicant resume suspend: success. /usr/lib/pm-utils/sleep.d/50unload_alx resume suspend: success. /usr/lib/pm-utils/sleep.d/40inputattach resume suspend: success. /etc/pm/sleep.d/10_unattended-upgrades-hibernate resume suspend: success. /etc/pm/sleep.d/10_grub-common resume suspend: success. /usr/lib/pm-utils/sleep.d/00powersave resume suspend: success. /usr/lib/pm-utils/sleep.d/00logging resume suspend: success. /usr/lib/pm-utils/sleep.d/000record-status resume suspend: success. /usr/lib/pm-utils/sleep.d/000kernel-change resume suspend: success. SUSP001.003 Platform suspend and resume (QubesOS, wakeup flag) Test description This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, the wakeup flag is tested in this case. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = QubesOS stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window in dom0 and execute the following command to set the wakeup flag: rtcwake --mode no --seconds 60 Execute the following command to enter the DUT into sleep mode: sudo systemctl suspend Wait 60 seconds. Log into the system again. Execute the following command to get the results of process: journalctl | grep systemd-sleep Note the results. Expected result After entering the sudo systemctl suspend command the DUT should enter sleep mode. The output of the second command should contain information about performed suspend and resume operations. Each suspend and resume of the system should be reported in the output of this command with the correct date, an example of reporting one suspend and resume operation: Feb 10 16 :38:55 dom0 systemd-sleep [ 14729 ] : Suspending system... Feb 10 16 :39:10 dom0 systemd-sleep [ 14729 ] : System resumed. SUSP002.001 Platform suspend and resume (Ubuntu 22.04, press key) Test description This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, pressing any key on the keyboard is tested in this case. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the pm-utils package: sudo apt-get install pm-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command to enter DUT into sleep mode: pm-suspend Wait 15 seconds. Press any key on the keyboard to resume the system. Log into the system again. Execute the following command to get the results of suspend process: cat /var/log/pm-suspend.log | grep 'suspend suspend: ' Execute the following command to get the results of resume process: cat /var/log/pm-suspend.log | grep 'resume suspend: ' Note the results. Expected result After entering the first command the DUT should enter sleep mode. The output of the second and third commands should contain information about suspend and resume procedure hooks' status. For none of them, an error message should be returned. Example output for the suspend process: /usr/lib/pm-utils/sleep.d/000kernel-change suspend suspend: success. /usr/lib/pm-utils/sleep.d/000record-status suspend suspend: success. /usr/lib/pm-utils/sleep.d/00logging suspend suspend: success. /usr/lib/pm-utils/sleep.d/00powersave suspend suspend: success. /etc/pm/sleep.d/10_grub-common suspend suspend: success. /etc/pm/sleep.d/10_unattended-upgrades-hibernate suspend suspend: success. /usr/lib/pm-utils/sleep.d/40inputattach suspend suspend: success. /usr/lib/pm-utils/sleep.d/50unload_alx suspend suspend: success. /usr/lib/pm-utils/sleep.d/60_wpa_supplicant suspend suspend: success. /usr/lib/pm-utils/sleep.d/75modules suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/90clock suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/94cpufreq suspend suspend: success. /usr/lib/pm-utils/sleep.d/95hdparm-apm suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/95led suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/98video-quirk-db-handler suspend suspend: success. /usr/lib/pm-utils/sleep.d/99video suspend suspend: success. Example output for the resume process: /usr/lib/pm-utils/sleep.d/99video resume suspend: success. /usr/lib/pm-utils/sleep.d/98video-quirk-db-handler resume suspend: success. /usr/lib/pm-utils/sleep.d/95led resume suspend: not applicable. /usr/lib/pm-utils/sleep.d/95hdparm-apm resume suspend: success. /usr/lib/pm-utils/sleep.d/94cpufreq resume suspend: success. /usr/lib/pm-utils/sleep.d/90clock resume suspend: not applicable. /usr/lib/pm-utils/sleep.d/75modules resume suspend: success. /usr/lib/pm-utils/sleep.d/60_wpa_supplicant resume suspend: success. /usr/lib/pm-utils/sleep.d/50unload_alx resume suspend: success. /usr/lib/pm-utils/sleep.d/40inputattach resume suspend: success. /etc/pm/sleep.d/10_unattended-upgrades-hibernate resume suspend: success. /etc/pm/sleep.d/10_grub-common resume suspend: success. /usr/lib/pm-utils/sleep.d/00powersave resume suspend: success. /usr/lib/pm-utils/sleep.d/00logging resume suspend: success. /usr/lib/pm-utils/sleep.d/000record-status resume suspend: success. /usr/lib/pm-utils/sleep.d/000kernel-change resume suspend: success. SUSP002.003 Platform suspend and resume (QubesOS, press key) Test description This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, pressing any key on the keyboard is tested in this case. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = QubesOS stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window in dom0 and execute the following command to enter the DUT into sleep mode: sudo systemctl suspend Wait 15 seconds. Press any key on the keyboard to resume the system. Log into the system again. Execute the following command to get the results of process: journalctl | grep systemd-sleep Note the results. Expected result After entering the first command the DUT should enter sleep mode. The output of the second command should contain information about performed suspend and resume operations. Each suspend and resume of the system should be reported in the output of this command with the correct date, an example of reporting one suspend and resume operation: Feb 10 16 :38:55 dom0 systemd-sleep [ 14729 ] : Suspending system... Feb 10 16 :39:10 dom0 systemd-sleep [ 14729 ] : System resumed. SUSP003.001 Platform suspend and resume (Ubuntu 22.04, push power button) Test description This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, pushing the power button is tested in this case. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the pm-utils package: sudo apt-get install pm-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command to enter DUT into sleep mode: pm-suspend Wait 15 seconds. Push the power button to resume the system. Log into the system again. Execute the following command to get the results of suspend process: cat /var/log/pm-suspend.log | grep 'suspend suspend: ' Execute the following command to get the results of resume process: cat /var/log/pm-suspend.log | grep 'resume suspend: ' Note the results. Expected result After entering the first command the DUT should enter sleep mode. The output of the second and third commands should contain information about suspend and resume procedure hooks' status. For none of them, an error message should be returned. Example output for the suspend process: /usr/lib/pm-utils/sleep.d/000kernel-change suspend suspend: success. /usr/lib/pm-utils/sleep.d/000record-status suspend suspend: success. /usr/lib/pm-utils/sleep.d/00logging suspend suspend: success. /usr/lib/pm-utils/sleep.d/00powersave suspend suspend: success. /etc/pm/sleep.d/10_grub-common suspend suspend: success. /etc/pm/sleep.d/10_unattended-upgrades-hibernate suspend suspend: success. /usr/lib/pm-utils/sleep.d/40inputattach suspend suspend: success. /usr/lib/pm-utils/sleep.d/50unload_alx suspend suspend: success. /usr/lib/pm-utils/sleep.d/60_wpa_supplicant suspend suspend: success. /usr/lib/pm-utils/sleep.d/75modules suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/90clock suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/94cpufreq suspend suspend: success. /usr/lib/pm-utils/sleep.d/95hdparm-apm suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/95led suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/98video-quirk-db-handler suspend suspend: success. /usr/lib/pm-utils/sleep.d/99video suspend suspend: success. Example output for the resume process: /usr/lib/pm-utils/sleep.d/99video resume suspend: success. /usr/lib/pm-utils/sleep.d/98video-quirk-db-handler resume suspend: success. /usr/lib/pm-utils/sleep.d/95led resume suspend: not applicable. /usr/lib/pm-utils/sleep.d/95hdparm-apm resume suspend: success. /usr/lib/pm-utils/sleep.d/94cpufreq resume suspend: success. /usr/lib/pm-utils/sleep.d/90clock resume suspend: not applicable. /usr/lib/pm-utils/sleep.d/75modules resume suspend: success. /usr/lib/pm-utils/sleep.d/60_wpa_supplicant resume suspend: success. /usr/lib/pm-utils/sleep.d/50unload_alx resume suspend: success. /usr/lib/pm-utils/sleep.d/40inputattach resume suspend: success. /etc/pm/sleep.d/10_unattended-upgrades-hibernate resume suspend: success. /etc/pm/sleep.d/10_grub-common resume suspend: success. /usr/lib/pm-utils/sleep.d/00powersave resume suspend: success. /usr/lib/pm-utils/sleep.d/00logging resume suspend: success. /usr/lib/pm-utils/sleep.d/000record-status resume suspend: success. /usr/lib/pm-utils/sleep.d/000kernel-change resume suspend: success. SUSP003.003 Platform suspend and resume (QubesOS, push power button) Test description This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, pushing the power button is tested in this case. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = QubesOS stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window in dom0 and execute the following command to enter the DUT into sleep mode: sudo systemctl suspend Wait 15 seconds. Push the power button to resume the system. Log into the system again. Execute the following command to get the results of process: journalctl | grep systemd-sleep Note the results. Expected result After entering the first command the DUT should enter sleep mode. The output of the second command should contain information about performed suspend and resume operations. Each suspend and resume of the system should be reported in the output of this command with the correct date, an example of reporting one suspend and resume operation: Feb 10 16 :38:55 dom0 systemd-sleep [ 14729 ] : Suspending system... Feb 10 16 :39:10 dom0 systemd-sleep [ 14729 ] : System resumed. SUSP004.001 Platform suspend and resume (Ubuntu 22.04, Wake-on-LAN) Test description This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, the Wake-on-LAN mechanism is tested in this case. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the pm-utils package: sudo apt-get install pm-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command to obtain the device lowest MAC address: ip address Note, that the output of the above command might include information about all communication interfaces with their MAC addresses. In the Wake-on-LAN procedure, only the lowest MAC address of the active interface will be needed. Execute the following command to enter DUT into sleep mode: pm-suspend Wait 15 seconds. On another active machine execute the following command to send a magic pocket: wakeonlan <DUT MAC address> Log into the system (on the DUT) again. Execute the following command to get the results of suspend process: cat /var/log/pm-suspend.log | grep 'suspend suspend: ' Execute the following command to get the results of resume process: cat /var/log/pm-suspend.log | grep 'resume suspend: ' Note the results. Expected result After entering the first command the DUT should enter sleep mode. The output of the second and third commands should contain information about suspend and resume procedure hooks' status. For none of them, an error message should be returned. Example output for the suspend process: /usr/lib/pm-utils/sleep.d/000kernel-change suspend suspend: success. /usr/lib/pm-utils/sleep.d/000record-status suspend suspend: success. /usr/lib/pm-utils/sleep.d/00logging suspend suspend: success. /usr/lib/pm-utils/sleep.d/00powersave suspend suspend: success. /etc/pm/sleep.d/10_grub-common suspend suspend: success. /etc/pm/sleep.d/10_unattended-upgrades-hibernate suspend suspend: success. /usr/lib/pm-utils/sleep.d/40inputattach suspend suspend: success. /usr/lib/pm-utils/sleep.d/50unload_alx suspend suspend: success. /usr/lib/pm-utils/sleep.d/60_wpa_supplicant suspend suspend: success. /usr/lib/pm-utils/sleep.d/75modules suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/90clock suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/94cpufreq suspend suspend: success. /usr/lib/pm-utils/sleep.d/95hdparm-apm suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/95led suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/98video-quirk-db-handler suspend suspend: success. /usr/lib/pm-utils/sleep.d/99video suspend suspend: success. Example output for the resume process: /usr/lib/pm-utils/sleep.d/99video resume suspend: success. /usr/lib/pm-utils/sleep.d/98video-quirk-db-handler resume suspend: success. /usr/lib/pm-utils/sleep.d/95led resume suspend: not applicable. /usr/lib/pm-utils/sleep.d/95hdparm-apm resume suspend: success. /usr/lib/pm-utils/sleep.d/94cpufreq resume suspend: success. /usr/lib/pm-utils/sleep.d/90clock resume suspend: not applicable. /usr/lib/pm-utils/sleep.d/75modules resume suspend: success. /usr/lib/pm-utils/sleep.d/60_wpa_supplicant resume suspend: success. /usr/lib/pm-utils/sleep.d/50unload_alx resume suspend: success. /usr/lib/pm-utils/sleep.d/40inputattach resume suspend: success. /etc/pm/sleep.d/10_unattended-upgrades-hibernate resume suspend: success. /etc/pm/sleep.d/10_grub-common resume suspend: success. /usr/lib/pm-utils/sleep.d/00powersave resume suspend: success. /usr/lib/pm-utils/sleep.d/00logging resume suspend: success. /usr/lib/pm-utils/sleep.d/000record-status resume suspend: success. /usr/lib/pm-utils/sleep.d/000kernel-change resume suspend: success. SUSP005.001 Cyclic platform suspend and resume (Ubuntu 22.04) Test description This test aims to verify that the DUT platform suspend and resume procedure performed cyclically works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the Firmware test suite package. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo fwts s3 --results-output = stderr Note: suspend test duration is set defaultly to 30 seconds. After that time the device should be woken up automatically. Log into the system again. Note the results. Repeat steps 4-6 to determine the stability of suspend and resume procedure. Expected result Each time, the suspend and resume procedure is performed, the output of the command should contain information about test results (section Test Failure Summary ). The test case passes only if after every iteration of the suspend and resume procedure the summary section shows that all minor tests included in s3 test have been passed. Example output for one iteration: Test Failure Summary ================================================================================ Critical failures: NONE High failures: NONE Medium failures: NONE Low failures: NONE Other failures: NONE Test | Pass | Fail | Abort | Warn | Skip | Info | ---------------+-----+-----+-----+-----+-----+-----+ s3 | 9 | | | | | | ---------------+-----+-----+-----+-----+-----+-----+ Total: | 9 | 0 | 0 | 0 | 0 | 0 | ---------------+-----+-----+-----+-----+-----+-----+","title":"Platform suspend and resume"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/#dasharo-compatibility-platform-suspend-and-resume","text":"","title":"Dasharo Compatibility: Platform suspend and resume"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/#susp001001-platform-suspend-and-resume-ubuntu-2204-wakeup-flag","text":"Test description This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, the wakeup flag is tested in this case. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the pm-utils package: sudo apt-get install pm-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command to set the wakeup flag: rtcwake --mode no --seconds 60 Execute the following command to enter the DUT into sleep mode: pm-suspend Wait 60 seconds. Log into the system again. Execute the following command to get the results of suspend process: cat /var/log/pm-suspend.log | grep 'suspend suspend: ' Execute the following command to get the results of resume process: cat /var/log/pm-suspend.log | grep 'resume suspend: ' Note the results. Expected result After entering the second command the DUT should enter sleep mode. The DUT should automatically awaken after 60 seconds. The output of the third and fourth commands should contain information about suspend and resume procedure hooks' status. For none of them, an error message should be returned. Example output for the suspend process: /usr/lib/pm-utils/sleep.d/000kernel-change suspend suspend: success. /usr/lib/pm-utils/sleep.d/000record-status suspend suspend: success. /usr/lib/pm-utils/sleep.d/00logging suspend suspend: success. /usr/lib/pm-utils/sleep.d/00powersave suspend suspend: success. /etc/pm/sleep.d/10_grub-common suspend suspend: success. /etc/pm/sleep.d/10_unattended-upgrades-hibernate suspend suspend: success. /usr/lib/pm-utils/sleep.d/40inputattach suspend suspend: success. /usr/lib/pm-utils/sleep.d/50unload_alx suspend suspend: success. /usr/lib/pm-utils/sleep.d/60_wpa_supplicant suspend suspend: success. /usr/lib/pm-utils/sleep.d/75modules suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/90clock suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/94cpufreq suspend suspend: success. /usr/lib/pm-utils/sleep.d/95hdparm-apm suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/95led suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/98video-quirk-db-handler suspend suspend: success. /usr/lib/pm-utils/sleep.d/99video suspend suspend: success. Example output for the resume process: /usr/lib/pm-utils/sleep.d/99video resume suspend: success. /usr/lib/pm-utils/sleep.d/98video-quirk-db-handler resume suspend: success. /usr/lib/pm-utils/sleep.d/95led resume suspend: not applicable. /usr/lib/pm-utils/sleep.d/95hdparm-apm resume suspend: success. /usr/lib/pm-utils/sleep.d/94cpufreq resume suspend: success. /usr/lib/pm-utils/sleep.d/90clock resume suspend: not applicable. /usr/lib/pm-utils/sleep.d/75modules resume suspend: success. /usr/lib/pm-utils/sleep.d/60_wpa_supplicant resume suspend: success. /usr/lib/pm-utils/sleep.d/50unload_alx resume suspend: success. /usr/lib/pm-utils/sleep.d/40inputattach resume suspend: success. /etc/pm/sleep.d/10_unattended-upgrades-hibernate resume suspend: success. /etc/pm/sleep.d/10_grub-common resume suspend: success. /usr/lib/pm-utils/sleep.d/00powersave resume suspend: success. /usr/lib/pm-utils/sleep.d/00logging resume suspend: success. /usr/lib/pm-utils/sleep.d/000record-status resume suspend: success. /usr/lib/pm-utils/sleep.d/000kernel-change resume suspend: success.","title":"SUSP001.001 Platform suspend and resume (Ubuntu 22.04, wakeup flag)"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/#susp001003-platform-suspend-and-resume-qubesos-wakeup-flag","text":"Test description This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, the wakeup flag is tested in this case. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = QubesOS stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window in dom0 and execute the following command to set the wakeup flag: rtcwake --mode no --seconds 60 Execute the following command to enter the DUT into sleep mode: sudo systemctl suspend Wait 60 seconds. Log into the system again. Execute the following command to get the results of process: journalctl | grep systemd-sleep Note the results. Expected result After entering the sudo systemctl suspend command the DUT should enter sleep mode. The output of the second command should contain information about performed suspend and resume operations. Each suspend and resume of the system should be reported in the output of this command with the correct date, an example of reporting one suspend and resume operation: Feb 10 16 :38:55 dom0 systemd-sleep [ 14729 ] : Suspending system... Feb 10 16 :39:10 dom0 systemd-sleep [ 14729 ] : System resumed.","title":"SUSP001.003 Platform suspend and resume (QubesOS, wakeup flag)"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/#susp002001-platform-suspend-and-resume-ubuntu-2204-press-key","text":"Test description This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, pressing any key on the keyboard is tested in this case. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the pm-utils package: sudo apt-get install pm-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command to enter DUT into sleep mode: pm-suspend Wait 15 seconds. Press any key on the keyboard to resume the system. Log into the system again. Execute the following command to get the results of suspend process: cat /var/log/pm-suspend.log | grep 'suspend suspend: ' Execute the following command to get the results of resume process: cat /var/log/pm-suspend.log | grep 'resume suspend: ' Note the results. Expected result After entering the first command the DUT should enter sleep mode. The output of the second and third commands should contain information about suspend and resume procedure hooks' status. For none of them, an error message should be returned. Example output for the suspend process: /usr/lib/pm-utils/sleep.d/000kernel-change suspend suspend: success. /usr/lib/pm-utils/sleep.d/000record-status suspend suspend: success. /usr/lib/pm-utils/sleep.d/00logging suspend suspend: success. /usr/lib/pm-utils/sleep.d/00powersave suspend suspend: success. /etc/pm/sleep.d/10_grub-common suspend suspend: success. /etc/pm/sleep.d/10_unattended-upgrades-hibernate suspend suspend: success. /usr/lib/pm-utils/sleep.d/40inputattach suspend suspend: success. /usr/lib/pm-utils/sleep.d/50unload_alx suspend suspend: success. /usr/lib/pm-utils/sleep.d/60_wpa_supplicant suspend suspend: success. /usr/lib/pm-utils/sleep.d/75modules suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/90clock suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/94cpufreq suspend suspend: success. /usr/lib/pm-utils/sleep.d/95hdparm-apm suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/95led suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/98video-quirk-db-handler suspend suspend: success. /usr/lib/pm-utils/sleep.d/99video suspend suspend: success. Example output for the resume process: /usr/lib/pm-utils/sleep.d/99video resume suspend: success. /usr/lib/pm-utils/sleep.d/98video-quirk-db-handler resume suspend: success. /usr/lib/pm-utils/sleep.d/95led resume suspend: not applicable. /usr/lib/pm-utils/sleep.d/95hdparm-apm resume suspend: success. /usr/lib/pm-utils/sleep.d/94cpufreq resume suspend: success. /usr/lib/pm-utils/sleep.d/90clock resume suspend: not applicable. /usr/lib/pm-utils/sleep.d/75modules resume suspend: success. /usr/lib/pm-utils/sleep.d/60_wpa_supplicant resume suspend: success. /usr/lib/pm-utils/sleep.d/50unload_alx resume suspend: success. /usr/lib/pm-utils/sleep.d/40inputattach resume suspend: success. /etc/pm/sleep.d/10_unattended-upgrades-hibernate resume suspend: success. /etc/pm/sleep.d/10_grub-common resume suspend: success. /usr/lib/pm-utils/sleep.d/00powersave resume suspend: success. /usr/lib/pm-utils/sleep.d/00logging resume suspend: success. /usr/lib/pm-utils/sleep.d/000record-status resume suspend: success. /usr/lib/pm-utils/sleep.d/000kernel-change resume suspend: success.","title":"SUSP002.001 Platform suspend and resume (Ubuntu 22.04, press key)"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/#susp002003-platform-suspend-and-resume-qubesos-press-key","text":"Test description This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, pressing any key on the keyboard is tested in this case. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = QubesOS stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window in dom0 and execute the following command to enter the DUT into sleep mode: sudo systemctl suspend Wait 15 seconds. Press any key on the keyboard to resume the system. Log into the system again. Execute the following command to get the results of process: journalctl | grep systemd-sleep Note the results. Expected result After entering the first command the DUT should enter sleep mode. The output of the second command should contain information about performed suspend and resume operations. Each suspend and resume of the system should be reported in the output of this command with the correct date, an example of reporting one suspend and resume operation: Feb 10 16 :38:55 dom0 systemd-sleep [ 14729 ] : Suspending system... Feb 10 16 :39:10 dom0 systemd-sleep [ 14729 ] : System resumed.","title":"SUSP002.003 Platform suspend and resume (QubesOS, press key)"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/#susp003001-platform-suspend-and-resume-ubuntu-2204-push-power-button","text":"Test description This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, pushing the power button is tested in this case. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the pm-utils package: sudo apt-get install pm-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command to enter DUT into sleep mode: pm-suspend Wait 15 seconds. Push the power button to resume the system. Log into the system again. Execute the following command to get the results of suspend process: cat /var/log/pm-suspend.log | grep 'suspend suspend: ' Execute the following command to get the results of resume process: cat /var/log/pm-suspend.log | grep 'resume suspend: ' Note the results. Expected result After entering the first command the DUT should enter sleep mode. The output of the second and third commands should contain information about suspend and resume procedure hooks' status. For none of them, an error message should be returned. Example output for the suspend process: /usr/lib/pm-utils/sleep.d/000kernel-change suspend suspend: success. /usr/lib/pm-utils/sleep.d/000record-status suspend suspend: success. /usr/lib/pm-utils/sleep.d/00logging suspend suspend: success. /usr/lib/pm-utils/sleep.d/00powersave suspend suspend: success. /etc/pm/sleep.d/10_grub-common suspend suspend: success. /etc/pm/sleep.d/10_unattended-upgrades-hibernate suspend suspend: success. /usr/lib/pm-utils/sleep.d/40inputattach suspend suspend: success. /usr/lib/pm-utils/sleep.d/50unload_alx suspend suspend: success. /usr/lib/pm-utils/sleep.d/60_wpa_supplicant suspend suspend: success. /usr/lib/pm-utils/sleep.d/75modules suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/90clock suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/94cpufreq suspend suspend: success. /usr/lib/pm-utils/sleep.d/95hdparm-apm suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/95led suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/98video-quirk-db-handler suspend suspend: success. /usr/lib/pm-utils/sleep.d/99video suspend suspend: success. Example output for the resume process: /usr/lib/pm-utils/sleep.d/99video resume suspend: success. /usr/lib/pm-utils/sleep.d/98video-quirk-db-handler resume suspend: success. /usr/lib/pm-utils/sleep.d/95led resume suspend: not applicable. /usr/lib/pm-utils/sleep.d/95hdparm-apm resume suspend: success. /usr/lib/pm-utils/sleep.d/94cpufreq resume suspend: success. /usr/lib/pm-utils/sleep.d/90clock resume suspend: not applicable. /usr/lib/pm-utils/sleep.d/75modules resume suspend: success. /usr/lib/pm-utils/sleep.d/60_wpa_supplicant resume suspend: success. /usr/lib/pm-utils/sleep.d/50unload_alx resume suspend: success. /usr/lib/pm-utils/sleep.d/40inputattach resume suspend: success. /etc/pm/sleep.d/10_unattended-upgrades-hibernate resume suspend: success. /etc/pm/sleep.d/10_grub-common resume suspend: success. /usr/lib/pm-utils/sleep.d/00powersave resume suspend: success. /usr/lib/pm-utils/sleep.d/00logging resume suspend: success. /usr/lib/pm-utils/sleep.d/000record-status resume suspend: success. /usr/lib/pm-utils/sleep.d/000kernel-change resume suspend: success.","title":"SUSP003.001 Platform suspend and resume (Ubuntu 22.04, push power button)"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/#susp003003-platform-suspend-and-resume-qubesos-push-power-button","text":"Test description This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, pushing the power button is tested in this case. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = QubesOS stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window in dom0 and execute the following command to enter the DUT into sleep mode: sudo systemctl suspend Wait 15 seconds. Push the power button to resume the system. Log into the system again. Execute the following command to get the results of process: journalctl | grep systemd-sleep Note the results. Expected result After entering the first command the DUT should enter sleep mode. The output of the second command should contain information about performed suspend and resume operations. Each suspend and resume of the system should be reported in the output of this command with the correct date, an example of reporting one suspend and resume operation: Feb 10 16 :38:55 dom0 systemd-sleep [ 14729 ] : Suspending system... Feb 10 16 :39:10 dom0 systemd-sleep [ 14729 ] : System resumed.","title":"SUSP003.003 Platform suspend and resume (QubesOS, push power button)"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/#susp004001-platform-suspend-and-resume-ubuntu-2204-wake-on-lan","text":"Test description This test aims to verify that the DUT platform suspend and resume functionality works correctly. As a way to wake up the device, the Wake-on-LAN mechanism is tested in this case. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the pm-utils package: sudo apt-get install pm-utils . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command to obtain the device lowest MAC address: ip address Note, that the output of the above command might include information about all communication interfaces with their MAC addresses. In the Wake-on-LAN procedure, only the lowest MAC address of the active interface will be needed. Execute the following command to enter DUT into sleep mode: pm-suspend Wait 15 seconds. On another active machine execute the following command to send a magic pocket: wakeonlan <DUT MAC address> Log into the system (on the DUT) again. Execute the following command to get the results of suspend process: cat /var/log/pm-suspend.log | grep 'suspend suspend: ' Execute the following command to get the results of resume process: cat /var/log/pm-suspend.log | grep 'resume suspend: ' Note the results. Expected result After entering the first command the DUT should enter sleep mode. The output of the second and third commands should contain information about suspend and resume procedure hooks' status. For none of them, an error message should be returned. Example output for the suspend process: /usr/lib/pm-utils/sleep.d/000kernel-change suspend suspend: success. /usr/lib/pm-utils/sleep.d/000record-status suspend suspend: success. /usr/lib/pm-utils/sleep.d/00logging suspend suspend: success. /usr/lib/pm-utils/sleep.d/00powersave suspend suspend: success. /etc/pm/sleep.d/10_grub-common suspend suspend: success. /etc/pm/sleep.d/10_unattended-upgrades-hibernate suspend suspend: success. /usr/lib/pm-utils/sleep.d/40inputattach suspend suspend: success. /usr/lib/pm-utils/sleep.d/50unload_alx suspend suspend: success. /usr/lib/pm-utils/sleep.d/60_wpa_supplicant suspend suspend: success. /usr/lib/pm-utils/sleep.d/75modules suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/90clock suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/94cpufreq suspend suspend: success. /usr/lib/pm-utils/sleep.d/95hdparm-apm suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/95led suspend suspend: not applicable. /usr/lib/pm-utils/sleep.d/98video-quirk-db-handler suspend suspend: success. /usr/lib/pm-utils/sleep.d/99video suspend suspend: success. Example output for the resume process: /usr/lib/pm-utils/sleep.d/99video resume suspend: success. /usr/lib/pm-utils/sleep.d/98video-quirk-db-handler resume suspend: success. /usr/lib/pm-utils/sleep.d/95led resume suspend: not applicable. /usr/lib/pm-utils/sleep.d/95hdparm-apm resume suspend: success. /usr/lib/pm-utils/sleep.d/94cpufreq resume suspend: success. /usr/lib/pm-utils/sleep.d/90clock resume suspend: not applicable. /usr/lib/pm-utils/sleep.d/75modules resume suspend: success. /usr/lib/pm-utils/sleep.d/60_wpa_supplicant resume suspend: success. /usr/lib/pm-utils/sleep.d/50unload_alx resume suspend: success. /usr/lib/pm-utils/sleep.d/40inputattach resume suspend: success. /etc/pm/sleep.d/10_unattended-upgrades-hibernate resume suspend: success. /etc/pm/sleep.d/10_grub-common resume suspend: success. /usr/lib/pm-utils/sleep.d/00powersave resume suspend: success. /usr/lib/pm-utils/sleep.d/00logging resume suspend: success. /usr/lib/pm-utils/sleep.d/000record-status resume suspend: success. /usr/lib/pm-utils/sleep.d/000kernel-change resume suspend: success.","title":"SUSP004.001 Platform suspend and resume (Ubuntu 22.04, Wake-on-LAN)"},{"location":"unified-test-documentation/dasharo-compatibility/31M-platform-suspend-and-resume/#susp005001-cyclic-platform-suspend-and-resume-ubuntu-2204","text":"Test description This test aims to verify that the DUT platform suspend and resume procedure performed cyclically works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the Firmware test suite package. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo fwts s3 --results-output = stderr Note: suspend test duration is set defaultly to 30 seconds. After that time the device should be woken up automatically. Log into the system again. Note the results. Repeat steps 4-6 to determine the stability of suspend and resume procedure. Expected result Each time, the suspend and resume procedure is performed, the output of the command should contain information about test results (section Test Failure Summary ). The test case passes only if after every iteration of the suspend and resume procedure the summary section shows that all minor tests included in s3 test have been passed. Example output for one iteration: Test Failure Summary ================================================================================ Critical failures: NONE High failures: NONE Medium failures: NONE Low failures: NONE Other failures: NONE Test | Pass | Fail | Abort | Warn | Skip | Info | ---------------+-----+-----+-----+-----+-----+-----+ s3 | 9 | | | | | | ---------------+-----+-----+-----+-----+-----+-----+ Total: | 9 | 0 | 0 | 0 | 0 | 0 | ---------------+-----+-----+-----+-----+-----+-----+","title":"SUSP005.001 Cyclic platform suspend and resume (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31N-usb-boot/","text":"Dasharo Compatibility: USB Boot UBT001.001 USB detect and boot after coldboot Test description This test aims to verify that the DUT properly detects USB device and boots into the operating system after coldboot (reboot realized by power supply cutting off then restoring back). This test case may be re-done several times to specify the platform and connection stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Generic test setup: firmware . Test steps Cut the power off. Restore power to the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Check if USB_STICK entry is available. Select the proper number for USB_STICK option. Wait for Debian GNU/Linux . Expected result The Debian GNU/Linux is visible and confirms successful boot into OS after coldboot. UBT002.001 USB detect and boot after warmboot Test description This test aims to verify that the DUT properly detects USB device and boots into the operating system after warmboot (reboot realized by device turning off then turning on). This test case may be re-done several times to specify the platform and connection stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Check if USB_STICK entry is available. Select the proper number for USB_STICK option. Wait for Debian GNU/Linux . Expected result The Debian GNU/Linux is visible and confirms successful boot into OS after warmboot. UBT003.001 USB detect and boot after system reboot Test description This test aims to verify that the DUT properly detects USB device and boots into the operating system after system reboot (reboot performed by relevant command). This test case may be re-done several times to specify the platform and connection stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Check if USB_STICK entry is available. Select the proper number for USB_STICK option. Wait for Debian GNU/Linux . Wait for debian login: . Type the root login. Wait for Password: . Type the proper password. Wait for root@debian:~# . Execute reboot command. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Check if USB_STICK entry is available. Select the proper number for USB_STICK option. Wait for Debian GNU/Linux . Expected result The Debian GNU/Linux is visible and confirms successful boot into OS after system reboot.","title":"USB booting"},{"location":"unified-test-documentation/dasharo-compatibility/31N-usb-boot/#dasharo-compatibility-usb-boot","text":"","title":"Dasharo Compatibility: USB Boot"},{"location":"unified-test-documentation/dasharo-compatibility/31N-usb-boot/#ubt001001-usb-detect-and-boot-after-coldboot","text":"Test description This test aims to verify that the DUT properly detects USB device and boots into the operating system after coldboot (reboot realized by power supply cutting off then restoring back). This test case may be re-done several times to specify the platform and connection stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Generic test setup: firmware . Test steps Cut the power off. Restore power to the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Check if USB_STICK entry is available. Select the proper number for USB_STICK option. Wait for Debian GNU/Linux . Expected result The Debian GNU/Linux is visible and confirms successful boot into OS after coldboot.","title":"UBT001.001 USB detect and boot after coldboot"},{"location":"unified-test-documentation/dasharo-compatibility/31N-usb-boot/#ubt002001-usb-detect-and-boot-after-warmboot","text":"Test description This test aims to verify that the DUT properly detects USB device and boots into the operating system after warmboot (reboot realized by device turning off then turning on). This test case may be re-done several times to specify the platform and connection stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Check if USB_STICK entry is available. Select the proper number for USB_STICK option. Wait for Debian GNU/Linux . Expected result The Debian GNU/Linux is visible and confirms successful boot into OS after warmboot.","title":"UBT002.001 USB detect and boot after warmboot"},{"location":"unified-test-documentation/dasharo-compatibility/31N-usb-boot/#ubt003001-usb-detect-and-boot-after-system-reboot","text":"Test description This test aims to verify that the DUT properly detects USB device and boots into the operating system after system reboot (reboot performed by relevant command). This test case may be re-done several times to specify the platform and connection stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Check if USB_STICK entry is available. Select the proper number for USB_STICK option. Wait for Debian GNU/Linux . Wait for debian login: . Type the root login. Wait for Password: . Type the proper password. Wait for root@debian:~# . Execute reboot command. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Check if USB_STICK entry is available. Select the proper number for USB_STICK option. Wait for Debian GNU/Linux . Expected result The Debian GNU/Linux is visible and confirms successful boot into OS after system reboot.","title":"UBT003.001 USB detect and boot after system reboot"},{"location":"unified-test-documentation/dasharo-compatibility/31O-usb-detect/","text":"Dasharo Compatibility: USB Detection UDT001.001 USB detection after coldboot Test description This test aims to verify that the DUT properly detects USB device after coldboot (reboot realized by power supply cutting off then restoring back). This test case may be re-done several times to specify the platform and connection stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Generic test setup: firmware . Test steps Cut the power off. Restore power to the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Check if USB_STICK entry is available. Expected result The USB_STICK entry is visible which confirms successful detection after coldboot. UDT002.001 USB detection after warmboot Test description This test aims to verify that the DUT properly detects USB device after warmboot (reboot realized by device turning off then turning on). This test case may be re-done several times to specify the platform and connection stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Check if USB_STICK entry is available. Expected result The USB_STICK entry is visible which confirms successful detection after warmboot. UDT003.001 USB detection after system reboot Test description This test aims to verify that the DUT properly detects USB device after system reboot (reboot performed by relevant command). This test case may be re-done several times to specify the platform and connection stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Check if USB_STICK entry is available. Select the key with a proper number for iPXE . Press Ctrl+B when prompted to stop iPXE from booting automatically. Wait until iPXE> prompt appears. Type in dhcp to obtain an IP address. Type in chain and local iPXE address after a single space to load a network boot menu. Select Debian stable netboot 4.14.y option below iPXE boot menu header. Wait for debian login: . Type the root login. Wait for Password: . Type the proper password. Wait for root@debian:~# . Execute reboot command. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Check if USB_STICK entry is available. Expected result The USB_STICK entry is visible which confirms successful detection after system reboot.","title":"USB detection"},{"location":"unified-test-documentation/dasharo-compatibility/31O-usb-detect/#dasharo-compatibility-usb-detection","text":"","title":"Dasharo Compatibility: USB Detection"},{"location":"unified-test-documentation/dasharo-compatibility/31O-usb-detect/#udt001001-usb-detection-after-coldboot","text":"Test description This test aims to verify that the DUT properly detects USB device after coldboot (reboot realized by power supply cutting off then restoring back). This test case may be re-done several times to specify the platform and connection stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Generic test setup: firmware . Test steps Cut the power off. Restore power to the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Check if USB_STICK entry is available. Expected result The USB_STICK entry is visible which confirms successful detection after coldboot.","title":"UDT001.001 USB detection after coldboot"},{"location":"unified-test-documentation/dasharo-compatibility/31O-usb-detect/#udt002001-usb-detection-after-warmboot","text":"Test description This test aims to verify that the DUT properly detects USB device after warmboot (reboot realized by device turning off then turning on). This test case may be re-done several times to specify the platform and connection stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Check if USB_STICK entry is available. Expected result The USB_STICK entry is visible which confirms successful detection after warmboot.","title":"UDT002.001 USB detection after warmboot"},{"location":"unified-test-documentation/dasharo-compatibility/31O-usb-detect/#udt003001-usb-detection-after-system-reboot","text":"Test description This test aims to verify that the DUT properly detects USB device after system reboot (reboot performed by relevant command). This test case may be re-done several times to specify the platform and connection stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Check if USB_STICK entry is available. Select the key with a proper number for iPXE . Press Ctrl+B when prompted to stop iPXE from booting automatically. Wait until iPXE> prompt appears. Type in dhcp to obtain an IP address. Type in chain and local iPXE address after a single space to load a network boot menu. Select Debian stable netboot 4.14.y option below iPXE boot menu header. Wait for debian login: . Type the root login. Wait for Password: . Type the proper password. Wait for root@debian:~# . Execute reboot command. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Check if USB_STICK entry is available. Expected result The USB_STICK entry is visible which confirms successful detection after system reboot.","title":"UDT003.001 USB detection after system reboot"},{"location":"unified-test-documentation/dasharo-compatibility/31P-flash-write-protection/","text":"Dasharo Security: Flash write protection Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Make yourself familiar with SPI hardware write protection . HWP001.001 Hardware flash write protection support Test description This test aims to verify whether the DUT supports hardware write protection mechanism. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: sudo ./flashrom -p internal --wp-list Expected result The output of the command should contain the information about lst of available write protection ranges, example has been shown below: Available write protection ranges: start = 0x00000000 length = 0x00000000 ( none ) start = 0x00000000 length = 0x00001000 ( lower 1 /2048 ) start = 0x007ff000 length = 0x00001000 ( upper 1 /2048 ) start = 0x00000000 length = 0x00002000 ( lower 1 /1024 ) start = 0x007fe000 length = 0x00002000 ( upper 1 /1024 ) start = 0x00000000 length = 0x00004000 ( lower 1 /512 ) start = 0x007fc000 length = 0x00004000 ( upper 1 /512 ) start = 0x00000000 length = 0x00008000 ( lower 1 /256 ) start = 0x007f8000 length = 0x00008000 ( upper 1 /256 ) start = 0x00000000 length = 0x00020000 ( lower 1 /64 ) start = 0x007e0000 length = 0x00020000 ( upper 1 /64 ) start = 0x00000000 length = 0x00040000 ( lower 1 /32 ) start = 0x007c0000 length = 0x00040000 ( upper 1 /32 ) start = 0x00000000 length = 0x00080000 ( lower 1 /16 ) start = 0x00780000 length = 0x00080000 ( upper 1 /16 ) start = 0x00000000 length = 0x00100000 ( lower 1 /8 ) start = 0x00700000 length = 0x00100000 ( upper 1 /8 ) start = 0x00000000 length = 0x00200000 ( lower 1 /4 ) start = 0x00600000 length = 0x00200000 ( upper 1 /4 ) start = 0x00000000 length = 0x00400000 ( lower 1 /2 ) start = 0x00400000 length = 0x00400000 ( upper 1 /2 ) start = 0x00000000 length = 0x00600000 ( lower 3 /4 ) start = 0x00200000 length = 0x00600000 ( upper 3 /4 ) start = 0x00000000 length = 0x00700000 ( lower 7 /8 ) start = 0x00100000 length = 0x00700000 ( upper 7 /8 ) start = 0x00000000 length = 0x00780000 ( lower 15 /16 ) start = 0x00080000 length = 0x00780000 ( upper 15 /16 ) start = 0x00000000 length = 0x007c0000 ( lower 31 /32 ) start = 0x00040000 length = 0x007c0000 ( upper 31 /32 ) start = 0x00000000 length = 0x007e0000 ( lower 63 /64 ) start = 0x00020000 length = 0x007e0000 ( upper 63 /64 ) start = 0x00000000 length = 0x007f8000 ( lower 255 /256 ) start = 0x00008000 length = 0x007f8000 ( upper 255 /256 ) start = 0x00000000 length = 0x007fc000 ( lower 511 /512 ) start = 0x00004000 length = 0x007fc000 ( upper 511 /512 ) start = 0x00000000 length = 0x007fe000 ( lower 1023 /1024 ) start = 0x00002000 length = 0x007fe000 ( upper 1023 /1024 ) start = 0x00000000 length = 0x007ff000 ( lower 2047 /2048 ) start = 0x00001000 length = 0x007ff000 ( upper 2047 /2048 ) start = 0x00000000 length = 0x00800000 ( all ) HWP002.001 Hardware flash write protection enable / disable Test description This test aims to verify whether there is a possibility to set and erase hardware write protection on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Test cases common documentation section. Test steps Based on the documentation erase current write protection. Based on the documentation set write protection for a specific range. Execute the following command in the terminal to check the status and the range of write protection: sudo ./flashrom -p internal --wp-status Expected result The output of the command should contain the information about protection mode: Protection mode: hardware Protection range: read from the command output and set before should be the same.","title":"Flash write protection"},{"location":"unified-test-documentation/dasharo-compatibility/31P-flash-write-protection/#dasharo-security-flash-write-protection","text":"","title":"Dasharo Security: Flash write protection"},{"location":"unified-test-documentation/dasharo-compatibility/31P-flash-write-protection/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Make yourself familiar with SPI hardware write protection .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/31P-flash-write-protection/#hwp001001-hardware-flash-write-protection-support","text":"Test description This test aims to verify whether the DUT supports hardware write protection mechanism. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: sudo ./flashrom -p internal --wp-list Expected result The output of the command should contain the information about lst of available write protection ranges, example has been shown below: Available write protection ranges: start = 0x00000000 length = 0x00000000 ( none ) start = 0x00000000 length = 0x00001000 ( lower 1 /2048 ) start = 0x007ff000 length = 0x00001000 ( upper 1 /2048 ) start = 0x00000000 length = 0x00002000 ( lower 1 /1024 ) start = 0x007fe000 length = 0x00002000 ( upper 1 /1024 ) start = 0x00000000 length = 0x00004000 ( lower 1 /512 ) start = 0x007fc000 length = 0x00004000 ( upper 1 /512 ) start = 0x00000000 length = 0x00008000 ( lower 1 /256 ) start = 0x007f8000 length = 0x00008000 ( upper 1 /256 ) start = 0x00000000 length = 0x00020000 ( lower 1 /64 ) start = 0x007e0000 length = 0x00020000 ( upper 1 /64 ) start = 0x00000000 length = 0x00040000 ( lower 1 /32 ) start = 0x007c0000 length = 0x00040000 ( upper 1 /32 ) start = 0x00000000 length = 0x00080000 ( lower 1 /16 ) start = 0x00780000 length = 0x00080000 ( upper 1 /16 ) start = 0x00000000 length = 0x00100000 ( lower 1 /8 ) start = 0x00700000 length = 0x00100000 ( upper 1 /8 ) start = 0x00000000 length = 0x00200000 ( lower 1 /4 ) start = 0x00600000 length = 0x00200000 ( upper 1 /4 ) start = 0x00000000 length = 0x00400000 ( lower 1 /2 ) start = 0x00400000 length = 0x00400000 ( upper 1 /2 ) start = 0x00000000 length = 0x00600000 ( lower 3 /4 ) start = 0x00200000 length = 0x00600000 ( upper 3 /4 ) start = 0x00000000 length = 0x00700000 ( lower 7 /8 ) start = 0x00100000 length = 0x00700000 ( upper 7 /8 ) start = 0x00000000 length = 0x00780000 ( lower 15 /16 ) start = 0x00080000 length = 0x00780000 ( upper 15 /16 ) start = 0x00000000 length = 0x007c0000 ( lower 31 /32 ) start = 0x00040000 length = 0x007c0000 ( upper 31 /32 ) start = 0x00000000 length = 0x007e0000 ( lower 63 /64 ) start = 0x00020000 length = 0x007e0000 ( upper 63 /64 ) start = 0x00000000 length = 0x007f8000 ( lower 255 /256 ) start = 0x00008000 length = 0x007f8000 ( upper 255 /256 ) start = 0x00000000 length = 0x007fc000 ( lower 511 /512 ) start = 0x00004000 length = 0x007fc000 ( upper 511 /512 ) start = 0x00000000 length = 0x007fe000 ( lower 1023 /1024 ) start = 0x00002000 length = 0x007fe000 ( upper 1023 /1024 ) start = 0x00000000 length = 0x007ff000 ( lower 2047 /2048 ) start = 0x00001000 length = 0x007ff000 ( upper 2047 /2048 ) start = 0x00000000 length = 0x00800000 ( all )","title":"HWP001.001 Hardware flash write protection support"},{"location":"unified-test-documentation/dasharo-compatibility/31P-flash-write-protection/#hwp002001-hardware-flash-write-protection-enable-disable","text":"Test description This test aims to verify whether there is a possibility to set and erase hardware write protection on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Test cases common documentation section. Test steps Based on the documentation erase current write protection. Based on the documentation set write protection for a specific range. Execute the following command in the terminal to check the status and the range of write protection: sudo ./flashrom -p internal --wp-status Expected result The output of the command should contain the information about protection mode: Protection mode: hardware Protection range: read from the command output and set before should be the same.","title":"HWP002.001 Hardware flash write protection enable / disable"},{"location":"unified-test-documentation/dasharo-compatibility/31R-pcie-ports/","text":"Dasharo Compatibility: PCI Express ports support Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . PEX001.001 PCI Express card detection (Ubuntu 22.04) Test description This test aims to verify that the PCI Express extension card is enumerated correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Plug the PCI Express extension card to the tested slot. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: lspci Expected result The output of the command should contain the plugged device name: 01 :00.0 VGA compatible controller: Advanced Micro Devices, Inc. [ AMD/ATI ] Turks PRO [ Radeon HD 7570 ] The exact name and revision may be different depending on hardware configuration. PEX001.002 PCI Express card detection (Windows 11) Test description This test aims to verify that the Wi-Fi/Bluetooth card is enumerated correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Plug the PCI Express extension card to the tested slot. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open Device Manager and find the plugged device Note the device status. Expected result The device status in the Device Manager should indicate that the device is working properly and has no problems.","title":"Dasharo Compatibility: PCI Express ports support"},{"location":"unified-test-documentation/dasharo-compatibility/31R-pcie-ports/#dasharo-compatibility-pci-express-ports-support","text":"","title":"Dasharo Compatibility: PCI Express ports support"},{"location":"unified-test-documentation/dasharo-compatibility/31R-pcie-ports/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/31R-pcie-ports/#pex001001-pci-express-card-detection-ubuntu-2204","text":"Test description This test aims to verify that the PCI Express extension card is enumerated correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Plug the PCI Express extension card to the tested slot. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: lspci Expected result The output of the command should contain the plugged device name: 01 :00.0 VGA compatible controller: Advanced Micro Devices, Inc. [ AMD/ATI ] Turks PRO [ Radeon HD 7570 ] The exact name and revision may be different depending on hardware configuration.","title":"PEX001.001 PCI Express card detection (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31R-pcie-ports/#pex001002-pci-express-card-detection-windows-11","text":"Test description This test aims to verify that the Wi-Fi/Bluetooth card is enumerated correctly and can be detected from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Plug the PCI Express extension card to the tested slot. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open Device Manager and find the plugged device Note the device status. Expected result The device status in the Device Manager should indicate that the device is working properly and has no problems.","title":"PEX001.002 PCI Express card detection (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31S-sata-led-and-pc-speaker-error-indication/","text":"Dasharo Compatibility: SATA LED and PC speaker error indication ERR001.001 SATA LED and PC speaker error indication support (firmware) Test description This test aims to verify if SATA LED blink and PC speaker beeps on critical firmware errors. Test configuration data FIRMWARE = Dasharo DUT with PC speaker DUT with SATA LED DUT with removable RAM modules. Test setup Proceed with the Generic test setup: firmware . Test steps Remove power from DUT. Remove all RAM memory modules from the DUT. Connect power supply and power on the DUT. Observe the DUT starts blinking the SATA LED and beeps with PC speaker. Expected result When no memory modules are connected, this is considered a critical firmware error and the platform can not proceed with booting. Error indication path will be triggered causing the platform to beep and blink the SATA LED. There should be only 12 beeps, but the SATA LED should blink endlessly (until DUT is powered off or reset).","title":"SATA LED and PC speaker error indication"},{"location":"unified-test-documentation/dasharo-compatibility/31S-sata-led-and-pc-speaker-error-indication/#dasharo-compatibility-sata-led-and-pc-speaker-error-indication","text":"","title":"Dasharo Compatibility: SATA LED and PC speaker error indication"},{"location":"unified-test-documentation/dasharo-compatibility/31S-sata-led-and-pc-speaker-error-indication/#err001001-sata-led-and-pc-speaker-error-indication-support-firmware","text":"Test description This test aims to verify if SATA LED blink and PC speaker beeps on critical firmware errors. Test configuration data FIRMWARE = Dasharo DUT with PC speaker DUT with SATA LED DUT with removable RAM modules. Test setup Proceed with the Generic test setup: firmware . Test steps Remove power from DUT. Remove all RAM memory modules from the DUT. Connect power supply and power on the DUT. Observe the DUT starts blinking the SATA LED and beeps with PC speaker. Expected result When no memory modules are connected, this is considered a critical firmware error and the platform can not proceed with booting. Error indication path will be triggered causing the platform to beep and blink the SATA LED. There should be only 12 beeps, but the SATA LED should blink endlessly (until DUT is powered off or reset).","title":"ERR001.001 SATA LED and PC speaker error indication support (firmware)"},{"location":"unified-test-documentation/dasharo-compatibility/31T-cpu-status/","text":"Dasharo Compatibility: CPU Status Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . CPU001.001 CPU works (Ubuntu 22.04) Test description Check whether the mounted on the DUT CPU works. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM screen should be displayed. CPU001.002 CPU works (Windows 11) Test description Check whether the mounted on the DUT CPU works. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM screen should be displayed. CPU002.001 CPU cache enabled (Ubuntu 22.04) Test description Check whether all declared for the DUT cache levels are enabled. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot. Execute below command in terminal: getconf -a | grep CACHE Note the result. Expected result The output of the command should contain information about all cache levels, their size and association. Example output: LEVEL1_ICACHE_SIZE 32768 LEVEL1_ICACHE_ASSOC 32 LEVEL1_ICACHE_LINESIZE 128 LEVEL1_DCACHE_SIZE 32768 LEVEL1_DCACHE_ASSOC 32 LEVEL1_DCACHE_LINESIZE 128 LEVEL2_CACHE_SIZE 524288 LEVEL2_CACHE_ASSOC 2048 LEVEL2_CACHE_LINESIZE 32 LEVEL3_CACHE_SIZE 10485760 LEVEL3_CACHE_ASSOC 40960 LEVEL3_CACHE_LINESIZE 32 LEVEL4_CACHE_SIZE 0 LEVEL4_CACHE_ASSOC 0 LEVEL4_CACHE_LINESIZE 0 CPU002.002 CPU cache enabled (Windows 11) Test description Check whether all declared for the DUT cache levels are enabled. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot. Run PowerShell as an administrator and execute command: Get-Wmiobject -class win32_cachememory | fl Purpose , CacheType , InstalledSize Note the result. Expected result The output of the command should contain information about all cache levels, their size and association. Example output: Purpose : CACHE1 CacheType : 4 InstalledSize : 192 Purpose : CACHE1 CacheType : 3 InstalledSize : 128 Purpose : CACHE2 CacheType : 5 InstalledSize : 5120 Purpose : CACHE3 CacheType : 5 InstalledSize : 8192 CPU003.001 Multiple CPU support (Ubuntu 22.04) Test description Check whether the DUT has multiple CPU support. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot. Execute below command in terminal: lscpu Note the result. Expected result The output of the command should contain basic information about the CPU, including the number of the CPU (s) . If CPU(s) are more than 1, the DUT has multiple CPU support. Example results: Architecture: ppc64le Byte Order: Little Endian CPU ( s ) : 32 On-line CPU ( s ) list: 0 -31 Thread ( s ) per core: 4 Core ( s ) per socket: 4 Socket ( s ) : 2 NUMA node ( s ) : 2 CPU003.002 Multiple CPU support (Windows 11) Test description Check whether the DUT has multiple CPU support. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot. Run PowerShell as an administrator and execute command: WMIC CPU Get NumberOfCores Note the result. Expected result The output of the command should contain information about the CPUs. Example results: NumberOfCores 4 CPU004.001 Multiple-core support (Ubuntu 22.04) Test description Check whether the DUT has multi-core support. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot. Execute below command in terminal: lscpu Note the result. Expected result The output of the command should contain basic information about the CPU, including the number of the Core(s) per socket . If Core(s) per socket are more than 1, the DUT has multi-core support. Example results: Architecture: ppc64le Byte Order: Little Endian CPU ( s ) : 32 On-line CPU ( s ) list: 0 -31 Thread ( s ) per core: 4 Core ( s ) per socket: 4 Socket ( s ) : 2 NUMA node ( s ) : 2 CPU004.002 Multiple-core support (Windows 11) Test description Check whether the DUT has multi-core support. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot. Run PowerShell as an administrator and check total CPU cores by executing command: WMIC CPU Get NumberOfCores Note the result. Check total CPU socket number by executing command: ( Get-CimInstance -ClassName Win32_ComputerSystem ). NumberOfProcessors Note the result. Expected result If number of cores is higher than number of sockets then DUT has multi-core support. Example outputs: 1st command: NumberOfCores 4 2nd command: 1","title":"CPU status"},{"location":"unified-test-documentation/dasharo-compatibility/31T-cpu-status/#dasharo-compatibility-cpu-status","text":"","title":"Dasharo Compatibility: CPU Status"},{"location":"unified-test-documentation/dasharo-compatibility/31T-cpu-status/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/31T-cpu-status/#cpu001001-cpu-works-ubuntu-2204","text":"Test description Check whether the mounted on the DUT CPU works. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM screen should be displayed.","title":"CPU001.001 CPU works (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31T-cpu-status/#cpu001002-cpu-works-windows-11","text":"Test description Check whether the mounted on the DUT CPU works. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM screen should be displayed.","title":"CPU001.002 CPU works (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31T-cpu-status/#cpu002001-cpu-cache-enabled-ubuntu-2204","text":"Test description Check whether all declared for the DUT cache levels are enabled. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot. Execute below command in terminal: getconf -a | grep CACHE Note the result. Expected result The output of the command should contain information about all cache levels, their size and association. Example output: LEVEL1_ICACHE_SIZE 32768 LEVEL1_ICACHE_ASSOC 32 LEVEL1_ICACHE_LINESIZE 128 LEVEL1_DCACHE_SIZE 32768 LEVEL1_DCACHE_ASSOC 32 LEVEL1_DCACHE_LINESIZE 128 LEVEL2_CACHE_SIZE 524288 LEVEL2_CACHE_ASSOC 2048 LEVEL2_CACHE_LINESIZE 32 LEVEL3_CACHE_SIZE 10485760 LEVEL3_CACHE_ASSOC 40960 LEVEL3_CACHE_LINESIZE 32 LEVEL4_CACHE_SIZE 0 LEVEL4_CACHE_ASSOC 0 LEVEL4_CACHE_LINESIZE 0","title":"CPU002.001 CPU cache enabled (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31T-cpu-status/#cpu002002-cpu-cache-enabled-windows-11","text":"Test description Check whether all declared for the DUT cache levels are enabled. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot. Run PowerShell as an administrator and execute command: Get-Wmiobject -class win32_cachememory | fl Purpose , CacheType , InstalledSize Note the result. Expected result The output of the command should contain information about all cache levels, their size and association. Example output: Purpose : CACHE1 CacheType : 4 InstalledSize : 192 Purpose : CACHE1 CacheType : 3 InstalledSize : 128 Purpose : CACHE2 CacheType : 5 InstalledSize : 5120 Purpose : CACHE3 CacheType : 5 InstalledSize : 8192","title":"CPU002.002 CPU cache enabled (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31T-cpu-status/#cpu003001-multiple-cpu-support-ubuntu-2204","text":"Test description Check whether the DUT has multiple CPU support. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot. Execute below command in terminal: lscpu Note the result. Expected result The output of the command should contain basic information about the CPU, including the number of the CPU (s) . If CPU(s) are more than 1, the DUT has multiple CPU support. Example results: Architecture: ppc64le Byte Order: Little Endian CPU ( s ) : 32 On-line CPU ( s ) list: 0 -31 Thread ( s ) per core: 4 Core ( s ) per socket: 4 Socket ( s ) : 2 NUMA node ( s ) : 2","title":"CPU003.001 Multiple CPU support (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31T-cpu-status/#cpu003002-multiple-cpu-support-windows-11","text":"Test description Check whether the DUT has multiple CPU support. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot. Run PowerShell as an administrator and execute command: WMIC CPU Get NumberOfCores Note the result. Expected result The output of the command should contain information about the CPUs. Example results: NumberOfCores 4","title":"CPU003.002 Multiple CPU support (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31T-cpu-status/#cpu004001-multiple-core-support-ubuntu-2204","text":"Test description Check whether the DUT has multi-core support. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot. Execute below command in terminal: lscpu Note the result. Expected result The output of the command should contain basic information about the CPU, including the number of the Core(s) per socket . If Core(s) per socket are more than 1, the DUT has multi-core support. Example results: Architecture: ppc64le Byte Order: Little Endian CPU ( s ) : 32 On-line CPU ( s ) list: 0 -31 Thread ( s ) per core: 4 Core ( s ) per socket: 4 Socket ( s ) : 2 NUMA node ( s ) : 2","title":"CPU004.001 Multiple-core support (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/31T-cpu-status/#cpu004002-multiple-core-support-windows-11","text":"Test description Check whether the DUT has multi-core support. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the OPERATING_SYSTEM to boot. Run PowerShell as an administrator and check total CPU cores by executing command: WMIC CPU Get NumberOfCores Note the result. Check total CPU socket number by executing command: ( Get-CimInstance -ClassName Win32_ComputerSystem ). NumberOfProcessors Note the result. Expected result If number of cores is higher than number of sockets then DUT has multi-core support. Example outputs: 1st command: NumberOfCores 4 2nd command: 1","title":"CPU004.002 Multiple-core support (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/","text":"Dasharo Compatibility: Heads bootloader support Test cases common documentation Test setup Proceed with the Generic test setup: firmware . HDS001.001 Heads installation Test description This test aims to verify that Heads could be installed on the DUT. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Flash bootkernel partition with Heads in accordance with the documentation . Expected result The output of the pflash command should contain information, that flashing procedure has been ended without any errors. Example output: Programming & Verifying... [==================================================] 100 % ETA:0s HDS002.001 Boot into Heads Test description This test aims to verify that the DUT during the booting procedure reaches Heads bootloader. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Heads to boot and note the result. Expected result The Heads bootloader screen should be displayed. HDS003.001 Boot from USB option is available and works correctly Test description This test aims to verify that the Boot from USB option in the Default boot menu is available (if there is no option to boot OS from the Hard Disk) and allows to boot system mounted on the USB. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. USB storage with the installed OS. Test steps Plug the USB storage into DUT. Power on the DUT. Wait for the Default boot menu appears. Select Boot from USB option using the arrow keys and Enter. Select a partition from the USB storage from which the system will be booted. Note the results. Expected result The operating system from USB storage should boot properly. HDS004.001 Continue to the main menu option is available and works correctly Test description This test aims to verify that the Continue to the main menu option in the Default boot menu is available and works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Note the results. Expected result After selecting Continue to the main menu , the Heads Boot Menu should be displayed. HDS005.001 Exit to recovery shell option is available and works correctly Test description This test aims to verify that the Exit to recovery shell option in the Default boot menu is available and works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Exit to recovery shell option using the arrow keys and Enter. Note the results. Expected result After selecting Exit to recovery shell , the recovery shell should be shown. Example output: !!!!! User requested recovery shell !!!!! Starting recovery shell ~ # HDS006.001 Default boot option is available and works correctly Test description This test aims to verify that the Default boot option in the Heads boot menu is available and works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Default boot option in the Heads boot menu . Note the results. Expected result After selecting Default boot , the Default boot menu should be displayed. HDS007.001 Options submenu is available and works correctly Test description This test aims to verify that the Options --> option in the Heads boot menu is available and works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Note the results. Expected result After selecting Options --> , the HEADS Options menu should be displayed. Example view of HEADS Options : b Boot Options --> t TPM/TOTP/HOTP Options --> u Update checksums and sign all files in /boot c Change configuration settings --> f Flash/Update the BIOS --> g GPG Options --> F OEM Factory Reset --> x Exit to recovery shell r <-- Return to main menu HDS008.001 System info option is available and works correctly Test description This test aims to verify that the System Info option in the Heads boot menu allows displaying all basic system information. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the System Info option in the Heads boot menu . Note the results. Expected result After selecting System Info , the basic system information should be displayed. Example output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 System Info \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 Talos 2 Server \u2502 \u2502 \u2502 \u2502 FW_VER: v0.5.0 \u2502 \u2502 Kernel: Linux 5 .5.0-openpower1 \u2502 \u2502 \u2502 \u2502 CPU: IBM POWER9 \u201cSforza\u201d \u2502 \u2502 RAM: 8 GB \u2502 \u2502 \u2502 \u2502 Disk /dev/nvme0n1: 477 GB \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <Ok> \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 HDS009.001 Power off option is available and works correctly Test description This test aims to verify that the Power Off option in the Heads boot menu allows turning off the DUT. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Power Off option in the Heads boot menu . Note the results. Expected result After selecting Power Off , the DUT should be turned off without any complications. HDS010.001 OEM Factory Reset option is available and works correctly Test description This test aims to verify that the OEM Factory Reset / Re-Ownership --> option in the HEADS Options submenu is available and works correctly. Test configuration data FIRMWARE = Dasharo USB Security Dongle Previously installed OS Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB Security Dongle into DUT. Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the OEM Factory Reset / Re-Ownership --> option in the HEADS Options submenu. Choose <Continue> in the displayed OEM Factory Reset / Re-Ownership window using the arrow keys and Enter. Go through the installation process by answering the questions. Note the results. Expected result The Provisioned Security Components Secrets should be displayed at the end of the installation. The new GPG keys should be placed on the USB Security Dongle . HDS011.001 Add GPG key to running BIOS and reflash Test description This test aims to verify that the Add GPG key to running BIOS and reflash option in the GPG Management Menu is available and works correctly. Test configuration data FIRMWARE = Dasharo Additional USB storage - at least 1GB, with GPG public key Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB storage into DUT. Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the Add GPG key to running BIOS and reflash option in the GPG Management Menu . Choose <Yes> in the displayed GPG public key required window using the arrow keys and Enter. Choose GPG public key from the USB storage and press Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the List GPG keys in your keyring option in the GPG Management Menu . Note the results. Expected result The GPG Keyring window should contain information about the given GPG key. HDS012.001 Add GPG key to standalone BIOS image and flash Test description This test aims to verify that the Add GPG key to standalone BIOS image and flash option in the GPG Management Menu is available and works correctly. Test configuration data FIRMWARE = Dasharo Additional USB storage - at least 1GB, with GPG public key and BIOS image Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB storage into DUT. Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the Add GPG key to standalone BIOS image and flash option in the GPG Management Menu . Choose <Yes> in the displayed GPG public key required window using the arrow keys and Enter. Choose GPG public key from the USB storage and press Enter. Choose BIOS image(*.rom) from the USB storage and press Enter. Choose <Yes> in the displayed Flash ROM? window using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the List GPG keys in your keyring option in the GPG Management Menu . Note the results. Expected result The GPG Keyring window should contain information about the given GPG key. HDS013.001 Replace GPG key(s) in the current ROM and reflash Test description This test aims to verify that the Replace GPG key(s) in the current ROM and reflash option in the GPG Management Menu is available and replaces GPG keys correctly. Test configuration data FIRMWARE = Dasharo Additional USB storage - at least 1GB, with GPG public key Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB storage into DUT. Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the Replace GPG key(s) in the current ROM and reflash option in the GPG Management Menu . Choose <Yes> in the displayed GPG public key required window using the arrow keys and Enter. Choose GPG public key from the USB storage and press Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the List GPG keys in your keyring option in the GPG Management Menu . Note the results. Expected result The GPG Keyring window should contain information about the given GPG key. HDS014.001 List GPG keys in your keyring Test description This test aims to verify that the List GPG keys in your keyring option in the GPG Management Menu is available and listed GPG keys correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the List GPG keys in your keyring option in the GPG Management Menu . Note the results. Expected result The GPG Keyring window should contain information about the GPG key if any was added. Example information in the GPG Keyring window: //.gnupg/pubring.kbx -------------------- pub rsa3072 2022 -11-22 [ SC ] AFA824E4660A265253BA1571B640E02380808C34 uid [ ultimate ] OEM Key ( OEM-generated key ) <oem-20221122083831@example.co sub rsa3072 2022 -11-22 [ A ] sub rsa3072 2022 -11-22 [ E ] The GPG Keyring window should be empty if no key has been added. HDS015.001 Export public GPG key to USB drive Test description This test aims to verify that the Export public GPG key to USB drive option in the GPG Management Menu is available and exports GPG keys correctly. Test configuration data FIRMWARE = Dasharo Additional USB storage - at least 1GB Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the Export public GPG key to USB drive option in the GPG Management Menu . Choose <Yes> in the displayed Export Public Key(s) to USB drive? window using the arrow keys and Enter. Note the results. Expected result The GPG Key Copied Successfully window should be displayed. The public-key.asc file should be on USB storage . HDS016.001 Generate GPG keys manually on a USB security token Test description This test aims to verify that the Generate GPG keys manually on a USB security token option in the GPG Management Menu is available and works correctly. Test configuration data FIRMWARE = Dasharo USB Security Dongle Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB Security Dongle into DUT. Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the Generate GPG keys manually on a USB security token option in the GPG Management Menu . Confirm that the USB Security Dongle is inserted, type Y and press Enter. Wait for gpg/card> prompt is appeared. Type admin and press Enter. Type generate and press Enter. Answer y to question Replace existing keys? . Note the results. Expected result Information about the successful generation of GPG keys should be displayed. The new GPG keys are on the USB Security Dongle . HDS017.001 Clear GPG key(s) and reset all user settings Test description This test aims to verify that the Clear GPG key(s) and reset all user settings option in the Config Management Menu is available and works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the Change configuration settings --> option in the HEADS Options submenu. Select the Clear GPG key(s) and reset all user settings option in the Config Management Menu . Choose <Yes> in the displayed Reset Configuration? window using the arrow keys and Enter. Reboot the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the List GPG keys in your keyring option in the GPG Management Menu . Note the results. Expected result The GPG Keyring window should be empty. HDS018.001 Reset TPM option is available and works correctly Test description This test aims to verify that the Reset TPM option in the TPM/TOTP/HOTP Options submenu is available and works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the TPM/TOTP/HOTP Options --> option in the HEADS Options submenu. Select the Reset the TPM option in the TPM/TOTP/HOTP Options submenu. Choose <Yes> in the displayed Reset the TPM window using the arrow keys and Enter. Set the TPM owner password. Scan the QR code using a mobile application to add the new TOTP secret and press Enter. Reboot the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Expected result After selecting the Continue to the main menu option, should be prompted for the TPM owner password. HDS019.001 Generate new TOTP/HOTP secret Test description This test aims to verify that the Generate new TOTP/HOTP secret option in the TPM/TOTP/HOTP Options submenu is available and works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the TPM/TOTP/HOTP Options --> option in the HEADS Options submenu. Select the Generate new TOTP/HOTP secret option in the TPM/TOTP/HOTP Options submenu. Scan the QR code using a mobile application to add the new TOTP secret and press Enter. Reboot the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Expected result After selecting the Continue to the main menu option, should be prompted for the TOTP password.","title":"Heads bootloader support"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#dasharo-compatibility-heads-bootloader-support","text":"","title":"Dasharo Compatibility: Heads bootloader support"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds001001-heads-installation","text":"Test description This test aims to verify that Heads could be installed on the DUT. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Flash bootkernel partition with Heads in accordance with the documentation . Expected result The output of the pflash command should contain information, that flashing procedure has been ended without any errors. Example output: Programming & Verifying... [==================================================] 100 % ETA:0s","title":"HDS001.001 Heads installation"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds002001-boot-into-heads","text":"Test description This test aims to verify that the DUT during the booting procedure reaches Heads bootloader. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Heads to boot and note the result. Expected result The Heads bootloader screen should be displayed.","title":"HDS002.001 Boot into Heads"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds003001-boot-from-usb-option-is-available-and-works-correctly","text":"Test description This test aims to verify that the Boot from USB option in the Default boot menu is available (if there is no option to boot OS from the Hard Disk) and allows to boot system mounted on the USB. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. USB storage with the installed OS. Test steps Plug the USB storage into DUT. Power on the DUT. Wait for the Default boot menu appears. Select Boot from USB option using the arrow keys and Enter. Select a partition from the USB storage from which the system will be booted. Note the results. Expected result The operating system from USB storage should boot properly.","title":"HDS003.001 Boot from USB option is available and works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds004001-continue-to-the-main-menu-option-is-available-and-works-correctly","text":"Test description This test aims to verify that the Continue to the main menu option in the Default boot menu is available and works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Note the results. Expected result After selecting Continue to the main menu , the Heads Boot Menu should be displayed.","title":"HDS004.001 Continue to the main menu option is available and works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds005001-exit-to-recovery-shell-option-is-available-and-works-correctly","text":"Test description This test aims to verify that the Exit to recovery shell option in the Default boot menu is available and works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Exit to recovery shell option using the arrow keys and Enter. Note the results. Expected result After selecting Exit to recovery shell , the recovery shell should be shown. Example output: !!!!! User requested recovery shell !!!!! Starting recovery shell ~ #","title":"HDS005.001 Exit to recovery shell option is available and works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds006001-default-boot-option-is-available-and-works-correctly","text":"Test description This test aims to verify that the Default boot option in the Heads boot menu is available and works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Default boot option in the Heads boot menu . Note the results. Expected result After selecting Default boot , the Default boot menu should be displayed.","title":"HDS006.001 Default boot option is available and works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds007001-options-submenu-is-available-and-works-correctly","text":"Test description This test aims to verify that the Options --> option in the Heads boot menu is available and works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Note the results. Expected result After selecting Options --> , the HEADS Options menu should be displayed. Example view of HEADS Options : b Boot Options --> t TPM/TOTP/HOTP Options --> u Update checksums and sign all files in /boot c Change configuration settings --> f Flash/Update the BIOS --> g GPG Options --> F OEM Factory Reset --> x Exit to recovery shell r <-- Return to main menu","title":"HDS007.001 Options submenu is available and works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds008001-system-info-option-is-available-and-works-correctly","text":"Test description This test aims to verify that the System Info option in the Heads boot menu allows displaying all basic system information. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the System Info option in the Heads boot menu . Note the results. Expected result After selecting System Info , the basic system information should be displayed. Example output: \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 System Info \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502 \u2502 \u2502 Talos 2 Server \u2502 \u2502 \u2502 \u2502 FW_VER: v0.5.0 \u2502 \u2502 Kernel: Linux 5 .5.0-openpower1 \u2502 \u2502 \u2502 \u2502 CPU: IBM POWER9 \u201cSforza\u201d \u2502 \u2502 RAM: 8 GB \u2502 \u2502 \u2502 \u2502 Disk /dev/nvme0n1: 477 GB \u2502 \u2502 \u2502 \u2502 \u2502 \u2502 <Ok> \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"HDS008.001 System info option is available and works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds009001-power-off-option-is-available-and-works-correctly","text":"Test description This test aims to verify that the Power Off option in the Heads boot menu allows turning off the DUT. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Power Off option in the Heads boot menu . Note the results. Expected result After selecting Power Off , the DUT should be turned off without any complications.","title":"HDS009.001 Power off option is available and works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds010001-oem-factory-reset-option-is-available-and-works-correctly","text":"Test description This test aims to verify that the OEM Factory Reset / Re-Ownership --> option in the HEADS Options submenu is available and works correctly. Test configuration data FIRMWARE = Dasharo USB Security Dongle Previously installed OS Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB Security Dongle into DUT. Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the OEM Factory Reset / Re-Ownership --> option in the HEADS Options submenu. Choose <Continue> in the displayed OEM Factory Reset / Re-Ownership window using the arrow keys and Enter. Go through the installation process by answering the questions. Note the results. Expected result The Provisioned Security Components Secrets should be displayed at the end of the installation. The new GPG keys should be placed on the USB Security Dongle .","title":"HDS010.001 OEM Factory Reset option is available and works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds011001-add-gpg-key-to-running-bios-and-reflash","text":"Test description This test aims to verify that the Add GPG key to running BIOS and reflash option in the GPG Management Menu is available and works correctly. Test configuration data FIRMWARE = Dasharo Additional USB storage - at least 1GB, with GPG public key Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB storage into DUT. Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the Add GPG key to running BIOS and reflash option in the GPG Management Menu . Choose <Yes> in the displayed GPG public key required window using the arrow keys and Enter. Choose GPG public key from the USB storage and press Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the List GPG keys in your keyring option in the GPG Management Menu . Note the results. Expected result The GPG Keyring window should contain information about the given GPG key.","title":"HDS011.001 Add GPG key to running BIOS and reflash"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds012001-add-gpg-key-to-standalone-bios-image-and-flash","text":"Test description This test aims to verify that the Add GPG key to standalone BIOS image and flash option in the GPG Management Menu is available and works correctly. Test configuration data FIRMWARE = Dasharo Additional USB storage - at least 1GB, with GPG public key and BIOS image Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB storage into DUT. Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the Add GPG key to standalone BIOS image and flash option in the GPG Management Menu . Choose <Yes> in the displayed GPG public key required window using the arrow keys and Enter. Choose GPG public key from the USB storage and press Enter. Choose BIOS image(*.rom) from the USB storage and press Enter. Choose <Yes> in the displayed Flash ROM? window using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the List GPG keys in your keyring option in the GPG Management Menu . Note the results. Expected result The GPG Keyring window should contain information about the given GPG key.","title":"HDS012.001 Add GPG key to standalone BIOS image and flash"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds013001-replace-gpg-keys-in-the-current-rom-and-reflash","text":"Test description This test aims to verify that the Replace GPG key(s) in the current ROM and reflash option in the GPG Management Menu is available and replaces GPG keys correctly. Test configuration data FIRMWARE = Dasharo Additional USB storage - at least 1GB, with GPG public key Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB storage into DUT. Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the Replace GPG key(s) in the current ROM and reflash option in the GPG Management Menu . Choose <Yes> in the displayed GPG public key required window using the arrow keys and Enter. Choose GPG public key from the USB storage and press Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the List GPG keys in your keyring option in the GPG Management Menu . Note the results. Expected result The GPG Keyring window should contain information about the given GPG key.","title":"HDS013.001 Replace GPG key(s) in the current ROM and reflash"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds014001-list-gpg-keys-in-your-keyring","text":"Test description This test aims to verify that the List GPG keys in your keyring option in the GPG Management Menu is available and listed GPG keys correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the List GPG keys in your keyring option in the GPG Management Menu . Note the results. Expected result The GPG Keyring window should contain information about the GPG key if any was added. Example information in the GPG Keyring window: //.gnupg/pubring.kbx -------------------- pub rsa3072 2022 -11-22 [ SC ] AFA824E4660A265253BA1571B640E02380808C34 uid [ ultimate ] OEM Key ( OEM-generated key ) <oem-20221122083831@example.co sub rsa3072 2022 -11-22 [ A ] sub rsa3072 2022 -11-22 [ E ] The GPG Keyring window should be empty if no key has been added.","title":"HDS014.001 List GPG keys in your keyring"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds015001-export-public-gpg-key-to-usb-drive","text":"Test description This test aims to verify that the Export public GPG key to USB drive option in the GPG Management Menu is available and exports GPG keys correctly. Test configuration data FIRMWARE = Dasharo Additional USB storage - at least 1GB Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the Export public GPG key to USB drive option in the GPG Management Menu . Choose <Yes> in the displayed Export Public Key(s) to USB drive? window using the arrow keys and Enter. Note the results. Expected result The GPG Key Copied Successfully window should be displayed. The public-key.asc file should be on USB storage .","title":"HDS015.001 Export public GPG key to USB drive"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds016001-generate-gpg-keys-manually-on-a-usb-security-token","text":"Test description This test aims to verify that the Generate GPG keys manually on a USB security token option in the GPG Management Menu is available and works correctly. Test configuration data FIRMWARE = Dasharo USB Security Dongle Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB Security Dongle into DUT. Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the Generate GPG keys manually on a USB security token option in the GPG Management Menu . Confirm that the USB Security Dongle is inserted, type Y and press Enter. Wait for gpg/card> prompt is appeared. Type admin and press Enter. Type generate and press Enter. Answer y to question Replace existing keys? . Note the results. Expected result Information about the successful generation of GPG keys should be displayed. The new GPG keys are on the USB Security Dongle .","title":"HDS016.001 Generate GPG keys manually on a USB security token"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds017001-clear-gpg-keys-and-reset-all-user-settings","text":"Test description This test aims to verify that the Clear GPG key(s) and reset all user settings option in the Config Management Menu is available and works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the Change configuration settings --> option in the HEADS Options submenu. Select the Clear GPG key(s) and reset all user settings option in the Config Management Menu . Choose <Yes> in the displayed Reset Configuration? window using the arrow keys and Enter. Reboot the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the GPG Options --> option in the HEADS Options submenu. Select the List GPG keys in your keyring option in the GPG Management Menu . Note the results. Expected result The GPG Keyring window should be empty.","title":"HDS017.001 Clear GPG key(s) and reset all user settings"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds018001-reset-tpm-option-is-available-and-works-correctly","text":"Test description This test aims to verify that the Reset TPM option in the TPM/TOTP/HOTP Options submenu is available and works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the TPM/TOTP/HOTP Options --> option in the HEADS Options submenu. Select the Reset the TPM option in the TPM/TOTP/HOTP Options submenu. Choose <Yes> in the displayed Reset the TPM window using the arrow keys and Enter. Set the TPM owner password. Scan the QR code using a mobile application to add the new TOTP secret and press Enter. Reboot the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Expected result After selecting the Continue to the main menu option, should be prompted for the TPM owner password.","title":"HDS018.001 Reset TPM option is available and works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/31U-heads-bootloader-support/#hds019001-generate-new-totphotp-secret","text":"Test description This test aims to verify that the Generate new TOTP/HOTP secret option in the TPM/TOTP/HOTP Options submenu is available and works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Select the Options --> option in the Heads boot menu . Select the TPM/TOTP/HOTP Options --> option in the HEADS Options submenu. Select the Generate new TOTP/HOTP secret option in the TPM/TOTP/HOTP Options submenu. Scan the QR code using a mobile application to add the new TOTP secret and press Enter. Reboot the DUT. Wait for the Default boot menu appears. Select the Continue to the main menu option using the arrow keys and Enter. Expected result After selecting the Continue to the main menu option, should be prompted for the TOTP password.","title":"HDS019.001 Generate new TOTP/HOTP secret"},{"location":"unified-test-documentation/dasharo-compatibility/31V-petitboot-payload-support/","text":"Dasharo Compatibility: Petitboot payload support Test cases common documentation Test setup Proceed with the Generic test setup: firmware . PBT001.001 Boot into Petitboot Test description This test verifies that the DUT during booting procedure reaches Petitboot menu. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Petitboot to boot and note the result. Expected result The Petitbooot menu screen should be displayed. PBT002.001 Read System Information from Petitboot Test description This test verifies that Petitboot System Information option is available and works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Petitboot to boot. Select the System Information option using the arrow keys and press Enter . Note the result. Expected result After select System Information option, device information tree should be displayed. PBT003.001 Rescan Devices by Petitboot Test description This test verifies that Petitboot Rescan Device option is available and works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Petitboot to boot. Select the Rescan Devices option using the arrow keys and press Enter . Note the results. Attach USB Stick with bootable system to USB port in DUT. Select the Rescan Devices again and note the results. Expected result Information about the attached USB Stick should be displayed after the second use of the Rescan Devices option.","title":"Petitboot payload support"},{"location":"unified-test-documentation/dasharo-compatibility/31V-petitboot-payload-support/#dasharo-compatibility-petitboot-payload-support","text":"","title":"Dasharo Compatibility: Petitboot payload support"},{"location":"unified-test-documentation/dasharo-compatibility/31V-petitboot-payload-support/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/31V-petitboot-payload-support/#pbt001001-boot-into-petitboot","text":"Test description This test verifies that the DUT during booting procedure reaches Petitboot menu. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Petitboot to boot and note the result. Expected result The Petitbooot menu screen should be displayed.","title":"PBT001.001 Boot into Petitboot"},{"location":"unified-test-documentation/dasharo-compatibility/31V-petitboot-payload-support/#pbt002001-read-system-information-from-petitboot","text":"Test description This test verifies that Petitboot System Information option is available and works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Petitboot to boot. Select the System Information option using the arrow keys and press Enter . Note the result. Expected result After select System Information option, device information tree should be displayed.","title":"PBT002.001 Read System Information from Petitboot"},{"location":"unified-test-documentation/dasharo-compatibility/31V-petitboot-payload-support/#pbt003001-rescan-devices-by-petitboot","text":"Test description This test verifies that Petitboot Rescan Device option is available and works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Petitboot to boot. Select the Rescan Devices option using the arrow keys and press Enter . Note the results. Attach USB Stick with bootable system to USB port in DUT. Select the Rescan Devices again and note the results. Expected result Information about the attached USB Stick should be displayed after the second use of the Rescan Devices option.","title":"PBT003.001 Rescan Devices by Petitboot"},{"location":"unified-test-documentation/dasharo-compatibility/31W-device-tree/","text":"Dasharo compatibility: Device tree Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . DVT001.001 Node with coreboot exists Test description This test aims to verify whether the node with the coreboot exists in the Device Tree. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: xxd /sys/firmware/devicetree/base/firmware/coreboot/compatible Note the result. Expected result The output of the command should contain information about memory sectors dedicated for coreboot. Example output: 00000000 : 636f 7265 626f 6f74 00 coreboot DVT002.001 Memory for coreboot is reserved (Ubuntu 22.04) Test description This test aims to verify that in the system exists reserved memory for coreboot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: xxd /sys/firmware/devicetree/base/firmware/coreboot/reg Note the results. Run the following command in the terminal: xxd /sys/firmware/devicetree/base/reserved-memory/ranges Expected result Output of the first command should contain information about memory ranges for corebotot. Output of the second command should contain information about reserved ranges. All memory range for coreboot (output from command 1) should be reserved (output from command 2).","title":"Device Tree"},{"location":"unified-test-documentation/dasharo-compatibility/31W-device-tree/#dasharo-compatibility-device-tree","text":"","title":"Dasharo compatibility: Device tree"},{"location":"unified-test-documentation/dasharo-compatibility/31W-device-tree/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/31W-device-tree/#dvt001001-node-with-coreboot-exists","text":"Test description This test aims to verify whether the node with the coreboot exists in the Device Tree. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: xxd /sys/firmware/devicetree/base/firmware/coreboot/compatible Note the result. Expected result The output of the command should contain information about memory sectors dedicated for coreboot. Example output: 00000000 : 636f 7265 626f 6f74 00 coreboot","title":"DVT001.001 Node with coreboot exists"},{"location":"unified-test-documentation/dasharo-compatibility/31W-device-tree/#dvt002001-memory-for-coreboot-is-reserved-ubuntu-2204","text":"Test description This test aims to verify that in the system exists reserved memory for coreboot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.0 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: xxd /sys/firmware/devicetree/base/firmware/coreboot/reg Note the results. Run the following command in the terminal: xxd /sys/firmware/devicetree/base/reserved-memory/ranges Expected result Output of the first command should contain information about memory ranges for corebotot. Output of the second command should contain information about reserved ranges. All memory range for coreboot (output from command 1) should be reserved (output from command 2).","title":"DVT002.001 Memory for coreboot is reserved (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/320-fwupd-firmware-update/","text":"Dasharo Compatibility: Firmware update using fwupd Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Install the dmidecode package: sudo apt install dmidecode . Make yourself familiar with Updating firmware using fwupd FFW001.001 Firmware update by using fwupd Test description This test verify whether it is possible to update the firmware on the DUT by using fwupd demon. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Disable Secure Boot . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Configure environment in accordance with the documentation Start firmware updating procedure by executing the following command in the terminal: sudo fwupdmgr update Reboot the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command to verify results: sudo dmidecode -t bios Expected result The output of dmidecode command should contain information about current firmware. The current firmware version should be equal to the latest released firmware version. Example output: BIOS Information Vendor: 3mdeb Version: Dasharo ( coreboot+UEFI ) v1.1.0 Release Date: 03 /24/2022 ROM Size: 16 MB Characteristics: PCI is supported PC Card ( PCMCIA ) is supported BIOS is upgradeable BIOS shadowing is allowed Selectable boot is supported ACPI is supported USB legacy is supported Targeted content distribution is supported UEFI is supported BIOS Revision: 1 .1 Firmware Revision: 0 .0","title":"Firmware update using fwupd"},{"location":"unified-test-documentation/dasharo-compatibility/320-fwupd-firmware-update/#dasharo-compatibility-firmware-update-using-fwupd","text":"","title":"Dasharo Compatibility: Firmware update using fwupd"},{"location":"unified-test-documentation/dasharo-compatibility/320-fwupd-firmware-update/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Install the dmidecode package: sudo apt install dmidecode . Make yourself familiar with Updating firmware using fwupd","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/320-fwupd-firmware-update/#ffw001001-firmware-update-by-using-fwupd","text":"Test description This test verify whether it is possible to update the firmware on the DUT by using fwupd demon. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Disable Secure Boot . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Configure environment in accordance with the documentation Start firmware updating procedure by executing the following command in the terminal: sudo fwupdmgr update Reboot the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command to verify results: sudo dmidecode -t bios Expected result The output of dmidecode command should contain information about current firmware. The current firmware version should be equal to the latest released firmware version. Example output: BIOS Information Vendor: 3mdeb Version: Dasharo ( coreboot+UEFI ) v1.1.0 Release Date: 03 /24/2022 ROM Size: 16 MB Characteristics: PCI is supported PC Card ( PCMCIA ) is supported BIOS is upgradeable BIOS shadowing is allowed Selectable boot is supported ACPI is supported USB legacy is supported Targeted content distribution is supported UEFI is supported BIOS Revision: 1 .1 Firmware Revision: 0 .0","title":"FFW001.001 Firmware update by using fwupd"},{"location":"unified-test-documentation/dasharo-compatibility/325-custom-boot-order/","text":"Dasharo Compatibility: Custom Boot Order Test cases common documentation Test setup Proceed with the Generic test setup: firmware . CBO001.001 Custom boot order (SeaBIOS) Test description This test aims to verify that the DUT boot from the suitable source, with the possibility to boot from other sources. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT Press BOOT_MENU_KEY key to display boot menu. Compare the listed devices with the desired boot order. Expected result When there is a possibility for the platform to boot from different sources: Priority will be given to the system booted from SSD connected by mSATA. If above-mentioned SSD does not include system, it will be booted from USB. If it either not include system, it will be booted from SSD connected by SATA 2.5 If there is only one bootable medium the platform shall boot from it. Example boot menu: Select boot device: 1 . AHCI/0: SATA SSD ATA-11 Hard-Disk ( 15272 MiBytes ) 2 . USB MSC Drive USB Flash Memory PMAP 3 . USB MSC Drive SanDisk Ultra 1 .00 4 . USB MSC Drive Generic Flash Disk 8 .07 5 . AHCI/1: TOSHIBA MK2561GSYN ATA-8 Hard-Disk ( 232 GiBytes ) 6 . iPXE 7 . Payload [ memtest ] CBO001.002 Custom boot order (edk2) Test description This test aims to verify that the DUT boot from the suitable source, with the possibility to boot from other sources. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT Press SETUP MENU key to display boot menu. Select Boot Maintenance Manager and press ENTER . In Boot Maintenance Manager menu select Boot Options and press ENTER . In Change Boot Order menu select Change the order option and press ENTER . Set the desired boot order. Reboot the device. Press BOOT_MENU_KEY key to display boot menu. Compare the listed devices with the desired boot order. Expected result Current boot order option list should correspond to the desired boot order.","title":"Custom Boot Order"},{"location":"unified-test-documentation/dasharo-compatibility/325-custom-boot-order/#dasharo-compatibility-custom-boot-order","text":"","title":"Dasharo Compatibility: Custom Boot Order"},{"location":"unified-test-documentation/dasharo-compatibility/325-custom-boot-order/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/325-custom-boot-order/#cbo001001-custom-boot-order-seabios","text":"Test description This test aims to verify that the DUT boot from the suitable source, with the possibility to boot from other sources. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT Press BOOT_MENU_KEY key to display boot menu. Compare the listed devices with the desired boot order. Expected result When there is a possibility for the platform to boot from different sources: Priority will be given to the system booted from SSD connected by mSATA. If above-mentioned SSD does not include system, it will be booted from USB. If it either not include system, it will be booted from SSD connected by SATA 2.5 If there is only one bootable medium the platform shall boot from it. Example boot menu: Select boot device: 1 . AHCI/0: SATA SSD ATA-11 Hard-Disk ( 15272 MiBytes ) 2 . USB MSC Drive USB Flash Memory PMAP 3 . USB MSC Drive SanDisk Ultra 1 .00 4 . USB MSC Drive Generic Flash Disk 8 .07 5 . AHCI/1: TOSHIBA MK2561GSYN ATA-8 Hard-Disk ( 232 GiBytes ) 6 . iPXE 7 . Payload [ memtest ]","title":"CBO001.001 Custom boot order (SeaBIOS)"},{"location":"unified-test-documentation/dasharo-compatibility/325-custom-boot-order/#cbo001002-custom-boot-order-edk2","text":"Test description This test aims to verify that the DUT boot from the suitable source, with the possibility to boot from other sources. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT Press SETUP MENU key to display boot menu. Select Boot Maintenance Manager and press ENTER . In Boot Maintenance Manager menu select Boot Options and press ENTER . In Change Boot Order menu select Change the order option and press ENTER . Set the desired boot order. Reboot the device. Press BOOT_MENU_KEY key to display boot menu. Compare the listed devices with the desired boot order. Expected result Current boot order option list should correspond to the desired boot order.","title":"CBO001.002 Custom boot order (edk2)"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/","text":"Dasharo Compatibility: Dasharo Tools Suite Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Wired network connection. Disable Secure Boot. Prepare the bootable USB stick Make yourself familiar with Dasharo Tools Suite . DTS001.001 Booting DTS from USB works correctly Test description This test aims to verify that DTS is properly booting from USB. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB stick with DTS into the USB slot on the DUT. Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the USB stick with DTS using the arrow keys and press Enter . Expected result After a while, the DTS menu should appear. DTS002.001 DTS option Creating Dasharo HCL report works correctly Test description This test aims to verify that the option Dasharo HCL report in the DTS menu properly creates the report. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB stick with DTS into the USB slot on the DUT. Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the USB stick with DTS using the arrow keys and press Enter . Wait for Enter an option: . Type in 1 and press Enter . Wait for the question: Do you want to support Dasharo development by sending us logs with hardware configuration ? Type in y and press Enter. Expected result The whole process may take a few minutes. The report should be generated. The report should be sent to the cloud. In the summary should be displayed information that all calls exited without errors. Example summary output: SUMMARY ======== > All Curl calls exited without errors > Attempt to send completed > <report_name>.tar.gz Thanks you for supporting Dasharo! DTS003.001 DTS option power-off DUT works correctly Test description This test aims to verify that the option Power off system in the DTS menu turns off the DUT. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB stick with DTS into the USB slot on the DUT. Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the USB stick with DTS using the arrow keys and press Enter . Wait for Enter an option: . Type in 10 and press Enter . Expected result The DUT should be turned off without any complications. DTS004.001 DTS option reboot DUT works correctly Test description This test aims to verify that the option Reboot system in the DTS menu reboots the DUT. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB stick with DTS into the USB slot on the DUT. Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the USB stick with DTS using the arrow keys and press Enter . Wait for Enter an option: . Type in 11 and press Enter . Expected result The DUT should be rebooted without any complications. DTS005.001 DTS drop-to-shell option works correctly Test description This test aims to verify that the option Shell in the DTS menu opens Shell. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB stick with DTS into the USB slot on the DUT. Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the USB stick with DTS using the arrow keys and press Enter . Wait for Enter an option: . Type in 9 and press Enter . Expected result Information about entering the shell and how to exit should be displayed. Shell command input should be activated. Example output: Entering shell, to leave type exit and press Enter or press LCtrl+D bash-5.1# DTS006.001 Flash device from DTS shell by using flashrom works correctly Test description This test aims to verify whether is the possibility to flash the DUT firmware by using flashrom in DTS Shell . Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. {PATH} = individual path to a specific binary. Test steps Plug the USB stick with DTS into the USB slot on the DUT. Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the USB stick with DTS using the arrow keys and press Enter . Wait for Enter an option: . Type 9 and click Enter to launch Shell. Run the following command to obtain coreboot.rom binary: wget https://3mdeb.com/open-source-firmware/ { PATH } -O /tmp/coreboot.rom The above-described command is not the only way to obtain binary. For example, scp command might be used, too. Run the following command to flash the firmware: flashrom -p internal -w /tmp/coreboot.rom Additional parameters may be needed for the flashrom command depending on the DUT. Documentation describing the exact command to flash the specific platform is always available in localization: Supported hardware -> Platform name -> Initial Deployment . Power off the DUT. Repeat steps 2-6. Run the following command to check the firmware version: dmidecode -t 0 Note the results. Expected result The output of dmidecode command should contain information about the current firmware. The current firmware version should be equal to the binary version, which you were flashing. Example output: Version: Dasharo ( coreboot+UEFI ) v1.1.0 DTS007.001 Update device firmware from DTS Shell by using fwupd works correctly Test description This test aims to verify whether there is the possibility to update the DUT firmware by using fwupd in DTS. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB stick with DTS into the USB slot on the DUT. Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the USB stick with DTS using the arrow keys and press Enter . Wait for Enter an option: . Type in 9 and press Enter . Run the following commands to update the firmware to the latest version: fwupdmgr refresh fwupdmgr update Power off the DUT. Repeat steps 2-6. Run the following command to check the firmware version: dmidecode -t 0 Note the results. Expected result The output of dmidecode command should contain information about the current firmware. The current firmware version should be equal to the binary version, which you were flashing. Example output: Version: Dasharo ( coreboot+UEFI ) v1.1.0 DTS008.001 Flash device EC firmware by using DTS built-in script works correctly Test description This test aims to verify whether there is the possibility to flash the DUT EC firmware by using the built-in script in DTS. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB stick with DTS into the USB slot on the DUT. Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the USB stick with DTS using the arrow keys and press Enter . Wait for Enter an option: . Proceed with Dasharo EC Transition . Expected result After the flashing procedure itself, the DUT should be able to boot. The EC firmware version, after checking the method described in the above-mentioned documentation , should correspond to the latest version. DTS009.001 Update device EC firmware by using DTS works correctly Test description This test aims to verify whether there is the possibility to update the DUT EC firmware by using system76_ectool in DTS. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB stick with DTS into the USB slot on the DUT. Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the USB stick with DTS using the arrow keys and press Enter . Wait for Enter an option: . Type in 9 and press Enter . Proceed with Dasharo EC Update . Expected result After the updating firmware procedure itself, the DUT should be able to boot. The EC firmware version, after checking the method described in the above-mentioned documentation , should correspond to the binary version used.","title":"Dasharo Tools Suite"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dasharo-compatibility-dasharo-tools-suite","text":"","title":"Dasharo Compatibility: Dasharo Tools Suite"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Wired network connection. Disable Secure Boot. Prepare the bootable USB stick Make yourself familiar with Dasharo Tools Suite .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dts001001-booting-dts-from-usb-works-correctly","text":"Test description This test aims to verify that DTS is properly booting from USB. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB stick with DTS into the USB slot on the DUT. Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the USB stick with DTS using the arrow keys and press Enter . Expected result After a while, the DTS menu should appear.","title":"DTS001.001 Booting DTS from USB works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dts002001-dts-option-creating-dasharo-hcl-report-works-correctly","text":"Test description This test aims to verify that the option Dasharo HCL report in the DTS menu properly creates the report. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB stick with DTS into the USB slot on the DUT. Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the USB stick with DTS using the arrow keys and press Enter . Wait for Enter an option: . Type in 1 and press Enter . Wait for the question: Do you want to support Dasharo development by sending us logs with hardware configuration ? Type in y and press Enter. Expected result The whole process may take a few minutes. The report should be generated. The report should be sent to the cloud. In the summary should be displayed information that all calls exited without errors. Example summary output: SUMMARY ======== > All Curl calls exited without errors > Attempt to send completed > <report_name>.tar.gz Thanks you for supporting Dasharo!","title":"DTS002.001 DTS option Creating Dasharo HCL report works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dts003001-dts-option-power-off-dut-works-correctly","text":"Test description This test aims to verify that the option Power off system in the DTS menu turns off the DUT. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB stick with DTS into the USB slot on the DUT. Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the USB stick with DTS using the arrow keys and press Enter . Wait for Enter an option: . Type in 10 and press Enter . Expected result The DUT should be turned off without any complications.","title":"DTS003.001 DTS option power-off DUT works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dts004001-dts-option-reboot-dut-works-correctly","text":"Test description This test aims to verify that the option Reboot system in the DTS menu reboots the DUT. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB stick with DTS into the USB slot on the DUT. Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the USB stick with DTS using the arrow keys and press Enter . Wait for Enter an option: . Type in 11 and press Enter . Expected result The DUT should be rebooted without any complications.","title":"DTS004.001 DTS option reboot DUT works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dts005001-dts-drop-to-shell-option-works-correctly","text":"Test description This test aims to verify that the option Shell in the DTS menu opens Shell. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB stick with DTS into the USB slot on the DUT. Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the USB stick with DTS using the arrow keys and press Enter . Wait for Enter an option: . Type in 9 and press Enter . Expected result Information about entering the shell and how to exit should be displayed. Shell command input should be activated. Example output: Entering shell, to leave type exit and press Enter or press LCtrl+D bash-5.1#","title":"DTS005.001 DTS drop-to-shell option works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dts006001-flash-device-from-dts-shell-by-using-flashrom-works-correctly","text":"Test description This test aims to verify whether is the possibility to flash the DUT firmware by using flashrom in DTS Shell . Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. {PATH} = individual path to a specific binary. Test steps Plug the USB stick with DTS into the USB slot on the DUT. Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the USB stick with DTS using the arrow keys and press Enter . Wait for Enter an option: . Type 9 and click Enter to launch Shell. Run the following command to obtain coreboot.rom binary: wget https://3mdeb.com/open-source-firmware/ { PATH } -O /tmp/coreboot.rom The above-described command is not the only way to obtain binary. For example, scp command might be used, too. Run the following command to flash the firmware: flashrom -p internal -w /tmp/coreboot.rom Additional parameters may be needed for the flashrom command depending on the DUT. Documentation describing the exact command to flash the specific platform is always available in localization: Supported hardware -> Platform name -> Initial Deployment . Power off the DUT. Repeat steps 2-6. Run the following command to check the firmware version: dmidecode -t 0 Note the results. Expected result The output of dmidecode command should contain information about the current firmware. The current firmware version should be equal to the binary version, which you were flashing. Example output: Version: Dasharo ( coreboot+UEFI ) v1.1.0","title":"DTS006.001 Flash device from DTS shell by using flashrom works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dts007001-update-device-firmware-from-dts-shell-by-using-fwupd-works-correctly","text":"Test description This test aims to verify whether there is the possibility to update the DUT firmware by using fwupd in DTS. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB stick with DTS into the USB slot on the DUT. Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the USB stick with DTS using the arrow keys and press Enter . Wait for Enter an option: . Type in 9 and press Enter . Run the following commands to update the firmware to the latest version: fwupdmgr refresh fwupdmgr update Power off the DUT. Repeat steps 2-6. Run the following command to check the firmware version: dmidecode -t 0 Note the results. Expected result The output of dmidecode command should contain information about the current firmware. The current firmware version should be equal to the binary version, which you were flashing. Example output: Version: Dasharo ( coreboot+UEFI ) v1.1.0","title":"DTS007.001 Update device firmware from DTS Shell by using fwupd works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dts008001-flash-device-ec-firmware-by-using-dts-built-in-script-works-correctly","text":"Test description This test aims to verify whether there is the possibility to flash the DUT EC firmware by using the built-in script in DTS. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB stick with DTS into the USB slot on the DUT. Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the USB stick with DTS using the arrow keys and press Enter . Wait for Enter an option: . Proceed with Dasharo EC Transition . Expected result After the flashing procedure itself, the DUT should be able to boot. The EC firmware version, after checking the method described in the above-mentioned documentation , should correspond to the latest version.","title":"DTS008.001 Flash device EC firmware by using DTS built-in script works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/326-dasharo-tools-suite/#dts009001-update-device-ec-firmware-by-using-dts-works-correctly","text":"Test description This test aims to verify whether there is the possibility to update the DUT EC firmware by using system76_ectool in DTS. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Plug the USB stick with DTS into the USB slot on the DUT. Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the USB stick with DTS using the arrow keys and press Enter . Wait for Enter an option: . Type in 9 and press Enter . Proceed with Dasharo EC Update . Expected result After the updating firmware procedure itself, the DUT should be able to boot. The EC firmware version, after checking the method described in the above-mentioned documentation , should correspond to the binary version used.","title":"DTS009.001 Update device EC firmware by using DTS works correctly"},{"location":"unified-test-documentation/dasharo-compatibility/326b-firmware-building-locally/","text":"Dasharo Compatibility: Firmware locally building and flashing Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Make yourself familiar with Building manual procedure dedicated for the relevant platform: NovaCustom laptops FLB001.001 Firmware locally build Test description This test aims to verify whether there is a possibility to build firmware on the local machine, based on Build manual procedure dedicated to the platform. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Based on the dedicated documentation build firmware. Check if the binary file, after finishing the building process, is available in the build location. Expected result The build location should contain the binary file, which size is equal to the flash chip size. FLB002.001 Flash locally built firmware Test description This test aims to verify whether there is a possibility to flash the locally built firmware to the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Localize the firmware, which was built in the FLB001.001 test case. Flash the firmware by using the internal programmer and flashrom tool. If DUT is already flashed with the Dasharo firmware, the following command should be used: flashrom -p internal -w [ path-to-binary ] --fmap -i RW_SECTION_A Otherwise, the following command should be used: flashrom -p internal -w [ path-to-binary ] --ifd -i bios Reboot the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command to verify the results: sudo dmidecode -t bios | grep Version Expected result The output of dmidecode command should contain information about the current firmware. The current firmware version should be equal to the latest released firmware version. Example output: Version: Dasharo ( coreboot+UEFI ) v1.1.0","title":"Firmware locally building and flashing"},{"location":"unified-test-documentation/dasharo-compatibility/326b-firmware-building-locally/#dasharo-compatibility-firmware-locally-building-and-flashing","text":"","title":"Dasharo Compatibility: Firmware locally building and flashing"},{"location":"unified-test-documentation/dasharo-compatibility/326b-firmware-building-locally/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Make yourself familiar with Building manual procedure dedicated for the relevant platform: NovaCustom laptops","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/326b-firmware-building-locally/#flb001001-firmware-locally-build","text":"Test description This test aims to verify whether there is a possibility to build firmware on the local machine, based on Build manual procedure dedicated to the platform. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Based on the dedicated documentation build firmware. Check if the binary file, after finishing the building process, is available in the build location. Expected result The build location should contain the binary file, which size is equal to the flash chip size.","title":"FLB001.001 Firmware locally build"},{"location":"unified-test-documentation/dasharo-compatibility/326b-firmware-building-locally/#flb002001-flash-locally-built-firmware","text":"Test description This test aims to verify whether there is a possibility to flash the locally built firmware to the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Localize the firmware, which was built in the FLB001.001 test case. Flash the firmware by using the internal programmer and flashrom tool. If DUT is already flashed with the Dasharo firmware, the following command should be used: flashrom -p internal -w [ path-to-binary ] --fmap -i RW_SECTION_A Otherwise, the following command should be used: flashrom -p internal -w [ path-to-binary ] --ifd -i bios Reboot the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command to verify the results: sudo dmidecode -t bios | grep Version Expected result The output of dmidecode command should contain information about the current firmware. The current firmware version should be equal to the latest released firmware version. Example output: Version: Dasharo ( coreboot+UEFI ) v1.1.0","title":"FLB002.001 Flash locally built firmware"},{"location":"unified-test-documentation/dasharo-compatibility/327-embedded_controller_flashing/","text":"Dasharo Compatibility: Embedded controller flashing ECF001.001 EC firmware external flashing Test description This test aims to verify whether there is the possibility to flash the DUT EC firmware externally using Arduino. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Make yourself familiar with EC recovery documentation . Test steps Prepare the hardware for flashing in accordance with the Prerequisites section . Prepare the firmware in accordance with the Preparation section . Flash the EC firmware in accordance with the Flashing section . Note the results. Expected result The output of the last command should contain information about the correctly performed procedure: Successfully programmed SPI ROM","title":"Embedded controller flashing"},{"location":"unified-test-documentation/dasharo-compatibility/327-embedded_controller_flashing/#dasharo-compatibility-embedded-controller-flashing","text":"","title":"Dasharo Compatibility: Embedded controller flashing"},{"location":"unified-test-documentation/dasharo-compatibility/327-embedded_controller_flashing/#ecf001001-ec-firmware-external-flashing","text":"Test description This test aims to verify whether there is the possibility to flash the DUT EC firmware externally using Arduino. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Make yourself familiar with EC recovery documentation . Test steps Prepare the hardware for flashing in accordance with the Prerequisites section . Prepare the firmware in accordance with the Preparation section . Flash the EC firmware in accordance with the Flashing section . Note the results. Expected result The output of the last command should contain information about the correctly performed procedure: Successfully programmed SPI ROM","title":"ECF001.001 EC firmware external flashing"},{"location":"unified-test-documentation/dasharo-compatibility/328-logo-customization-functionality/","text":"Dasharo Compatibility: Logo customization functionality Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Get familiar with Logo customization procedure LCM001.001 Replace logo in existing image and flashing firmware Test description The test aims to verify whether replacing the logo in the existing image is possible and, whether after flashing the DUT with the new image, the new logo will be shown properly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Current Dasharo firmware dedicated for the platform. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the boot menu. Select the iPXE Network boot option using the arrow keys and press Enter . Select the iPXE Shell option using the arrow keys and press Enter . Configure communication interface by using the following command: dhcp Connect to the DTS ipxe menu by using the following command: chain http://boot.3mdeb.com/dts.ipxe Wait for Enter an option: . Type in 9 and press Enter . Based on the dedicated documentation replace the logo in an existing image. Reboot the DUT and observe the boot logo. Expected result During the DUT booting process, custom logo should appear on the screen. LCM002.001 Build image with custom logo and flashing firmware Test description This test aims to verify whether building an image with the custom logo is possible and, whether after flashing the DUT with the new image, the new logo will be shown properly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Based on the dedicated documentation build firmware with the custom logo. Flash the firmware by using the internal programmer and flashrom tool. If DUT is already flashed with the Dasharo firmware and only the logo should be replaced, the following command should be used: sudo flashrom -p internal --fmap -i BOOTSPLASH -w [ path ] If also the procedure of Dasharo firmware updating should be performed, the following command should be used: flashrom -p internal -w [ path-to-binary ] --fmap -i RW_SECTION_A In any other cases, the following command should be used: flashrom -p internal -w [ path-to-binary ] --ifd -i bios Reboot DUT. Expected result During the DUT booting process, custom logo should appear on the screen. LCM003.001 Attempt to flash firmware with improper image Test description This test aims to verify whether the attempt to flash the DUT with firmware with an improper logo is possible but will result in a fallback to the default logo. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Based on the dedicated documentation build firmware with the logo, that that does not meet the Quality criteria . Flash the firmware by using the internal programmer and flashrom tool. If DUT is already flashed with the Dasharo firmware and only the logo should be replaced, the following command should be used: sudo flashrom -p internal --fmap -i BOOTSPLASH -w [ path ] If also the procedure of Dasharo firmware updating should be performed, the following command should be used: flashrom -p internal -w [ path-to-binary ] --fmap -i RW_SECTION_A In any other cases, the following command should be used: flashrom -p internal -w [ path-to-binary ] --ifd -i bios Reboot DUT. Expected result During the DUT booting process, the default logo should appear on the screen.","title":"Logo customization"},{"location":"unified-test-documentation/dasharo-compatibility/328-logo-customization-functionality/#dasharo-compatibility-logo-customization-functionality","text":"","title":"Dasharo Compatibility: Logo customization functionality"},{"location":"unified-test-documentation/dasharo-compatibility/328-logo-customization-functionality/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Get familiar with Logo customization procedure","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/328-logo-customization-functionality/#lcm001001-replace-logo-in-existing-image-and-flashing-firmware","text":"Test description The test aims to verify whether replacing the logo in the existing image is possible and, whether after flashing the DUT with the new image, the new logo will be shown properly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Current Dasharo firmware dedicated for the platform. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the boot menu. Select the iPXE Network boot option using the arrow keys and press Enter . Select the iPXE Shell option using the arrow keys and press Enter . Configure communication interface by using the following command: dhcp Connect to the DTS ipxe menu by using the following command: chain http://boot.3mdeb.com/dts.ipxe Wait for Enter an option: . Type in 9 and press Enter . Based on the dedicated documentation replace the logo in an existing image. Reboot the DUT and observe the boot logo. Expected result During the DUT booting process, custom logo should appear on the screen.","title":"LCM001.001 Replace logo in existing image and flashing firmware"},{"location":"unified-test-documentation/dasharo-compatibility/328-logo-customization-functionality/#lcm002001-build-image-with-custom-logo-and-flashing-firmware","text":"Test description This test aims to verify whether building an image with the custom logo is possible and, whether after flashing the DUT with the new image, the new logo will be shown properly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Based on the dedicated documentation build firmware with the custom logo. Flash the firmware by using the internal programmer and flashrom tool. If DUT is already flashed with the Dasharo firmware and only the logo should be replaced, the following command should be used: sudo flashrom -p internal --fmap -i BOOTSPLASH -w [ path ] If also the procedure of Dasharo firmware updating should be performed, the following command should be used: flashrom -p internal -w [ path-to-binary ] --fmap -i RW_SECTION_A In any other cases, the following command should be used: flashrom -p internal -w [ path-to-binary ] --ifd -i bios Reboot DUT. Expected result During the DUT booting process, custom logo should appear on the screen.","title":"LCM002.001 Build image with custom logo and flashing firmware"},{"location":"unified-test-documentation/dasharo-compatibility/328-logo-customization-functionality/#lcm003001-attempt-to-flash-firmware-with-improper-image","text":"Test description This test aims to verify whether the attempt to flash the DUT with firmware with an improper logo is possible but will result in a fallback to the default logo. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Based on the dedicated documentation build firmware with the logo, that that does not meet the Quality criteria . Flash the firmware by using the internal programmer and flashrom tool. If DUT is already flashed with the Dasharo firmware and only the logo should be replaced, the following command should be used: sudo flashrom -p internal --fmap -i BOOTSPLASH -w [ path ] If also the procedure of Dasharo firmware updating should be performed, the following command should be used: flashrom -p internal -w [ path-to-binary ] --fmap -i RW_SECTION_A In any other cases, the following command should be used: flashrom -p internal -w [ path-to-binary ] --ifd -i bios Reboot DUT. Expected result During the DUT booting process, the default logo should appear on the screen.","title":"LCM003.001 Attempt to flash firmware with improper image"},{"location":"unified-test-documentation/dasharo-compatibility/341-pfSense-support/","text":"Dasharo Compatibility: pfSense support Test cases common documentation Test setup Proceed with the Generic test setup: firmware . PFS001.001 pfSense stable (serial output) installation on Hard Disk Test description This test aims to verify that PfSense stable (serial output) could be installed on the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense stable Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. Expected result The information about successful installation should be displayed. PFS001.002 Boot pfSense stable (serial output) from Hard Disk Test description This test aims to verify that pfSense stable (serial output) could be booted from the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the device on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. PFS002.001 pfSense stable (VGA output) installation on Hard Disk Test description This test aims to verify that pfSense stable (VGA output) could be installed on the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense stable Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. Expected result The information about successful installation should be displayed. PFS002.002 Boot pfSense stable (VGA output) from Hard Disk Test description This test aims to verify that pfSense stable (VGA output) could be booted from the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the device on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"pfSense support"},{"location":"unified-test-documentation/dasharo-compatibility/341-pfSense-support/#dasharo-compatibility-pfsense-support","text":"","title":"Dasharo Compatibility: pfSense support"},{"location":"unified-test-documentation/dasharo-compatibility/341-pfSense-support/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/341-pfSense-support/#pfs001001-pfsense-stable-serial-output-installation-on-hard-disk","text":"Test description This test aims to verify that PfSense stable (serial output) could be installed on the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense stable Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. Expected result The information about successful installation should be displayed.","title":"PFS001.001 pfSense stable (serial output) installation on Hard Disk"},{"location":"unified-test-documentation/dasharo-compatibility/341-pfSense-support/#pfs001002-boot-pfsense-stable-serial-output-from-hard-disk","text":"Test description This test aims to verify that pfSense stable (serial output) could be booted from the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the device on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"PFS001.002 Boot pfSense stable (serial output) from Hard Disk"},{"location":"unified-test-documentation/dasharo-compatibility/341-pfSense-support/#pfs002001-pfsense-stable-vga-output-installation-on-hard-disk","text":"Test description This test aims to verify that pfSense stable (VGA output) could be installed on the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense stable Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. Expected result The information about successful installation should be displayed.","title":"PFS002.001 pfSense stable (VGA output) installation on Hard Disk"},{"location":"unified-test-documentation/dasharo-compatibility/341-pfSense-support/#pfs002002-boot-pfsense-stable-vga-output-from-hard-disk","text":"Test description This test aims to verify that pfSense stable (VGA output) could be booted from the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the device on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"PFS002.002 Boot pfSense stable (VGA output) from Hard Disk"},{"location":"unified-test-documentation/dasharo-compatibility/342-OPNsense-support/","text":"Dasharo Compatibility: OPNsense support Test cases common documentation Test setup Proceed with the Generic test setup: firmware . OPN001.001 OPNsense stable (serial output) installation on Hard Disk Test description This test aims to verify that OPNsense stable (serial output) could be installed on the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense stable Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. Expected result The information about successful installation should be displayed. OPN001.002 Boot OPNsense stable (serial output) from Hard Disk Test description This test aims to verify that OPNsense stable serial could be booted from the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the device on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. OPN002.001 OPNsense stable (VGA output) installation on Hard Disk Test description This test aims to verify that OPNsense stable (VGA output) could be installed on the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense stable Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. Expected result The information about successful installation should be displayed. OPN002.002 Boot OPNsense stable (VGA output) from Hard Disk Test description This test aims to verify that OPNsense stable (VGA output) could be booted from the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the device on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"OPNsense support"},{"location":"unified-test-documentation/dasharo-compatibility/342-OPNsense-support/#dasharo-compatibility-opnsense-support","text":"","title":"Dasharo Compatibility: OPNsense support"},{"location":"unified-test-documentation/dasharo-compatibility/342-OPNsense-support/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/342-OPNsense-support/#opn001001-opnsense-stable-serial-output-installation-on-hard-disk","text":"Test description This test aims to verify that OPNsense stable (serial output) could be installed on the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense stable Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. Expected result The information about successful installation should be displayed.","title":"OPN001.001 OPNsense stable (serial output) installation on Hard Disk"},{"location":"unified-test-documentation/dasharo-compatibility/342-OPNsense-support/#opn001002-boot-opnsense-stable-serial-output-from-hard-disk","text":"Test description This test aims to verify that OPNsense stable serial could be booted from the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the device on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"OPN001.002 Boot OPNsense stable (serial output) from Hard Disk"},{"location":"unified-test-documentation/dasharo-compatibility/342-OPNsense-support/#opn002001-opnsense-stable-vga-output-installation-on-hard-disk","text":"Test description This test aims to verify that OPNsense stable (VGA output) could be installed on the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense stable Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. Expected result The information about successful installation should be displayed.","title":"OPN002.001 OPNsense stable (VGA output) installation on Hard Disk"},{"location":"unified-test-documentation/dasharo-compatibility/342-OPNsense-support/#opn002002-boot-opnsense-stable-vga-output-from-hard-disk","text":"Test description This test aims to verify that OPNsense stable (VGA output) could be booted from the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the device on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"OPN002.002 Boot OPNsense stable (VGA output) from Hard Disk"},{"location":"unified-test-documentation/dasharo-compatibility/343-super-I-O-initialization-on-QubesOS/","text":"Dasharo compatibility: Super I/O initialization - QubesOS Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . PPS001.001 PS/2 keyboard detection Test description This test aims to verify that the external PS/2 keyboard is detected correctly by the OPERATING_SYSTEM and that all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = QubesOS stable Test setup Proceed with the Test cases common documentation section. Install libinput-tools in dom0 on the DUT. Connect the external PS/2 keyboard to the PS/2 port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window in dom0 and run the following command: sudo dmesg | grep -i PS/2 Run the following command in the terminal: libinput debug-events --show-keycodes Test the alphanumeric keys and note the generated keycodes. Test non-alphanumeric keys and verify that they generate the correct keycodes. Test key combinations with the Shift , Ctrl and Alt modifier keys (this tests 2-key rollover). Expected result The external PS/2 keyboard is detected in OS. All standard keyboard keys generate the correct keycodes and events as per their labels. Key combinations are detected correctly.","title":"Super I/O initialization - QubesOS"},{"location":"unified-test-documentation/dasharo-compatibility/343-super-I-O-initialization-on-QubesOS/#dasharo-compatibility-super-io-initialization-qubesos","text":"","title":"Dasharo compatibility: Super I/O initialization - QubesOS"},{"location":"unified-test-documentation/dasharo-compatibility/343-super-I-O-initialization-on-QubesOS/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/343-super-I-O-initialization-on-QubesOS/#pps001001-ps2-keyboard-detection","text":"Test description This test aims to verify that the external PS/2 keyboard is detected correctly by the OPERATING_SYSTEM and that all basic keys work according to their labels. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = QubesOS stable Test setup Proceed with the Test cases common documentation section. Install libinput-tools in dom0 on the DUT. Connect the external PS/2 keyboard to the PS/2 port. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window in dom0 and run the following command: sudo dmesg | grep -i PS/2 Run the following command in the terminal: libinput debug-events --show-keycodes Test the alphanumeric keys and note the generated keycodes. Test non-alphanumeric keys and verify that they generate the correct keycodes. Test key combinations with the Shift , Ctrl and Alt modifier keys (this tests 2-key rollover). Expected result The external PS/2 keyboard is detected in OS. All standard keyboard keys generate the correct keycodes and events as per their labels. Key combinations are detected correctly.","title":"PPS001.001 PS/2 keyboard detection"},{"location":"unified-test-documentation/dasharo-compatibility/344-power-operations/","text":"Dasharo compatibility: Device power control operations Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . DPC001.001 Reset button (QubesOS) Test description This test aims to verify that the reset button works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = QubesOS stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Observe the power LED and use the reset button. Note the results. Expected result The DUT should perform a reset, the power LED should be on all the time. The DUT shouldn't perform a power cycle, the power LED shouldn't be off even for a moment.","title":"Device power control operations"},{"location":"unified-test-documentation/dasharo-compatibility/344-power-operations/#dasharo-compatibility-device-power-control-operations","text":"","title":"Dasharo compatibility: Device power control operations"},{"location":"unified-test-documentation/dasharo-compatibility/344-power-operations/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/344-power-operations/#dpc001001-reset-button-qubesos","text":"Test description This test aims to verify that the reset button works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = QubesOS stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Observe the power LED and use the reset button. Note the results. Expected result The DUT should perform a reset, the power LED should be on all the time. The DUT shouldn't perform a power cycle, the power LED shouldn't be off even for a moment.","title":"DPC001.001 Reset button (QubesOS)"},{"location":"unified-test-documentation/dasharo-compatibility/345-display-resolution/","text":"Dasharo compatibility: Display resolution - QubesOS Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . DSR001.001 Changing the display resolution Test description This test aims to verify that the display resolution could be changed in the OPERATING_SYSTEM and that the GUI is displayed correctly after this change. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = QubesOS stable Test setup Proceed with the Test cases common documentation section. Connect any display. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window in dom0 and run the following command: xrandr -s <display_resolution> Note the results. Expected result Changing the display resolution is possible. After changing the resolution, all icons and subtitles should be displayed correctly.","title":"Display Resolution - QubesOS"},{"location":"unified-test-documentation/dasharo-compatibility/345-display-resolution/#dasharo-compatibility-display-resolution-qubesos","text":"","title":"Dasharo compatibility: Display resolution - QubesOS"},{"location":"unified-test-documentation/dasharo-compatibility/345-display-resolution/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/345-display-resolution/#dsr001001-changing-the-display-resolution","text":"Test description This test aims to verify that the display resolution could be changed in the OPERATING_SYSTEM and that the GUI is displayed correctly after this change. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = QubesOS stable Test setup Proceed with the Test cases common documentation section. Connect any display. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window in dom0 and run the following command: xrandr -s <display_resolution> Note the results. Expected result Changing the display resolution is possible. After changing the resolution, all icons and subtitles should be displayed correctly.","title":"DSR001.001 Changing the display resolution"},{"location":"unified-test-documentation/dasharo-compatibility/346-SATA-hotplug-detection/","text":"Dasharo compatibility: SATA hot plug Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . SHT001.001 SATA hot plug (firmware) Test description This test aims to verify that the disk connected to the SATA port could be detected after hot-plug. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Any operating system should be installed on the SATA disk. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the UEFI Shell option using the arrow keys and press Enter . Execute the following command in the shell: map -t hd Note the results. Connect the disk to the SATA port. Execute the following command in the shell: map -t hd -r Expected result The output of the first command should contain mapping table for all hard disks connected to the device. The output of the second command should contain refreshed mapping table for all hard disks connected to the device. The refreshed list should contain additional item - mounted SATA disk. SHT001.002 SATA hot plug (Ubuntu 22.04) Test description This test aims to verify that the disk connected to the SATA port could be detected after hot-plug. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Connect the disk to the SATA port. Check that the connected disk is detected by running the following command: sudo parted -l Note the results. Expected result The SATA disk should be detected in OS, example output: ( ... ) Model: ATA SSDPR-CL100-240- ( scsi ) Disk /dev/sda: 240GB Sector size ( logical/physical ) : 512B/512B Partition Table: gpt Disk Flags: Number Start End Size File system Name Flags 1 1049kB 538MB 537MB fat32 EFI System Partition boot, esp 2 538MB 240GB 240GB ext4 ( ... ) SHT001.003 SATA hot plug (Windows 11) Test description This test aims to verify that the disk connected to the SATA port could be detected after hot-plug. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Connect the disk to the SATA port. Check that the connected disk is detected by running the following command: Get-WMIObject -Class Win32_DiskDrive Note the results. Expected result The SATA disk should be detected in OS, example output: (...) Partitions : 4 DeviceID : \\\\.\\ PHYSICALDRIVE0 Model : SSDPR-CL100 - 240-G2 Size : 240054796800 Caption : SSDPR-CL100 - 240-G2 (...)","title":"SATA hot plug"},{"location":"unified-test-documentation/dasharo-compatibility/346-SATA-hotplug-detection/#dasharo-compatibility-sata-hot-plug","text":"","title":"Dasharo compatibility: SATA hot plug"},{"location":"unified-test-documentation/dasharo-compatibility/346-SATA-hotplug-detection/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/346-SATA-hotplug-detection/#sht001001-sata-hot-plug-firmware","text":"Test description This test aims to verify that the disk connected to the SATA port could be detected after hot-plug. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Any operating system should be installed on the SATA disk. Test steps Power on the DUT. Hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Select the UEFI Shell option using the arrow keys and press Enter . Execute the following command in the shell: map -t hd Note the results. Connect the disk to the SATA port. Execute the following command in the shell: map -t hd -r Expected result The output of the first command should contain mapping table for all hard disks connected to the device. The output of the second command should contain refreshed mapping table for all hard disks connected to the device. The refreshed list should contain additional item - mounted SATA disk.","title":"SHT001.001 SATA hot plug (firmware)"},{"location":"unified-test-documentation/dasharo-compatibility/346-SATA-hotplug-detection/#sht001002-sata-hot-plug-ubuntu-2204","text":"Test description This test aims to verify that the disk connected to the SATA port could be detected after hot-plug. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Connect the disk to the SATA port. Check that the connected disk is detected by running the following command: sudo parted -l Note the results. Expected result The SATA disk should be detected in OS, example output: ( ... ) Model: ATA SSDPR-CL100-240- ( scsi ) Disk /dev/sda: 240GB Sector size ( logical/physical ) : 512B/512B Partition Table: gpt Disk Flags: Number Start End Size File system Name Flags 1 1049kB 538MB 537MB fat32 EFI System Partition boot, esp 2 538MB 240GB 240GB ext4 ( ... )","title":"SHT001.002 SATA hot plug (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/346-SATA-hotplug-detection/#sht001003-sata-hot-plug-windows-11","text":"Test description This test aims to verify that the disk connected to the SATA port could be detected after hot-plug. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Connect the disk to the SATA port. Check that the connected disk is detected by running the following command: Get-WMIObject -Class Win32_DiskDrive Note the results. Expected result The SATA disk should be detected in OS, example output: (...) Partitions : 4 DeviceID : \\\\.\\ PHYSICALDRIVE0 Model : SSDPR-CL100 - 240-G2 Size : 240054796800 Caption : SSDPR-CL100 - 240-G2 (...)","title":"SHT001.003 SATA hot plug (Windows 11)"},{"location":"unified-test-documentation/dasharo-compatibility/347-sign-of-life/","text":"Dasharo compatibility: Sign of life Test cases common documentation Test setup Proceed with the Generic test setup: firmware . SOL001.001 SOL string shows Dasharo firmware and EC version Test description This test aims to verify that the information about the version of Dasharo firmware and Dasharo EC firmware is recognized correctly and displayed during the boot phase. Test configuration data FIRMWARE = Dasharo EC firmware = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Sign of life string. Note the results. Expected result During the boot phase, the information about the version of Dasharo firmware and Dasharo EC firmware should be displayed. Example output: Firmware version: Dasahro ( coreboot+UEFI ) v1.5.0 EC firmware version: 2023 -03-20_c398446 SOL002.001 SOL string shows information about proprietary EC Test description This test aims to verify that the information about the version of Dasharo firmware and proprietary EC firmware is recognized correctly and displayed during the boot phase. Test configuration data FIRMWARE = Dasharo EC firmware = Proprietary Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Sign of life string. Note the results. Expected result During the boot phase, the information about the version of Dasharo firmware and proprietary EC firmware should be displayed. In addition, the prompt asking for updated EC firmware should be displayed also. Example output: Firmware version: Dasahro ( coreboot+UEFI ) v1.5.0 EC firmware version: 1 .07.02 Proprietary EC firmware detected! Please update your EC firmware per docs.dasharo.com instructions!","title":"Sign of life"},{"location":"unified-test-documentation/dasharo-compatibility/347-sign-of-life/#dasharo-compatibility-sign-of-life","text":"","title":"Dasharo compatibility: Sign of life"},{"location":"unified-test-documentation/dasharo-compatibility/347-sign-of-life/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/347-sign-of-life/#sol001001-sol-string-shows-dasharo-firmware-and-ec-version","text":"Test description This test aims to verify that the information about the version of Dasharo firmware and Dasharo EC firmware is recognized correctly and displayed during the boot phase. Test configuration data FIRMWARE = Dasharo EC firmware = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Sign of life string. Note the results. Expected result During the boot phase, the information about the version of Dasharo firmware and Dasharo EC firmware should be displayed. Example output: Firmware version: Dasahro ( coreboot+UEFI ) v1.5.0 EC firmware version: 2023 -03-20_c398446","title":"SOL001.001 SOL string shows Dasharo firmware and EC version"},{"location":"unified-test-documentation/dasharo-compatibility/347-sign-of-life/#sol002001-sol-string-shows-information-about-proprietary-ec","text":"Test description This test aims to verify that the information about the version of Dasharo firmware and proprietary EC firmware is recognized correctly and displayed during the boot phase. Test configuration data FIRMWARE = Dasharo EC firmware = Proprietary Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Wait for the Sign of life string. Note the results. Expected result During the boot phase, the information about the version of Dasharo firmware and proprietary EC firmware should be displayed. In addition, the prompt asking for updated EC firmware should be displayed also. Example output: Firmware version: Dasahro ( coreboot+UEFI ) v1.5.0 EC firmware version: 1 .07.02 Proprietary EC firmware detected! Please update your EC firmware per docs.dasharo.com instructions!","title":"SOL002.001 SOL string shows information about proprietary EC"},{"location":"unified-test-documentation/dasharo-compatibility/348-proxmox-support/","text":"Dasharo Compatibility: Proxmox support Test cases common documentation Test setup Proceed with the Generic test setup: firmware . PVE001.001 Proxmox Virtual Environment stable installation on Hard Disk Test description This test aims to verify that Proxmox VE stable could be installed on the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Proxmox VE stable Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. Expected result The information about successful installation should be displayed. PVE001.002 Boot Proxmox Virtual Environment stable from Hard Disk Test description This test aims to verify that Proxmox VE stable could be booted from the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Proxmox VE stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the device on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"Proxmox support"},{"location":"unified-test-documentation/dasharo-compatibility/348-proxmox-support/#dasharo-compatibility-proxmox-support","text":"","title":"Dasharo Compatibility: Proxmox support"},{"location":"unified-test-documentation/dasharo-compatibility/348-proxmox-support/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/348-proxmox-support/#pve001001-proxmox-virtual-environment-stable-installation-on-hard-disk","text":"Test description This test aims to verify that Proxmox VE stable could be installed on the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Proxmox VE stable Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. Expected result The information about successful installation should be displayed.","title":"PVE001.001 Proxmox Virtual Environment stable installation on Hard Disk"},{"location":"unified-test-documentation/dasharo-compatibility/348-proxmox-support/#pve001002-boot-proxmox-virtual-environment-stable-from-hard-disk","text":"Test description This test aims to verify that Proxmox VE stable could be booted from the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Proxmox VE stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the device on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"PVE001.002 Boot Proxmox Virtual Environment stable from Hard Disk"},{"location":"unified-test-documentation/dasharo-compatibility/349-ubuntu-server-support/","text":"Dasharo Compatibility: Ubuntu Server support Test cases common documentation Test setup Proceed with the Generic test setup: firmware . USS001.001 Ubuntu Server stable installation on Hard Disk Test description This test aims to verify that Ubuntu Server stable could be installed on the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu Server stable Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. Expected result The information about successful installation should be displayed. USS001.002 Boot Ubuntu Server stable from Hard Disk Test description This test aims to verify that Ubuntu Server stable could be booted from the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu Server stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the device on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"Ubuntu Server support"},{"location":"unified-test-documentation/dasharo-compatibility/349-ubuntu-server-support/#dasharo-compatibility-ubuntu-server-support","text":"","title":"Dasharo Compatibility: Ubuntu Server support"},{"location":"unified-test-documentation/dasharo-compatibility/349-ubuntu-server-support/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/349-ubuntu-server-support/#uss001001-ubuntu-server-stable-installation-on-hard-disk","text":"Test description This test aims to verify that Ubuntu Server stable could be installed on the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu Server stable Test setup Proceed with the Test cases common documentation section. Test steps According to the Documentation perform the OS installation process. Expected result The information about successful installation should be displayed.","title":"USS001.001 Ubuntu Server stable installation on Hard Disk"},{"location":"unified-test-documentation/dasharo-compatibility/349-ubuntu-server-support/#uss001002-boot-ubuntu-server-stable-from-hard-disk","text":"Test description This test aims to verify that Ubuntu Server stable could be booted from the hard disk on the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu Server stable Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the device on which the system was previously installed. Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"USS001.002 Boot Ubuntu Server stable from Hard Disk"},{"location":"unified-test-documentation/dasharo-compatibility/357-bios-menu-function-keys/","text":"Dasharo Compatibility: BIOS menu function keys Test cases common documentation Test setup Proceed with the Generic test setup: firmware . BMF001.001 Reset to Defaults option Test description This test aims to verify that the F9 key feature properly reset to Defaults all Dasharo System Features settings. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Dasharo System Features menu option. Enter the any of submenus eg. Power Management Options . Verify that the F9=Reset to Defaults entry is displayed at the bottom of the screen. Press F9 to reset options to defaults. Press Y to confirm saving the changes. Go back to the main menu using the ESC key. If necessary - press Y to confirm saving the changes again. Select the Reset option to apply the settings and reboot. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Dasharo System Features menu option. Check the state of each option in each submenu. Note the results. Expected result The F9=Reset to Defaults entry is displayed in each submenu of Dasharo System Features. After using the F9 key, all Dasharo System Features options should be set to default. All options covered by this functionality can be found here .","title":"BIOS menu function keys"},{"location":"unified-test-documentation/dasharo-compatibility/357-bios-menu-function-keys/#dasharo-compatibility-bios-menu-function-keys","text":"","title":"Dasharo Compatibility: BIOS menu function keys"},{"location":"unified-test-documentation/dasharo-compatibility/357-bios-menu-function-keys/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/357-bios-menu-function-keys/#bmf001001-reset-to-defaults-option","text":"Test description This test aims to verify that the F9 key feature properly reset to Defaults all Dasharo System Features settings. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Dasharo System Features menu option. Enter the any of submenus eg. Power Management Options . Verify that the F9=Reset to Defaults entry is displayed at the bottom of the screen. Press F9 to reset options to defaults. Press Y to confirm saving the changes. Go back to the main menu using the ESC key. If necessary - press Y to confirm saving the changes again. Select the Reset option to apply the settings and reboot. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Dasharo System Features menu option. Check the state of each option in each submenu. Note the results. Expected result The F9=Reset to Defaults entry is displayed in each submenu of Dasharo System Features. After using the F9 key, all Dasharo System Features options should be set to default. All options covered by this functionality can be found here .","title":"BMF001.001 Reset to Defaults option"},{"location":"unified-test-documentation/dasharo-compatibility/358-suspend-mechanism-switching-S0ix-S3/","text":"Dasharo Compatibility: Suspend mechanism switching (S0ix/S3) Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . SMS001.001 Suspend to Idle (S0ix) check (Ubuntu 22.04) Test description This test aims to verify whether the Suspend to Idle (S0ix) option selected in the BIOS firmware is correctly recognised in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Enter the BIOS setup using BIOS_SETUP_KEY . Inside the BIOS setup, navigate to Dasharo System Features -> Power Management Options -> Platform Sleep Type and choose the option Suspend to Idle (S0ix) . Press F10 and confirm with y key to save selected settings. Select reset option to reboot the system. After the system reboots, log into the system by using the proper login and password. Open a terminal window and execute the following command to confirm that Suspend to Idle (S0ix) mode is enabled and properly recognised in the OS: sudo cat /sys/power/mem_sleep Note the results. Expected result The output from the command above should contain the phrase s2idle enclosed in square brackets, indicating that the Suspend to Idle (S0ix) mode is enabled. Example output: [ s2idle ] shallow SMS001.002 Suspend to RAM (S3) check (Ubuntu 22.04) Test description This test aims to verify whether the Suspend to RAM (S3) option selected in the BIOS firmware is correctly recognised in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Enter the BIOS setup using BIOS_SETUP_KEY . Inside the BIOS setup, navigate to Dasharo System Features -> Power Management Options -> Platform Sleep Type and choose the option Suspend to RAM (S3) . Press F10 and confirm with y key to save selected settings. Select reset option to reboot the system. After the system reboots, log into the system by using the proper login and password. Open a terminal window and execute the following command to confirm that Suspend to RAM (S3) mode is enabled and properly recognised in the OS: sudo cat /sys/power/mem_sleep Note the results. Expected result The output from the command above should contain the phrase deep enclosed in square brackets, indicating that the Suspend to RAM (S3) mode is enabled. Example output: s2idle [ deep ]","title":"Suspend Mechanism Switching S0ix/S3"},{"location":"unified-test-documentation/dasharo-compatibility/358-suspend-mechanism-switching-S0ix-S3/#dasharo-compatibility-suspend-mechanism-switching-s0ixs3","text":"","title":"Dasharo Compatibility: Suspend mechanism switching (S0ix/S3)"},{"location":"unified-test-documentation/dasharo-compatibility/358-suspend-mechanism-switching-S0ix-S3/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/358-suspend-mechanism-switching-S0ix-S3/#sms001001-suspend-to-idle-s0ix-check-ubuntu-2204","text":"Test description This test aims to verify whether the Suspend to Idle (S0ix) option selected in the BIOS firmware is correctly recognised in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Enter the BIOS setup using BIOS_SETUP_KEY . Inside the BIOS setup, navigate to Dasharo System Features -> Power Management Options -> Platform Sleep Type and choose the option Suspend to Idle (S0ix) . Press F10 and confirm with y key to save selected settings. Select reset option to reboot the system. After the system reboots, log into the system by using the proper login and password. Open a terminal window and execute the following command to confirm that Suspend to Idle (S0ix) mode is enabled and properly recognised in the OS: sudo cat /sys/power/mem_sleep Note the results. Expected result The output from the command above should contain the phrase s2idle enclosed in square brackets, indicating that the Suspend to Idle (S0ix) mode is enabled. Example output: [ s2idle ] shallow","title":"SMS001.001 Suspend to Idle (S0ix) check (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/358-suspend-mechanism-switching-S0ix-S3/#sms001002-suspend-to-ram-s3-check-ubuntu-2204","text":"Test description This test aims to verify whether the Suspend to RAM (S3) option selected in the BIOS firmware is correctly recognised in the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Enter the BIOS setup using BIOS_SETUP_KEY . Inside the BIOS setup, navigate to Dasharo System Features -> Power Management Options -> Platform Sleep Type and choose the option Suspend to RAM (S3) . Press F10 and confirm with y key to save selected settings. Select reset option to reboot the system. After the system reboots, log into the system by using the proper login and password. Open a terminal window and execute the following command to confirm that Suspend to RAM (S3) mode is enabled and properly recognised in the OS: sudo cat /sys/power/mem_sleep Note the results. Expected result The output from the command above should contain the phrase deep enclosed in square brackets, indicating that the Suspend to RAM (S3) mode is enabled. Example output: s2idle [ deep ]","title":"SMS001.002 Suspend to RAM (S3) check (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/359-battery-boot-block/","text":"Dasharo Compatibility: Battery boot block Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . BBB001.001 Boot blocking (charger disconnected) (Ubuntu 22.04) Test description This test aims to verify that booting is blocked when the battery level is below 5% with charger disconnected from the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Make sure the charger is not plugged into the DUT. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and install stress-ng package by executing following command: sudo apt install stress-ng Open a terminal window and run following bash script: get_battery_level () { battery_level = $( cat /sys/class/power_supply/BAT0/capacity ) echo \" $battery_level \" } target_battery_level = 3 while true ; do current_battery_level = $( get_battery_level ) echo \"Current battery level: $current_battery_level %\" if [ \" $current_battery_level \" -le \" $target_battery_level \" ] ; then echo \"Battery level reached 3%. Stopping stress-ng.\" break fi stress-ng --cpu 0 --timeout 10s done After the script finished working, reboot the DUT. Expected result The bash script reads current battery charge level and stresses the CPU until the battery charge level reaches below 5%. Example output: Current battery level: 92 % stress-ng: info: [ 25309 ] setting to a 10 secs run per stressor stress-ng: info: [ 25309 ] dispatching hogs: 16 cpu After reboot, booting into the OS should be blocked and following warning message should appear: BBB001.002 Boot blocking (charger connected) (Ubuntu 22.04) Test description This test aims to verify that booting is not blocked when the battery level is below 5% with charger connected to the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Make sure the charger is not plugged into the DUT. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and install stress-ng package by executing following command: sudo apt install stress-ng Open a terminal window and run following bash script: get_battery_level () { battery_level = $( cat /sys/class/power_supply/BAT0/capacity ) echo \" $battery_level \" } target_battery_level = 3 while true ; do current_battery_level = $( get_battery_level ) echo \"Current battery level: $current_battery_level %\" if [ \" $current_battery_level \" -le \" $target_battery_level \" ] ; then echo \"Battery level reached 3%. Stopping stress-ng.\" break fi stress-ng --cpu 0 --timeout 10s done After the script finished working, plug the charger into the DUT. Reboot the DUT. Expected Result After reboot, the warning message should not appear and the DUT should boot normally. BBB002.001 Battery not connected warning (Firmware) Test description This test aims to verify whether a warning message appears when the battery is disconnected from the DUT. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Unscrew the bottom cover from the DUT. Disconnect the battery (1) Reattach the bottom cover and flip the DUT over. Plug the charger into the DUT. Power on the DUT. Expected result After powering on the DUT, following warning message should appear: After pressing enter or passing the timeout, the DUT should continue booting.","title":"Block boot when battery is low"},{"location":"unified-test-documentation/dasharo-compatibility/359-battery-boot-block/#dasharo-compatibility-battery-boot-block","text":"","title":"Dasharo Compatibility: Battery boot block"},{"location":"unified-test-documentation/dasharo-compatibility/359-battery-boot-block/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/359-battery-boot-block/#bbb001001-boot-blocking-charger-disconnected-ubuntu-2204","text":"Test description This test aims to verify that booting is blocked when the battery level is below 5% with charger disconnected from the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Make sure the charger is not plugged into the DUT. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and install stress-ng package by executing following command: sudo apt install stress-ng Open a terminal window and run following bash script: get_battery_level () { battery_level = $( cat /sys/class/power_supply/BAT0/capacity ) echo \" $battery_level \" } target_battery_level = 3 while true ; do current_battery_level = $( get_battery_level ) echo \"Current battery level: $current_battery_level %\" if [ \" $current_battery_level \" -le \" $target_battery_level \" ] ; then echo \"Battery level reached 3%. Stopping stress-ng.\" break fi stress-ng --cpu 0 --timeout 10s done After the script finished working, reboot the DUT. Expected result The bash script reads current battery charge level and stresses the CPU until the battery charge level reaches below 5%. Example output: Current battery level: 92 % stress-ng: info: [ 25309 ] setting to a 10 secs run per stressor stress-ng: info: [ 25309 ] dispatching hogs: 16 cpu After reboot, booting into the OS should be blocked and following warning message should appear:","title":"BBB001.001 Boot blocking (charger disconnected) (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/359-battery-boot-block/#bbb001002-boot-blocking-charger-connected-ubuntu-2204","text":"Test description This test aims to verify that booting is not blocked when the battery level is below 5% with charger connected to the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Make sure the charger is not plugged into the DUT. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and install stress-ng package by executing following command: sudo apt install stress-ng Open a terminal window and run following bash script: get_battery_level () { battery_level = $( cat /sys/class/power_supply/BAT0/capacity ) echo \" $battery_level \" } target_battery_level = 3 while true ; do current_battery_level = $( get_battery_level ) echo \"Current battery level: $current_battery_level %\" if [ \" $current_battery_level \" -le \" $target_battery_level \" ] ; then echo \"Battery level reached 3%. Stopping stress-ng.\" break fi stress-ng --cpu 0 --timeout 10s done After the script finished working, plug the charger into the DUT. Reboot the DUT. Expected Result After reboot, the warning message should not appear and the DUT should boot normally.","title":"BBB001.002 Boot blocking (charger connected) (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-compatibility/359-battery-boot-block/#bbb002001-battery-not-connected-warning-firmware","text":"Test description This test aims to verify whether a warning message appears when the battery is disconnected from the DUT. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Unscrew the bottom cover from the DUT. Disconnect the battery (1) Reattach the bottom cover and flip the DUT over. Plug the charger into the DUT. Power on the DUT. Expected result After powering on the DUT, following warning message should appear: After pressing enter or passing the timeout, the DUT should continue booting.","title":"BBB002.001 Battery not connected warning (Firmware)"},{"location":"unified-test-documentation/dasharo-compatibility/S30-fan-speed/","text":"Dasharo Compatibility: Fan speed measure Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . FAN001.001 CPU fan speed measure Test description This test aims to verify that the CPU fan works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Install lm-sensors on the DUT. If the command in the 4th step fails, make sure the system76_acpi driver is available on your system. An appropriate kernel version could be installed with the command sudo apt install linux-oem-22.04a , which version definitely supports this driver. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. In the terminal window run the following command to get the RPM value of the CPU fan: sensors | grep \"CPU fan\" Note the results. Expected result The CPU fan RPM value is displayed and isn't zero. Example output: CPU fan: 4347 RPM FAN002.001 GPU fan speed measure Test description The fan has been configured to follow a custom curve. This test aims to verify that the fan curve is configured correctly and the fan spins up and down according to the defined values. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Install nvidia-smi and mesa-utils on the DUT. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open the terminal window and execute the following command: watch -n1 nvidia-smi Verify using that the temperature is below 40\u00b0C. If the temperature is above 40, enable the fan turbo mode (Fn + 1) until it cools down. Flip the laptop over and check if the GPU fan (located under the Escape key) is spinning. In another terminal window, run the following command: _NV_PRIME_RENDER_OFFLOAD = 1 __GLX_VENDOR_LIBRARY_NAME = nvidia __GL_SYNC_TO_VBLANK = 0 glxgears Verify that the temperature increases above 40. Flip the laptop over and check if the GPU fan is spinning. Expected result The fan should not be spinning while the temperature is below 40 degrees. The fan should be spinning while the temperature is above 40 degrees.","title":"Fan speed"},{"location":"unified-test-documentation/dasharo-compatibility/S30-fan-speed/#dasharo-compatibility-fan-speed-measure","text":"","title":"Dasharo Compatibility: Fan speed measure"},{"location":"unified-test-documentation/dasharo-compatibility/S30-fan-speed/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-compatibility/S30-fan-speed/#fan001001-cpu-fan-speed-measure","text":"Test description This test aims to verify that the CPU fan works correctly. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Install lm-sensors on the DUT. If the command in the 4th step fails, make sure the system76_acpi driver is available on your system. An appropriate kernel version could be installed with the command sudo apt install linux-oem-22.04a , which version definitely supports this driver. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. In the terminal window run the following command to get the RPM value of the CPU fan: sensors | grep \"CPU fan\" Note the results. Expected result The CPU fan RPM value is displayed and isn't zero. Example output: CPU fan: 4347 RPM","title":"FAN001.001 CPU fan speed measure"},{"location":"unified-test-documentation/dasharo-compatibility/S30-fan-speed/#fan002001-gpu-fan-speed-measure","text":"Test description The fan has been configured to follow a custom curve. This test aims to verify that the fan curve is configured correctly and the fan spins up and down according to the defined values. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Install nvidia-smi and mesa-utils on the DUT. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open the terminal window and execute the following command: watch -n1 nvidia-smi Verify using that the temperature is below 40\u00b0C. If the temperature is above 40, enable the fan turbo mode (Fn + 1) until it cools down. Flip the laptop over and check if the GPU fan (located under the Escape key) is spinning. In another terminal window, run the following command: _NV_PRIME_RENDER_OFFLOAD = 1 __GLX_VENDOR_LIBRARY_NAME = nvidia __GL_SYNC_TO_VBLANK = 0 glxgears Verify that the temperature increases above 40. Flip the laptop over and check if the GPU fan is spinning. Expected result The fan should not be spinning while the temperature is below 40 degrees. The fan should be spinning while the temperature is above 40 degrees.","title":"FAN002.001 GPU fan speed measure"},{"location":"unified-test-documentation/dasharo-compatibility/S31-coreboot-fan-control/","text":"Dasharo Compatibility: coreboot Fan Control FAN001.001 Check CPU entry temperature and CPU fan speed Test description This test aims to verify that data for CPU temperature and CPU fan speed is available. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Select the proper number for USB_STICK option. Wait for debian login: . Type proper login. Wait for Password: . Type the proper password. Wait for root@debian:~# . Execute watch -n 1 \"sensors w83795g-i2c-1-2f |grep fan1 -A 16\" . Expected result There are visible data for fan1 and temp7 which represents CPU fan speed and CPU temperature. FAN001.002 Check if increasing CPU temperature increases CPU fan speed Test description This test aims to verify that CPU fan speed responds properly to increasing CPU temperature. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Select the proper number for USB_STICK option. Wait for debian login: . Type proper login. Wait for Password: . Type the proper password. Wait for root@debian:~# . Install stress-ng package by executing: sudo apt install stress-ng . Confirm installation by typing Y and pressing Enter when asked. Execute command: watch -n 1 \"sensors w83795g-i2c-1-2f |grep fan1 -A 16\" and check current CPU temperature and CPU fan speed. Execute command: stress-ng --cpu 16 --io 8 --vm 4 --vm-bytes 4G --timeout 30s --metrics . Wait 2 minutes. Execute command: watch -n 1 \"sensors w83795g-i2c-1-2f |grep fan1 -A 16\" and check current CPU temperature and CPU fan speed. Expected result The CPU temperature after the second check is higher at least 20 degrees. The CPU fan speed after the second check is higher at least 1000 RPM.","title":"coreboot Fan control"},{"location":"unified-test-documentation/dasharo-compatibility/S31-coreboot-fan-control/#dasharo-compatibility-coreboot-fan-control","text":"","title":"Dasharo Compatibility: coreboot Fan Control"},{"location":"unified-test-documentation/dasharo-compatibility/S31-coreboot-fan-control/#fan001001-check-cpu-entry-temperature-and-cpu-fan-speed","text":"Test description This test aims to verify that data for CPU temperature and CPU fan speed is available. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Select the proper number for USB_STICK option. Wait for debian login: . Type proper login. Wait for Password: . Type the proper password. Wait for root@debian:~# . Execute watch -n 1 \"sensors w83795g-i2c-1-2f |grep fan1 -A 16\" . Expected result There are visible data for fan1 and temp7 which represents CPU fan speed and CPU temperature.","title":"FAN001.001 Check CPU entry temperature and CPU fan speed"},{"location":"unified-test-documentation/dasharo-compatibility/S31-coreboot-fan-control/#fan001002-check-if-increasing-cpu-temperature-increases-cpu-fan-speed","text":"Test description This test aims to verify that CPU fan speed responds properly to increasing CPU temperature. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Test steps Power on the DUT. Wait for boot until BOOT_MENU_STRING appears. Press BOOT_MENU_KEY to enter the boot menu. Select the proper number for USB_STICK option. Wait for debian login: . Type proper login. Wait for Password: . Type the proper password. Wait for root@debian:~# . Install stress-ng package by executing: sudo apt install stress-ng . Confirm installation by typing Y and pressing Enter when asked. Execute command: watch -n 1 \"sensors w83795g-i2c-1-2f |grep fan1 -A 16\" and check current CPU temperature and CPU fan speed. Execute command: stress-ng --cpu 16 --io 8 --vm 4 --vm-bytes 4G --timeout 30s --metrics . Wait 2 minutes. Execute command: watch -n 1 \"sensors w83795g-i2c-1-2f |grep fan1 -A 16\" and check current CPU temperature and CPU fan speed. Expected result The CPU temperature after the second check is higher at least 20 degrees. The CPU fan speed after the second check is higher at least 1000 RPM.","title":"FAN001.002 Check if increasing CPU temperature increases CPU fan speed"},{"location":"unified-test-documentation/dasharo-performance/400-coreboot-boot-measure/","text":"Dasharo Performance: coreboot boot measure Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Download cbmem from https://cloud.3mdeb.com/index.php/s/zTqkJQdNtJDo5Nd to the DUT. CBMEM001.001 coreboot booting time measure after coldboot (Ubuntu 22.04) Test description This test aims to verify whether the DUT boots after coldboot and how long this process takes. This test case may be re-done several times to to average the results and specify the platform stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: sudo ./cbmem -T Expected result The output of the command should contain the information about duration of all boot stages. CBMEM002.001 coreboot booting time measure after warmboot (Ubuntu 22.04) Test description This test aims to verify whether the DUT boots after warmboot and how long this process takes. This test case may be re-done several times to to average the results and specify the platform stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: sudo ./cbmem -T Expected result The output of the command should contain the information about duration of all boot stages. CBMEM003.001 coreboot booting time measure after system reboot (Ubuntu 22.04) Test description This test aims to verify whether the DUT boots after system reboot and how long this process takes. This test case may be re-done several times to to average the results and specify the platform stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: sudo ./cbmem -T Expected result The output of the command should contain the information about duration of all boot stages.","title":"Coreboot boot measure"},{"location":"unified-test-documentation/dasharo-performance/400-coreboot-boot-measure/#dasharo-performance-coreboot-boot-measure","text":"","title":"Dasharo Performance: coreboot boot measure"},{"location":"unified-test-documentation/dasharo-performance/400-coreboot-boot-measure/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Download cbmem from https://cloud.3mdeb.com/index.php/s/zTqkJQdNtJDo5Nd to the DUT.","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-performance/400-coreboot-boot-measure/#cbmem001001-coreboot-booting-time-measure-after-coldboot-ubuntu-2204","text":"Test description This test aims to verify whether the DUT boots after coldboot and how long this process takes. This test case may be re-done several times to to average the results and specify the platform stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: sudo ./cbmem -T Expected result The output of the command should contain the information about duration of all boot stages.","title":"CBMEM001.001 coreboot booting time measure after coldboot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-performance/400-coreboot-boot-measure/#cbmem002001-coreboot-booting-time-measure-after-warmboot-ubuntu-2204","text":"Test description This test aims to verify whether the DUT boots after warmboot and how long this process takes. This test case may be re-done several times to to average the results and specify the platform stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: sudo ./cbmem -T Expected result The output of the command should contain the information about duration of all boot stages.","title":"CBMEM002.001 coreboot booting time measure after warmboot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-performance/400-coreboot-boot-measure/#cbmem003001-coreboot-booting-time-measure-after-system-reboot-ubuntu-2204","text":"Test description This test aims to verify whether the DUT boots after system reboot and how long this process takes. This test case may be re-done several times to to average the results and specify the platform stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Open a terminal window and execute the following command: sudo ./cbmem -T Expected result The output of the command should contain the information about duration of all boot stages.","title":"CBMEM003.001 coreboot booting time measure after system reboot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-performance/401-cpu-temperature/","text":"Dasharo Performance: CPU temperature measure Common Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Install lm-sensors package: sudo apt install lm-sensors . CPT001.001 CPU temperature without load (Ubuntu 22.04) Test description This test aims to verify whether the temperature of CPU cores after system booting is not higher than the maximum allowed temperature. Test configuration data FIRMWARE = coreboot OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sensors Note the result. Expected result Example output: coretemp-isa-0000 Adapter: ISA adapter Package id 0 : +34.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) Core 0 : +34.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) Core 1 : +34.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) Core 2 : +32.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) Core 3 : +33.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) Displayed temperature should be not higher than declared by the DUT specifications. CPT002.001 CPU temperature during stress test (Ubuntu 22.04) Test description This test aims to verify whether the temperature of the CPU cores is not higher than the maximum allowed temperature during stress test. Test configuration data FIRMWARE = coreboot OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the stress-ng package: sudo apt install stress-ng . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command to turn on the stressor: stress-ng --cpu 0 --tz -t 60m Stress test duration time might be changed by change the value of the parameter -t . While test runs, open a terminal window and run the following command every one minute until the test finishes, to check the current temperature. sensors Note the results. Expected result Example output: coretemp-isa-0000 Adapter: ISA adapter Package id 0 : +54.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) Core 0 : +50.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) Core 1 : +49.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) Core 2 : +53.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) Core 3 : +51.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) The displayed temperatures should be not higher than displayed high and critical. Also the temperatures should be not higher than those declared by the DUT's producer.","title":"CPU temperature measure"},{"location":"unified-test-documentation/dasharo-performance/401-cpu-temperature/#dasharo-performance-cpu-temperature-measure","text":"","title":"Dasharo Performance: CPU temperature measure"},{"location":"unified-test-documentation/dasharo-performance/401-cpu-temperature/#common","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Install lm-sensors package: sudo apt install lm-sensors .","title":"Common"},{"location":"unified-test-documentation/dasharo-performance/401-cpu-temperature/#cpt001001-cpu-temperature-without-load-ubuntu-2204","text":"Test description This test aims to verify whether the temperature of CPU cores after system booting is not higher than the maximum allowed temperature. Test configuration data FIRMWARE = coreboot OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sensors Note the result. Expected result Example output: coretemp-isa-0000 Adapter: ISA adapter Package id 0 : +34.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) Core 0 : +34.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) Core 1 : +34.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) Core 2 : +32.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) Core 3 : +33.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) Displayed temperature should be not higher than declared by the DUT specifications.","title":"CPT001.001 CPU temperature without load (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-performance/401-cpu-temperature/#cpt002001-cpu-temperature-during-stress-test-ubuntu-2204","text":"Test description This test aims to verify whether the temperature of the CPU cores is not higher than the maximum allowed temperature during stress test. Test configuration data FIRMWARE = coreboot OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the stress-ng package: sudo apt install stress-ng . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command to turn on the stressor: stress-ng --cpu 0 --tz -t 60m Stress test duration time might be changed by change the value of the parameter -t . While test runs, open a terminal window and run the following command every one minute until the test finishes, to check the current temperature. sensors Note the results. Expected result Example output: coretemp-isa-0000 Adapter: ISA adapter Package id 0 : +54.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) Core 0 : +50.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) Core 1 : +49.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) Core 2 : +53.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) Core 3 : +51.0\u00b0C ( high = +100.0\u00b0C, crit = +100.0\u00b0C ) The displayed temperatures should be not higher than displayed high and critical. Also the temperatures should be not higher than those declared by the DUT's producer.","title":"CPT002.001 CPU temperature during stress test (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/","text":"Dasharo Performance: CPU frequency measure Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . CPF001.001 CPU not stuck on initial frequency (Ubuntu 22.04) Test description This test aims to verify whether the mounted CPU does not stuck on the initial frequency after booting into the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: cat /proc/cpuinfo | grep -i mhz Note the results. Expected result The output of the command should contain information about the current frequency of each CPU core. If the current frequency for each core is the same as initial frequency, the test should be considered as failed. Example output with unwanted results: cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 CPF001.002 CPU not stuck on initial frequency (Windows 11) Test description This test aims to verify whether the mounted CPU does not stuck on the initial frequency after booting into the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a powershell as administrator and run the following command: while ( 1 ){( Get-CimInstance CIM_Processor ). MaxClockSpeed *(( Get-Counter -Counter \"\\Processor Information(_Total)\\% Processor Performance\" ). CounterSamples . CookedValue )/ 100 } Note the results. Expected result The output of the command should contain information about the current frequency of CPU. If the following frequency values are the same, the test should be considered as failed. Example output with unwanted results: 2800 .00000000000 2800 .00000000000 2800 .00000000000 2800 .00000000000 2800 .00000000000 2800 .00000000000 2800 .00000000000 2800 .00000000000 CPF001.003 CPU not stuck on initial frequency (Heads+Debian) Test description This test aims to verify whether the mounted CPU does not stuck on the initial frequency after booting into the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 12 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: cat /proc/cpuinfo | grep -i mhz Note the results. Expected result The output of the command should contain information about the current frequency of each CPU core. If the current frequency for each core is the same as initial frequency, the test should be considered as failed. Example output with unwanted results: cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 CPF002.001 CPU runs on expected frequency (Ubuntu 22.04) Test description This test aims to verify whether the mounted CPU is running on expected frequency. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lscpu | grep -i mhz Note the results. Run the following command in the terminal: cat /proc/cpuinfo | grep -i mhz Repeat command every one minute, for 60 minutes. Compare the results. Expected result The result of running the first command should contain the information about current, minimum and maximum CPU frequency. Example output: CPU MHz: 2800 .0000 CPU max MHz: 4700 .0000 CPU min MHz: 400 .0000 The result of running the second command should contain the information about current frequency of each CPU core. Example output: cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 900 .542 cpu MHz : 461 .831 None of CPU core frequencies should be higher than maximum frequency or lower than minimum frequency. CPF002.002 CPU runs on expected frequency (Windows 11) Test description This test aims to verify whether the mounted CPU is running on expected frequency. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a powershell as administrator and run the following command: ( Get-CimInstance CIM_Processor ). MaxClockSpeed Note the result. Run the following command in the powershell: while ( 1 ){( Get-CimInstance CIM_Processor ). MaxClockSpeed *(( Get-Counter -Counter \"\\Processor Information(_Total)\\% Processor Performance\" ). CounterSamples . CookedValue )/ 100 } Repeat command every one minute, for 60 minutes. Note the results. Expected result The result of running the first command should contain the information about maximum CPU frequency. Example output: 2419 None of displayed values \u200b\u200bthat follow the second command should be higher than maximum frequency. Example output: 1023 .98759600614 1009 .23827168367 940 .831608527132 1201 .62695181908 1140 .59449053201 1021 .87762893503 983 .647614379085 1206 .27777992278 CPF003.001 CPU runs on expected frequency (Ubuntu 22.04, battery) Test description This test aims to verify whether the mounted CPU is running on expected frequency when charger is disconnected. The DUT during test works on battery. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lscpu | grep -i mhz Note the results. Run the following command in the terminal: cat /proc/cpuinfo | grep -i mhz Repeat command every one minute, for 60 minutes. Compare the results. Expected result The result of running the first command should contain the information about current, minimum and maximum CPU frequency. Example output: CPU MHz: 1800 .000 CPU max MHz: 3900 .0000 CPU min MHz: 1600 .0000 The result of running the second command should contain the information about current frequency of each CPU core. Example output: cpu MHz : 1700 .000 cpu MHz : 3719 .954 cpu MHz : 1600 .000 cpu MHz : 1600 .000 cpu MHz : 3778 .321 cpu MHz : 1800 .000 cpu MHz : 1700 .000 cpu MHz : 3806 .530 None of CPU core frequencies should be higher than maximum frequency or lower than minimum frequency. CPF003.002 CPU runs on expected frequency (Windows 11, battery) Test description This test aims to verify whether the mounted CPU is running on expected frequency when charger is disconnected. The DUT during test works on battery. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a powershell as administrator and run the following command: ( Get-CimInstance CIM_Processor ). MaxClockSpeed Note the result. Run the following command in the powershell: while ( 1 ){( Get-CimInstance CIM_Processor ). MaxClockSpeed *(( Get-Counter -Counter \"\\Processor Information(_Total)\\% Processor Performance\" ). CounterSamples . CookedValue )/ 100 } Repeat command couple times Note the results. Expected result The result of running the first command should contain the information about maximum CPU frequency. Example output: 2419 None of displayed values \u200b\u200bthat follow the second command should be higher than maximum frequency. Example output: 1023 .98759600614 1009 .23827168367 940 .831608527132 1201 .62695181908 1140 .59449053201 1021 .87762893503 983 .647614379085 1206 .27777992278 CPF004.001 CPU with load runs on expected frequency (Ubuntu 22.04) Test description This test aims to verify whether the mounted CPU is running on expected frequency during the stress test. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lscpu | grep -i mhz Note the results. Open a terminal window and run the following command to turn on the stressor: stress-ng --cpu 0 --tz -t 60m Stress test duration time might be changed by change the value of the parameter -t . While test runs, open a terminal window and run the following command every one minute until the test finishes, to check the current frequency. cat /proc/cpuinfo | grep -i mhz Note the results. Expected result The result of running the first command should contain the information about current, minimum and maximum CPU frequency. Example output: CPU MHz: 1800 .000 CPU max MHz: 3900 .0000 CPU min MHz: 1600 .0000 The result of running the third command should contain the information about current frequency of each CPU core. Example output: cpu MHz : 1900 .000 cpu MHz : 1600 .000 cpu MHz : 2849 .923 cpu MHz : 1700 .000 cpu MHz : 2200 .000 cpu MHz : 3386 .400 cpu MHz : 1600 .000 cpu MHz : 1600 .000 None of CPU core frequencies should be higher than maximum frequency or lower than minimum frequency. CPF004.002 CPU with load runs on expected frequency (Windows 11) Test description This test aims to verify whether the mounted CPU is running on expected frequency during the stress test. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a powershell as administrator and run the following command: ( Get-CimInstance CIM_Processor ). MaxClockSpeed Note the result. Run the stressor. While test runs, open Powershell and run the following command every one minute until the test finishes, to check the current frequency: ( Get-CimInstance CIM_Processor ). MaxClockSpeed *(( Get-Counter -Counter \"\\Processor Information(_Total)\\% Processor Performance\" ). CounterSamples . CookedValue )/ 100 Repeat command couple times. Note the results. Expected result The result of running the first command should contain the information about maximum CPU frequency. Example output: 2419 None of displayed values \u200b\u200bthat follow the second command should be higher than maximum frequency. Example output: 1023 .98759600614 1009 .23827168367 940 .831608527132 1201 .62695181908 1140 .59449053201 1021 .87762893503 983 .647614379085 1206 .27777992278 CPF005.001 CPU with load runs on expected frequency (Ubuntu 22.04, battery) Test description This test aims to verify whether the mounted CPU is running on expected frequency during the stress test. The DUT during test works on battery. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lscpu | grep -i mhz Note the results. Open a terminal window and run the following command to turn on the stressor: stress-ng --cpu 0 --tz -t 60m Stress test duration time might be changed by change the value of the parameter -t . While test runs, open a terminal window and run the following command every one minute until the test finishes, to check the current frequency. cat /proc/cpuinfo | grep -i mhz Note the results. Expected result The result of running the first command should contain the information about current, minimum and maximum CPU frequency. Example output: CPU MHz: 1800 .000 CPU max MHz: 3900 .0000 CPU min MHz: 1600 .0000 The result of running the third command should contain the information about current frequency of each CPU core. Example output: cpu MHz : 1900 .000 cpu MHz : 1600 .000 cpu MHz : 2849 .923 cpu MHz : 1700 .000 cpu MHz : 2200 .000 cpu MHz : 3386 .400 cpu MHz : 1600 .000 cpu MHz : 1600 .000 None of CPU core frequencies should be higher than maximum frequency or lower than minimum frequency. CPF005.002 CPU with load runs on expected frequency (Windows 11, battery) Test description This test aims to verify whether the mounted CPU is running on expected frequency during the stress test. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a powershell as administrator and run the following command: ( Get-CimInstance CIM_Processor ). MaxClockSpeed Note the result. Run the stressor. While test runs, open Powershell and run the following command every one minute until the test finishes, to check the current frequency: ( Get-CimInstance CIM_Processor ). MaxClockSpeed *(( Get-Counter -Counter \"\\Processor Information(_Total)\\% Processor Performance\" ). CounterSamples . CookedValue )/ 100 Repeat command couple times. Note the results. Expected result The result of running the first command should contain the information about maximum CPU frequency. Example output: 2419 None of displayed values that follow the second command should be higher than maximum frequency. Example output: 1023 .98759600614 1009 .23827168367 940 .831608527132 1201 .62695181908 1140 .59449053201 1021 .87762893503 983 .647614379085 1206 .27777992278","title":"CPU frequency measure"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#dasharo-performance-cpu-frequency-measure","text":"","title":"Dasharo Performance: CPU frequency measure"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf001001-cpu-not-stuck-on-initial-frequency-ubuntu-2204","text":"Test description This test aims to verify whether the mounted CPU does not stuck on the initial frequency after booting into the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: cat /proc/cpuinfo | grep -i mhz Note the results. Expected result The output of the command should contain information about the current frequency of each CPU core. If the current frequency for each core is the same as initial frequency, the test should be considered as failed. Example output with unwanted results: cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000","title":"CPF001.001 CPU not stuck on initial frequency (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf001002-cpu-not-stuck-on-initial-frequency-windows-11","text":"Test description This test aims to verify whether the mounted CPU does not stuck on the initial frequency after booting into the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a powershell as administrator and run the following command: while ( 1 ){( Get-CimInstance CIM_Processor ). MaxClockSpeed *(( Get-Counter -Counter \"\\Processor Information(_Total)\\% Processor Performance\" ). CounterSamples . CookedValue )/ 100 } Note the results. Expected result The output of the command should contain information about the current frequency of CPU. If the following frequency values are the same, the test should be considered as failed. Example output with unwanted results: 2800 .00000000000 2800 .00000000000 2800 .00000000000 2800 .00000000000 2800 .00000000000 2800 .00000000000 2800 .00000000000 2800 .00000000000","title":"CPF001.002 CPU not stuck on initial frequency (Windows 11)"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf001003-cpu-not-stuck-on-initial-frequency-headsdebian","text":"Test description This test aims to verify whether the mounted CPU does not stuck on the initial frequency after booting into the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 12 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: cat /proc/cpuinfo | grep -i mhz Note the results. Expected result The output of the command should contain information about the current frequency of each CPU core. If the current frequency for each core is the same as initial frequency, the test should be considered as failed. Example output with unwanted results: cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000","title":"CPF001.003 CPU not stuck on initial frequency (Heads+Debian)"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf002001-cpu-runs-on-expected-frequency-ubuntu-2204","text":"Test description This test aims to verify whether the mounted CPU is running on expected frequency. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lscpu | grep -i mhz Note the results. Run the following command in the terminal: cat /proc/cpuinfo | grep -i mhz Repeat command every one minute, for 60 minutes. Compare the results. Expected result The result of running the first command should contain the information about current, minimum and maximum CPU frequency. Example output: CPU MHz: 2800 .0000 CPU max MHz: 4700 .0000 CPU min MHz: 400 .0000 The result of running the second command should contain the information about current frequency of each CPU core. Example output: cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 2800 .000 cpu MHz : 900 .542 cpu MHz : 461 .831 None of CPU core frequencies should be higher than maximum frequency or lower than minimum frequency.","title":"CPF002.001 CPU runs on expected frequency (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf002002-cpu-runs-on-expected-frequency-windows-11","text":"Test description This test aims to verify whether the mounted CPU is running on expected frequency. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a powershell as administrator and run the following command: ( Get-CimInstance CIM_Processor ). MaxClockSpeed Note the result. Run the following command in the powershell: while ( 1 ){( Get-CimInstance CIM_Processor ). MaxClockSpeed *(( Get-Counter -Counter \"\\Processor Information(_Total)\\% Processor Performance\" ). CounterSamples . CookedValue )/ 100 } Repeat command every one minute, for 60 minutes. Note the results. Expected result The result of running the first command should contain the information about maximum CPU frequency. Example output: 2419 None of displayed values \u200b\u200bthat follow the second command should be higher than maximum frequency. Example output: 1023 .98759600614 1009 .23827168367 940 .831608527132 1201 .62695181908 1140 .59449053201 1021 .87762893503 983 .647614379085 1206 .27777992278","title":"CPF002.002 CPU runs on expected frequency (Windows 11)"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf003001-cpu-runs-on-expected-frequency-ubuntu-2204-battery","text":"Test description This test aims to verify whether the mounted CPU is running on expected frequency when charger is disconnected. The DUT during test works on battery. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lscpu | grep -i mhz Note the results. Run the following command in the terminal: cat /proc/cpuinfo | grep -i mhz Repeat command every one minute, for 60 minutes. Compare the results. Expected result The result of running the first command should contain the information about current, minimum and maximum CPU frequency. Example output: CPU MHz: 1800 .000 CPU max MHz: 3900 .0000 CPU min MHz: 1600 .0000 The result of running the second command should contain the information about current frequency of each CPU core. Example output: cpu MHz : 1700 .000 cpu MHz : 3719 .954 cpu MHz : 1600 .000 cpu MHz : 1600 .000 cpu MHz : 3778 .321 cpu MHz : 1800 .000 cpu MHz : 1700 .000 cpu MHz : 3806 .530 None of CPU core frequencies should be higher than maximum frequency or lower than minimum frequency.","title":"CPF003.001 CPU runs on expected frequency (Ubuntu 22.04, battery)"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf003002-cpu-runs-on-expected-frequency-windows-11-battery","text":"Test description This test aims to verify whether the mounted CPU is running on expected frequency when charger is disconnected. The DUT during test works on battery. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a powershell as administrator and run the following command: ( Get-CimInstance CIM_Processor ). MaxClockSpeed Note the result. Run the following command in the powershell: while ( 1 ){( Get-CimInstance CIM_Processor ). MaxClockSpeed *(( Get-Counter -Counter \"\\Processor Information(_Total)\\% Processor Performance\" ). CounterSamples . CookedValue )/ 100 } Repeat command couple times Note the results. Expected result The result of running the first command should contain the information about maximum CPU frequency. Example output: 2419 None of displayed values \u200b\u200bthat follow the second command should be higher than maximum frequency. Example output: 1023 .98759600614 1009 .23827168367 940 .831608527132 1201 .62695181908 1140 .59449053201 1021 .87762893503 983 .647614379085 1206 .27777992278","title":"CPF003.002 CPU runs on expected frequency (Windows 11, battery)"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf004001-cpu-with-load-runs-on-expected-frequency-ubuntu-2204","text":"Test description This test aims to verify whether the mounted CPU is running on expected frequency during the stress test. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lscpu | grep -i mhz Note the results. Open a terminal window and run the following command to turn on the stressor: stress-ng --cpu 0 --tz -t 60m Stress test duration time might be changed by change the value of the parameter -t . While test runs, open a terminal window and run the following command every one minute until the test finishes, to check the current frequency. cat /proc/cpuinfo | grep -i mhz Note the results. Expected result The result of running the first command should contain the information about current, minimum and maximum CPU frequency. Example output: CPU MHz: 1800 .000 CPU max MHz: 3900 .0000 CPU min MHz: 1600 .0000 The result of running the third command should contain the information about current frequency of each CPU core. Example output: cpu MHz : 1900 .000 cpu MHz : 1600 .000 cpu MHz : 2849 .923 cpu MHz : 1700 .000 cpu MHz : 2200 .000 cpu MHz : 3386 .400 cpu MHz : 1600 .000 cpu MHz : 1600 .000 None of CPU core frequencies should be higher than maximum frequency or lower than minimum frequency.","title":"CPF004.001 CPU with load runs on expected frequency (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf004002-cpu-with-load-runs-on-expected-frequency-windows-11","text":"Test description This test aims to verify whether the mounted CPU is running on expected frequency during the stress test. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a powershell as administrator and run the following command: ( Get-CimInstance CIM_Processor ). MaxClockSpeed Note the result. Run the stressor. While test runs, open Powershell and run the following command every one minute until the test finishes, to check the current frequency: ( Get-CimInstance CIM_Processor ). MaxClockSpeed *(( Get-Counter -Counter \"\\Processor Information(_Total)\\% Processor Performance\" ). CounterSamples . CookedValue )/ 100 Repeat command couple times. Note the results. Expected result The result of running the first command should contain the information about maximum CPU frequency. Example output: 2419 None of displayed values \u200b\u200bthat follow the second command should be higher than maximum frequency. Example output: 1023 .98759600614 1009 .23827168367 940 .831608527132 1201 .62695181908 1140 .59449053201 1021 .87762893503 983 .647614379085 1206 .27777992278","title":"CPF004.002 CPU with load runs on expected frequency (Windows 11)"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf005001-cpu-with-load-runs-on-expected-frequency-ubuntu-2204-battery","text":"Test description This test aims to verify whether the mounted CPU is running on expected frequency during the stress test. The DUT during test works on battery. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lscpu | grep -i mhz Note the results. Open a terminal window and run the following command to turn on the stressor: stress-ng --cpu 0 --tz -t 60m Stress test duration time might be changed by change the value of the parameter -t . While test runs, open a terminal window and run the following command every one minute until the test finishes, to check the current frequency. cat /proc/cpuinfo | grep -i mhz Note the results. Expected result The result of running the first command should contain the information about current, minimum and maximum CPU frequency. Example output: CPU MHz: 1800 .000 CPU max MHz: 3900 .0000 CPU min MHz: 1600 .0000 The result of running the third command should contain the information about current frequency of each CPU core. Example output: cpu MHz : 1900 .000 cpu MHz : 1600 .000 cpu MHz : 2849 .923 cpu MHz : 1700 .000 cpu MHz : 2200 .000 cpu MHz : 3386 .400 cpu MHz : 1600 .000 cpu MHz : 1600 .000 None of CPU core frequencies should be higher than maximum frequency or lower than minimum frequency.","title":"CPF005.001 CPU with load runs on expected frequency (Ubuntu 22.04, battery)"},{"location":"unified-test-documentation/dasharo-performance/402-cpu-frequency/#cpf005002-cpu-with-load-runs-on-expected-frequency-windows-11-battery","text":"Test description This test aims to verify whether the mounted CPU is running on expected frequency during the stress test. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a powershell as administrator and run the following command: ( Get-CimInstance CIM_Processor ). MaxClockSpeed Note the result. Run the stressor. While test runs, open Powershell and run the following command every one minute until the test finishes, to check the current frequency: ( Get-CimInstance CIM_Processor ). MaxClockSpeed *(( Get-Counter -Counter \"\\Processor Information(_Total)\\% Processor Performance\" ). CounterSamples . CookedValue )/ 100 Repeat command couple times. Note the results. Expected result The result of running the first command should contain the information about maximum CPU frequency. Example output: 2419 None of displayed values that follow the second command should be higher than maximum frequency. Example output: 1023 .98759600614 1009 .23827168367 940 .831608527132 1201 .62695181908 1140 .59449053201 1021 .87762893503 983 .647614379085 1206 .27777992278","title":"CPF005.002 CPU with load runs on expected frequency (Windows 11, battery)"},{"location":"unified-test-documentation/dasharo-performance/403-device-boot-measure/","text":"Dasharo Performance: Device boot measure Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . DBM001.001 Device boot measure after coldboot (Ubuntu 22.04) Test description This test aims to verify whether the DUT boots after coldboot and how long this process takes. This test case may be re-done several times to to average the results and specify the platform stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: systemd-analyze Note the results. Expected result The output of the command should contain the information about duration of all boot stages. DBM002.001 Device boot measure after warmboot (Ubuntu 22.04) Test description This test aims to verify whether the DUT boots after warmboot and how long this process takes. This test case may be re-done several times to to average the results and specify the platform stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: systemd-analyze Note the results. Expected result The output of the command should contain the information about duration of all boot stages. DBM003.001 Device boot measure after reboot (Ubuntu 22.04) Test description This test aims to verify whether the DUT boots after system reboot and how long this process takes. This test case may be re-done several times to to average the results and specify the platform stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: systemd-analyze Note the results. Expected result The output of the command should contain the information about duration of all boot stages.","title":"Device boot measure"},{"location":"unified-test-documentation/dasharo-performance/403-device-boot-measure/#dasharo-performance-device-boot-measure","text":"","title":"Dasharo Performance: Device boot measure"},{"location":"unified-test-documentation/dasharo-performance/403-device-boot-measure/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-performance/403-device-boot-measure/#dbm001001-device-boot-measure-after-coldboot-ubuntu-2204","text":"Test description This test aims to verify whether the DUT boots after coldboot and how long this process takes. This test case may be re-done several times to to average the results and specify the platform stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: systemd-analyze Note the results. Expected result The output of the command should contain the information about duration of all boot stages.","title":"DBM001.001 Device boot measure after coldboot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-performance/403-device-boot-measure/#dbm002001-device-boot-measure-after-warmboot-ubuntu-2204","text":"Test description This test aims to verify whether the DUT boots after warmboot and how long this process takes. This test case may be re-done several times to to average the results and specify the platform stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: systemd-analyze Note the results. Expected result The output of the command should contain the information about duration of all boot stages.","title":"DBM002.001 Device boot measure after warmboot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-performance/403-device-boot-measure/#dbm003001-device-boot-measure-after-reboot-ubuntu-2204","text":"Test description This test aims to verify whether the DUT boots after system reboot and how long this process takes. This test case may be re-done several times to to average the results and specify the platform stability. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: systemd-analyze Note the results. Expected result The output of the command should contain the information about duration of all boot stages.","title":"DBM003.001 Device boot measure after reboot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-performance/404-platform-stability/","text":"Dasharo Performance: Platform stability Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . STB001.001 Verify if no reboot occurs in the firmware Test description This test aims to verify that the DUT booted to the BIOS does not reset. The test is performed in multiple iterations - after a defined time an attempt to read the same menu is repeated. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While booting, press SETUP_MENU_KEY to enter the setup menu. Note the results. After the specified time has elapsed, repeat the operation described in step 3. Expected result The platform should remain in the setup menu in every testing iteration. STB001.002 Verify if no reboot occurs in the OS (Ubuntu 22.04) Test description This test aims to verify that the DUT booted to the Operation System does not reset. The test is performed in multiple iterations - after a defined time an attempt to read the output of specific commands confirming the stability of work is repeated. For testing purposes, additional stability criteria are adopted: Whether the platform has not lost connection to the Internet. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: uptime -p Note the results. Run the following command in the terminal to check if the platform has a connection with the Internet: ip link | grep -E 'enp' Note the results. After the specified time has elapsed, repeat the operations described in steps 4-7. Expected result Subsequent readings of the first command output should indicate that the platform has not undergone a reboot. Example output of the command after 30 minutes of working: up 30 minutes Subsequent readings of the second command output should indicate that the platform has not lost the connection to the Internet. Example output of the command: 2 : enp46s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000 If the device is connected to the Internet, a UP status should appear for at least one physical interface. STB001.003 Verify if no reboot occurs in the OS (Windows 11) Test description This test aims to verify that the DUT booted to the Operation System does not reset. The test is performed in multiple iterations - after a defined time an attempt to read the output of specific commands confirming the stability of work is repeated. For testing purposes, additional stability criteria are adopted: Whether the platform has not lost connection to the Internet. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Run PowerShell as administrator and execute the following command: ( get-date ) - ( gcim Win32_OperatingSystem ). LastBootUpTime Note the results. Run the following command in PowerShell to check if the platform has a connection with the Internet: Get-NetAdapter -Name \"Ethernet*\" Note the results. After the specified time has elapsed, repeat the operations described in steps 4-7. Expected result Subsequent readings of the first command output should indicate that the platform has not undergone a reboot. Example output of the command after 17 minutes of working: Days : 0 Hours : 0 Minutes : 17 Seconds : 8 Milliseconds : 784 Ticks : 10287845330 TotalDays : 0 . 0119072283912037 TotalHours : 0 . 285773481388889 TotalMinutes : 17 . 1464088833333 TotalSeconds : 1028 . 784533 TotalMilliseconds : 1028784 . 533 Subsequent readings of the second command output should indicate that the platform has not lost the connection to the Internet. Example output of the command: Name InterfaceDescription ifIndex Status MacAddress LinkSpeed ---- -------------------- ------- ------ ---------- --------- Ethernet Realtek PCIe GbE Family Controller 15 Up D4 - 93 - 90 - 0C - 23-A1 100 Mbps If the device is connected to the Internet, a UP status should appear for at least one physical interface.","title":"Platform stability"},{"location":"unified-test-documentation/dasharo-performance/404-platform-stability/#dasharo-performance-platform-stability","text":"","title":"Dasharo Performance: Platform stability"},{"location":"unified-test-documentation/dasharo-performance/404-platform-stability/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-performance/404-platform-stability/#stb001001-verify-if-no-reboot-occurs-in-the-firmware","text":"Test description This test aims to verify that the DUT booted to the BIOS does not reset. The test is performed in multiple iterations - after a defined time an attempt to read the same menu is repeated. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While booting, press SETUP_MENU_KEY to enter the setup menu. Note the results. After the specified time has elapsed, repeat the operation described in step 3. Expected result The platform should remain in the setup menu in every testing iteration.","title":"STB001.001 Verify if no reboot occurs in the firmware"},{"location":"unified-test-documentation/dasharo-performance/404-platform-stability/#stb001002-verify-if-no-reboot-occurs-in-the-os-ubuntu-2204","text":"Test description This test aims to verify that the DUT booted to the Operation System does not reset. The test is performed in multiple iterations - after a defined time an attempt to read the output of specific commands confirming the stability of work is repeated. For testing purposes, additional stability criteria are adopted: Whether the platform has not lost connection to the Internet. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: uptime -p Note the results. Run the following command in the terminal to check if the platform has a connection with the Internet: ip link | grep -E 'enp' Note the results. After the specified time has elapsed, repeat the operations described in steps 4-7. Expected result Subsequent readings of the first command output should indicate that the platform has not undergone a reboot. Example output of the command after 30 minutes of working: up 30 minutes Subsequent readings of the second command output should indicate that the platform has not lost the connection to the Internet. Example output of the command: 2 : enp46s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP mode DEFAULT group default qlen 1000 If the device is connected to the Internet, a UP status should appear for at least one physical interface.","title":"STB001.002 Verify if no reboot occurs in the OS (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-performance/404-platform-stability/#stb001003-verify-if-no-reboot-occurs-in-the-os-windows-11","text":"Test description This test aims to verify that the DUT booted to the Operation System does not reset. The test is performed in multiple iterations - after a defined time an attempt to read the output of specific commands confirming the stability of work is repeated. For testing purposes, additional stability criteria are adopted: Whether the platform has not lost connection to the Internet. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Run PowerShell as administrator and execute the following command: ( get-date ) - ( gcim Win32_OperatingSystem ). LastBootUpTime Note the results. Run the following command in PowerShell to check if the platform has a connection with the Internet: Get-NetAdapter -Name \"Ethernet*\" Note the results. After the specified time has elapsed, repeat the operations described in steps 4-7. Expected result Subsequent readings of the first command output should indicate that the platform has not undergone a reboot. Example output of the command after 17 minutes of working: Days : 0 Hours : 0 Minutes : 17 Seconds : 8 Milliseconds : 784 Ticks : 10287845330 TotalDays : 0 . 0119072283912037 TotalHours : 0 . 285773481388889 TotalMinutes : 17 . 1464088833333 TotalSeconds : 1028 . 784533 TotalMilliseconds : 1028784 . 533 Subsequent readings of the second command output should indicate that the platform has not lost the connection to the Internet. Example output of the command: Name InterfaceDescription ifIndex Status MacAddress LinkSpeed ---- -------------------- ------- ------ ---------- --------- Ethernet Realtek PCIe GbE Family Controller 15 Up D4 - 93 - 90 - 0C - 23-A1 100 Mbps If the device is connected to the Internet, a UP status should appear for at least one physical interface.","title":"STB001.003 Verify if no reboot occurs in the OS (Windows 11)"},{"location":"unified-test-documentation/dasharo-performance/405-fan-control-measure/","text":"Dasharo Performance: Fan Control Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Check if package lm-sensors is installed and if not, use below command in the terminal to install: apt-get install --assume-yes lm-sensors FNM001.001 Fan does not stuck after coldboot (Ubuntu 22.04) Test description This test aims to verify that the fan does not stuck on initial or any defined speed after coldboot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Boot into the system. Log into the system by using the proper login and password. In the terminal window run the following command\\: sensors | grep fan1 Repeat command every one minute, for 60 minutes. Compare the results. Expected result The output of the command should contain information about the current fan speed. If the current speed is the same as initial speed, the test should be considered as failed. If the current speed does not change in the long term, the test should be considered as failed. Example output: fan1: 1131 RPM ( min = 329 RPM ) FNM002.001 Fan does not stuck after warmboot (Ubuntu 22.04) Test description This test aims to verify that the fan does not stuck on initial or any defined speed after warmboot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. In the terminal window run the following command: sensors | grep fan1 Repeat command every one minute, for 60 minutes. Compare the results. Expected result The output of the command should contain information about the current fan speed. If the current speed is the same as initial speed, the test should be considered as failed. If the current speed does not change in the long term, the test should be considered as failed. Example output: fan1: 1131 RPM ( min = 329 RPM ) FNM003.001 Fan does not stuck after reboot (Ubuntu 22.04) Test description This test aims to verify that the fan does not stuck on initial or any defined speed after reboot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. In the terminal window run the following command: sensors | grep fan1 Repeat command every one minute, for 60 minutes. Compare the results. Expected result The output of the command should contain information about the current fan speed. If the current speed is the same as initial speed, the test should be considered as failed. If the current speed does not change in the long term, the test should be considered as failed. Example output: fan1: 1131 RPM ( min = 329 RPM )","title":"Fan control measure"},{"location":"unified-test-documentation/dasharo-performance/405-fan-control-measure/#dasharo-performance-fan-control","text":"","title":"Dasharo Performance: Fan Control"},{"location":"unified-test-documentation/dasharo-performance/405-fan-control-measure/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Check if package lm-sensors is installed and if not, use below command in the terminal to install: apt-get install --assume-yes lm-sensors","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-performance/405-fan-control-measure/#fnm001001-fan-does-not-stuck-after-coldboot-ubuntu-2204","text":"Test description This test aims to verify that the fan does not stuck on initial or any defined speed after coldboot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Boot into the system. Log into the system by using the proper login and password. In the terminal window run the following command\\: sensors | grep fan1 Repeat command every one minute, for 60 minutes. Compare the results. Expected result The output of the command should contain information about the current fan speed. If the current speed is the same as initial speed, the test should be considered as failed. If the current speed does not change in the long term, the test should be considered as failed. Example output: fan1: 1131 RPM ( min = 329 RPM )","title":"FNM001.001 Fan does not stuck after coldboot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-performance/405-fan-control-measure/#fnm002001-fan-does-not-stuck-after-warmboot-ubuntu-2204","text":"Test description This test aims to verify that the fan does not stuck on initial or any defined speed after warmboot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. In the terminal window run the following command: sensors | grep fan1 Repeat command every one minute, for 60 minutes. Compare the results. Expected result The output of the command should contain information about the current fan speed. If the current speed is the same as initial speed, the test should be considered as failed. If the current speed does not change in the long term, the test should be considered as failed. Example output: fan1: 1131 RPM ( min = 329 RPM )","title":"FNM002.001 Fan does not stuck after warmboot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-performance/405-fan-control-measure/#fnm003001-fan-does-not-stuck-after-reboot-ubuntu-2204","text":"Test description This test aims to verify that the fan does not stuck on initial or any defined speed after reboot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. In the terminal window run the following command: sensors | grep fan1 Repeat command every one minute, for 60 minutes. Compare the results. Expected result The output of the command should contain information about the current fan speed. If the current speed is the same as initial speed, the test should be considered as failed. If the current speed does not change in the long term, the test should be considered as failed. Example output: fan1: 1131 RPM ( min = 329 RPM )","title":"FNM003.001 Fan does not stuck after reboot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-performance/406-custom-fan-curve/","text":"Dasharo Performance: Custom fan curve Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . CFC001.001 Custom fan curve silent profile measure (Ubuntu 22.04) Test description The fan has been configured to follow a custom curve. This test aims to verify that the fan curve is configured correctly in silent profile and the fan spins up and down according to the defined values. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Install stress-ng on the DUT. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Power Management Options submenu. Verify that the Fan profile field is set to Silent - if not, using the arrow keys and Enter , choose the Silent option. Press F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Open the terminal window and run the following command: stress-ng --cpu 16 --timeout 30m Open the terminal window and run the following command to get the temperature: cat /sys/devices/LNXSYSTM:00/LNXSYBUS:00/17761776:00/hwmon/hwmon3/temp1_input The last three digits of the output are the value of the number after the decimal point. Example output 47000 means 47\u00b0C. In the terminal window run the following command to get the PWM value of the CPU fan: cat /sys/devices/LNXSYSTM:00/LNXSYBUS:00/17761776:00/hwmon/hwmon3/pwm1 Repeat steps 13-14 a couple of times. Note the results. Expected result Silent fan profile Keep in mind that the EC firmware is smoothing, i.e. the fans will enter the target speed with a delay. The algorithm by which the EC calculates the speed is as follows: If the temperature is below the first one defined in the curve, set the speed to 0. If the temperature is above the last defined curve, set the maximum speed. If the temperature is equal to one of the temperatures of the points on the curve, set the speed from that point on the curve If the temperature is between points on the curve: slope = ( right_point_speed - left_point_speed ) /right_point_temperature - left_point_temperature ) speed = slope* ( temperature - left_point_temperature ) + left_point_speed Divide the PWM value by 2.55 to get the percentage to compare. Example check for 30\u00b0C and 70 PWM values: ```text expected_speed = ((30-25)/(65-0))*(30-0)+25 \u2248 27 actual_speed = 70/2.55 \u2248 27 ``` Values expected_speed and actual_speed are strongly similar. This means that the fan control is set correctly. CFC002.001 Custom fan curve performance profile measure (Ubuntu 22.04) Test description The fan has been configured to follow a custom curve. This test aims to verify that the fan curve is configured correctly in the performance profile and the fan spins up and down according to the defined values. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Install stress-ng on the DUT. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Power Management Options submenu. Verify that the Fan profile field is set to Performance - if not, using the arrow keys and Enter , choose the Performance option. Press F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Open the terminal window and run the following command: stress-ng --cpu 16 --timeout 30m Open the terminal window and run the following command to get the temperature: cat /sys/devices/LNXSYSTM:00/LNXSYBUS:00/17761776:00/hwmon/hwmon3/temp1_input The last three digits of the output are the value of the number after the decimal point. Example output 47000 means 47\u00b0C. In the terminal window run the following command to get the PWM value of the CPU fan: cat /sys/devices/LNXSYSTM:00/LNXSYBUS:00/17761776:00/hwmon/hwmon3/pwm1 Repeat steps 13-14 a couple of times. Note the results. Expected result Performance fan profile Keep in mind that the EC firmware is smoothing, i.e. the fans will enter the target speed with a delay. The algorithm by which the EC calculates the speed is as follows: If the temperature is below the first one defined in the curve, set the speed to 0. If the temperature is above the last defined curve, set the maximum speed. If the temperature is equal to one of the temperatures of the points on the curve, set the speed from that point on the curve If the temperature is between points on the curve: slope = ( right_point_speed - left_point_speed ) /right_point_temperature - left_point_temperature ) speed = slope* ( temperature - left_point_temperature ) + left_point_speed Divide the PWM value by 2.55 to get the percentage to compare. Example check for 30\u00b0C and 79 PWM values: ```text expected_speed = ((35-25)/(55-0))*(35-0)+25 \u2248 31 actual_speed = 79/2.55 \u2248 31 ``` Values expected_speed and actual_speed are strongly similar. This means that the fan control is set correctly.","title":"Custom fan curve"},{"location":"unified-test-documentation/dasharo-performance/406-custom-fan-curve/#dasharo-performance-custom-fan-curve","text":"","title":"Dasharo Performance: Custom fan curve"},{"location":"unified-test-documentation/dasharo-performance/406-custom-fan-curve/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-performance/406-custom-fan-curve/#cfc001001-custom-fan-curve-silent-profile-measure-ubuntu-2204","text":"Test description The fan has been configured to follow a custom curve. This test aims to verify that the fan curve is configured correctly in silent profile and the fan spins up and down according to the defined values. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Install stress-ng on the DUT. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Power Management Options submenu. Verify that the Fan profile field is set to Silent - if not, using the arrow keys and Enter , choose the Silent option. Press F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Open the terminal window and run the following command: stress-ng --cpu 16 --timeout 30m Open the terminal window and run the following command to get the temperature: cat /sys/devices/LNXSYSTM:00/LNXSYBUS:00/17761776:00/hwmon/hwmon3/temp1_input The last three digits of the output are the value of the number after the decimal point. Example output 47000 means 47\u00b0C. In the terminal window run the following command to get the PWM value of the CPU fan: cat /sys/devices/LNXSYSTM:00/LNXSYBUS:00/17761776:00/hwmon/hwmon3/pwm1 Repeat steps 13-14 a couple of times. Note the results. Expected result Silent fan profile Keep in mind that the EC firmware is smoothing, i.e. the fans will enter the target speed with a delay. The algorithm by which the EC calculates the speed is as follows: If the temperature is below the first one defined in the curve, set the speed to 0. If the temperature is above the last defined curve, set the maximum speed. If the temperature is equal to one of the temperatures of the points on the curve, set the speed from that point on the curve If the temperature is between points on the curve: slope = ( right_point_speed - left_point_speed ) /right_point_temperature - left_point_temperature ) speed = slope* ( temperature - left_point_temperature ) + left_point_speed Divide the PWM value by 2.55 to get the percentage to compare. Example check for 30\u00b0C and 70 PWM values: ```text expected_speed = ((30-25)/(65-0))*(30-0)+25 \u2248 27 actual_speed = 70/2.55 \u2248 27 ``` Values expected_speed and actual_speed are strongly similar. This means that the fan control is set correctly.","title":"CFC001.001 Custom fan curve silent profile measure (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-performance/406-custom-fan-curve/#cfc002001-custom-fan-curve-performance-profile-measure-ubuntu-2204","text":"Test description The fan has been configured to follow a custom curve. This test aims to verify that the fan curve is configured correctly in the performance profile and the fan spins up and down according to the defined values. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Install stress-ng on the DUT. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Power Management Options submenu. Verify that the Fan profile field is set to Performance - if not, using the arrow keys and Enter , choose the Performance option. Press F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Open the terminal window and run the following command: stress-ng --cpu 16 --timeout 30m Open the terminal window and run the following command to get the temperature: cat /sys/devices/LNXSYSTM:00/LNXSYBUS:00/17761776:00/hwmon/hwmon3/temp1_input The last three digits of the output are the value of the number after the decimal point. Example output 47000 means 47\u00b0C. In the terminal window run the following command to get the PWM value of the CPU fan: cat /sys/devices/LNXSYSTM:00/LNXSYBUS:00/17761776:00/hwmon/hwmon3/pwm1 Repeat steps 13-14 a couple of times. Note the results. Expected result Performance fan profile Keep in mind that the EC firmware is smoothing, i.e. the fans will enter the target speed with a delay. The algorithm by which the EC calculates the speed is as follows: If the temperature is below the first one defined in the curve, set the speed to 0. If the temperature is above the last defined curve, set the maximum speed. If the temperature is equal to one of the temperatures of the points on the curve, set the speed from that point on the curve If the temperature is between points on the curve: slope = ( right_point_speed - left_point_speed ) /right_point_temperature - left_point_temperature ) speed = slope* ( temperature - left_point_temperature ) + left_point_speed Divide the PWM value by 2.55 to get the percentage to compare. Example check for 30\u00b0C and 79 PWM values: ```text expected_speed = ((35-25)/(55-0))*(35-0)+25 \u2248 31 actual_speed = 79/2.55 \u2248 31 ``` Values expected_speed and actual_speed are strongly similar. This means that the fan control is set correctly.","title":"CFC002.001 Custom fan curve performance profile measure (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-performance/407-ubuntu-booting-performance-test/","text":"Dasharo Performance: Ubuntu booting performance test Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . BUB001.001 Boot Ubuntu LTS from disk after cold-boot Test description This test aims to verify that Ubuntu LTS could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 LTS Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BUB002.001 Boot Ubuntu LTS from disk after warm-boot Test description This test aims to verify that Ubuntu LTS could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 LTS Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BUB003.001 Boot Ubuntu LTS from disk after reboot Test description This test aims to verify that Ubuntu LTS could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 LTS Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"Ubuntu booting performance test"},{"location":"unified-test-documentation/dasharo-performance/407-ubuntu-booting-performance-test/#dasharo-performance-ubuntu-booting-performance-test","text":"","title":"Dasharo Performance: Ubuntu booting performance test"},{"location":"unified-test-documentation/dasharo-performance/407-ubuntu-booting-performance-test/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-performance/407-ubuntu-booting-performance-test/#bub001001-boot-ubuntu-lts-from-disk-after-cold-boot","text":"Test description This test aims to verify that Ubuntu LTS could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 LTS Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BUB001.001 Boot Ubuntu LTS from disk after cold-boot"},{"location":"unified-test-documentation/dasharo-performance/407-ubuntu-booting-performance-test/#bub002001-boot-ubuntu-lts-from-disk-after-warm-boot","text":"Test description This test aims to verify that Ubuntu LTS could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 LTS Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BUB002.001 Boot Ubuntu LTS from disk after warm-boot"},{"location":"unified-test-documentation/dasharo-performance/407-ubuntu-booting-performance-test/#bub003001-boot-ubuntu-lts-from-disk-after-reboot","text":"Test description This test aims to verify that Ubuntu LTS could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 LTS Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BUB003.001 Boot Ubuntu LTS from disk after reboot"},{"location":"unified-test-documentation/dasharo-performance/408-debian-booting-performance-test/","text":"Dasharo Performance: Debian booting performance test Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . BDE001.001 Boot Debian LTS from disk after cold-boot Test description This test aims to verify that Debian LTS could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.6 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BDE002.001 Boot Debian LTS from disk after warm-boot Test description This test aims to verify that Debian LTS could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.6 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BDE003.001 Boot Debian LTS from disk after reboot Test description This test aims to verify that Debian LTS could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.6 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"Debian booting performance test"},{"location":"unified-test-documentation/dasharo-performance/408-debian-booting-performance-test/#dasharo-performance-debian-booting-performance-test","text":"","title":"Dasharo Performance: Debian booting performance test"},{"location":"unified-test-documentation/dasharo-performance/408-debian-booting-performance-test/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-performance/408-debian-booting-performance-test/#bde001001-boot-debian-lts-from-disk-after-cold-boot","text":"Test description This test aims to verify that Debian LTS could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.6 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BDE001.001 Boot Debian LTS from disk after cold-boot"},{"location":"unified-test-documentation/dasharo-performance/408-debian-booting-performance-test/#bde002001-boot-debian-lts-from-disk-after-warm-boot","text":"Test description This test aims to verify that Debian LTS could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.6 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BDE002.001 Boot Debian LTS from disk after warm-boot"},{"location":"unified-test-documentation/dasharo-performance/408-debian-booting-performance-test/#bde003001-boot-debian-lts-from-disk-after-reboot","text":"Test description This test aims to verify that Debian LTS could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Debian 11.6 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BDE003.001 Boot Debian LTS from disk after reboot"},{"location":"unified-test-documentation/dasharo-performance/409-freebsd-booting-performance-test/","text":"Dasharo Performance: FreeBSD booting performance test Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . BFB001.001 Boot FreeBSD-RELEASE from disk after cold-boot Test description This test aims to verify that FreeBSD-RELEASE could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = FreeBSD 13.2 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BFB002.001 Boot FreeBSD-RELEASE from disk after warm-boot Test description This test aims to verify that FreeBSD-RELEASE could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = FreeBSD 13.2 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BFB003.001 Boot FreeBSD-RELEASE from disk after reboot Test description This test aims to verify that FreeBSD-RELEASE could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = FreeBSD 13.2 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"FreeBSD booting performance test"},{"location":"unified-test-documentation/dasharo-performance/409-freebsd-booting-performance-test/#dasharo-performance-freebsd-booting-performance-test","text":"","title":"Dasharo Performance: FreeBSD booting performance test"},{"location":"unified-test-documentation/dasharo-performance/409-freebsd-booting-performance-test/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-performance/409-freebsd-booting-performance-test/#bfb001001-boot-freebsd-release-from-disk-after-cold-boot","text":"Test description This test aims to verify that FreeBSD-RELEASE could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = FreeBSD 13.2 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BFB001.001 Boot FreeBSD-RELEASE from disk after cold-boot"},{"location":"unified-test-documentation/dasharo-performance/409-freebsd-booting-performance-test/#bfb002001-boot-freebsd-release-from-disk-after-warm-boot","text":"Test description This test aims to verify that FreeBSD-RELEASE could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = FreeBSD 13.2 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BFB002.001 Boot FreeBSD-RELEASE from disk after warm-boot"},{"location":"unified-test-documentation/dasharo-performance/409-freebsd-booting-performance-test/#bfb003001-boot-freebsd-release-from-disk-after-reboot","text":"Test description This test aims to verify that FreeBSD-RELEASE could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = FreeBSD 13.2 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BFB003.001 Boot FreeBSD-RELEASE from disk after reboot"},{"location":"unified-test-documentation/dasharo-performance/410-proxmox-booting-performance-test/","text":"Dasharo Performance: Proxmox booting performance test Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . BPM001.001 Boot Proxmox Virtual Environment from disk after cold-boot Test description This test aims to verify that Proxmox VE could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Proxmox VE 7.4 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BPM002.001 Boot Proxmox Virtual Environment from disk after warm-boot Test description This test aims to verify that Proxmox VE could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Proxmox VE 7.4 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BPM003.001 Boot Proxmox Virtual Environment from disk after reboot Test description This test aims to verify that Proxmox VE could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Proxmox VE 7.4 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"Proxmox booting performance test"},{"location":"unified-test-documentation/dasharo-performance/410-proxmox-booting-performance-test/#dasharo-performance-proxmox-booting-performance-test","text":"","title":"Dasharo Performance: Proxmox booting performance test"},{"location":"unified-test-documentation/dasharo-performance/410-proxmox-booting-performance-test/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-performance/410-proxmox-booting-performance-test/#bpm001001-boot-proxmox-virtual-environment-from-disk-after-cold-boot","text":"Test description This test aims to verify that Proxmox VE could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Proxmox VE 7.4 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BPM001.001 Boot Proxmox Virtual Environment from disk after cold-boot"},{"location":"unified-test-documentation/dasharo-performance/410-proxmox-booting-performance-test/#bpm002001-boot-proxmox-virtual-environment-from-disk-after-warm-boot","text":"Test description This test aims to verify that Proxmox VE could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Proxmox VE 7.4 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BPM002.001 Boot Proxmox Virtual Environment from disk after warm-boot"},{"location":"unified-test-documentation/dasharo-performance/410-proxmox-booting-performance-test/#bpm003001-boot-proxmox-virtual-environment-from-disk-after-reboot","text":"Test description This test aims to verify that Proxmox VE could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Proxmox VE 7.4 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BPM003.001 Boot Proxmox Virtual Environment from disk after reboot"},{"location":"unified-test-documentation/dasharo-performance/411-ubuntu-server-booting-performance-test/","text":"Dasharo Performance: Ubuntu Server booting performance test Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . BUS001.001 Boot Ubuntu Server LTS from disk after cold-boot Test description This test aims to verify that Ubuntu Server LTS could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu Server 22.04 LTS Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BUS002.001 Boot Ubuntu Server LTS from disk after warm-boot Test description This test aims to verify that Ubuntu Server LTS could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu Server 22.04 LTS Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BUS003.001 Boot Ubuntu Server LTS from disk after reboot Test description This test aims to verify that Ubuntu Server LTS could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu Server 22.04 LTS Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"Ubuntu Server booting performance test"},{"location":"unified-test-documentation/dasharo-performance/411-ubuntu-server-booting-performance-test/#dasharo-performance-ubuntu-server-booting-performance-test","text":"","title":"Dasharo Performance: Ubuntu Server booting performance test"},{"location":"unified-test-documentation/dasharo-performance/411-ubuntu-server-booting-performance-test/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-performance/411-ubuntu-server-booting-performance-test/#bus001001-boot-ubuntu-server-lts-from-disk-after-cold-boot","text":"Test description This test aims to verify that Ubuntu Server LTS could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu Server 22.04 LTS Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BUS001.001 Boot Ubuntu Server LTS from disk after cold-boot"},{"location":"unified-test-documentation/dasharo-performance/411-ubuntu-server-booting-performance-test/#bus002001-boot-ubuntu-server-lts-from-disk-after-warm-boot","text":"Test description This test aims to verify that Ubuntu Server LTS could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu Server 22.04 LTS Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BUS002.001 Boot Ubuntu Server LTS from disk after warm-boot"},{"location":"unified-test-documentation/dasharo-performance/411-ubuntu-server-booting-performance-test/#bus003001-boot-ubuntu-server-lts-from-disk-after-reboot","text":"Test description This test aims to verify that Ubuntu Server LTS could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu Server 22.04 LTS Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BUS003.001 Boot Ubuntu Server LTS from disk after reboot"},{"location":"unified-test-documentation/dasharo-performance/412-opnsense-serial-booting-performance-test/","text":"Dasharo Performance: OPNsense (serial output) booting performance test Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . BOS001.001 Boot OPNsense (serial output) from disk after cold-boot Test description This test aims to verify that OPNsense (serial output) could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense serial 23.01 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BOS002.001 Boot OPNsense (serial output) from disk after warm-boot Test description This test aims to verify that OPNsense (serial output) could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense serial 23.01 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BOS003.001 Boot OPNsense (serial output) from disk after reboot Test description This test aims to verify that OPNsense (serial output) could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense serial 23.01 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"OPNsense (serial output) booting performance test"},{"location":"unified-test-documentation/dasharo-performance/412-opnsense-serial-booting-performance-test/#dasharo-performance-opnsense-serial-output-booting-performance-test","text":"","title":"Dasharo Performance: OPNsense (serial output) booting performance test"},{"location":"unified-test-documentation/dasharo-performance/412-opnsense-serial-booting-performance-test/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-performance/412-opnsense-serial-booting-performance-test/#bos001001-boot-opnsense-serial-output-from-disk-after-cold-boot","text":"Test description This test aims to verify that OPNsense (serial output) could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense serial 23.01 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BOS001.001 Boot OPNsense (serial output) from disk after cold-boot"},{"location":"unified-test-documentation/dasharo-performance/412-opnsense-serial-booting-performance-test/#bos002001-boot-opnsense-serial-output-from-disk-after-warm-boot","text":"Test description This test aims to verify that OPNsense (serial output) could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense serial 23.01 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BOS002.001 Boot OPNsense (serial output) from disk after warm-boot"},{"location":"unified-test-documentation/dasharo-performance/412-opnsense-serial-booting-performance-test/#bos003001-boot-opnsense-serial-output-from-disk-after-reboot","text":"Test description This test aims to verify that OPNsense (serial output) could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense serial 23.01 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BOS003.001 Boot OPNsense (serial output) from disk after reboot"},{"location":"unified-test-documentation/dasharo-performance/413-opnsense-vga-booting-performance-test/","text":"Dasharo Performance: OPNsense (VGA output) booting performance test Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . BOV001.001 Boot OPNsense (VGA output) from disk after cold-boot Test description This test aims to verify that OPNsense (VGA output) could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense VGA 23.01 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BOV002.001 Boot OPNsense (VGA output) stable from disk after warm-boot Test description This test aims to verify that OPNsense (VGA output) stable could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense VGA 23.01 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BOV003.001 Boot OPNsense (VGA output) stable from disk after reboot Test description This test aims to verify that OPNsense (VGA output) stable could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense VGA 23.01 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"OPNsense (VGA output) booting performance test"},{"location":"unified-test-documentation/dasharo-performance/413-opnsense-vga-booting-performance-test/#dasharo-performance-opnsense-vga-output-booting-performance-test","text":"","title":"Dasharo Performance: OPNsense (VGA output) booting performance test"},{"location":"unified-test-documentation/dasharo-performance/413-opnsense-vga-booting-performance-test/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-performance/413-opnsense-vga-booting-performance-test/#bov001001-boot-opnsense-vga-output-from-disk-after-cold-boot","text":"Test description This test aims to verify that OPNsense (VGA output) could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense VGA 23.01 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BOV001.001 Boot OPNsense (VGA output) from disk after cold-boot"},{"location":"unified-test-documentation/dasharo-performance/413-opnsense-vga-booting-performance-test/#bov002001-boot-opnsense-vga-output-stable-from-disk-after-warm-boot","text":"Test description This test aims to verify that OPNsense (VGA output) stable could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense VGA 23.01 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BOV002.001 Boot OPNsense (VGA output) stable from disk after warm-boot"},{"location":"unified-test-documentation/dasharo-performance/413-opnsense-vga-booting-performance-test/#bov003001-boot-opnsense-vga-output-stable-from-disk-after-reboot","text":"Test description This test aims to verify that OPNsense (VGA output) stable could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = OPNsense VGA 23.01 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BOV003.001 Boot OPNsense (VGA output) stable from disk after reboot"},{"location":"unified-test-documentation/dasharo-performance/414-pfsense-serial-booting-performance-test/","text":"Dasharo Performance: pfSense (serial output) booting performance test Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . BPS001.001 Boot pfSense LTS CE (serial output) from disk after cold-boot Test description This test aims to verify that pfSense LTS CE (serial output) could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense CE serial 2.6.0 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BPS002.001 Boot pfSense LTS CE (serial output) from disk after warm-boot Test description This test aims to verify that pfSense LTS CE (serial output) could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense CE serial 2.6.0 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BPS003.001 Boot pfSense LTS CE (serial output) from disk after reboot Test description This test aims to verify that pfSense LTS CE (serial output) could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense CE serial 2.6.0 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"pfSense (serial output) booting performance test"},{"location":"unified-test-documentation/dasharo-performance/414-pfsense-serial-booting-performance-test/#dasharo-performance-pfsense-serial-output-booting-performance-test","text":"","title":"Dasharo Performance: pfSense (serial output) booting performance test"},{"location":"unified-test-documentation/dasharo-performance/414-pfsense-serial-booting-performance-test/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-performance/414-pfsense-serial-booting-performance-test/#bps001001-boot-pfsense-lts-ce-serial-output-from-disk-after-cold-boot","text":"Test description This test aims to verify that pfSense LTS CE (serial output) could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense CE serial 2.6.0 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BPS001.001 Boot pfSense LTS CE (serial output) from disk after cold-boot"},{"location":"unified-test-documentation/dasharo-performance/414-pfsense-serial-booting-performance-test/#bps002001-boot-pfsense-lts-ce-serial-output-from-disk-after-warm-boot","text":"Test description This test aims to verify that pfSense LTS CE (serial output) could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense CE serial 2.6.0 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BPS002.001 Boot pfSense LTS CE (serial output) from disk after warm-boot"},{"location":"unified-test-documentation/dasharo-performance/414-pfsense-serial-booting-performance-test/#bps003001-boot-pfsense-lts-ce-serial-output-from-disk-after-reboot","text":"Test description This test aims to verify that pfSense LTS CE (serial output) could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense CE serial 2.6.0 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BPS003.001 Boot pfSense LTS CE (serial output) from disk after reboot"},{"location":"unified-test-documentation/dasharo-performance/415-pfsense-vga-booting-performance-test/","text":"Dasharo Performance: pfSense (VGA output) booting performance test Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . BPV001.001 Boot pfSense LTS CE (VGA output) from disk after cold-boot Test description This test aims to verify that pfSense LTS CE (VGA output) could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense CE VGA 2.6.0 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BPV002.001 Boot pfSense LTS CE (VGA output) from disk after warm-boot Test description This test aims to verify that pfSense LTS CE (VGA output) could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense CE VGA 2.6.0 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BPV003.001 Boot pfSense LTS CE (VGA output) from disk after reboot Test description This test aims to verify that pfSense LTS CE (VGA output) could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense CE VGA 2.6.0 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"pfSense (VGA output) booting performance test"},{"location":"unified-test-documentation/dasharo-performance/415-pfsense-vga-booting-performance-test/#dasharo-performance-pfsense-vga-output-booting-performance-test","text":"","title":"Dasharo Performance: pfSense (VGA output) booting performance test"},{"location":"unified-test-documentation/dasharo-performance/415-pfsense-vga-booting-performance-test/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-performance/415-pfsense-vga-booting-performance-test/#bpv001001-boot-pfsense-lts-ce-vga-output-from-disk-after-cold-boot","text":"Test description This test aims to verify that pfSense LTS CE (VGA output) could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense CE VGA 2.6.0 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BPV001.001 Boot pfSense LTS CE (VGA output) from disk after cold-boot"},{"location":"unified-test-documentation/dasharo-performance/415-pfsense-vga-booting-performance-test/#bpv002001-boot-pfsense-lts-ce-vga-output-from-disk-after-warm-boot","text":"Test description This test aims to verify that pfSense LTS CE (VGA output) could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense CE VGA 2.6.0 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BPV002.001 Boot pfSense LTS CE (VGA output) from disk after warm-boot"},{"location":"unified-test-documentation/dasharo-performance/415-pfsense-vga-booting-performance-test/#bpv003001-boot-pfsense-lts-ce-vga-output-from-disk-after-reboot","text":"Test description This test aims to verify that pfSense LTS CE (VGA output) could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = pfSense CE VGA 2.6.0 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo reboot Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BPV003.001 Boot pfSense LTS CE (VGA output) from disk after reboot"},{"location":"unified-test-documentation/dasharo-performance/416-windows-booting-performance-test/","text":"Dasharo Performance: Windows booting performance test Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . BWI001.001 Boot Windows 11 from disk after cold-boot Test description This test aims to verify that Windows 11 could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BWI002.001 Boot Windows 11 from disk after warm-boot Test description This test aims to verify that Windows 11 could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed. BWI003.001 Boot Windows 11 from disk after reboot Test description This test aims to verify that Windows 11 could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Reboot the device executing in PowerShell: Restart-Computer Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"Windows booting performance test"},{"location":"unified-test-documentation/dasharo-performance/416-windows-booting-performance-test/#dasharo-performance-windows-booting-performance-test","text":"","title":"Dasharo Performance: Windows booting performance test"},{"location":"unified-test-documentation/dasharo-performance/416-windows-booting-performance-test/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-performance/416-windows-booting-performance-test/#bwi001001-boot-windows-11-from-disk-after-cold-boot","text":"Test description This test aims to verify that Windows 11 could be booted from the disk on the DUT after cold-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Cut the power off while DUT is turned on. Restore power and power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BWI001.001 Boot Windows 11 from disk after cold-boot"},{"location":"unified-test-documentation/dasharo-performance/416-windows-booting-performance-test/#bwi002001-boot-windows-11-from-disk-after-warm-boot","text":"Test description This test aims to verify that Windows 11 could be booted from the disk on the DUT after warm-boot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BWI002.001 Boot Windows 11 from disk after warm-boot"},{"location":"unified-test-documentation/dasharo-performance/416-windows-booting-performance-test/#bwi003001-boot-windows-11-from-disk-after-reboot","text":"Test description This test aims to verify that Windows 11 could be booted from the disk on the DUT after reboot. The test is performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Reboot the device executing in PowerShell: Restart-Computer Press BOOT_MENU_KEY to enter the boot menu. In the Boot Menu , select the disk on which the system was previously installed or boot entry with the name of OPERATING_SYSTEM . Wait for the OPERATING_SYSTEM to boot and note the result. Expected result The OPERATING_SYSTEM login screen should be displayed.","title":"BWI003.001 Boot Windows 11 from disk after reboot"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/","text":"Dasharo Security: TPM Support Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . TPM001.001 TPM Support (firmware) Test description This test aims to verify that the TPM is initialized correctly and the PCRs can be accessed from the firmware. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the BIOS. Enter the shell. Run the following command in the shell: cbmem -L Expected result The command should return information about the TPM log entries. Example output: TPM2 log: Specification: 2 .00 Platform class: PC Client No vendor information provided TPM2 log entry 1 : PCR: 2 Event type: Action Digests: SHA1: f78a530fb5a70afcffdc86a98529abd24a90bac9 Event data: FMAP: FMAP TPM2 log entry 2 : PCR: 2 Event type: Action Digests: SHA1: 369155e6eab3b0a874140e591a4c0e992268b4b9 Event data: FMAP: BOOTBLOCK TPM2 log entry 3 : PCR: 2 Event type: Action Digests: SHA1: 5e785c080264aa6e169f70c80ac40b556066292b Event data: FMAP: COREBOOT CBFS: fallback/romstage TPM2 log entry 4 : PCR: 2 Event type: Action Digests: SHA1: ba2a5af955811fbac58a5198545539596eb38c3e Event data: FMAP: COREBOOT CBFS: fallback/ramstage TPM2 log entry 5 : PCR: 2 Event type: Action Digests: SHA1: ba35d4ce29d7b633b5644e2a3206c6069cf7f24d Event data: FMAP: COREBOOT CBFS: fallback/payload TPM2 log entry 6 : PCR: 2 Event type: Action Digests: SHA1: 47b49026133377e05193f8440c9a7cad239e883c Event data: FMAP: COREBOOT CBFS: 1 -cpu.dtb TPM2 log entry 7 : PCR: 3 Event type: Action Digests: SHA256: 6e7b06693452d997ac534e823b1ea79e5bb8ed19ba8a7af878abf10199c3d515 SHA1: 6e7b06693452d997ac534e823b1ea79e5bb8ed19 Event data: VERSION TPM2 log entry 8 : PCR: 2 Event type: Action Digests: SHA256: de73053377e1ae5ba5d2b637a4f5bfaeb410137722f11ef135e7a1be524e3092 SHA1: de73053377e1ae5ba5d2b637a4f5bfaeb4101377 Event data: IMA_CATALOG TPM2 log entry 9 : PCR: 4 Event type: Action Digests: SHA256: ba427f9349b1f9e589f98909e26086b0cfd5ced78a7fbcb140a70a506c38a8e5 SHA1: ba427f9349b1f9e589f98909e26086b0cfd5ced7 Event data: BOOTKERNEL ( ... ) TPM001.002 TPM Support (Ubuntu 22.04) Test description This test aims to verify that the TPM is initialized correctly and the PCRs can be accessed from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the tpm2-tools package: sudo apt install tpm2-tools . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Check the version of installed tpm2-tools - execute the following command in the terminal: dpkg --list tpm2-tools If your device is equipped with TPM2.0 and the version of tpm2-tools is 4.0 or higher - execute the following command in the terminal: tpm2_pcrread If your device is equipped with TPM2.0 and the version of tpm2-tools is lower than 4.0 - execute the following command in the terminal: tpm2_pcrlist If your device is equipped with TPM1.2 - execute the following command in the terminal: cat /sys/class/tpm/tpm0/pcrs Expected result The command should return a list of PCRs and their contents. Output example for TPM2.0: sha1 : 0 : 3a3f780f11a4b49969fcaa80cd6e3957c33b2275 1 : 8a074fdf65a11e5dbf02d25e7f26b00c26c98b41 2 : c36c2509d636c9cfa075d6d0a03b7a37bec14ee9 3 : 3a3f780f11a4b49969fcaa80cd6e3957c33b2275 4 : 2d247bb671ec17ded623ca45967df5482517291b 5 : 49d543eb1d1df3439d9fca695ee47b8cdf4b9e2f 6 : 3a3f780f11a4b49969fcaa80cd6e3957c33b2275 7 : 3a3f780f11a4b49969fcaa80cd6e3957c33b2275 8 : 0000000000000000000000000000000000000000 9 : 0000000000000000000000000000000000000000 10 : 0000000000000000000000000000000000000000 11 : 0000000000000000000000000000000000000000 12 : 0000000000000000000000000000000000000000 13 : 0000000000000000000000000000000000000000 14 : 0000000000000000000000000000000000000000 15 : 0000000000000000000000000000000000000000 16 : 0000000000000000000000000000000000000000 17 : ffffffffffffffffffffffffffffffffffffffff 18 : ffffffffffffffffffffffffffffffffffffffff 19 : ffffffffffffffffffffffffffffffffffffffff 20 : ffffffffffffffffffffffffffffffffffffffff 21 : ffffffffffffffffffffffffffffffffffffffff 22 : ffffffffffffffffffffffffffffffffffffffff 23 : 0000000000000000000000000000000000000000 sha256 : 0 : d27cc12614b5f4ff85ed109495e320fb1e5495eb28d507e952d51091e7ae2a72 1 : b29a64bd6895966b777eb803f45e6bbffade81cc1b996a34f7cbd26f1d04028b 2 : 3122422e43b9fbfc0cb70eb467b55e99ec61462370e6b15c515484f821e1d4d9 3 : 909e4261938378c0556a4c335c38718d1c313bd151fdf222df674aabb7aeee97 4 : 984763b42633ee11e5167e2f67c2e6879bd6efac683f1df1ef16d7ce96d4b49b 5 : dab92c45eeb765e29784f8cc33f92d0a39afed173f2b07e0e328586c3c3b19ed 6 : d27cc12614b5f4ff85ed109495e320fb1e5495eb28d507e952d51091e7ae2a72 7 : d27cc12614b5f4ff85ed109495e320fb1e5495eb28d507e952d51091e7ae2a72 8 : 0000000000000000000000000000000000000000000000000000000000000000 9 : 0000000000000000000000000000000000000000000000000000000000000000 10 : 0000000000000000000000000000000000000000000000000000000000000000 11 : 0000000000000000000000000000000000000000000000000000000000000000 12 : 0000000000000000000000000000000000000000000000000000000000000000 13 : 0000000000000000000000000000000000000000000000000000000000000000 14 : 0000000000000000000000000000000000000000000000000000000000000000 15 : 0000000000000000000000000000000000000000000000000000000000000000 16 : 0000000000000000000000000000000000000000000000000000000000000000 17 : ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 18 : ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 19 : ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 20 : ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 21 : ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 22 : ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 23 : 0000000000000000000000000000000000000000000000000000000000000000 Output example for TPM1.2: PCR-00: B3 F3 60 E1 D5 1F 82 D4 62 E6 B9 69 92 2F 65 F4 9F 1A 5F 8E PCR-01: 21 9F 1F 4A C1 AD AD 4D F1 8B 9F AB 98 23 68 B1 73 A6 32 87 PCR-02: 40 CF E3 DC A7 FF 67 FB AA BB 20 85 A4 39 43 D8 54 A7 AB 98 PCR-03: E3 E7 E6 89 CA FB F5 75 38 95 D0 CD 83 96 F6 0C 38 04 DC D5 PCR-04: 01 7A 3D E8 2F 4A 1B 77 FC 33 A9 03 FE F6 AD 27 EE 92 BE 04 PCR-05: 93 6A 12 98 07 73 85 9D 91 27 61 82 E7 11 C5 1D 08 98 C4 28 PCR-06: 3A 3F 78 0F 11 A4 B4 99 69 FC AA 80 CD 6E 39 57 C3 3B 22 75 PCR-07: 3A 3F 78 0F 11 A4 B4 99 69 FC AA 80 CD 6E 39 57 C3 3B 22 75 PCR-08: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 PCR-09: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 PCR-10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 PCR-11: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 PCR-12: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 PCR-13: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 PCR-14: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 PCR-15: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 PCR-16: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 PCR-17: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF PCR-18: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF PCR-19: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF PCR-20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF PCR-21: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF PCR-22: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF PCR-23: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 TPM001.003 TPM Support (Windows 11) Test description This test aims to verify that the TPM is initialized correctly and the PCRs can be accessed from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a PowerShell as administrator and run the following command: get-tpm Expected result The command should return information about the TPM state: if the TPM is present, ready and enabled: TpmPresent : True TpmReady : True TpmEnabled : True TPM002.001 Verify TPM version (firmware) Test description This test aims to verify that the TPM version is correctly recognized by the firmware. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the BIOS. Enter the shell. Run the following command in the shell: cbmem -L Expected result The output of the command should contain information about the TPM version. Example output: TPM2 log: Specification: 2 .00 TPM002.002 Verify TPM version (Ubuntu 22.04) Test description This test aims to verify that the TPM version is correctly recognized by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Check the version of installed tpm2-tools - execute the following command in the terminal: dmesg | grep -i tpm Expected result The command should return information about the TPM version. Example output: tpm_tis 00 :07: 1 .2 TPM ( device-id 0x0, rev-id 78 ) TPM002.003 Verify TPM version (Windows 11) Test description This test aims to verify that the TPM version is correctly recognized by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a PowerShell as administrator and run the following command: wmic / namespace :\\\\ root \\ cimv2 \\ security \\ microsofttpm path win32_tpm get * / format : textvaluelist . xsl Expected result The command should return information about the TPM version. Example output: SpecVersion=2.0 TPM003.001 Check TPM Physical Presence Interface (firmware) Test description This test aims to verify that the TPM Physical Presence Interface is supported by the firmware. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Download cbmem from https://cloud.3mdeb.com/index.php/s/zTqkJQdNtJDo5Nd to the DUT. Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open the terminal and run the following command and note results: sudo cbmem -1 | grep PPI Expected result The cbmem.log should contain the following lines (the hex numbers may be different per platform): [DEBUG] PPI: Pending OS request: 0x0 (0x0) [DEBUG] PPI: OS response: CMD 0x39073907 = 0x0 [DEBUG] TPM PPI 8. 0x76ffe620 0x0000015a If the above lines are present, the firmware supports TPM PPI. TPM003.002 Check TPM Physical Presence Interface (Ubuntu 22.04) Test description This test aims to verify that the TPM Physical Presence Interface is correctly recognized by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Platform with TPM 2.0 module present. Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open the terminal and run the following command to check the version of TPM PPI in sysfs: cat /sys/class/tpm/tpm0/ppi/version Expected result The command should return information about the TPM PPI version (only 1.3 is valid). If PPI is not available the file will not be found and test fails. Example output: $ cat /sys/class/tpm/tpm0/ppi/version 1 .3 TPM003.003 Check TPM Physical Presence Interface (Windows 11) Test description This test aims to verify that the TPM Physical Presence Interface is correctly recognized by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Platform with TPM 2.0 module present. Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a PowerShell as administrator and run the following command: tpmtool getdeviceinformation Expected result The command should return information about the TPM PPI version (only 1.3 is valid). If PPI is not available on the list, test fails. Example output: tpmtool getdeviceinformation -TPM Present : True -TPM Version : 2 . 0 -TPM Manufacturer ID : INTC -TPM Manufacturer Full Name : Intel -TPM Manufacturer Version : 600 . 18 . 0 . 0 -PPI Version : 1 . 3 -Is Initialized : True -Ready For Storage : True -Ready For Attestation : True -Is Capable For Attestation : True -Clear Needed To Recover : False -Clear Possible : True -TPM Has Vulnerable Firmware : False -Maintenance Task Complete : True -Bitlocker PCR7 Binding State : Binding Not Possible -TPM Spec Version : 1 . 38 -TPM Errata Date : Wednesday , December 18 , 2019 -PC Client Version : 1 . 04 -Lockout Information : -Is Locked Out : False -Lockout Counter : 0 -Max Auth Fail : 32 -Lockout Interval : 7200s -Lockout Recovery : 86400s TPM003.004 Change active PCR banks with TPM PPI (firmware) Test description This test aims to verify that the TPM Physical Presence Interface is working properly in the firmware by changing active TPM PCR banks. Test configuration data FIRMWARE = Dasharo Platform with TPM 2.0 module present. TPM003.001 indicating that TPM PPI is supported. Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the firmware setup using the BIOS_SETUP_KEY . Enter the Device Manager -> TCG2 Configuration . Scroll down to the bottom of the page using arrow down key. Switch active PCR banks depending on the currently active banks.: if both SHA1 and SHA256 are active, deactivate SHA1 if SHA1 only is active, activate SHA256 and deactivate SHA1 if SHA256 only is active, activate SHA1 and deactivate SHA256 Press F10 to save and go back to the main setup page using ESC key. Use the Reset option on the main setup page to reboot the DUT. After reset a prompt should appear explaining a TPM state change request has been made. Press F12 as instructed to apply changes. The DUT will need to reboot again. After the reboot enter the Device Manager -> TCG2 Configuration again. Scroll down to the bottom of the page using arrow down key. Verify the active PCR banks were changed according to the choice made in step 5. NOTE: Certain TPMs like Intel PTT (fTPM) do not allow to set more than one active PCR bank at a given time, that is why the test case keeps only one bank active. Discrete TPMs may have multiple banks enabled simultaneously, but it is TPM module and TPM firmware dependent. Expected result The prompt appears at step 8. The requested changes are applied as verified in step 11. The prompt seen on the DUT screen has the following format (example change from SHA256 to SHA1): A configuration change was requested to PCR bank(s) of this computer's TPM (Trusted Platform Module) WARNING: Changing the PCR bank(s) of the boot measurements may prevent the Operating System from properly processing the measurements. Please check if your Operating System supports the new PCR bank(s). WARNING: Secrets in the TPM that are bound to the boot state of your machine may become unusable. Current PCRBanks is 0x2. (SHA256) New PCRBanks is 0x1. (SHA1) Press F12 change the boot measurements to use PCR bank(s) of the TPM Press ESC to reject this change request and continue","title":"TPM support"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#dasharo-security-tpm-support","text":"","title":"Dasharo Security: TPM Support"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm001001-tpm-support-firmware","text":"Test description This test aims to verify that the TPM is initialized correctly and the PCRs can be accessed from the firmware. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the BIOS. Enter the shell. Run the following command in the shell: cbmem -L Expected result The command should return information about the TPM log entries. Example output: TPM2 log: Specification: 2 .00 Platform class: PC Client No vendor information provided TPM2 log entry 1 : PCR: 2 Event type: Action Digests: SHA1: f78a530fb5a70afcffdc86a98529abd24a90bac9 Event data: FMAP: FMAP TPM2 log entry 2 : PCR: 2 Event type: Action Digests: SHA1: 369155e6eab3b0a874140e591a4c0e992268b4b9 Event data: FMAP: BOOTBLOCK TPM2 log entry 3 : PCR: 2 Event type: Action Digests: SHA1: 5e785c080264aa6e169f70c80ac40b556066292b Event data: FMAP: COREBOOT CBFS: fallback/romstage TPM2 log entry 4 : PCR: 2 Event type: Action Digests: SHA1: ba2a5af955811fbac58a5198545539596eb38c3e Event data: FMAP: COREBOOT CBFS: fallback/ramstage TPM2 log entry 5 : PCR: 2 Event type: Action Digests: SHA1: ba35d4ce29d7b633b5644e2a3206c6069cf7f24d Event data: FMAP: COREBOOT CBFS: fallback/payload TPM2 log entry 6 : PCR: 2 Event type: Action Digests: SHA1: 47b49026133377e05193f8440c9a7cad239e883c Event data: FMAP: COREBOOT CBFS: 1 -cpu.dtb TPM2 log entry 7 : PCR: 3 Event type: Action Digests: SHA256: 6e7b06693452d997ac534e823b1ea79e5bb8ed19ba8a7af878abf10199c3d515 SHA1: 6e7b06693452d997ac534e823b1ea79e5bb8ed19 Event data: VERSION TPM2 log entry 8 : PCR: 2 Event type: Action Digests: SHA256: de73053377e1ae5ba5d2b637a4f5bfaeb410137722f11ef135e7a1be524e3092 SHA1: de73053377e1ae5ba5d2b637a4f5bfaeb4101377 Event data: IMA_CATALOG TPM2 log entry 9 : PCR: 4 Event type: Action Digests: SHA256: ba427f9349b1f9e589f98909e26086b0cfd5ced78a7fbcb140a70a506c38a8e5 SHA1: ba427f9349b1f9e589f98909e26086b0cfd5ced7 Event data: BOOTKERNEL ( ... )","title":"TPM001.001 TPM Support (firmware)"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm001002-tpm-support-ubuntu-2204","text":"Test description This test aims to verify that the TPM is initialized correctly and the PCRs can be accessed from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the tpm2-tools package: sudo apt install tpm2-tools . Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Check the version of installed tpm2-tools - execute the following command in the terminal: dpkg --list tpm2-tools If your device is equipped with TPM2.0 and the version of tpm2-tools is 4.0 or higher - execute the following command in the terminal: tpm2_pcrread If your device is equipped with TPM2.0 and the version of tpm2-tools is lower than 4.0 - execute the following command in the terminal: tpm2_pcrlist If your device is equipped with TPM1.2 - execute the following command in the terminal: cat /sys/class/tpm/tpm0/pcrs Expected result The command should return a list of PCRs and their contents. Output example for TPM2.0: sha1 : 0 : 3a3f780f11a4b49969fcaa80cd6e3957c33b2275 1 : 8a074fdf65a11e5dbf02d25e7f26b00c26c98b41 2 : c36c2509d636c9cfa075d6d0a03b7a37bec14ee9 3 : 3a3f780f11a4b49969fcaa80cd6e3957c33b2275 4 : 2d247bb671ec17ded623ca45967df5482517291b 5 : 49d543eb1d1df3439d9fca695ee47b8cdf4b9e2f 6 : 3a3f780f11a4b49969fcaa80cd6e3957c33b2275 7 : 3a3f780f11a4b49969fcaa80cd6e3957c33b2275 8 : 0000000000000000000000000000000000000000 9 : 0000000000000000000000000000000000000000 10 : 0000000000000000000000000000000000000000 11 : 0000000000000000000000000000000000000000 12 : 0000000000000000000000000000000000000000 13 : 0000000000000000000000000000000000000000 14 : 0000000000000000000000000000000000000000 15 : 0000000000000000000000000000000000000000 16 : 0000000000000000000000000000000000000000 17 : ffffffffffffffffffffffffffffffffffffffff 18 : ffffffffffffffffffffffffffffffffffffffff 19 : ffffffffffffffffffffffffffffffffffffffff 20 : ffffffffffffffffffffffffffffffffffffffff 21 : ffffffffffffffffffffffffffffffffffffffff 22 : ffffffffffffffffffffffffffffffffffffffff 23 : 0000000000000000000000000000000000000000 sha256 : 0 : d27cc12614b5f4ff85ed109495e320fb1e5495eb28d507e952d51091e7ae2a72 1 : b29a64bd6895966b777eb803f45e6bbffade81cc1b996a34f7cbd26f1d04028b 2 : 3122422e43b9fbfc0cb70eb467b55e99ec61462370e6b15c515484f821e1d4d9 3 : 909e4261938378c0556a4c335c38718d1c313bd151fdf222df674aabb7aeee97 4 : 984763b42633ee11e5167e2f67c2e6879bd6efac683f1df1ef16d7ce96d4b49b 5 : dab92c45eeb765e29784f8cc33f92d0a39afed173f2b07e0e328586c3c3b19ed 6 : d27cc12614b5f4ff85ed109495e320fb1e5495eb28d507e952d51091e7ae2a72 7 : d27cc12614b5f4ff85ed109495e320fb1e5495eb28d507e952d51091e7ae2affffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 18 : ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 19 : ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 20 : ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 21 : ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 22 : ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff 23 : 0000000000000000000000000000000000000000000000000000000000000000 Output example for TPM1.2: PCR-00: B3 F3 60 E1 D5 1F 82 D4 62 E6 B9 69 92 2F 65 F4 9F 1A 5F 8E PCR-01: 21 9F 1F 4A C1 AD AD 4D F1 8B 9F AB 98 23 68 B1 73 A6 32 87 PCR-02: 40 CF E3 DC A7 FF 67 FB AA BB 20 85 A4 39 43 D8 54 A7 AB 98 PCR-03: E3 E7 E6 89 CA FB F5 75 38 95 D0 CD 83 96 F6 0C 38 04 DC D5 PCR-04: 01 7A 3D E8 2F 4A 1B 77 FC 33 A9 03 FE F6 AD 27 EE 92 BE 04 PCR-05: 93 6A 12 98 07 73 85 9D 91 27 61 82 E7 11 C5 1D 08 98 C4 28 PCR-06: 3A 3F 78 0F 11 A4 B4 99 69 FC AA 80 CD 6E 39 57 C3 3B 22 75 PCR-07: 3A 3F 78 0F 11 A4 B4 99 69 FC AA 80 CD 6E 39 57 C3 3B 22 75 PCR-08: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 PCR-09: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 PCR-10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 PCR-11: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 PCR-12: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 PCR-13: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 PCR-14: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 PCR-15: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 PCR-16: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 PCR-17: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF PCR-18: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF PCR-19: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF PCR-20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF PCR-21: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF PCR-22: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF PCR-23: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00","title":"TPM001.002 TPM Support (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm001003-tpm-support-windows-11","text":"Test description This test aims to verify that the TPM is initialized correctly and the PCRs can be accessed from the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a PowerShell as administrator and run the following command: get-tpm Expected result The command should return information about the TPM state: if the TPM is present, ready and enabled: TpmPresent : True TpmReady : True TpmEnabled : True","title":"TPM001.003 TPM Support (Windows 11)"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm002001-verify-tpm-version-firmware","text":"Test description This test aims to verify that the TPM version is correctly recognized by the firmware. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the BIOS. Enter the shell. Run the following command in the shell: cbmem -L Expected result The output of the command should contain information about the TPM version. Example output: TPM2 log: Specification: 2 .00","title":"TPM002.001 Verify TPM version (firmware)"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm002002-verify-tpm-version-ubuntu-2204","text":"Test description This test aims to verify that the TPM version is correctly recognized by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Check the version of installed tpm2-tools - execute the following command in the terminal: dmesg | grep -i tpm Expected result The command should return information about the TPM version. Example output: tpm_tis 00 :07: 1 .2 TPM ( device-id 0x0, rev-id 78 )","title":"TPM002.002 Verify TPM version (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm002003-verify-tpm-version-windows-11","text":"Test description This test aims to verify that the TPM version is correctly recognized by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a PowerShell as administrator and run the following command: wmic / namespace :\\\\ root \\ cimv2 \\ security \\ microsofttpm path win32_tpm get * / format : textvaluelist . xsl Expected result The command should return information about the TPM version. Example output: SpecVersion=2.0","title":"TPM002.003 Verify TPM version (Windows 11)"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm003001-check-tpm-physical-presence-interface-firmware","text":"Test description This test aims to verify that the TPM Physical Presence Interface is supported by the firmware. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Download cbmem from https://cloud.3mdeb.com/index.php/s/zTqkJQdNtJDo5Nd to the DUT. Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open the terminal and run the following command and note results: sudo cbmem -1 | grep PPI Expected result The cbmem.log should contain the following lines (the hex numbers may be different per platform): [DEBUG] PPI: Pending OS request: 0x0 (0x0) [DEBUG] PPI: OS response: CMD 0x39073907 = 0x0 [DEBUG] TPM PPI 8. 0x76ffe620 0x0000015a If the above lines are present, the firmware supports TPM PPI.","title":"TPM003.001 Check TPM Physical Presence Interface (firmware)"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm003002-check-tpm-physical-presence-interface-ubuntu-2204","text":"Test description This test aims to verify that the TPM Physical Presence Interface is correctly recognized by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Platform with TPM 2.0 module present. Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open the terminal and run the following command to check the version of TPM PPI in sysfs: cat /sys/class/tpm/tpm0/ppi/version Expected result The command should return information about the TPM PPI version (only 1.3 is valid). If PPI is not available the file will not be found and test fails. Example output: $ cat /sys/class/tpm/tpm0/ppi/version 1 .3","title":"TPM003.002 Check TPM Physical Presence Interface (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm003003-check-tpm-physical-presence-interface-windows-11","text":"Test description This test aims to verify that the TPM Physical Presence Interface is correctly recognized by the operating system. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Platform with TPM 2.0 module present. Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a PowerShell as administrator and run the following command: tpmtool getdeviceinformation Expected result The command should return information about the TPM PPI version (only 1.3 is valid). If PPI is not available on the list, test fails. Example output: tpmtool getdeviceinformation -TPM Present : True -TPM Version : 2 . 0 -TPM Manufacturer ID : INTC -TPM Manufacturer Full Name : Intel -TPM Manufacturer Version : 600 . 18 . 0 . 0 -PPI Version : 1 . 3 -Is Initialized : True -Ready For Storage : True -Ready For Attestation : True -Is Capable For Attestation : True -Clear Needed To Recover : False -Clear Possible : True -TPM Has Vulnerable Firmware : False -Maintenance Task Complete : True -Bitlocker PCR7 Binding State : Binding Not Possible -TPM Spec Version : 1 . 38 -TPM Errata Date : Wednesday , December 18 , 2019 -PC Client Version : 1 . 04 -Lockout Information : -Is Locked Out : False -Lockout Counter : 0 -Max Auth Fail : 32 -Lockout Interval : 7200s -Lockout Recovery : 86400s","title":"TPM003.003 Check TPM Physical Presence Interface (Windows 11)"},{"location":"unified-test-documentation/dasharo-security/200-tpm-support/#tpm003004-change-active-pcr-banks-with-tpm-ppi-firmware","text":"Test description This test aims to verify that the TPM Physical Presence Interface is working properly in the firmware by changing active TPM PCR banks. Test configuration data FIRMWARE = Dasharo Platform with TPM 2.0 module present. TPM003.001 indicating that TPM PPI is supported. Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the firmware setup using the BIOS_SETUP_KEY . Enter the Device Manager -> TCG2 Configuration . Scroll down to the bottom of the page using arrow down key. Switch active PCR banks depending on the currently active banks.: if both SHA1 and SHA256 are active, deactivate SHA1 if SHA1 only is active, activate SHA256 and deactivate SHA1 if SHA256 only is active, activate SHA1 and deactivate SHA256 Press F10 to save and go back to the main setup page using ESC key. Use the Reset option on the main setup page to reboot the DUT. After reset a prompt should appear explaining a TPM state change request has been made. Press F12 as instructed to apply changes. The DUT will need to reboot again. After the reboot enter the Device Manager -> TCG2 Configuration again. Scroll down to the bottom of the page using arrow down key. Verify the active PCR banks were changed according to the choice made in step 5. NOTE: Certain TPMs like Intel PTT (fTPM) do not allow to set more than one active PCR bank at a given time, that is why the test case keeps only one bank active. Discrete TPMs may have multiple banks enabled simultaneously, but it is TPM module and TPM firmware dependent. Expected result The prompt appears at step 8. The requested changes are applied as verified in step 11. The prompt seen on the DUT screen has the following format (example change from SHA256 to SHA1): A configuration change was requested to PCR bank(s) of this computer's TPM (Trusted Platform Module) WARNING: Changing the PCR bank(s) of the boot measurements may prevent the Operating System from properly processing the measurements. Please check if your Operating System supports the new PCR bank(s). WARNING: Secrets in the TPM that are bound to the boot state of your machine may become unusable. Current PCRBanks is 0x2. (SHA256) New PCRBanks is 0x1. (SHA1) Press F12 change the boot measurements to use PCR bank(s) of the TPM Press ESC to reject this change request and continue","title":"TPM003.004 Change active PCR banks with TPM PPI (firmware)"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/","text":"Dasharo Security: Verified Boot support Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . VBO001.001 Generating keys for Verified Boot Test description This test aims to verify whether there is a possibility to generate vboot keys for signing the firmware. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Based on the dedicated documentation generate the keys . Check if the keys, after finishing the generating process, are available in the keys subdirectory. Expected result The keys location should contain the generated keys. VBO002.001 Signing image without rebuild Test description This test aims to verify whether there is a possibility to sign the firmware image with generated keys without rebuilding. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Localize the keys, which were generated in the VBO001.001 test case. Based on the dedicated documentation sign the firmware image with the keys without rebuilding. Note the result. Expected result The output of the last command should contain information that resigning procedure was successful. Example output: ... INFO: sign_bios_at_end: BIOS image does not have FW_MAIN_B. Signing only FW_MAIN_A - import root_key from /.../keys/root_key.vbpubk: success - import recovery_key from /.../keys/recovery_key.vbpubk: success successfully saved new image to: /.../protectli_vault_cml_v1.0.16_resigned.rom The /.../protectli_vault_cml_v1.0.16.rom was resigned and saved as: /.../protectli_vault_cml_v1.0.16_resigned.rom VBO003.001 Flashing device with the signed firmware Test description This test aims to verify whether there is a possibility to flash the locally signed firmware to the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Localize the firmware, which was signed in the VBO002.001 test case. Flash the firmware by using the internal programmer and flashrom tool. If DUT is already flashed with the Dasharo firmware, the following command should be used: flashrom -p internal -w [ path-to-binary ] --fmap -i RW_SECTION_A Otherwise, the following command should be used: flashrom -p internal -w [ path-to-binary ] --ifd -i bios Reboot the DUT. and note the results. Expected result The DUT reboots properly without issues related to firmware signing. VBO004.001 Adding keys and building image Test description This test aims to verify whether there is a possibility to build firmware on the local machine, based on Build manual procedure dedicated to the platform and sign it with the locally generated keys. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Make yourself familiar with Building manual procedure dedicated for the relevant platform: NovaCustom laptops Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Localize the keys, which were generated in the VBO001.001 test case. Based on the dedicated documentation add locally generated keys to the coreboot config. Based on the dedicated documentation build firmware. Check if the binary file, after finishing the building process, is available in the build subdirectory. Expected result The build location should contain the binary file, which size is equal to the flash chip size. VBO005.001 Flashing device with built firmware Test description This test aims to verify it is possible to flash and boot DUT with signed firmware image. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Localize the firmware, which was built in the VBO004.001 test case. Flash the firmware by using the internal programmer and flashrom tool. If DUT is already flashed with the Dasharo firmware, the following command should be used: flashrom -p internal -w [ path-to-binary ] --fmap -i RW_SECTION_A Otherwise, the following command should be used: flashrom -p internal -w [ path-to-binary ] --ifd -i bios Reboot the DUT. and note the results. Expected result The DUT reboots properly without issues related to firmware signing. VBO006.001 Verified boot support (firmware) Test description Verified Boot is a method of verifying that the firmware components come from a trusted source. This test aims to confirm that verified boot is enabled and functional. Test setup Proceed with the Generic test setup: firmware . Disable Secure Boot. Test steps Power on the DUT. Read coreboot loading logs. Expected result The logs should indicate that vboot is enabled and verstage has been entered: VBOOT: Loading verstage. VBO006.002 Verified boot support (Ubuntu 22.04) Test description Verified Boot is a method of verifying that the firmware components come from a trusted source. This test aims to confirm that verified boot is enabled and functional. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Download cbmem and flashrom from https://cloud.3mdeb.com/index.php/s/zTqkJQdNtJDo5Nd to the DUT. Disable Secure Boot. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo ./cbmem -c | grep VBOOT Expected result The output of the command should indicate that vboot is enabled and verstage has been entered: VBOOT: Loading verstage. TPM: Extending digest for VBOOT: boot mode into PCR 0 TPM: Extending digest for VBOOT: GBB HWID into PCR 1 VBOOT WORK 8. 0x76c05000 0x00014000 PCR-0 2547cc736e951fa4919853c43ae890861a3b3264000000000000000000000000 SHA256 [VBOOT: boot mode] PCR-1 e3324765a25f8a59c7c20cc35c1c33a8ab384159d2b40a269246b0b4491cdf89 SHA256 [VBOOT: GBB HWID] VBO007.001 Verified boot: Booting from Slot A (firmware) Test description If the signatures for firmware stored in vboot Slot A are correct, vboot should proceed to boot from Slot A. Test setup Proceed with the Generic test setup: firmware . Disable Secure Boot. Test steps Power on the DUT. Read coreboot loading logs. Expected result The logs should indicate that vboot has chosen to boot from slot A: Slot A is selected VBO007.002 Verified boot: Booting from Slot A (Ubuntu 22.04) Test description If the signatures for firmware stored in vboot Slot A are correct, vboot should proceed to boot from Slot A. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Download cbmem and flashrom from https://cloud.3mdeb.com/index.php/s/zTqkJQdNtJDo5Nd to the DUT. Disable Secure Boot. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo ./cbmem -c | grep \"Slot A\" Expected result The output of the command should indicate that vboot has chosen to boot from slot A: Slot A is selected VBO008.001 Verified boot: Booting from Recovery (Ubuntu 22.04) Test description If the signatures for firmware stored in vboot Slot A are incorrect, vboot should revert to booting from the recovery slot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Download cbmem and flashrom from https://cloud.3mdeb.com/index.php/s/zTqkJQdNtJDo5Nd to the DUT. Disable Secure Boot. Obtain coreboot binary signed with wrong vboot keys. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Flash coreboot signed with wrong vboot keys by executing the following command: flashrom -p internal --fmap -i RW_SECTION_A -w [ coreboot binary ] Power off the DUT Connect to the DUT using the serial port. Power on the DUT Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo ./cbmem -c | grep -i recovery If booting into the system is impossible, read coreboot loading logs. Expected result The logs should indicate that vboot has chosen to boot from the recovery slot. Example: VB2:vb2_check_recovery () Recovery reason from previous boot: 0x3 / 0x3 VB2:vb2_check_recovery () We have a recovery request: 0x3 / 0x0 Recovery requested ( 1009000e ) VBO009.001 Recovery boot popup (firmware) Test description This test aims to verify whether the recovery mode information is displayed as the popup after rebooting the DUT which is flashed with the firmware with the wrong vboot keys. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Disable Secure Boot. Obtain coreboot binary signed with wrong vboot keys. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Flash coreboot signed with wrong vboot keys by executing the following command: flashrom -p internal --fmap -i RW_SECTION_A -w [ coreboot binary ] Reboot the DUT. Wait for the popup to appear. Expected result Popup with information about recovery mode should be displayed. VBO010.001 Recovery boot popup confirmation (firmware) Test description This test aims to verify whether the recovery popup might be confirmed which allows to proceed to the next booting stages. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Disable Secure Boot. Obtain coreboot binary signed with wrong vboot keys. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Flash coreboot signed with wrong vboot keys by executing the following command: flashrom -p internal --fmap -i RW_SECTION_A -w [ coreboot binary ] Reboot the DUT. Wait for the popup to appear. Press ENTER . Expected result After pressing ENTER the DUT should immediately move to the next stages of booting. VBO011.001 Booting after flashing with valid binary (Ubuntu 22.04) Test description This test aims to verify whether after flashing the DUT with the valid binary, the DUT will boot correctly from the default slot and no recovery popup will be displayed. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Download cbmem and flashrom from https://cloud.3mdeb.com/index.php/s/zTqkJQdNtJDo5Nd to the DUT. Disable Secure Boot. Slot A is flashed with an binary with wrong-signed vboot keys. Obtain the correct coreboot binary appropriate for the DUT. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Flash firmware with valid binary by executing the following command: flashrom -p internal --fmap -i RW_SECTION_A -w [ coreboot binary ] Reboot the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo ./cbmem -c | grep -i recovery Expected result Popup with information about recovery mode should not be displayed. The logs should indicate that vboot hasn't chosen to boot from the recovery slot. Example output: VB2:vb2_check_recovery () Recovery reason from previous boot: 0x0 / 0x0","title":"Verified Boot"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#dasharo-security-verified-boot-support","text":"","title":"Dasharo Security: Verified Boot support"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo001001-generating-keys-for-verified-boot","text":"Test description This test aims to verify whether there is a possibility to generate vboot keys for signing the firmware. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Based on the dedicated documentation generate the keys . Check if the keys, after finishing the generating process, are available in the keys subdirectory. Expected result The keys location should contain the generated keys.","title":"VBO001.001 Generating keys for Verified Boot"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo002001-signing-image-without-rebuild","text":"Test description This test aims to verify whether there is a possibility to sign the firmware image with generated keys without rebuilding. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Localize the keys, which were generated in the VBO001.001 test case. Based on the dedicated documentation sign the firmware image with the keys without rebuilding. Note the result. Expected result The output of the last command should contain information that resigning procedure was successful. Example output: ... INFO: sign_bios_at_end: BIOS image does not have FW_MAIN_B. Signing only FW_MAIN_A - import root_key from /.../keys/root_key.vbpubk: success - import recovery_key from /.../keys/recovery_key.vbpubk: success successfully saved new image to: /.../protectli_vault_cml_v1.0.16_resigned.rom The /.../protectli_vault_cml_v1.0.16.rom was resigned and saved as: /.../protectli_vault_cml_v1.0.16_resigned.rom","title":"VBO002.001 Signing image without rebuild"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo003001-flashing-device-with-the-signed-firmware","text":"Test description This test aims to verify whether there is a possibility to flash the locally signed firmware to the DUT. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Localize the firmware, which was signed in the VBO002.001 test case. Flash the firmware by using the internal programmer and flashrom tool. If DUT is already flashed with the Dasharo firmware, the following command should be used: flashrom -p internal -w [ path-to-binary ] --fmap -i RW_SECTION_A Otherwise, the following command should be used: flashrom -p internal -w [ path-to-binary ] --ifd -i bios Reboot the DUT. and note the results. Expected result The DUT reboots properly without issues related to firmware signing.","title":"VBO003.001 Flashing device with the signed firmware"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo004001-adding-keys-and-building-image","text":"Test description This test aims to verify whether there is a possibility to build firmware on the local machine, based on Build manual procedure dedicated to the platform and sign it with the locally generated keys. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Make yourself familiar with Building manual procedure dedicated for the relevant platform: NovaCustom laptops Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Localize the keys, which were generated in the VBO001.001 test case. Based on the dedicated documentation add locally generated keys to the coreboot config. Based on the dedicated documentation build firmware. Check if the binary file, after finishing the building process, is available in the build subdirectory. Expected result The build location should contain the binary file, which size is equal to the flash chip size.","title":"VBO004.001 Adding keys and building image"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo005001-flashing-device-with-built-firmware","text":"Test description This test aims to verify it is possible to flash and boot DUT with signed firmware image. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Localize the firmware, which was built in the VBO004.001 test case. Flash the firmware by using the internal programmer and flashrom tool. If DUT is already flashed with the Dasharo firmware, the following command should be used: flashrom -p internal -w [ path-to-binary ] --fmap -i RW_SECTION_A Otherwise, the following command should be used: flashrom -p internal -w [ path-to-binary ] --ifd -i bios Reboot the DUT. and note the results. Expected result The DUT reboots properly without issues related to firmware signing.","title":"VBO005.001 Flashing device with built firmware"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo006001-verified-boot-support-firmware","text":"Test description Verified Boot is a method of verifying that the firmware components come from a trusted source. This test aims to confirm that verified boot is enabled and functional. Test setup Proceed with the Generic test setup: firmware . Disable Secure Boot. Test steps Power on the DUT. Read coreboot loading logs. Expected result The logs should indicate that vboot is enabled and verstage has been entered: VBOOT: Loading verstage.","title":"VBO006.001 Verified boot support (firmware)"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo006002-verified-boot-support-ubuntu-2204","text":"Test description Verified Boot is a method of verifying that the firmware components come from a trusted source. This test aims to confirm that verified boot is enabled and functional. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Download cbmem and flashrom from https://cloud.3mdeb.com/index.php/s/zTqkJQdNtJDo5Nd to the DUT. Disable Secure Boot. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo ./cbmem -c | grep VBOOT Expected result The output of the command should indicate that vboot is enabled and verstage has been entered: VBOOT: Loading verstage. TPM: Extending digest for VBOOT: boot mode into PCR 0 TPM: Extending digest for VBOOT: GBB HWID into PCR 1 VBOOT WORK 8. 0x76c05000 0x00014000 PCR-0 2547cc736e951fa4919853c43ae890861a3b3264000000000000000000000000 SHA256 [VBOOT: boot mode] PCR-1 e3324765a25f8a59c7c20cc35c1c33a8ab384159d2b40a269246b0b4491cdf89 SHA256 [VBOOT: GBB HWID]","title":"VBO006.002 Verified boot support (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo007001-verified-boot-booting-from-slot-a-firmware","text":"Test description If the signatures for firmware stored in vboot Slot A are correct, vboot should proceed to boot from Slot A. Test setup Proceed with the Generic test setup: firmware . Disable Secure Boot. Test steps Power on the DUT. Read coreboot loading logs. Expected result The logs should indicate that vboot has chosen to boot from slot A: Slot A is selected","title":"VBO007.001 Verified boot: Booting from Slot A (firmware)"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo007002-verified-boot-booting-from-slot-a-ubuntu-2204","text":"Test description If the signatures for firmware stored in vboot Slot A are correct, vboot should proceed to boot from Slot A. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Download cbmem and flashrom from https://cloud.3mdeb.com/index.php/s/zTqkJQdNtJDo5Nd to the DUT. Disable Secure Boot. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo ./cbmem -c | grep \"Slot A\" Expected result The output of the command should indicate that vboot has chosen to boot from slot A: Slot A is selected","title":"VBO007.002 Verified boot: Booting from Slot A (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo008001-verified-boot-booting-from-recovery-ubuntu-2204","text":"Test description If the signatures for firmware stored in vboot Slot A are incorrect, vboot should revert to booting from the recovery slot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Download cbmem and flashrom from https://cloud.3mdeb.com/index.php/s/zTqkJQdNtJDo5Nd to the DUT. Disable Secure Boot. Obtain coreboot binary signed with wrong vboot keys. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Flash coreboot signed with wrong vboot keys by executing the following command: flashrom -p internal --fmap -i RW_SECTION_A -w [ coreboot binary ] Power off the DUT Connect to the DUT using the serial port. Power on the DUT Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo ./cbmem -c | grep -i recovery If booting into the system is impossible, read coreboot loading logs. Expected result The logs should indicate that vboot has chosen to boot from the recovery slot. Example: VB2:vb2_check_recovery () Recovery reason from previous boot: 0x3 / 0x3 VB2:vb2_check_recovery () We have a recovery request: 0x3 / 0x0 Recovery requested ( 1009000e )","title":"VBO008.001 Verified boot: Booting from Recovery (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo009001-recovery-boot-popup-firmware","text":"Test description This test aims to verify whether the recovery mode information is displayed as the popup after rebooting the DUT which is flashed with the firmware with the wrong vboot keys. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Disable Secure Boot. Obtain coreboot binary signed with wrong vboot keys. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Flash coreboot signed with wrong vboot keys by executing the following command: flashrom -p internal --fmap -i RW_SECTION_A -w [ coreboot binary ] Reboot the DUT. Wait for the popup to appear. Expected result Popup with information about recovery mode should be displayed.","title":"VBO009.001 Recovery boot popup (firmware)"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo010001-recovery-boot-popup-confirmation-firmware","text":"Test description This test aims to verify whether the recovery popup might be confirmed which allows to proceed to the next booting stages. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Disable Secure Boot. Obtain coreboot binary signed with wrong vboot keys. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Flash coreboot signed with wrong vboot keys by executing the following command: flashrom -p internal --fmap -i RW_SECTION_A -w [ coreboot binary ] Reboot the DUT. Wait for the popup to appear. Press ENTER . Expected result After pressing ENTER the DUT should immediately move to the next stages of booting.","title":"VBO010.001  Recovery boot popup confirmation (firmware)"},{"location":"unified-test-documentation/dasharo-security/201-verified-boot/#vbo011001-booting-after-flashing-with-valid-binary-ubuntu-2204","text":"Test description This test aims to verify whether after flashing the DUT with the valid binary, the DUT will boot correctly from the default slot and no recovery popup will be displayed. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Download cbmem and flashrom from https://cloud.3mdeb.com/index.php/s/zTqkJQdNtJDo5Nd to the DUT. Disable Secure Boot. Slot A is flashed with an binary with wrong-signed vboot keys. Obtain the correct coreboot binary appropriate for the DUT. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Flash firmware with valid binary by executing the following command: flashrom -p internal --fmap -i RW_SECTION_A -w [ coreboot binary ] Reboot the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo ./cbmem -c | grep -i recovery Expected result Popup with information about recovery mode should not be displayed. The logs should indicate that vboot hasn't chosen to boot from the recovery slot. Example output: VB2:vb2_check_recovery () Recovery reason from previous boot: 0x0 / 0x0","title":"VBO011.001 Booting after flashing with valid binary (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-security/203-measured-boot/","text":"Dasharo Security: Measured Boot support MBO001.001 Measured Boot support (Ubuntu 22.04) Test description Measured Boot is a method for detecting changes to the firmware by storing hashes of each firmware component in the TPM PCR registers. If a PCR changes value across reboots, a change to the firmware has been made. This test aims to verify that Measured Boot is functional and that measurements are stored in the TPM.a. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Download cbmem from the cloud to the DUT. Disable Secure Boot. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo ./cbmem -c | grep -i PCR Expected result The output of the command should indicate that measurements of the coreboot components have been made. Example output: TPM: Extending digest for `VBOOT: boot mode` into PCR 0 TPM: Digest of `VBOOT: boot mode` to PCR 0 measured TPM: Extending digest for `VBOOT: GBB HWID` into PCR 1 TPM: Digest of `VBOOT: GBB HWID` to PCR 1 measured TPM: Extending digest for `FMAP: FMAP` into PCR 2 TPM: Digest of `FMAP: FMAP` to PCR 2 measured TPM: Extending digest for `CBFS: bootblock` into PCR 2 TPM: Digest of `CBFS: bootblock` to PCR 2 measured TPM: Extending digest for `CBFS: fallback/romstage` into PCR 2 TPM: Digest of `CBFS: fallback/romstage` to PCR 2 measured TPM: Extending digest for `CBFS: fspm.bin` into PCR 2 TPM: Digest of `CBFS: fspm.bin` to PCR 2 measured TPM: Extending digest for `CBFS: fallback/postcar` into PCR 2 TPM: Digest of `CBFS: fallback/postcar` to PCR 2 measured TPM: Extending digest for `CBFS: fallback/ramstage` into PCR 2 TPM: Digest of `CBFS: fallback/ramstage` to PCR 2 measured ... The output shouldn't contain the following message: TPM: Extending hash into PCR failed.","title":"Measured Boot"},{"location":"unified-test-documentation/dasharo-security/203-measured-boot/#dasharo-security-measured-boot-support","text":"","title":"Dasharo Security: Measured Boot support"},{"location":"unified-test-documentation/dasharo-security/203-measured-boot/#mbo001001-measured-boot-support-ubuntu-2204","text":"Test description Measured Boot is a method for detecting changes to the firmware by storing hashes of each firmware component in the TPM PCR registers. If a PCR changes value across reboots, a change to the firmware has been made. This test aims to verify that Measured Boot is functional and that measurements are stored in the TPM.a. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Download cbmem from the cloud to the DUT. Disable Secure Boot. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo ./cbmem -c | grep -i PCR Expected result The output of the command should indicate that measurements of the coreboot components have been made. Example output: TPM: Extending digest for `VBOOT: boot mode` into PCR 0 TPM: Digest of `VBOOT: boot mode` to PCR 0 measured TPM: Extending digest for `VBOOT: GBB HWID` into PCR 1 TPM: Digest of `VBOOT: GBB HWID` to PCR 1 measured TPM: Extending digest for `FMAP: FMAP` into PCR 2 TPM: Digest of `FMAP: FMAP` to PCR 2 measured TPM: Extending digest for `CBFS: bootblock` into PCR 2 TPM: Digest of `CBFS: bootblock` to PCR 2 measured TPM: Extending digest for `CBFS: fallback/romstage` into PCR 2 TPM: Digest of `CBFS: fallback/romstage` to PCR 2 measured TPM: Extending digest for `CBFS: fspm.bin` into PCR 2 TPM: Digest of `CBFS: fspm.bin` to PCR 2 measured TPM: Extending digest for `CBFS: fallback/postcar` into PCR 2 TPM: Digest of `CBFS: fallback/postcar` to PCR 2 measured TPM: Extending digest for `CBFS: fallback/ramstage` into PCR 2 TPM: Digest of `CBFS: fallback/ramstage` to PCR 2 measured ... The output shouldn't contain the following message: TPM: Extending hash into PCR failed.","title":"MBO001.001 Measured Boot support (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/","text":"Dasharo Security: UEFI Secure Boot SBO001.001 Check Secure Boot default state (firmware) Test description Secure Boot is a verification mechanism for ensuring that code launched by firmware is trusted. This test aims to verify that the Secure Boot state after flashing the platform with the Dasharo firmware is correct. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Device Manager menu using the arrow keys and Enter. Enter the Secure Boot Configuration submenu. Verify the Current Secure Boot State field. Expected result The Secure Boot State field should inform that the current state of Secure Boot is Disabled . SBO002.001 UEFI Secure Boot (Ubuntu 22.04) Test description This test verifies that Secure Boot can be enabled from the boot menu and, after the DUT reset, it is seen from the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Secure Boot Configuration to enable the Attempt Secure Boot option in the Secure Boot Configuration menu. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Device Manager menu using the arrow keys and Enter. Enter the Secure Boot Configuration submenu. Verify that the Current Secure Boot State field says Enabled - if not, select the Attempt Secure Boot option below. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. The DUT will now attempt to boot OPERATING_SYSTEM with Secure Boot enabled. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo dmesg | grep secureboot Note the results. Expected result The output of the command should contain the line: secureboot: Secure boot enabled SBO002.002 UEFI Secure Boot (Windows 11) Test description This test verifies that Secure Boot can be enabled from the boot menu and, after the DUT reset, it is seen from the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Secure Boot Configuration to enable the Attempt Secure Boot option in the Secure Boot Configuration menu. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Device Manager menu using the arrow keys and Enter. Enter the Secure Boot Configuration submenu. Verify that the Current Secure Boot State field says Enabled - if not, select the Attempt Secure Boot option below. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. The DUT will now attempt to boot OPERATING_SYSTEM with Secure Boot enabled. Log into the system by using the proper login and password. Open Powershell as administrator and run the following command: Confirm-SecureBootUEFI Note the results. Expected result The output of the command should return the information, that Secure Boot is enabled: True SBO003.001 Attempt to boot file with the correct key from Shell (firmware) Test description This test verifies that Secure Boot allows booting a signed file with a correct key. Test configuration data FIRMWARE = Dasharo Additional USB storage - at least 1GB - for keeping files for booting Test setup Proceed with the Generic test setup: firmware . Test steps Download the signed with the correct key file from the cloud . Download the certificate from the cloud . Place the certificate and the file on the USB storage . Plug the USB storage into DUT. Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Device Manager menu using the arrow keys and Enter. Enter the Secure Boot Configuration submenu. Set the Secure Boot Mode field to Custom Mode . Select options in the given order: Custom Secure Boot Options -> DB Options -> Enroll Signature -> Enroll Signature Using File Select the certificate from the USB storage . Select the Commit Changes and Exit option. Press ESC until the setup menu. Select the Reset option. While the DUT is booting, hold the BOOT_MENU_KEY to enter the boot menu. Select the UEFI Shell option using the arrow keys and press Enter . In the shell open the USB storage by executing the following command: FS0: One of the filesystems in the FS list will be the USB storage - typically FS0: Boot the previously prepared file by typing its full name: hello-valid-keys.efi Expected result File boots correctly (no information: Command Error Status: Access Denied on the output). The output of the command shows file content. Example output: Hello, world! SBO004.001 Attempt to boot file without the key from Shell (firmware) Test description This test verifies that Secure Boot blocks booting a file without a key. Test configuration data FIRMWARE = Dasharo Additional USB storage - at least 1GB - for keeping files for booting Test setup Proceed with the Generic test setup: firmware . Test steps Download the not signed file from the cloud . Place the file on the USB storage . Plug the USB storage into DUT. Power on the DUT. While the DUT is booting, hold the BOOT_MENU_KEY to enter the boot menu. Select the UEFI Shell option using the arrow keys and press Enter . In the shell open the USB storage by executing the following command: FS0: One of the filesystems in the FS list will be the USB storage - typically FS0: Boot the previously prepared file by typing its full name: hello.efi Expected result The output of the command doesn't show file content and information about access denied is displayed. Example output: Command Error Status: Access Denied SBO005.001 Attempt to boot file with the wrong-signed key from Shell (firmware) Test description This test verifies that Secure Boot blocks booting a file with the wrong-signed key. Test configuration data FIRMWARE = Dasharo Additional USB storage - at least 1GB - for keeping files for booting Test setup Proceed with the Generic test setup: firmware . Test steps Download the signed with the incorrect key file from the cloud . Place the file on the USB storage . Plug the USB storage into DUT. Power on the DUT. While the DUT is booting, hold the BOOT_MENU_KEY to enter the boot menu. Select the UEFI Shell option using the arrow keys and press Enter . In the shell open the USB storage by executing the following command: FS0: One of the filesystems in the FS list will be the USB storage - typically FS0: Boot the previously prepared file by typing its full name: hello-bad-keys.efi Expected result The output of the command doesn't show file content and information about access denied is displayed. Example output: Command Error Status: Access Denied SBO006.001 Reset Secure Boot Keys option availability (firmware) Test description This test aims to verify, that the Reset Secure Boot Keys option is available after flashing the platform with the Dasharo firmware. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Device Manager menu using the arrow keys and Enter. Enter the Secure Boot Configuration submenu. Verify the Reset Secure Boot Keys field. Expected result The Reset Secure Boot Keys option should be listed after entering the Secure Boot Configuration submenu. SBO007.001 Attempt to boot the file after restoring keys to default (firmware) Test description This test verifies that the Reset Secure Boot Keys option works correctly. Test configuration data FIRMWARE = Dasharo Additional USB storage - at least 1GB - for keeping files for booting Test setup Proceed with the Generic test setup: firmware . Test steps Download the signed with the correct key file from the cloud . Download the certificate from the cloud . Place the certificate and the file on the USB storage . Plug the USB storage into DUT. Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Device Manager menu using the arrow keys and Enter. Enter the Secure Boot Configuration submenu. Set the Secure Boot Mode field to Custom Mode . Select options in the given order: Custom Secure Boot Options -> DB Options -> Enroll Signature -> Enroll Signature Using File Select the certificate from the USB storage . Select the Commit Changes and Exit option. Press ESC until the setup menu. Select the Reset option. While the DUT is booting, hold the BOOT_MENU_KEY to enter the boot menu. Select the UEFI Shell option using the arrow keys and press Enter . In the shell open the USB storage by executing the following command: FS0: One of the filesystems in the FS list will be the USB storage - typically FS0: Boot the previously prepared file by typing its full name: hello-valid-keys.efi Exit the shell by executing the following command: exit Press ESC until the setup menu. Enter the Device Manager menu using the arrow keys and Enter. Enter the Secure Boot Configuration submenu. Select the Reset Secure Boot Keys option using the arrow keys and Enter. If necessary - press Y to confirm saving the changes. Press ESC until the setup menu. Select the Reset option to apply the settings and reboot. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Device Manager menu using the arrow keys and Enter. Enter the Secure Boot Configuration submenu. Verify that the Current Secure Boot State field says Enabled . Press ESC until the setup menu. Select the One Time Boot menu using the arrow keys and Enter. Select the UEFI Shell option using the arrow keys and press Enter . In the shell open the USB storage by executing the following command: FS0: One of the filesystems in the FS list will be the USB storage - typically FS0: Boot the previously prepared file by typing its full name: hello-valid-keys.efi Expected result The first attempt to run the hello-valid-keys.efi script: File boots correctly (no information: Command Error Status: Access Denied on the output). The output of the command shows file content. Example output: Hello, world! The second attempt to run the hello-valid-keys.efi script: The output of the command doesn't show file content and information about access denied is displayed. Example output: Command Error Status: Access Denied After selecting the Reset Secure Boot Keys option, the Secure boot state should be automatically enabled. SBO008.001 Attempt to enroll the key in the incorrect format (firmware) Test description This test verifies that Secure Boot doesn't allow enrolling keys in the incorrect format. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Additional USB storage - at least 1GB - for keeping files for booting Test steps Place the file with the .txt extension on the USB storage . Plug the USB storage into DUT. Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Device Manager menu using the arrow keys and Enter. Enter the Secure Boot Configuration submenu. Set the Secure Boot Mode field to Custom Mode . Select options in the given order: Custom Secure Boot Options -> DB Options -> Enroll Signature -> Enroll Signature Using File Select the file with the .txt extension from the USB storage . Select the Commit Changes and Exit option. Expected result The popup with information about ERROR: Unsupported file type! should appear.","title":"Secure Boot"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#dasharo-security-uefi-secure-boot","text":"","title":"Dasharo Security: UEFI Secure Boot"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo001001-check-secure-boot-default-state-firmware","text":"Test description Secure Boot is a verification mechanism for ensuring that code launched by firmware is trusted. This test aims to verify that the Secure Boot state after flashing the platform with the Dasharo firmware is correct. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Device Manager menu using the arrow keys and Enter. Enter the Secure Boot Configuration submenu. Verify the Current Secure Boot State field. Expected result The Secure Boot State field should inform that the current state of Secure Boot is Disabled .","title":"SBO001.001 Check Secure Boot default state (firmware)"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo002001-uefi-secure-boot-ubuntu-2204","text":"Test description This test verifies that Secure Boot can be enabled from the boot menu and, after the DUT reset, it is seen from the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Secure Boot Configuration to enable the Attempt Secure Boot option in the Secure Boot Configuration menu. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Device Manager menu using the arrow keys and Enter. Enter the Secure Boot Configuration submenu. Verify that the Current Secure Boot State field says Enabled - if not, select the Attempt Secure Boot option below. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. The DUT will now attempt to boot OPERATING_SYSTEM with Secure Boot enabled. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo dmesg | grep secureboot Note the results. Expected result The output of the command should contain the line: secureboot: Secure boot enabled","title":"SBO002.001 UEFI Secure Boot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo002002-uefi-secure-boot-windows-11","text":"Test description This test verifies that Secure Boot can be enabled from the boot menu and, after the DUT reset, it is seen from the OS. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Windows 11 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Secure Boot Configuration to enable the Attempt Secure Boot option in the Secure Boot Configuration menu. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Device Manager menu using the arrow keys and Enter. Enter the Secure Boot Configuration submenu. Verify that the Current Secure Boot State field says Enabled - if not, select the Attempt Secure Boot option below. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. The DUT will now attempt to boot OPERATING_SYSTEM with Secure Boot enabled. Log into the system by using the proper login and password. Open Powershell as administrator and run the following command: Confirm-SecureBootUEFI Note the results. Expected result The output of the command should return the information, that Secure Boot is enabled: True","title":"SBO002.002 UEFI Secure Boot (Windows 11)"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo003001-attempt-to-boot-file-with-the-correct-key-from-shell-firmware","text":"Test description This test verifies that Secure Boot allows booting a signed file with a correct key. Test configuration data FIRMWARE = Dasharo Additional USB storage - at least 1GB - for keeping files for booting Test setup Proceed with the Generic test setup: firmware . Test steps Download the signed with the correct key file from the cloud . Download the certificate from the cloud . Place the certificate and the file on the USB storage . Plug the USB storage into DUT. Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Device Manager menu using the arrow keys and Enter. Enter the Secure Boot Configuration submenu. Set the Secure Boot Mode field to Custom Mode . Select options in the given order: Custom Secure Boot Options -> DB Options -> Enroll Signature -> Enroll Signature Using File Select the certificate from the USB storage . Select the Commit Changes and Exit option. Press ESC until the setup menu. Select the Reset option. While the DUT is booting, hold the BOOT_MENU_KEY to enter the boot menu. Select the UEFI Shell option using the arrow keys and press Enter . In the shell open the USB storage by executing the following command: FS0: One of the filesystems in the FS list will be the USB storage - typically FS0: Boot the previously prepared file by typing its full name: hello-valid-keys.efi Expected result File boots correctly (no information: Command Error Status: Access Denied on the output). The output of the command shows file content. Example output: Hello, world!","title":"SBO003.001 Attempt to boot file with the correct key from Shell (firmware)"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo004001-attempt-to-boot-file-without-the-key-from-shell-firmware","text":"Test description This test verifies that Secure Boot blocks booting a file without a key. Test configuration data FIRMWARE = Dasharo Additional USB storage - at least 1GB - for keeping files for booting Test setup Proceed with the Generic test setup: firmware . Test steps Download the not signed file from the cloud . Place the file on the USB storage . Plug the USB storage into DUT. Power on the DUT. While the DUT is booting, hold the BOOT_MENU_KEY to enter the boot menu. Select the UEFI Shell option using the arrow keys and press Enter . In the shell open the USB storage by executing the following command: FS0: One of the filesystems in the FS list will be the USB storage - typically FS0: Boot the previously prepared file by typing its full name: hello.efi Expected result The output of the command doesn't show file content and information about access denied is displayed. Example output: Command Error Status: Access Denied","title":"SBO004.001 Attempt to boot file without the key from Shell (firmware)"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo005001-attempt-to-boot-file-with-the-wrong-signed-key-from-shell-firmware","text":"Test description This test verifies that Secure Boot blocks booting a file with the wrong-signed key. Test configuration data FIRMWARE = Dasharo Additional USB storage - at least 1GB - for keeping files for booting Test setup Proceed with the Generic test setup: firmware . Test steps Download the signed with the incorrect key file from the cloud . Place the file on the USB storage . Plug the USB storage into DUT. Power on the DUT. While the DUT is booting, hold the BOOT_MENU_KEY to enter the boot menu. Select the UEFI Shell option using the arrow keys and press Enter . In the shell open the USB storage by executing the following command: FS0: One of the filesystems in the FS list will be the USB storage - typically FS0: Boot the previously prepared file by typing its full name: hello-bad-keys.efi Expected result The output of the command doesn't show file content and information about access denied is displayed. Example output: Command Error Status: Access Denied","title":"SBO005.001 Attempt to boot file with the wrong-signed key from Shell (firmware)"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo006001-reset-secure-boot-keys-option-availability-firmware","text":"Test description This test aims to verify, that the Reset Secure Boot Keys option is available after flashing the platform with the Dasharo firmware. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Device Manager menu using the arrow keys and Enter. Enter the Secure Boot Configuration submenu. Verify the Reset Secure Boot Keys field. Expected result The Reset Secure Boot Keys option should be listed after entering the Secure Boot Configuration submenu.","title":"SBO006.001 Reset Secure Boot Keys option availability (firmware)"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo007001-attempt-to-boot-the-file-after-restoring-keys-to-default-firmware","text":"Test description This test verifies that the Reset Secure Boot Keys option works correctly. Test configuration data FIRMWARE = Dasharo Additional USB storage - at least 1GB - for keeping files for booting Test setup Proceed with the Generic test setup: firmware . Test steps Download the signed with the correct key file from the cloud . Download the certificate from the cloud . Place the certificate and the file on the USB storage . Plug the USB storage into DUT. Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Device Manager menu using the arrow keys and Enter. Enter the Secure Boot Configuration submenu. Set the Secure Boot Mode field to Custom Mode . Select options in the given order: Custom Secure Boot Options -> DB Options -> Enroll Signature -> Enroll Signature Using File Select the certificate from the USB storage . Select the Commit Changes and Exit option. Press ESC until the setup menu. Select the Reset option. While the DUT is booting, hold the BOOT_MENU_KEY to enter the boot menu. Select the UEFI Shell option using the arrow keys and press Enter . In the shell open the USB storage by executing the following command: FS0: One of the filesystems in the FS list will be the USB storage - typically FS0: Boot the previously prepared file by typing its full name: hello-valid-keys.efi Exit the shell by executing the following command: exit Press ESC until the setup menu. Enter the Device Manager menu using the arrow keys and Enter. Enter the Secure Boot Configuration submenu. Select the Reset Secure Boot Keys option using the arrow keys and Enter. If necessary - press Y to confirm saving the changes. Press ESC until the setup menu. Select the Reset option to apply the settings and reboot. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Device Manager menu using the arrow keys and Enter. Enter the Secure Boot Configuration submenu. Verify that the Current Secure Boot State field says Enabled . Press ESC until the setup menu. Select the One Time Boot menu using the arrow keys and Enter. Select the UEFI Shell option using the arrow keys and press Enter . In the shell open the USB storage by executing the following command: FS0: One of the filesystems in the FS list will be the USB storage - typically FS0: Boot the previously prepared file by typing its full name: hello-valid-keys.efi Expected result The first attempt to run the hello-valid-keys.efi script: File boots correctly (no information: Command Error Status: Access Denied on the output). The output of the command shows file content. Example output: Hello, world! The second attempt to run the hello-valid-keys.efi script: The output of the command doesn't show file content and information about access denied is displayed. Example output: Command Error Status: Access Denied After selecting the Reset Secure Boot Keys option, the Secure boot state should be automatically enabled.","title":"SBO007.001 Attempt to boot the file after restoring keys to default (firmware)"},{"location":"unified-test-documentation/dasharo-security/206-secure-boot/#sbo008001-attempt-to-enroll-the-key-in-the-incorrect-format-firmware","text":"Test description This test verifies that Secure Boot doesn't allow enrolling keys in the incorrect format. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Additional USB storage - at least 1GB - for keeping files for booting Test steps Place the file with the .txt extension on the USB storage . Plug the USB storage into DUT. Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Device Manager menu using the arrow keys and Enter. Enter the Secure Boot Configuration submenu. Set the Secure Boot Mode field to Custom Mode . Select options in the given order: Custom Secure Boot Options -> DB Options -> Enroll Signature -> Enroll Signature Using File Select the file with the .txt extension from the USB storage . Select the Commit Changes and Exit option. Expected result The popup with information about ERROR: Unsupported file type! should appear.","title":"SBO008.001 Attempt to enroll the key in the incorrect format (firmware)"},{"location":"unified-test-documentation/dasharo-security/207-boot-guard-support/","text":"Dasharo Security: Boot Guard support BGS001.001 Boot Guard support (Ubuntu 22.04) Test description Intel Boot Guard is a hardware-based technology intended to protect the device against executing non-genuine firmware, which could happen when a possible attacker has bypassed protection against modification of BIOS. This test aims to verify that the implemented Boot Guard mechanism works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Download cbmem from the cloud to the DUT. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo ./cbmem -1 | grep CBnT Analyze the output from the command. Expected result The output of the command should indicate the state of the Boot Guard. Example output: CBnT: SACM INFO MSR ( 0x13A ) raw: 0x000000130000007d CBnT: NEM status: 1 CBnT: TPM type: TPM 2 .0 CBnT: TPM success: 1 CBnT: FACB: 1 CBnT: measured boot: 1 CBnT: verified boot: 1 CBnT: revoked: 0 CBnT: BtG capable: 1 CBnT: Server TXT capable: 0 CBnT: BOOTSTATUS ( 0xA0 ) raw: 0x1840000080000000 CBnT: TXT startup success: 0 CBnT: BtG startup success: 1 CBnT: Block boot enabled: 0 CBnT: PFR startup success: 0 CBnT: Memory power down executed: 0 CBnT: BtG thread sync failed: 0 CBnT: Bios trusted: 1 CBnT: TXT disabled by policy: 1 CBnT: Bootguard startup error: 0 CBnT: TXT ucode or ACM error: 0 CBnT: S-ACM success: 0 CBnT: ERRORCODE ( 0x30 ) raw: 0x00000000 CBnT: TXT disabled in Policy CBnT: BIOSACM_ERRORCODE ( 0x328 ) raw: 0xc000acf0 CBnT: BIOSACM_ERRORCODE: TXT ucode or ACM error CBnT: AC Module Type: BIOS ACM Error CBnT: class: 0xf CBnT: major: 0xb CBnT: External: 0x1 During the analyzing process, the main thing is to pay attention to the following: The field NEM status should have the value 1. If the Boot Guard profile is 4 or 5, the field FACB should have the value 1. If the Boot Guard profile is 3 or 5, the fields measured boot and verified boot should have the value 1. If TPM is physically mounted on the platform, the TPM type field should contain information about the type of the mounted TPM; also, in that situation, field TPM success should have the value 1.","title":"Boot Guard support"},{"location":"unified-test-documentation/dasharo-security/207-boot-guard-support/#dasharo-security-boot-guard-support","text":"","title":"Dasharo Security: Boot Guard support"},{"location":"unified-test-documentation/dasharo-security/207-boot-guard-support/#bgs001001-boot-guard-support-ubuntu-2204","text":"Test description Intel Boot Guard is a hardware-based technology intended to protect the device against executing non-genuine firmware, which could happen when a possible attacker has bypassed protection against modification of BIOS. This test aims to verify that the implemented Boot Guard mechanism works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Download cbmem from the cloud to the DUT. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo ./cbmem -1 | grep CBnT Analyze the output from the command. Expected result The output of the command should indicate the state of the Boot Guard. Example output: CBnT: SACM INFO MSR ( 0x13A ) raw: 0x000000130000007d CBnT: NEM status: 1 CBnT: TPM type: TPM 2 .0 CBnT: TPM success: 1 CBnT: FACB: 1 CBnT: measured boot: 1 CBnT: verified boot: 1 CBnT: revoked: 0 CBnT: BtG capable: 1 CBnT: Server TXT capable: 0 CBnT: BOOTSTATUS ( 0xA0 ) raw: 0x1840000080000000 CBnT: TXT startup success: 0 CBnT: BtG startup success: 1 CBnT: Block boot enabled: 0 CBnT: PFR startup success: 0 CBnT: Memory power down executed: 0 CBnT: BtG thread sync failed: 0 CBnT: Bios trusted: 1 CBnT: TXT disabled by policy: 1 CBnT: Bootguard startup error: 0 CBnT: TXT ucode or ACM error: 0 CBnT: S-ACM success: 0 CBnT: ERRORCODE ( 0x30 ) raw: 0x00000000 CBnT: TXT disabled in Policy CBnT: BIOSACM_ERRORCODE ( 0x328 ) raw: 0xc000acf0 CBnT: BIOSACM_ERRORCODE: TXT ucode or ACM error CBnT: AC Module Type: BIOS ACM Error CBnT: class: 0xf CBnT: major: 0xb CBnT: External: 0x1 During the analyzing process, the main thing is to pay attention to the following: The field NEM status should have the value 1. If the Boot Guard profile is 4 or 5, the field FACB should have the value 1. If the Boot Guard profile is 3 or 5, the fields measured boot and verified boot should have the value 1. If TPM is physically mounted on the platform, the TPM type field should contain information about the type of the mounted TPM; also, in that situation, field TPM success should have the value 1.","title":"BGS001.001 Boot Guard support (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-security/208-opal-disk-password-support/","text":"Dasharo Security: TCG OPAL disk password support DMP001.001 TCG OPAL disk password set and check Test description This suite tests disk password that can be set on the disk. After setting it up it is required to type in the password at every boot. The test password used is 123 and after setting it up it is removed. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Enter Setup Menu Tianocore Open Device manager Open TCG Drive Management Select the disk Check Enable Feature option Save and restart Type in the new password Confirm the password Enter Setup Menu Tianocore Restart to test if password is set Type in the password - it should be successful Removing the password Enter Setup Menu Tianocore Open Device manager Open TCG Drive Management Select the disk Check Admin Revert to factory default and Disable Save and restart Type in the password to unlock Type in the password to remove it Enter Setup Menu Tianocore Reset Confirm the password prompt do not appear Expected result Password prompt should show up: after setting up the password option after reboot only once as password removal confirmation","title":"TCG OPAL disk password support"},{"location":"unified-test-documentation/dasharo-security/208-opal-disk-password-support/#dasharo-security-tcg-opal-disk-password-support","text":"","title":"Dasharo Security: TCG OPAL disk password support"},{"location":"unified-test-documentation/dasharo-security/208-opal-disk-password-support/#dmp001001-tcg-opal-disk-password-set-and-check","text":"Test description This suite tests disk password that can be set on the disk. After setting it up it is required to type in the password at every boot. The test password used is 123 and after setting it up it is removed. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Generic test setup: firmware . Test steps Power on the DUT. Enter Setup Menu Tianocore Open Device manager Open TCG Drive Management Select the disk Check Enable Feature option Save and restart Type in the new password Confirm the password Enter Setup Menu Tianocore Restart to test if password is set Type in the password - it should be successful Removing the password Enter Setup Menu Tianocore Open Device manager Open TCG Drive Management Select the disk Check Admin Revert to factory default and Disable Save and restart Type in the password to unlock Type in the password to remove it Enter Setup Menu Tianocore Reset Confirm the password prompt do not appear Expected result Password prompt should show up: after setting up the password option after reboot only once as password removal confirmation","title":"DMP001.001 TCG OPAL disk password set and check"},{"location":"unified-test-documentation/dasharo-security/20F-me-neuter/","text":"Dasharo Security: ME neuter/disable Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . MNE001.001 Check Intel ME version (Ubuntu 22.04) Test description This test aims to verify that the Intel ME version might be read on the Operating System level. The read version should be the same as in the release notes. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: cat /sys/class/mei/mei0/fw_ver Note the results. Expected result The output of the command should contain information about the Management Engine Interface firmware version. Example output: 0 :16.0.15.1735 0 :16.0.15.1735 0 :16.0.15.1723 Value from the first line, considering the numbers after the colon, should correspond to the value from the release notes MNE002.001 Intel ME mode option is available and has the correct default state Test description This test aims to verify that the Intel ME mode state after flashing the platform with the Dasharo firmware is correct. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Intel Management Engine Options submenu. Verify the Intel ME mode field. Expected result The Intel ME mode field should inform that the current state is Enabled . MNE003.001 Intel ME mode option Enabled works correctly (Ubuntu 22.04) Test description This test aims to verify that Intel ME mode option in state Enabled works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Intel Management Engine Options submenu. Verify that the Intel ME mode option is state Enabled - if not, using the arrow keys and Enter , choose option Enabled . Press F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep 00 :16.0 Note the results. Expected result The output of the command should contain the information about Management Engine Interface. Example output: Intel Corporation Comet Lake Management Engine Interface MNE004.001 Intel ME mode option Disable (Soft) works correctly (Ubuntu 22.04) Test description This test aims to verify that Intel ME mode option in state Disable (Soft) works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Intel Management Engine Options submenu. Verify that the Intel ME mode option is state Disable (Soft) - if not, using the arrow keys and Enter , choose option Disable (Soft) . Press F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep 00 :16.0 Note the results. Expected result The output of the command shouldn't contain the information about Management Engine Interface. Example of unwanted output: Intel Corporation Comet Lake Management Engine Interface MNE005.001 Intel ME mode option Disable (HAP) works correctly (Ubuntu 22.04) Test description This test aims to verify that Intel ME mode option in state Disable (HAP) works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Intel Management Engine Options submenu. Verify that the Intel ME mode option is state Disable (HAP) - if not, using the arrow keys and Enter , choose option Disable (HAP) . Press F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep 00 :16.0 Note the results. Expected result The output of the command shouldn't contain the information about Management Engine Interface. Example of unwanted output: Intel Corporation Comet Lake Management Engine Interface MNE006.001 PCI Express 5.0 port is functional when ME disabled (Ubuntu 22.04) Test description This test aims to verify that Intel ME mode option in state Disable (HAP) or Disable (Soft) does not break the PCIe 5.0 port functionality and the caching of PCIe 5.0 firmware by Dasharo works. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 DUT (Alder Lake or newer) with PCIe 5.0 port and a PCIe device plugged to the port. Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Intel Management Engine Options submenu. Verify that the Intel ME mode option is in state Disable (HAP) or Disable (Soft) - if not, using the arrow keys and Enter , choose option Disable (HAP) or Disable (Soft) . Press F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo cbmem -1 > cbmem.log lspci lspci -t Note the results. Repeat all steps to cover both disable methods. Expected result The output of the command should contain the information about PCI Express 5.0 interface located at PCI 00:01.0. Also the device plugged to the PCI port 00:01.0 should be visible and functional. Example of desired output: lspci -t - [ 0000 :00 ] -+-00.0 +-01.0- [ 01 ] --+-00.0 | \\- 00 .1 +-02.0 +-06.0- [ 02 ] ----00.0 +-14.0 +-14.2 +-17.0 +-1a.0- [ 03 ] ----00.0 +-1c.0- [ 04 ] -- +-1c.2- [ 05 ] ----00.0 +-1c.4- [ 06 -08 ] ----00.0- [ 07 -08 ] ----00.0- [ 08 ] --+-00.0 | \\- 00 .1 +-1d.0- [ 09 ] ----00.0 +-1f.0 +-1f.3 +-1f.4 \\- 1f.5 lspci 00 :00.0 Host bridge: Intel Corporation Device 4648 ( rev 02 ) 00 :01.0 PCI bridge: Intel Corporation 12th Gen Core Processor PCI Express x16 Controller #1 (rev 02) 00 :02.0 Display controller: Intel Corporation AlderLake-S GT1 ( rev 0c ) 00 :06.0 PCI bridge: Intel Corporation 12th Gen Core Processor PCI Express x4 Controller #0 (rev 02) 00 :14.0 USB controller: Intel Corporation Device 7ae0 ( rev 11 ) 00 :14.2 RAM memory: Intel Corporation Device 7aa7 ( rev 11 ) 00 :17.0 SATA controller: Intel Corporation Device 7ae2 ( rev 11 ) 00 :1a.0 PCI bridge: Intel Corporation Device 7ac8 ( rev 11 ) 00 :1c.0 PCI bridge: Intel Corporation Device 7ab8 ( rev 11 ) 00 :1c.2 PCI bridge: Intel Corporation Device 7aba ( rev 11 ) 00 :1c.4 PCI bridge: Intel Corporation Device 7abc ( rev 11 ) 00 :1d.0 PCI bridge: Intel Corporation Device 7ab0 ( rev 11 ) 00 :1f.0 ISA bridge: Intel Corporation Device 7a84 ( rev 11 ) 00 :1f.3 Audio device: Intel Corporation Device 7ad0 ( rev 11 ) 00 :1f.4 SMBus: Intel Corporation Device 7aa3 ( rev 11 ) 00 :1f.5 Serial bus controller: Intel Corporation Device 7aa4 ( rev 11 ) 01 :00.0 VGA compatible controller: NVIDIA Corporation GA106 [ GeForce RTX 3060 Lite Hash Rate ] ( rev a1 ) 01 :00.1 Audio device: NVIDIA Corporation Device 228e ( rev a1 ) 02 :00.0 Non-Volatile memory controller: Intel Corporation Device f1aa ( rev 03 ) 03 :00.0 Non-Volatile memory controller: Samsung Electronics Co Ltd NVMe SSD Controller PM9A1/PM9A3/980PRO 05 :00.0 Ethernet controller: Intel Corporation Ethernet Controller I225-V ( rev 03 ) 06 :00.0 PCI bridge: Advanced Micro Devices, Inc. [ AMD/ATI ] Navi 10 XL Upstream Port of PCI Express Switch ( rev c1 ) 07 :00.0 PCI bridge: Advanced Micro Devices, Inc. [ AMD/ATI ] Navi 10 XL Downstream Port of PCI Express Switch 08 :00.0 VGA compatible controller: Advanced Micro Devices, Inc. [ AMD/ATI ] Device 743f ( rev c1 ) 08 :00.1 Audio device: Advanced Micro Devices, Inc. [ AMD/ATI ] Navi 21 HDMI Audio [ Radeon RX 6800 /6800 XT / 6900 XT ] 09 :00.0 Non-Volatile memory controller: Samsung Electronics Co Ltd NVMe SSD Controller PM9A1/PM9A3/980PRO The device that must be visible and working: 00:01.0 PCI bridge: Intel Corporation 12th Gen Core Processor PCI Express x16 Controller #1 (rev 02) The device behind the port must also be visible, in this example it is: 01:00.0 VGA compatible controller: NVIDIA Corporation GA106 [GeForce RTX 3060 Lite Hash Rate] (rev a1) 01:00.1 Audio device: NVIDIA Corporation Device 228e (rev a1) To verify the PCIe 5.0 firmware caching is working, check the cbmem.log for the following string: [INFO ] Loading HSPHY firmware from cache If there are no errors printed nearby concerning the HSPHY, test pass.","title":"ME neuter/disable"},{"location":"unified-test-documentation/dasharo-security/20F-me-neuter/#dasharo-security-me-neuterdisable","text":"","title":"Dasharo Security: ME neuter/disable"},{"location":"unified-test-documentation/dasharo-security/20F-me-neuter/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-security/20F-me-neuter/#mne001001-check-intel-me-version-ubuntu-2204","text":"Test description This test aims to verify that the Intel ME version might be read on the Operating System level. The read version should be the same as in the release notes. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: cat /sys/class/mei/mei0/fw_ver Note the results. Expected result The output of the command should contain information about the Management Engine Interface firmware version. Example output: 0 :16.0.15.1735 0 :16.0.15.1735 0 :16.0.15.1723 Value from the first line, considering the numbers after the colon, should correspond to the value from the release notes","title":"MNE001.001 Check Intel ME version (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-security/20F-me-neuter/#mne002001-intel-me-mode-option-is-available-and-has-the-correct-default-state","text":"Test description This test aims to verify that the Intel ME mode state after flashing the platform with the Dasharo firmware is correct. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Intel Management Engine Options submenu. Verify the Intel ME mode field. Expected result The Intel ME mode field should inform that the current state is Enabled .","title":"MNE002.001 Intel ME mode option is available and has the correct default state"},{"location":"unified-test-documentation/dasharo-security/20F-me-neuter/#mne003001-intel-me-mode-option-enabled-works-correctly-ubuntu-2204","text":"Test description This test aims to verify that Intel ME mode option in state Enabled works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Intel Management Engine Options submenu. Verify that the Intel ME mode option is state Enabled - if not, using the arrow keys and Enter , choose option Enabled . Press F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep 00 :16.0 Note the results. Expected result The output of the command should contain the information about Management Engine Interface. Example output: Intel Corporation Comet Lake Management Engine Interface","title":"MNE003.001 Intel ME mode option Enabled works correctly (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-security/20F-me-neuter/#mne004001-intel-me-mode-option-disable-soft-works-correctly-ubuntu-2204","text":"Test description This test aims to verify that Intel ME mode option in state Disable (Soft) works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Intel Management Engine Options submenu. Verify that the Intel ME mode option is state Disable (Soft) - if not, using the arrow keys and Enter , choose option Disable (Soft) . Press F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep 00 :16.0 Note the results. Expected result The output of the command shouldn't contain the information about Management Engine Interface. Example of unwanted output: Intel Corporation Comet Lake Management Engine Interface","title":"MNE004.001 Intel ME mode option Disable (Soft) works correctly (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-security/20F-me-neuter/#mne005001-intel-me-mode-option-disable-hap-works-correctly-ubuntu-2204","text":"Test description This test aims to verify that Intel ME mode option in state Disable (HAP) works correctly. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Intel Management Engine Options submenu. Verify that the Intel ME mode option is state Disable (HAP) - if not, using the arrow keys and Enter , choose option Disable (HAP) . Press F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep 00 :16.0 Note the results. Expected result The output of the command shouldn't contain the information about Management Engine Interface. Example of unwanted output: Intel Corporation Comet Lake Management Engine Interface","title":"MNE005.001 Intel ME mode option Disable (HAP) works correctly (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-security/20F-me-neuter/#mne006001-pci-express-50-port-is-functional-when-me-disabled-ubuntu-2204","text":"Test description This test aims to verify that Intel ME mode option in state Disable (HAP) or Disable (Soft) does not break the PCIe 5.0 port functionality and the caching of PCIe 5.0 firmware by Dasharo works. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 DUT (Alder Lake or newer) with PCIe 5.0 port and a PCIe device plugged to the port. Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Intel Management Engine Options submenu. Verify that the Intel ME mode option is in state Disable (HAP) or Disable (Soft) - if not, using the arrow keys and Enter , choose option Disable (HAP) or Disable (Soft) . Press F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: sudo cbmem -1 > cbmem.log lspci lspci -t Note the results. Repeat all steps to cover both disable methods. Expected result The output of the command should contain the information about PCI Express 5.0 interface located at PCI 00:01.0. Also the device plugged to the PCI port 00:01.0 should be visible and functional. Example of desired output: lspci -t - [ 0000 :00 ] -+-00.0 +-01.0- [ 01 ] --+-00.0 | \\- 00 .1 +-02.0 +-06.0- [ 02 ] ----00.0 +-14.0 +-14.2 +-17.0 +-1a.0- [ 03 ] ----00.0 +-1c.0- [ 04 ] -- +-1c.2- [ 05 ] ----00.0 +-1c.4- [ 06 -08 ] ----00.0- [ 07 -08 ] ----00.0- [ 08 ] --+-00.0 | \\- 00 .1 +-1d.0- [ 09 ] ----00.0 +-1f.0 +-1f.3 +-1f.4 \\- 1f.5 lspci 00 :00.0 Host bridge: Intel Corporation Device 4648 ( rev 02 ) 00 :01.0 PCI bridge: Intel Corporation 12th Gen Core Processor PCI Express x16 Controller #1 (rev 02) 00 :02.0 Display controller: Intel Corporation AlderLake-S GT1 ( rev 0c ) 00 :06.0 PCI bridge: Intel Corporation 12th Gen Core Processor PCI Express x4 Controller #0 (rev 02) 00 :14.0 USB controller: Intel Corporation Device 7ae0 ( rev 11 ) 00 :14.2 RAM memory: Intel Corporation Device 7aa7 ( rev 11 ) 00 :17.0 SATA controller: Intel Corporation Device 7ae2 ( rev 11 ) 00 :1a.0 PCI bridge: Intel Corporation Device 7ac8 ( rev 11 ) 00 :1c.0 PCI bridge: Intel Corporation Device 7ab8 ( rev 11 ) 00 :1c.2 PCI bridge: Intel Corporation Device 7aba ( rev 11 ) 00 :1c.4 PCI bridge: Intel Corporation Device 7abc ( rev 11 ) 00 :1d.0 PCI bridge: Intel Corporation Device 7ab0 ( rev 11 ) 00 :1f.0 ISA bridge: Intel Corporation Device 7a84 ( rev 11 ) 00 :1f.3 Audio device: Intel Corporation Device 7ad0 ( rev 11 ) 00 :1f.4 SMBus: Intel Corporation Device 7aa3 ( rev 11 ) 00 :1f.5 Serial bus controller: Intel Corporation Device 7aa4 ( rev 11 ) 01 :00.0 VGA compatible controller: NVIDIA Corporation GA106 [ GeForce RTX 3060 Lite Hash Rate ] ( rev a1 ) 01 :00.1 Audio device: NVIDIA Corporation Device 228e ( rev a1 ) 02 :00.0 Non-Volatile memory controller: Intel Corporation Device f1aa ( rev 03 ) 03 :00.0 Non-Volatile memory controller: Samsung Electronics Co Ltd NVMe SSD Controller PM9A1/PM9A3/980PRO 05 :00.0 Ethernet controller: Intel Corporation Ethernet Controller I225-V ( rev 03 ) 06 :00.0 PCI bridge: Advanced Micro Devices, Inc. [ AMD/ATI ] Navi 10 XL Upstream Port of PCI Express Switch ( rev c1 ) 07 :00.0 PCI bridge: Advanced Micro Devices, Inc. [ AMD/ATI ] Navi 10 XL Downstream Port of PCI Express Switch 08 :00.0 VGA compatible controller: Advanced Micro Devices, Inc. [ AMD/ATI ] Device 743f ( rev c1 ) 08 :00.1 Audio device: Advanced Micro Devices, Inc. [ AMD/ATI ] Navi 21 HDMI Audio [ Radeon RX 6800 /6800 XT / 6900 XT ] 09 :00.0 Non-Volatile memory controller: Samsung Electronics Co Ltd NVMe SSD Controller PM9A1/PM9A3/980PRO The device that must be visible and working: 00:01.0 PCI bridge: Intel Corporation 12th Gen Core Processor PCI Express x16 Controller #1 (rev 02) The device behind the port must also be visible, in this example it is: 01:00.0 VGA compatible controller: NVIDIA Corporation GA106 [GeForce RTX 3060 Lite Hash Rate] (rev a1) 01:00.1 Audio device: NVIDIA Corporation Device 228e (rev a1) To verify the PCIe 5.0 firmware caching is working, check the cbmem.log for the following string: [INFO ] Loading HSPHY firmware from cache If there are no errors printed nearby concerning the HSPHY, test pass.","title":"MNE006.001 PCI Express 5.0 port is functional when ME disabled (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-security/20J-bios-lock-support/","text":"Dasharo Security: BIOS lock support BLS001.001 BIOS lock support (Ubuntu 22.04) Test description BIOS lock is a method to prevent a specific region of the firmware from being flashed. This test aims to verify that, after turning on the mechanism, the BIOS region should be correctly recognized during attempt to overwrite it by using flashrom tool. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Disable Secure Boot. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify that the Lock the BIOS boot medium option is chosen - if not, press Space and then F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Execute the following command in the terminal to check platform flashing conditions: flashrom -p internal Note the result. Expected result The output of the flashing command should contain the information, that the BIOS region is read-only. Example output: SPI Configuration is locked down. PR0: Warning: 0x00c00000-0x00ffffff is read-only. At least some flash regions are write protected. For write operations, you should use a flash layout and include only writable regions. See manpage for more details. BLS002.001 BIOS lock support deactivation (Ubuntu 22.04) Test description BIOS lock is a method to prevent a specific region of the firmware from being flashed. This test aims to verify that, after turning off the mechanism, the BIOS region overwriting operation is available again. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Disable Secure Boot. Obtain any other binary (e.g. vendor firmware or older Dasharo firmware). Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify that the Lock the BIOS boot medium option is not chosen - if so, press Space and then F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Execute the following command in the terminal to check platform flashing conditions: flashrom -p internal Note the result. Expected result The output of the flashing command should not contain the information, that the BIOS region is read-only. Example output with unwanted results: SPI Configuration is locked down. PR0: Warning: 0x00c00000-0x00ffffff is read-only. At least some flash regions are write protected. For write operations, you should use a flash layout and include only writable regions. See manpage for more details.","title":"BIOS lock support"},{"location":"unified-test-documentation/dasharo-security/20J-bios-lock-support/#dasharo-security-bios-lock-support","text":"","title":"Dasharo Security: BIOS lock support"},{"location":"unified-test-documentation/dasharo-security/20J-bios-lock-support/#bls001001-bios-lock-support-ubuntu-2204","text":"Test description BIOS lock is a method to prevent a specific region of the firmware from being flashed. This test aims to verify that, after turning on the mechanism, the BIOS region should be correctly recognized during attempt to overwrite it by using flashrom tool. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Disable Secure Boot. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify that the Lock the BIOS boot medium option is chosen - if not, press Space and then F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Execute the following command in the terminal to check platform flashing conditions: flashrom -p internal Note the result. Expected result The output of the flashing command should contain the information, that the BIOS region is read-only. Example output: SPI Configuration is locked down. PR0: Warning: 0x00c00000-0x00ffffff is read-only. At least some flash regions are write protected. For write operations, you should use a flash layout and include only writable regions. See manpage for more details.","title":"BLS001.001 BIOS lock support (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-security/20J-bios-lock-support/#bls002001-bios-lock-support-deactivation-ubuntu-2204","text":"Test description BIOS lock is a method to prevent a specific region of the firmware from being flashed. This test aims to verify that, after turning off the mechanism, the BIOS region overwriting operation is available again. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Disable Secure Boot. Obtain any other binary (e.g. vendor firmware or older Dasharo firmware). Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify that the Lock the BIOS boot medium option is not chosen - if so, press Space and then F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Execute the following command in the terminal to check platform flashing conditions: flashrom -p internal Note the result. Expected result The output of the flashing command should not contain the information, that the BIOS region is read-only. Example output with unwanted results: SPI Configuration is locked down. PR0: Warning: 0x00c00000-0x00ffffff is read-only. At least some flash regions are write protected. For write operations, you should use a flash layout and include only writable regions. See manpage for more details.","title":"BLS002.001 BIOS lock support deactivation (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-security/20L-early-boot-dma-protection/","text":"Dasharo Security: Early Boot DMA Protection Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Disable Secure Boot. Download cbmem from https://cloud.3mdeb.com/index.php/s/zTqkJQdNtJDo5Nd to the DUT. EDP001.001 Enable early Boot DMA Protection support Test description This test aims to verify that the early boot DMA protection might be activated. If the functionality is enabled, the protection against malicious PCIe devices DMA transactions by configuring VT-D/IOMMU should be active. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify that the Enable early DMA protection field is checked - if not, use Spacebar to change option settings. Save the changes using F10 , and exit from the menu using Esc . Reboot the device. While booting, press BOOT_MENU_KEY to enter Boot Menu. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo ./cbmem -1 Note the result. Expected result The output of the cbmem utility should contain the information, that the DMA protection has been set up. Example output: [DEBUG] VT-d @ 0xfed91000, version 5.0 [INFO ] Setting DMA protection [0x0 - 0x46c00000] [INFO ] Setting DMA protection [0x100000000 - 0x00000008afc00000] [INFO ] Successfully enabled VT-d PMR DMA protection Note the memory address ranges in square braces may differ per DUT. If the DUT does not support serial redirection, it is also possible to investigate UEFI Payload logs if VT-d is being used properly. Check for following output: EnableDmar >>>>>>EnableDmar() for engine [0] BAR [0xFED90000] RootEntryTable 0x4518C000 EnableDmar: waiting for RTPS bit to be set... Set GCMD_REG bits 0x40000000. EnableDmar: Waiting B_GSTS_REG_TE ... Set GCMD_REG bits 0x80000000. VTD (0) enabled!<<<<<< >>>>>>EnableDmar() for engine [1] BAR [0xFED91000] RootEntryTable 0x44FDD000 EnableDmar: waiting for RTPS bit to be set... Set GCMD_REG bits 0x40000000. EnableDmar: Waiting B_GSTS_REG_TE ... Set GCMD_REG bits 0x80000000. VTD (1) enabled!<<<<<< DisablePmr Pmr(0) not enabled Pmr(1) disabled The most important are VTD (0) enabled!<<<<<< and VTD (1) enabled!<<<<<< . Also the following: DisablePmr Pmr(0) not enabled Pmr(1) disabled Indicate that VT-D engine 1 had PMR enabled earlier, which is expected. If all above conditions are met, test pass. EDP002.001 Disable early Boot DMA Protection support Test description This test aims to verify that the early boot DMA protection might be deactivated. If the functionality is disabled, the protection against malicious PCIe devices DMA transactions by configuring VT-D/IOMMU should be non-active. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify that the Enable early DMA protection option is checked - if so, use Spacebar to change option settings. Save the changes using F10 , and exit from the menu using Esc . Reboot the device. While booting, press BOOT_MENU_KEY to enter Boot Menu. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo ./cbmem -1 Note the result. Expected result The output of the cbmem utility should not contain the information, that the DMA protection has been set up. Example output with unwanted results: [DEBUG] VT-d @ 0xfed91000, version 5.0 [INFO ] Setting DMA protection [0x0 - 0x46c00000] [INFO ] Setting DMA protection [0x100000000 - 0x00000008afc00000] [INFO ] Successfully enabled VT-d PMR DMA protection","title":"Early boot DMA protection"},{"location":"unified-test-documentation/dasharo-security/20L-early-boot-dma-protection/#dasharo-security-early-boot-dma-protection","text":"","title":"Dasharo Security: Early Boot DMA Protection"},{"location":"unified-test-documentation/dasharo-security/20L-early-boot-dma-protection/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Disable Secure Boot. Download cbmem from https://cloud.3mdeb.com/index.php/s/zTqkJQdNtJDo5Nd to the DUT.","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-security/20L-early-boot-dma-protection/#edp001001-enable-early-boot-dma-protection-support","text":"Test description This test aims to verify that the early boot DMA protection might be activated. If the functionality is enabled, the protection against malicious PCIe devices DMA transactions by configuring VT-D/IOMMU should be active. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify that the Enable early DMA protection field is checked - if not, use Spacebar to change option settings. Save the changes using F10 , and exit from the menu using Esc . Reboot the device. While booting, press BOOT_MENU_KEY to enter Boot Menu. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo ./cbmem -1 Note the result. Expected result The output of the cbmem utility should contain the information, that the DMA protection has been set up. Example output: [DEBUG] VT-d @ 0xfed91000, version 5.0 [INFO ] Setting DMA protection [0x0 - 0x46c00000] [INFO ] Setting DMA protection [0x100000000 - 0x00000008afc00000] [INFO ] Successfully enabled VT-d PMR DMA protection Note the memory address ranges in square braces may differ per DUT. If the DUT does not support serial redirection, it is also possible to investigate UEFI Payload logs if VT-d is being used properly. Check for following output: EnableDmar >>>>>>EnableDmar() for engine [0] BAR [0xFED90000] RootEntryTable 0x4518C000 EnableDmar: waiting for RTPS bit to be set... Set GCMD_REG bits 0x40000000. EnableDmar: Waiting B_GSTS_REG_TE ... Set GCMD_REG bits 0x80000000. VTD (0) enabled!<<<<<< >>>>>>EnableDmar() for engine [1] BAR [0xFED91000] RootEntryTable 0x44FDD000 EnableDmar: waiting for RTPS bit to be set... Set GCMD_REG bits 0x40000000. EnableDmar: Waiting B_GSTS_REG_TE ... Set GCMD_REG bits 0x80000000. VTD (1) enabled!<<<<<< DisablePmr Pmr(0) not enabled Pmr(1) disabled The most important are VTD (0) enabled!<<<<<< and VTD (1) enabled!<<<<<< . Also the following: DisablePmr Pmr(0) not enabled Pmr(1) disabled Indicate that VT-D engine 1 had PMR enabled earlier, which is expected. If all above conditions are met, test pass.","title":"EDP001.001 Enable early Boot DMA Protection support"},{"location":"unified-test-documentation/dasharo-security/20L-early-boot-dma-protection/#edp002001-disable-early-boot-dma-protection-support","text":"Test description This test aims to verify that the early boot DMA protection might be deactivated. If the functionality is disabled, the protection against malicious PCIe devices DMA transactions by configuring VT-D/IOMMU should be non-active. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify that the Enable early DMA protection option is checked - if so, use Spacebar to change option settings. Save the changes using F10 , and exit from the menu using Esc . Reboot the device. While booting, press BOOT_MENU_KEY to enter Boot Menu. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the following command: sudo ./cbmem -1 Note the result. Expected result The output of the cbmem utility should not contain the information, that the DMA protection has been set up. Example output with unwanted results: [DEBUG] VT-d @ 0xfed91000, version 5.0 [INFO ] Setting DMA protection [0x0 - 0x46c00000] [INFO ] Setting DMA protection [0x100000000 - 0x00000008afc00000] [INFO ] Successfully enabled VT-d PMR DMA protection","title":"EDP002.001 Disable early Boot DMA Protection support"},{"location":"unified-test-documentation/dasharo-security/20O-SMM-bios-write-protection/","text":"Dasharo Security: SMM BIOS write protection Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Disable Secure Boot. SMM001.001 SMM BIOS write protection enabling (Ubuntu 22.04) Test description SMM BIOS write protection is the method to prevent a specific region of the firmware from being flashed - when enabled allows only SMM code (the privileged code installed by the firmware in the system memory) to write to BIOS flash. This test aims to verify that, the SMM BIOS protection option is available in the Dasharo Security Options and, if the mechanism works correctly - during the attempt of firmware flashing information about the SMM protection is returned. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify that the Enable SMM BIOS write protection option is chosen - if not, press Space and then F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Execute the following command in the terminal to check platform flashing conditions: flashrom -p internal Note the result. Expected result The output of the flashing command should contain the information, that the BIOS region SMM protection is enabled. Example output: Enabling flash write... Warning: BIOS region SMM protection is enabled! SMM002.001 SMM BIOS write protection disabling (Ubuntu 22.04) Test description SMM BIOS write protection is the method to prevent a specific region of the firmware from being flashed - when enabled allows only SMM code (the privileged code installed by the firmware in the system memory) to write to BIOS flash. This test aims to verify that, after disabling the mechanism, information about SMM protection is not returned any more. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify that the Enable SMM BIOS write protection option is not chosen - if so, press Space and then F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Execute the following command in the terminal to check platform flashing conditions: flashrom -p internal Note the result. Expected result The output of the flashing command should not contain the information, that the BIOS region SMM protection is enabled. Example output with unwanted results: Enabling flash write... Warning: BIOS region SMM protection is enabled!","title":"SMM BIOS write protection"},{"location":"unified-test-documentation/dasharo-security/20O-SMM-bios-write-protection/#dasharo-security-smm-bios-write-protection","text":"","title":"Dasharo Security: SMM BIOS write protection"},{"location":"unified-test-documentation/dasharo-security/20O-SMM-bios-write-protection/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Disable Secure Boot.","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-security/20O-SMM-bios-write-protection/#smm001001-smm-bios-write-protection-enabling-ubuntu-2204","text":"Test description SMM BIOS write protection is the method to prevent a specific region of the firmware from being flashed - when enabled allows only SMM code (the privileged code installed by the firmware in the system memory) to write to BIOS flash. This test aims to verify that, the SMM BIOS protection option is available in the Dasharo Security Options and, if the mechanism works correctly - during the attempt of firmware flashing information about the SMM protection is returned. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify that the Enable SMM BIOS write protection option is chosen - if not, press Space and then F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Execute the following command in the terminal to check platform flashing conditions: flashrom -p internal Note the result. Expected result The output of the flashing command should contain the information, that the BIOS region SMM protection is enabled. Example output: Enabling flash write... Warning: BIOS region SMM protection is enabled!","title":"SMM001.001 SMM BIOS write protection enabling (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-security/20O-SMM-bios-write-protection/#smm002001-smm-bios-write-protection-disabling-ubuntu-2204","text":"Test description SMM BIOS write protection is the method to prevent a specific region of the firmware from being flashed - when enabled allows only SMM code (the privileged code installed by the firmware in the system memory) to write to BIOS flash. This test aims to verify that, after disabling the mechanism, information about SMM protection is not returned any more. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify that the Enable SMM BIOS write protection option is not chosen - if so, press Space and then F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. Boot into the system. Log into the system by using the proper login and password. Execute the following command in the terminal to check platform flashing conditions: flashrom -p internal Note the result. Expected result The output of the flashing command should not contain the information, that the BIOS region SMM protection is enabled. Example output with unwanted results: Enabling flash write... Warning: BIOS region SMM protection is enabled!","title":"SMM002.001 SMM BIOS write protection disabling (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-security/20P-boot-menu/","text":"Dasharo Security: Boot menu enable/disable Test cases common documentation Test setup Proceed with the Generic test setup: firmware . BMA001.001 Boot menu enabling Test description This test aims to verify that, the boot menu is accessible when the Boot menu enabled option in the Dasharo Security Options submenu is chosen. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify that the Boot menu enabled option is chosen - if not, press Space and then F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. While the DUT is booting, hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Expected result While the DUT is booting, the prompt BOOT_MENU_KEY to enter Boot Manager Menu should be displayed. Example output: F11 to enter Boot Manager Menu After using the BOOT MENU KEY during boot, the boot menu should be displayed. BMA002.001 Boot menu disabling Test description This test aims to verify that, the boot menu is not accessible when the Boot menu enabled option in the Dasharo Security Options submenu is not chosen. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify that the Boot menu enabled option is not chosen - if so, press Space and then F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Boot Menu. Expected result While the DUT is booting, the prompt BOOT_MENU_KEY to enter Boot Manager Menu should not be displayed. Example of unwanted output: F11 to enter Boot Manager Menu Despite using the BIOS_SETUP_KEY boot menu should not be displayed.","title":"Boot menu enable/disable"},{"location":"unified-test-documentation/dasharo-security/20P-boot-menu/#dasharo-security-boot-menu-enabledisable","text":"","title":"Dasharo Security: Boot menu enable/disable"},{"location":"unified-test-documentation/dasharo-security/20P-boot-menu/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-security/20P-boot-menu/#bma001001-boot-menu-enabling","text":"Test description This test aims to verify that, the boot menu is accessible when the Boot menu enabled option in the Dasharo Security Options submenu is chosen. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify that the Boot menu enabled option is chosen - if not, press Space and then F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. While the DUT is booting, hold the BOOT_MENU_KEY to enter the UEFI Boot Menu. Expected result While the DUT is booting, the prompt BOOT_MENU_KEY to enter Boot Manager Menu should be displayed. Example output: F11 to enter Boot Manager Menu After using the BOOT MENU KEY during boot, the boot menu should be displayed.","title":"BMA001.001 Boot menu enabling"},{"location":"unified-test-documentation/dasharo-security/20P-boot-menu/#bma002001-boot-menu-disabling","text":"Test description This test aims to verify that, the boot menu is not accessible when the Boot menu enabled option in the Dasharo Security Options submenu is not chosen. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify that the Boot menu enabled option is not chosen - if so, press Space and then F10 to save the changes. If necessary - press Y to confirm saving the changes. Go back to the main menu using the ESC key. Select the Reset option to apply the settings and reboot. While the DUT is booting, hold the BIOS_SETUP_KEY to enter the UEFI Boot Menu. Expected result While the DUT is booting, the prompt BOOT_MENU_KEY to enter Boot Manager Menu should not be displayed. Example of unwanted output: F11 to enter Boot Manager Menu Despite using the BIOS_SETUP_KEY boot menu should not be displayed.","title":"BMA002.001 Boot menu disabling"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/","text":"Dasharo Security: UEFI Setup password Test cases common documentation Test setup Proceed with the Generic test setup: firmware . PSW001.001 Check Password Setup option availability and default state Test description This test aims to verify whether User Password Management submenu is available and, whether all options in the submenu have correct default state. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press SETUP_MENU_KEY to enter the Setup Menu . Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the User Password Management submenu using the arrow keys and Enter. Verify the Admin Password Status field. Verify the Change Admin Password field. Expected result The Admin Password Status field should be present and indicate, that password setup is currently disabled. The Change Admin Password field should be present. After passing the cursor over this option, information about password minimum terms and conditions should be displayed. PSW002.001 Password setting mechanism correctness checking Test description This test aims to verify whether Change Admin Password option works correctly - after restarting the device and trying to enter the Setup Menu , a window to enter the password will be displayed. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press SETUP_MENU_KEY to enter the Setup Menu . Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the User Password Management submenu using the arrow keys and Enter. Select the option Change Admin Password by using the arrow keys and Enter. Set the password in accordance with the password minimum terms and conditions. Restart the DUT. Press SETUP_MENU_KEY to enter the Setup Menu . Verify if the password window will be displayed. Expected result The password window should be displayed correctly. PSW003.001 Attempt to log in with a correct password Test description This test aims to verify whether, after entering the correct Setup password, the Setup menu will be displayed. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT Press SETUP_MENU_KEY to enter the Setup Menu . Enter the correct password and note the result. Expected result After typing in the correct password Setup menu should be displayed. PSW004.001 Attempt to log in with an incorrect password Test description This test aims to verify whether, after entering the incorrect Setup password, the message about the demand for re-entering the password will be displayed. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT Press BOOT_MENU_KEY key to display the boot menu. Enter the incorrect password and note the result. Expected result After typing in the incorrect password the message about the demand for re-entering the password will be displayed. PSW005.001 Attempt to log in with an incorrect password 3 times Test description This test aims to verify whether, after entering the incorrect Setup password three times, the message about demand for rebooting the DUT will be displayed. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT Press BOOT_MENU_KEY key to display the boot menu. Enter the incorrect password three times and note the result. Expected result After typing in the incorrect password three times the message about the demand for rebooting the DUT will be displayed. PSW006.001 Attempt to turn off setup password functionality Test description This test aims to verify whether there is a possibility to turn off the Setup Password functionality by entering empty password. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press SETUP_MENU_KEY to enter the Setup Menu . Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the User Password Management submenu using the arrow keys and Enter. Select the option Change Admin Password by using the arrow keys and Enter. Set the empty password. Restart the DUT. Press SETUP_MENU_KEY to enter the Setup Menu . Verify if the password window will be displayed. Expected result Password window should not be displayed. The DUT should boot into Setup Menu . PSW007.001 Attempt to set non-compilant password Test description This test aims to verify whether the attempt to set a non-compilant password will be rejected. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press SETUP_MENU_KEY to enter the Setup Menu . Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the User Password Management submenu using the arrow keys and Enter. Select the option Change Admin Password by using the arrow keys and Enter. Set the password in non-accordance with the password minimum terms and conditions. Expected result The window with the information that requested password is not strong enough should be displayed. The attempt to set the password should be rejected. PSW008.001 Attempt to set old password Test description UEFI Setup password feature has been equipped with an additional functionality that prevents re-setting one of the last 5 access passwords. This test aims to verify whether the attempt to set old password again will be rejected. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press SETUP_MENU_KEY to enter the Setup Menu . Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the User Password Management submenu using the arrow keys and Enter. Select the option Change Admin Password by using the arrow keys and Enter. Set the password identically as one of the 5 latest passwords. Expected result The window with the information that requested password has been found in the passwords history should be displayed. The attempt to set the password should be rejected.","title":"UEFI Setup password"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/#dasharo-security-uefi-setup-password","text":"","title":"Dasharo Security: UEFI Setup password"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/#psw001001-check-password-setup-option-availability-and-default-state","text":"Test description This test aims to verify whether User Password Management submenu is available and, whether all options in the submenu have correct default state. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press SETUP_MENU_KEY to enter the Setup Menu . Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the User Password Management submenu using the arrow keys and Enter. Verify the Admin Password Status field. Verify the Change Admin Password field. Expected result The Admin Password Status field should be present and indicate, that password setup is currently disabled. The Change Admin Password field should be present. After passing the cursor over this option, information about password minimum terms and conditions should be displayed.","title":"PSW001.001 Check Password Setup option availability and default state"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/#psw002001-password-setting-mechanism-correctness-checking","text":"Test description This test aims to verify whether Change Admin Password option works correctly - after restarting the device and trying to enter the Setup Menu , a window to enter the password will be displayed. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press SETUP_MENU_KEY to enter the Setup Menu . Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the User Password Management submenu using the arrow keys and Enter. Select the option Change Admin Password by using the arrow keys and Enter. Set the password in accordance with the password minimum terms and conditions. Restart the DUT. Press SETUP_MENU_KEY to enter the Setup Menu . Verify if the password window will be displayed. Expected result The password window should be displayed correctly.","title":"PSW002.001 Password setting mechanism correctness checking"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/#psw003001-attempt-to-log-in-with-a-correct-password","text":"Test description This test aims to verify whether, after entering the correct Setup password, the Setup menu will be displayed. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT Press SETUP_MENU_KEY to enter the Setup Menu . Enter the correct password and note the result. Expected result After typing in the correct password Setup menu should be displayed.","title":"PSW003.001 Attempt to log in with a correct password"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/#psw004001-attempt-to-log-in-with-an-incorrect-password","text":"Test description This test aims to verify whether, after entering the incorrect Setup password, the message about the demand for re-entering the password will be displayed. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT Press BOOT_MENU_KEY key to display the boot menu. Enter the incorrect password and note the result. Expected result After typing in the incorrect password the message about the demand for re-entering the password will be displayed.","title":"PSW004.001 Attempt to log in with an incorrect password"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/#psw005001-attempt-to-log-in-with-an-incorrect-password-3-times","text":"Test description This test aims to verify whether, after entering the incorrect Setup password three times, the message about demand for rebooting the DUT will be displayed. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT Press BOOT_MENU_KEY key to display the boot menu. Enter the incorrect password three times and note the result. Expected result After typing in the incorrect password three times the message about the demand for rebooting the DUT will be displayed.","title":"PSW005.001 Attempt to log in with an incorrect password 3 times"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/#psw006001-attempt-to-turn-off-setup-password-functionality","text":"Test description This test aims to verify whether there is a possibility to turn off the Setup Password functionality by entering empty password. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press SETUP_MENU_KEY to enter the Setup Menu . Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the User Password Management submenu using the arrow keys and Enter. Select the option Change Admin Password by using the arrow keys and Enter. Set the empty password. Restart the DUT. Press SETUP_MENU_KEY to enter the Setup Menu . Verify if the password window will be displayed. Expected result Password window should not be displayed. The DUT should boot into Setup Menu .","title":"PSW006.001 Attempt to turn off setup password functionality"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/#psw007001-attempt-to-set-non-compilant-password","text":"Test description This test aims to verify whether the attempt to set a non-compilant password will be rejected. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press SETUP_MENU_KEY to enter the Setup Menu . Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the User Password Management submenu using the arrow keys and Enter. Select the option Change Admin Password by using the arrow keys and Enter. Set the password in non-accordance with the password minimum terms and conditions. Expected result The window with the information that requested password is not strong enough should be displayed. The attempt to set the password should be rejected.","title":"PSW007.001 Attempt to set non-compilant password"},{"location":"unified-test-documentation/dasharo-security/20R-uefi-setup-password/#psw008001-attempt-to-set-old-password","text":"Test description UEFI Setup password feature has been equipped with an additional functionality that prevents re-setting one of the last 5 access passwords. This test aims to verify whether the attempt to set old password again will be rejected. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Press SETUP_MENU_KEY to enter the Setup Menu . Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the User Password Management submenu using the arrow keys and Enter. Select the option Change Admin Password by using the arrow keys and Enter. Set the password identically as one of the 5 latest passwords. Expected result The window with the information that requested password has been found in the passwords history should be displayed. The attempt to set the password should be rejected.","title":"PSW008.001 Attempt to set old password"},{"location":"unified-test-documentation/dasharo-security/20S-usb-stack/","text":"Dasharo Security: USB stack enable/disable Test cases common documentation Test setup Proceed with the Generic test setup: firmware . USS001.001 Enable USB stack (firmware) Test description This test aims to verify that the USB stack might be enabled. If the stack is activated, there will be an option to use USB bootable drives and USB keyboards on the firmware level. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Connect PS/2 keyboard to the device. Test steps Power on the DUT. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Dasharo System Features menu option. Verify that the Enable USB stack field is checked - if not, use Spacebar to change option settings. Save using F10 , and exit from the menu using Esc . Connect any USB with a bootable system and USB keyboard to the DUT. Reboot the device. While booting, press BOOT_MENU_KEY on the USB keyboard to enter Setup Menu. Note the results. Expected result USB keyboard should be operable. USB installer should be visible as a bootable device. USS002.001 Disable USB stack (firmware) Test description This test aims to verify that the USB stack might be disabled. If the stack is deactivated, there will be no option to use USB bootable drives and USB keyboards on the firmware level. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Connect PS/2 keyboard to the device. Test steps Power on the DUT. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Dasharo System Features menu option. Verify that the Enable USB stack field is not checked - if so, use Spacebar to change option settings. Save using F10 , and exit from the menu using Esc . Connect any USB with a bootable system and USB keyboard to the DUT. Reboot the device. While booting, press BOOT_MENU_KEY on the PS/2 keyboard to enter Setup Menu. Try to navigate through the menu by using the USB keyboard. Note the results. Expected result USB keyboard should be non-operable. USB installer should not be visible as a bootable device. USS003.001 Enable USB Mass Storage (firmware) Test description This test aims to verify that USB Mass Storage might be enabled. If the storage support is activated, there will be an option to use USB bootable drives on the firmware level. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Dasharo System Features menu option. Verify that the Enable USB Mass Storage field is checked - if not, use Spacebar to change option settings. Save using F10 , and exit from the menu using Esc . Connect any USB with a bootable system and USB keyboard to the DUT. Reboot the device. While booting, press BOOT_MENU_KEY to enter Setup Menu. Note the result. Expected result USB installer should be visible as a bootable device. USS004.001 Disable USB Mass Storage (firmware) Test description This test aims to verify that USB Mass Storage might be disabled. If the storage support is deactivated, there will be no option to use USB bootable drives on the firmware level. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Dasharo System Features menu option. Verify that the Enable USB Mass Storage field is not checked - if so, use Spacebar to change option settings. Save using F10 , and exit from the menu using Esc . Connect any USB with a bootable system and USB keyboard to the DUT. Reboot the device. While booting, press BOOT_MENU_KEY to enter Setup Menu. Note the result. Expected result USB installer should not be visible as a bootable device.","title":"USB stack enable/disable"},{"location":"unified-test-documentation/dasharo-security/20S-usb-stack/#dasharo-security-usb-stack-enabledisable","text":"","title":"Dasharo Security: USB stack enable/disable"},{"location":"unified-test-documentation/dasharo-security/20S-usb-stack/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-security/20S-usb-stack/#uss001001-enable-usb-stack-firmware","text":"Test description This test aims to verify that the USB stack might be enabled. If the stack is activated, there will be an option to use USB bootable drives and USB keyboards on the firmware level. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Connect PS/2 keyboard to the device. Test steps Power on the DUT. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Dasharo System Features menu option. Verify that the Enable USB stack field is checked - if not, use Spacebar to change option settings. Save using F10 , and exit from the menu using Esc . Connect any USB with a bootable system and USB keyboard to the DUT. Reboot the device. While booting, press BOOT_MENU_KEY on the USB keyboard to enter Setup Menu. Note the results. Expected result USB keyboard should be operable. USB installer should be visible as a bootable device.","title":"USS001.001 Enable USB stack (firmware)"},{"location":"unified-test-documentation/dasharo-security/20S-usb-stack/#uss002001-disable-usb-stack-firmware","text":"Test description This test aims to verify that the USB stack might be disabled. If the stack is deactivated, there will be no option to use USB bootable drives and USB keyboards on the firmware level. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Connect PS/2 keyboard to the device. Test steps Power on the DUT. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Dasharo System Features menu option. Verify that the Enable USB stack field is not checked - if so, use Spacebar to change option settings. Save using F10 , and exit from the menu using Esc . Connect any USB with a bootable system and USB keyboard to the DUT. Reboot the device. While booting, press BOOT_MENU_KEY on the PS/2 keyboard to enter Setup Menu. Try to navigate through the menu by using the USB keyboard. Note the results. Expected result USB keyboard should be non-operable. USB installer should not be visible as a bootable device.","title":"USS002.001 Disable USB stack (firmware)"},{"location":"unified-test-documentation/dasharo-security/20S-usb-stack/#uss003001-enable-usb-mass-storage-firmware","text":"Test description This test aims to verify that USB Mass Storage might be enabled. If the storage support is activated, there will be an option to use USB bootable drives on the firmware level. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Dasharo System Features menu option. Verify that the Enable USB Mass Storage field is checked - if not, use Spacebar to change option settings. Save using F10 , and exit from the menu using Esc . Connect any USB with a bootable system and USB keyboard to the DUT. Reboot the device. While booting, press BOOT_MENU_KEY to enter Setup Menu. Note the result. Expected result USB installer should be visible as a bootable device.","title":"USS003.001 Enable USB Mass Storage (firmware)"},{"location":"unified-test-documentation/dasharo-security/20S-usb-stack/#uss004001-disable-usb-mass-storage-firmware","text":"Test description This test aims to verify that USB Mass Storage might be disabled. If the storage support is deactivated, there will be no option to use USB bootable drives on the firmware level. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Dasharo System Features menu option. Verify that the Enable USB Mass Storage field is not checked - if so, use Spacebar to change option settings. Save using F10 , and exit from the menu using Esc . Connect any USB with a bootable system and USB keyboard to the DUT. Reboot the device. While booting, press BOOT_MENU_KEY to enter Setup Menu. Note the result. Expected result USB installer should not be visible as a bootable device.","title":"USS004.001 Disable USB Mass Storage (firmware)"},{"location":"unified-test-documentation/dasharo-security/20T-network-boot/","text":"Dasharo Security: Network stack enable/disable Test cases common documentation Test setup Proceed with the Generic test setup: firmware . The DUT should be connected to the Internet by using an Ethernet cable. NBA001.001 Enable Network Boot (firmware) Test description This test aims to verify that the Network Boot option might be enabled. If this option is activated, an additional option in the Boot menu which allows to boot the system from iPXE servers will appear. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Networking Options menu option. Verify that the Enable Network Boot field is checked - if not, use Spacebar to change option settings. Save using F10 , and exit from the menu using Esc . Reboot the device. While booting, press BOOT_MENU_KEY on the USB keyboard to enter Setup Menu. Note the results. Expected result The Network Boot option in the Boot menu should be visible. NBA002.001 Disable Network Boot (firmware) Test description This test aims to verify that the Network Boot option might be disabled. If this option is deactivated, an additional option in the Boot menu which allows to boot the system from iPXE servers will be hidden. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Networking Options menu option. Verify that the Enable Network Boot field is checked - if so, use Spacebar to change option settings. Save using F10 , and exit from the menu using Esc . Reboot the device. While booting, press BOOT_MENU_KEY on the USB keyboard to enter Setup Menu. Note the results. Expected result The Network Boot option in the Boot menu should not be visible.","title":"Network stack enable/disable"},{"location":"unified-test-documentation/dasharo-security/20T-network-boot/#dasharo-security-network-stack-enabledisable","text":"","title":"Dasharo Security: Network stack enable/disable"},{"location":"unified-test-documentation/dasharo-security/20T-network-boot/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . The DUT should be connected to the Internet by using an Ethernet cable.","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-security/20T-network-boot/#nba001001-enable-network-boot-firmware","text":"Test description This test aims to verify that the Network Boot option might be enabled. If this option is activated, an additional option in the Boot menu which allows to boot the system from iPXE servers will appear. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Networking Options menu option. Verify that the Enable Network Boot field is checked - if not, use Spacebar to change option settings. Save using F10 , and exit from the menu using Esc . Reboot the device. While booting, press BOOT_MENU_KEY on the USB keyboard to enter Setup Menu. Note the results. Expected result The Network Boot option in the Boot menu should be visible.","title":"NBA001.001 Enable Network Boot (firmware)"},{"location":"unified-test-documentation/dasharo-security/20T-network-boot/#nba002001-disable-network-boot-firmware","text":"Test description This test aims to verify that the Network Boot option might be disabled. If this option is deactivated, an additional option in the Boot menu which allows to boot the system from iPXE servers will be hidden. Test configuration data FIRMWARE = Dasharo Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. While booting, press the SETUP_MENU_KEY to enter Setup Menu. Enter the Networking Options menu option. Verify that the Enable Network Boot field is checked - if so, use Spacebar to change option settings. Save using F10 , and exit from the menu using Esc . Reboot the device. While booting, press BOOT_MENU_KEY on the USB keyboard to enter Setup Menu. Note the results. Expected result The Network Boot option in the Boot menu should not be visible.","title":"NBA002.001 Disable Network Boot (firmware)"},{"location":"unified-test-documentation/dasharo-stability/01-net-controller-after-coldboot-warmboot-reboot-suspend/","text":"Dasharo Compatibility: NET controller after coldboot/warmboot/reboot/suspend Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . The Thunderbolt docking station connected to the Thunderbolt port. NET001.001 NET controller after coldboot (Ubuntu 22.04) Test description This test aims to verify that the network controller works and the platform is able to connect to the network after coldboot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a Ethernet cable with internet connection to the platform. Wait for internet connection to initialize. Open a terminal window and execute following command to list available network interfaces: ip a Determine the name of the ethernet controller. It typically is ethX or enpXsY , where X and Y are numbers. Then, execute following command to check if the network interface is working correctly: cat /sys/class/net/<interface_name>/operstate Perform coldboot. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the command mentioned in point 8. Expected result The ip a command should return information about available NET interfaces. The list should contain the ethernet network interface, which is typically identified as ethX or enpXsY , where X and Y are numbers. Example output: 1 : lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00 :00:00:00:00:00 brd 00 :00:00:00:00:00 inet 127 .0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2 : enp46s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether d4:93:90:16:92:f8 brd ff:ff:ff:ff:ff:ff inet 192 .168.4.85/24 brd 192 .168.4.255 scope global dynamic noprefixroute enp46s0 valid_lft 40276sec preferred_lft 40276sec inet6 fe80::8317:79e3:81ec:a1f4/64 scope link noprefixroute valid_lft forever preferred_lft forever 3 : wlp0s20f3: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default qlen 1000 link/ether 14 :18:c3:7d:77:06 brd ff:ff:ff:ff:ff:ff The cat /sys/class/net/<interface_name>/operstate command should return information indicating if the network interface works correctly ( up ) or not ( down ). Example output: up NET002.001 NET controller after warmboot (Ubuntu 22.04) Test description This test aims to verify that the network controller works and the platform is able to connect to the network after warmboot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a Ethernet cable with internet connection to the platform. Wait for internet connection to initialize. Open a terminal window and execute following command to list available network interfaces: ip a Determine the name of the ethernet controller. It typically is ethX or enpXsY , where X and Y are numbers. Then, execute following command to check if the network interface is working correctly: cat /sys/class/net/<interface_name>/operstate Perform warmboot. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the command mentioned in point 8. Expected result The ip a command should return information about available NET interfaces. The list should contain the ethernet network interface, which is typically identified as ethX or enpXsY , where X and Y are numbers. Example output: 1 : lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00 :00:00:00:00:00 brd 00 :00:00:00:00:00 inet 127 .0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2 : enp46s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether d4:93:90:16:92:f8 brd ff:ff:ff:ff:ff:ff inet 192 .168.4.85/24 brd 192 .168.4.255 scope global dynamic noprefixroute enp46s0 valid_lft 40276sec preferred_lft 40276sec inet6 fe80::8317:79e3:81ec:a1f4/64 scope link noprefixroute valid_lft forever preferred_lft forever 3 : wlp0s20f3: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default qlen 1000 link/ether 14 :18:c3:7d:77:06 brd ff:ff:ff:ff:ff:ff The cat /sys/class/net/<interface_name>/operstate command should return information indicating if the network interface works correctly ( up ) or not ( down ). Example output: up NET003.001 NET controller after reboot (Ubuntu 22.04) Test description This test aims to verify that the network controller works and the platform is able to connect to the network after coldboot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a Ethernet cable with internet connection to the platform. Wait for internet connection to initialize. Open a terminal window and execute following command to list available network interfaces: ip a Determine the name of the ethernet controller. It typically is ethX or enpXsY , where X and Y are numbers. Then, execute following command to check if the network interface is working correctly: cat /sys/class/net/<interface_name>/operstate Reboot the system. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the command mentioned in point 8. Expected result The ip a command should return information about available NET interfaces. The list should contain the ethernet network interface, which is typically identified as ethX or enpXsY , where X and Y are numbers. Example output: 1 : lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00 :00:00:00:00:00 brd 00 :00:00:00:00:00 inet 127 .0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2 : enp46s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether d4:93:90:16:92:f8 brd ff:ff:ff:ff:ff:ff inet 192 .168.4.85/24 brd 192 .168.4.255 scope global dynamic noprefixroute enp46s0 valid_lft 40276sec preferred_lft 40276sec inet6 fe80::8317:79e3:81ec:a1f4/64 scope link noprefixroute valid_lft forever preferred_lft forever 3 : wlp0s20f3: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default qlen 1000 link/ether 14 :18:c3:7d:77:06 brd ff:ff:ff:ff:ff:ff The cat /sys/class/net/<interface_name>/operstate command should return information indicating if the network interface works correctly ( up ) or not ( down ). Example output: up NET004.001 NET controller after suspend (Ubuntu 22.04) Test description This test aims to verify that the network controller works and the platform is able to connect to the network after suspend. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a Ethernet cable with internet connection to the platform. Wait for internet connection to initialize. Open a terminal window and execute following command to list available network interfaces: ip a Determine the name of the ethernet controller. It typically is ethX or enpXsY , where X and Y are numbers. Then, execute following command to check if the network interface is working correctly: cat /sys/class/net/<interface_name>/operstate Execute following command to suspend the system and automatically wake it up after 10 seconds: sudo fwts s3 --s3-sleep-delay = 10 After the system wakes up, log into the system and execute the command mentioned in point 8. Expected result The ip a command should return information about available NET interfaces. The list should contain the ethernet network interface, which is typically identified as ethX or enpXsY , where X and Y are numbers. Example output: 1 : lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00 :00:00:00:00:00 brd 00 :00:00:00:00:00 inet 127 .0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2 : enp46s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether d4:93:90:16:92:f8 brd ff:ff:ff:ff:ff:ff inet 192 .168.4.85/24 brd 192 .168.4.255 scope global dynamic noprefixroute enp46s0 valid_lft 40276sec preferred_lft 40276sec inet6 fe80::8317:79e3:81ec:a1f4/64 scope link noprefixroute valid_lft forever preferred_lft forever 3 : wlp0s20f3: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default qlen 1000 link/ether 14 :18:c3:7d:77:06 brd ff:ff:ff:ff:ff:ff The cat /sys/class/net/<interface_name>/operstate command should return information indicating if the network interface works correctly ( up ) or not ( down ). Example output: up","title":"NET interface check after coldboot/warmboot/reboot/suspend"},{"location":"unified-test-documentation/dasharo-stability/01-net-controller-after-coldboot-warmboot-reboot-suspend/#dasharo-compatibility-net-controller-after-coldbootwarmbootrebootsuspend","text":"","title":"Dasharo Compatibility: NET controller after coldboot/warmboot/reboot/suspend"},{"location":"unified-test-documentation/dasharo-stability/01-net-controller-after-coldboot-warmboot-reboot-suspend/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . The Thunderbolt docking station connected to the Thunderbolt port.","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-stability/01-net-controller-after-coldboot-warmboot-reboot-suspend/#net001001-net-controller-after-coldboot-ubuntu-2204","text":"Test description This test aims to verify that the network controller works and the platform is able to connect to the network after coldboot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a Ethernet cable with internet connection to the platform. Wait for internet connection to initialize. Open a terminal window and execute following command to list available network interfaces: ip a Determine the name of the ethernet controller. It typically is ethX or enpXsY , where X and Y are numbers. Then, execute following command to check if the network interface is working correctly: cat /sys/class/net/<interface_name>/operstate Perform coldboot. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the command mentioned in point 8. Expected result The ip a command should return information about available NET interfaces. The list should contain the ethernet network interface, which is typically identified as ethX or enpXsY , where X and Y are numbers. Example output: 1 : lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00 :00:00:00:00:00 brd 00 :00:00:00:00:00 inet 127 .0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2 : enp46s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether d4:93:90:16:92:f8 brd ff:ff:ff:ff:ff:ff inet 192 .168.4.85/24 brd 192 .168.4.255 scope global dynamic noprefixroute enp46s0 valid_lft 40276sec preferred_lft 40276sec inet6 fe80::8317:79e3:81ec:a1f4/64 scope link noprefixroute valid_lft forever preferred_lft forever 3 : wlp0s20f3: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default qlen 1000 link/ether 14 :18:c3:7d:77:06 brd ff:ff:ff:ff:ff:ff The cat /sys/class/net/<interface_name>/operstate command should return information indicating if the network interface works correctly ( up ) or not ( down ). Example output: up","title":"NET001.001 NET controller after coldboot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-stability/01-net-controller-after-coldboot-warmboot-reboot-suspend/#net002001-net-controller-after-warmboot-ubuntu-2204","text":"Test description This test aims to verify that the network controller works and the platform is able to connect to the network after warmboot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a Ethernet cable with internet connection to the platform. Wait for internet connection to initialize. Open a terminal window and execute following command to list available network interfaces: ip a Determine the name of the ethernet controller. It typically is ethX or enpXsY , where X and Y are numbers. Then, execute following command to check if the network interface is working correctly: cat /sys/class/net/<interface_name>/operstate Perform warmboot. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the command mentioned in point 8. Expected result The ip a command should return information about available NET interfaces. The list should contain the ethernet network interface, which is typically identified as ethX or enpXsY , where X and Y are numbers. Example output: 1 : lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00 :00:00:00:00:00 brd 00 :00:00:00:00:00 inet 127 .0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2 : enp46s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether d4:93:90:16:92:f8 brd ff:ff:ff:ff:ff:ff inet 192 .168.4.85/24 brd 192 .168.4.255 scope global dynamic noprefixroute enp46s0 valid_lft 40276sec preferred_lft 40276sec inet6 fe80::8317:79e3:81ec:a1f4/64 scope link noprefixroute valid_lft forever preferred_lft forever 3 : wlp0s20f3: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default qlen 1000 link/ether 14 :18:c3:7d:77:06 brd ff:ff:ff:ff:ff:ff The cat /sys/class/net/<interface_name>/operstate command should return information indicating if the network interface works correctly ( up ) or not ( down ). Example output: up","title":"NET002.001 NET controller after warmboot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-stability/01-net-controller-after-coldboot-warmboot-reboot-suspend/#net003001-net-controller-after-reboot-ubuntu-2204","text":"Test description This test aims to verify that the network controller works and the platform is able to connect to the network after coldboot. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a Ethernet cable with internet connection to the platform. Wait for internet connection to initialize. Open a terminal window and execute following command to list available network interfaces: ip a Determine the name of the ethernet controller. It typically is ethX or enpXsY , where X and Y are numbers. Then, execute following command to check if the network interface is working correctly: cat /sys/class/net/<interface_name>/operstate Reboot the system. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and execute the command mentioned in point 8. Expected result The ip a command should return information about available NET interfaces. The list should contain the ethernet network interface, which is typically identified as ethX or enpXsY , where X and Y are numbers. Example output: 1 : lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00 :00:00:00:00:00 brd 00 :00:00:00:00:00 inet 127 .0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2 : enp46s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether d4:93:90:16:92:f8 brd ff:ff:ff:ff:ff:ff inet 192 .168.4.85/24 brd 192 .168.4.255 scope global dynamic noprefixroute enp46s0 valid_lft 40276sec preferred_lft 40276sec inet6 fe80::8317:79e3:81ec:a1f4/64 scope link noprefixroute valid_lft forever preferred_lft forever 3 : wlp0s20f3: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default qlen 1000 link/ether 14 :18:c3:7d:77:06 brd ff:ff:ff:ff:ff:ff The cat /sys/class/net/<interface_name>/operstate command should return information indicating if the network interface works correctly ( up ) or not ( down ). Example output: up","title":"NET003.001 NET controller after reboot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-stability/01-net-controller-after-coldboot-warmboot-reboot-suspend/#net004001-net-controller-after-suspend-ubuntu-2204","text":"Test description This test aims to verify that the network controller works and the platform is able to connect to the network after suspend. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Plug in a Ethernet cable with internet connection to the platform. Wait for internet connection to initialize. Open a terminal window and execute following command to list available network interfaces: ip a Determine the name of the ethernet controller. It typically is ethX or enpXsY , where X and Y are numbers. Then, execute following command to check if the network interface is working correctly: cat /sys/class/net/<interface_name>/operstate Execute following command to suspend the system and automatically wake it up after 10 seconds: sudo fwts s3 --s3-sleep-delay = 10 After the system wakes up, log into the system and execute the command mentioned in point 8. Expected result The ip a command should return information about available NET interfaces. The list should contain the ethernet network interface, which is typically identified as ethX or enpXsY , where X and Y are numbers. Example output: 1 : lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00 :00:00:00:00:00 brd 00 :00:00:00:00:00 inet 127 .0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2 : enp46s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether d4:93:90:16:92:f8 brd ff:ff:ff:ff:ff:ff inet 192 .168.4.85/24 brd 192 .168.4.255 scope global dynamic noprefixroute enp46s0 valid_lft 40276sec preferred_lft 40276sec inet6 fe80::8317:79e3:81ec:a1f4/64 scope link noprefixroute valid_lft forever preferred_lft forever 3 : wlp0s20f3: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN group default qlen 1000 link/ether 14 :18:c3:7d:77:06 brd ff:ff:ff:ff:ff:ff The cat /sys/class/net/<interface_name>/operstate command should return information indicating if the network interface works correctly ( up ) or not ( down ). Example output: up","title":"NET004.001 NET controller after suspend (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-stability/C01-usb-type-a-devices-detection/","text":"Dasharo Stability: USB Type-A devices detection Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Connect the USB device to the USB Type-A port. SUD0001.001 USB devices detection after cold boot (Ubuntu 22.04) Test description This test aims to verify that the external USB devices are detected correctly after performing a cold boot. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Disconnect the power source, and remove the battery if present. Connect power and battery again. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Expected result The output of each lsusb command should contain an entry of the connected USB device . SUD0002.001 USB devices detection after warm boot (Ubuntu 22.04) Test description This test aims to verify that the external USB devices are detected correctly after performing a warm boot. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Power off the DUT using the power button. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Expected result The output of each lsusb command should contain an entry of the connected USB device . SUD0003.001 USB devices detection after reboot (Ubuntu 22.04) Test description This test aims to verify that the external USB devices are detected correctly after performing a reboot. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Disconnect the power source, and remove the battery if present. Connect power and battery again. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Expected result The output of each lsusb command should contain an entry of the connected USB device . SUD0004.001 USB devices detection after suspension (Ubuntu 22.04) Test description This test aims to verify that the external USB devices are detected correctly after performing suspension. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the Firmware test suite package. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Execute the following command to suspend the system and automatically wake it up after 10 seconds: sudo fwts s3 --s3-sleep-delay = 10 Open a terminal window and run the following command: lsusb Note the results. Expected result The output of each lsusb command should contain an entry of the connected USB device .","title":"USB Type-A devices detection"},{"location":"unified-test-documentation/dasharo-stability/C01-usb-type-a-devices-detection/#dasharo-stability-usb-type-a-devices-detection","text":"","title":"Dasharo Stability: USB Type-A devices detection"},{"location":"unified-test-documentation/dasharo-stability/C01-usb-type-a-devices-detection/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . Connect the USB device to the USB Type-A port.","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-stability/C01-usb-type-a-devices-detection/#sud0001001-usb-devices-detection-after-cold-boot-ubuntu-2204","text":"Test description This test aims to verify that the external USB devices are detected correctly after performing a cold boot. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Disconnect the power source, and remove the battery if present. Connect power and battery again. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Expected result The output of each lsusb command should contain an entry of the connected USB device .","title":"SUD0001.001 USB devices detection after cold boot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-stability/C01-usb-type-a-devices-detection/#sud0002001-usb-devices-detection-after-warm-boot-ubuntu-2204","text":"Test description This test aims to verify that the external USB devices are detected correctly after performing a warm boot. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Power off the DUT using the power button. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Expected result The output of each lsusb command should contain an entry of the connected USB device .","title":"SUD0002.001 USB devices detection after warm boot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-stability/C01-usb-type-a-devices-detection/#sud0003001-usb-devices-detection-after-reboot-ubuntu-2204","text":"Test description This test aims to verify that the external USB devices are detected correctly after performing a reboot. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Disconnect the power source, and remove the battery if present. Connect power and battery again. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Expected result The output of each lsusb command should contain an entry of the connected USB device .","title":"SUD0003.001 USB devices detection after reboot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-stability/C01-usb-type-a-devices-detection/#sud0004001-usb-devices-detection-after-suspension-ubuntu-2204","text":"Test description This test aims to verify that the external USB devices are detected correctly after performing suspension. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the Firmware test suite package. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lsusb Note the results. Execute the following command to suspend the system and automatically wake it up after 10 seconds: sudo fwts s3 --s3-sleep-delay = 10 Open a terminal window and run the following command: lsusb Note the results. Expected result The output of each lsusb command should contain an entry of the connected USB device .","title":"SUD0004.001 USB devices detection after suspension (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-stability/C02-m2-wi-fi/","text":"Dasharo Stability: M.2 Wi-fi Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . SMW0001.001 Wi-fi connection after cold boot (Ubuntu 22.04) Test description This test aims to verify that the Wi-Fi card is detected and working correctly after performing a cold boot. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep \"Network Controller\" Open a terminal window and run the following commands: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Disconnect the power source, and remove the battery if present. Connect power and battery again. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep \"Network Controller\" Open a terminal window and run the following commands: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Expected result The output of each lspci command should contain information about the mounted on the DUT network controller. Example output: 2f:00.0 Network controller: Intel Corporation Wi-Fi 6 AX201 ( rev 1a ) The output of each nmcli device wifi list` command should return a list of available Wi-Fi networks. Example output: IN-USE BSSID SSID MODE CHAN RATE SIGNAL BARS SECURITY XX:XX:XX:XX:XX:XX DIRECT-ny Infra 6 65 Mbit/s 75 \u2582\u2584\u2586_ WPA2 * XX:XX:XX:XX:XX:XX 3mdeb_abr_5GHz Infra 48 405 Mbit/s 72 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX 3mdeb_abr Infra 11 54 Mbit/s 69 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX FunBox2-F9BF_2.4GHz Infra 1 130 Mbit/s 50 \u2582\u2584__ WPA1 WPA2 XX:XX:XX:XX:XX:XX H_Office Infra 2 270 Mbit/s 35 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-xpPhaser 3330 Infra 1 65 Mbit/s 34 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 108 540 Mbit/s 32 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-KRM288x Series Infra 11 54 Mbit/s 22 \u2582___ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 11 130 Mbit/s 20 \u2582___ WPA2 XX:XX:XX:XX:XX:XX DIRECT-ejPhaser 3330 Infra 1 65 Mbit/s 17 \u2582___ WPA2 XX:XX:XX:XX:XX:XX NED-WIFI Infra 11 270 Mbit/s 17 \u2582___ WPA2 SMW0002.001 Wi-fi connection after warm boot (Ubuntu 22.04) Test description This test aims to verify that the Wi-Fi card is detected and working correctly after performing a warm boot. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep \"Network Controller\" Open a terminal window and run the following commands: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Power off the DUT using the power button. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep \"Network Controller\" Open a terminal window and run the following commands: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Expected result The output of each lspci command should contain information about the mounted on the DUT network controller. Example output: 2f:00.0 Network controller: Intel Corporation Wi-Fi 6 AX201 ( rev 1a ) The output of each nmcli device wifi list` command should return a list of available Wi-Fi networks. Example output: IN-USE BSSID SSID MODE CHAN RATE SIGNAL BARS SECURITY XX:XX:XX:XX:XX:XX DIRECT-ny Infra 6 65 Mbit/s 75 \u2582\u2584\u2586_ WPA2 * XX:XX:XX:XX:XX:XX 3mdeb_abr_5GHz Infra 48 405 Mbit/s 72 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX 3mdeb_abr Infra 11 54 Mbit/s 69 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX FunBox2-F9BF_2.4GHz Infra 1 130 Mbit/s 50 \u2582\u2584__ WPA1 WPA2 XX:XX:XX:XX:XX:XX H_Office Infra 2 270 Mbit/s 35 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-xpPhaser 3330 Infra 1 65 Mbit/s 34 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 108 540 Mbit/s 32 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-KRM288x Series Infra 11 54 Mbit/s 22 \u2582___ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 11 130 Mbit/s 20 \u2582___ WPA2 XX:XX:XX:XX:XX:XX DIRECT-ejPhaser 3330 Infra 1 65 Mbit/s 17 \u2582___ WPA2 XX:XX:XX:XX:XX:XX NED-WIFI Infra 11 270 Mbit/s 17 \u2582___ WPA2 SMW0003.001 Wi-fi connection after reboot (Ubuntu 22.04) Test description This test aims to verify that the Wi-Fi card is detected and working correctly after performing a reboot. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep \"Network Controller\" Open a terminal window and run the following commands: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Disconnect the power source, and remove the battery if present. Connect power and battery again. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep \"Network Controller\" Open a terminal window and run the following commands: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Expected result The output of each lspci command should contain information about the mounted on the DUT network controller. Example output: 2f:00.0 Network controller: Intel Corporation Wi-Fi 6 AX201 ( rev 1a ) The output of each nmcli device wifi list` command should return a list of available Wi-Fi networks. Example output: IN-USE BSSID SSID MODE CHAN RATE SIGNAL BARS SECURITY XX:XX:XX:XX:XX:XX DIRECT-ny Infra 6 65 Mbit/s 75 \u2582\u2584\u2586_ WPA2 * XX:XX:XX:XX:XX:XX 3mdeb_abr_5GHz Infra 48 405 Mbit/s 72 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX 3mdeb_abr Infra 11 54 Mbit/s 69 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX FunBox2-F9BF_2.4GHz Infra 1 130 Mbit/s 50 \u2582\u2584__ WPA1 WPA2 XX:XX:XX:XX:XX:XX H_Office Infra 2 270 Mbit/s 35 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-xpPhaser 3330 Infra 1 65 Mbit/s 34 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 108 540 Mbit/s 32 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-KRM288x Series Infra 11 54 Mbit/s 22 \u2582___ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 11 130 Mbit/s 20 \u2582___ WPA2 XX:XX:XX:XX:XX:XX DIRECT-ejPhaser 3330 Infra 1 65 Mbit/s 17 \u2582___ WPA2 XX:XX:XX:XX:XX:XX NED-WIFI Infra 11 270 Mbit/s 17 \u2582___ WPA2 SMW0004.001 Wi-fi connection after suspension (Ubuntu 22.04) Test description This test aims to verify that the Wi-Fi card is detected and working correctly after performing suspension. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the Firmware test suite package. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep \"Network Controller\" Open a terminal window and run the following commands: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Execute the following command to suspend the system and automatically wake it up after 10 seconds: sudo fwts s3 --s3-sleep-delay = 10 Open a terminal window and run the following command: lspci | grep \"Network Controller\" Open a terminal window and run the following commands: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Expected result The output of each lspci command should contain information about the mounted on the DUT network controller. Example output: 2f:00.0 Network controller: Intel Corporation Wi-Fi 6 AX201 ( rev 1a ) The output of each nmcli device wifi list` command should return a list of available Wi-Fi networks. Example output: IN-USE BSSID SSID MODE CHAN RATE SIGNAL BARS SECURITY XX:XX:XX:XX:XX:XX DIRECT-ny Infra 6 65 Mbit/s 75 \u2582\u2584\u2586_ WPA2 * XX:XX:XX:XX:XX:XX 3mdeb_abr_5GHz Infra 48 405 Mbit/s 72 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX 3mdeb_abr Infra 11 54 Mbit/s 69 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX FunBox2-F9BF_2.4GHz Infra 1 130 Mbit/s 50 \u2582\u2584__ WPA1 WPA2 XX:XX:XX:XX:XX:XX H_Office Infra 2 270 Mbit/s 35 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-xpPhaser 3330 Infra 1 65 Mbit/s 34 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 108 540 Mbit/s 32 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-KRM288x Series Infra 11 54 Mbit/s 22 \u2582___ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 11 130 Mbit/s 20 \u2582___ WPA2 XX:XX:XX:XX:XX:XX DIRECT-ejPhaser 3330 Infra 1 65 Mbit/s 17 \u2582___ WPA2 XX:XX:XX:XX:XX:XX NED-WIFI Infra 11 270 Mbit/s 17 \u2582___ WPA2","title":"M.2 Wi-fi"},{"location":"unified-test-documentation/dasharo-stability/C02-m2-wi-fi/#dasharo-stability-m2-wi-fi","text":"","title":"Dasharo Stability: M.2 Wi-fi"},{"location":"unified-test-documentation/dasharo-stability/C02-m2-wi-fi/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-stability/C02-m2-wi-fi/#smw0001001-wi-fi-connection-after-cold-boot-ubuntu-2204","text":"Test description This test aims to verify that the Wi-Fi card is detected and working correctly after performing a cold boot. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep \"Network Controller\" Open a terminal window and run the following commands: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Disconnect the power source, and remove the battery if present. Connect power and battery again. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep \"Network Controller\" Open a terminal window and run the following commands: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Expected result The output of each lspci command should contain information about the mounted on the DUT network controller. Example output: 2f:00.0 Network controller: Intel Corporation Wi-Fi 6 AX201 ( rev 1a ) The output of each nmcli device wifi list` command should return a list of available Wi-Fi networks. Example output: IN-USE BSSID SSID MODE CHAN RATE SIGNAL BARS SECURITY XX:XX:XX:XX:XX:XX DIRECT-ny Infra 6 65 Mbit/s 75 \u2582\u2584\u2586_ WPA2 * XX:XX:XX:XX:XX:XX 3mdeb_abr_5GHz Infra 48 405 Mbit/s 72 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX 3mdeb_abr Infra 11 54 Mbit/s 69 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX FunBox2-F9BF_2.4GHz Infra 1 130 Mbit/s 50 \u2582\u2584__ WPA1 WPA2 XX:XX:XX:XX:XX:XX H_Office Infra 2 270 Mbit/s 35 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-xpPhaser 3330 Infra 1 65 Mbit/s 34 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 108 540 Mbit/s 32 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-KRM288x Series Infra 11 54 Mbit/s 22 \u2582___ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 11 130 Mbit/s 20 \u2582___ WPA2 XX:XX:XX:XX:XX:XX DIRECT-ejPhaser 3330 Infra 1 65 Mbit/s 17 \u2582___ WPA2 XX:XX:XX:XX:XX:XX NED-WIFI Infra 11 270 Mbit/s 17 \u2582___ WPA2","title":"SMW0001.001 Wi-fi connection after cold boot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-stability/C02-m2-wi-fi/#smw0002001-wi-fi-connection-after-warm-boot-ubuntu-2204","text":"Test description This test aims to verify that the Wi-Fi card is detected and working correctly after performing a warm boot. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep \"Network Controller\" Open a terminal window and run the following commands: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Power off the DUT using the power button. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep \"Network Controller\" Open a terminal window and run the following commands: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Expected result The output of each lspci command should contain information about the mounted on the DUT network controller. Example output: 2f:00.0 Network controller: Intel Corporation Wi-Fi 6 AX201 ( rev 1a ) The output of each nmcli device wifi list` command should return a list of available Wi-Fi networks. Example output: IN-USE BSSID SSID MODE CHAN RATE SIGNAL BARS SECURITY XX:XX:XX:XX:XX:XX DIRECT-ny Infra 6 65 Mbit/s 75 \u2582\u2584\u2586_ WPA2 * XX:XX:XX:XX:XX:XX 3mdeb_abr_5GHz Infra 48 405 Mbit/s 72 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX 3mdeb_abr Infra 11 54 Mbit/s 69 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX FunBox2-F9BF_2.4GHz Infra 1 130 Mbit/s 50 \u2582\u2584__ WPA1 WPA2 XX:XX:XX:XX:XX:XX H_Office Infra 2 270 Mbit/s 35 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-xpPhaser 3330 Infra 1 65 Mbit/s 34 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 108 540 Mbit/s 32 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-KRM288x Series Infra 11 54 Mbit/s 22 \u2582___ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 11 130 Mbit/s 20 \u2582___ WPA2 XX:XX:XX:XX:XX:XX DIRECT-ejPhaser 3330 Infra 1 65 Mbit/s 17 \u2582___ WPA2 XX:XX:XX:XX:XX:XX NED-WIFI Infra 11 270 Mbit/s 17 \u2582___ WPA2","title":"SMW0002.001 Wi-fi connection after warm boot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-stability/C02-m2-wi-fi/#smw0003001-wi-fi-connection-after-reboot-ubuntu-2204","text":"Test description This test aims to verify that the Wi-Fi card is detected and working correctly after performing a reboot. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep \"Network Controller\" Open a terminal window and run the following commands: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Disconnect the power source, and remove the battery if present. Connect power and battery again. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep \"Network Controller\" Open a terminal window and run the following commands: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Expected result The output of each lspci command should contain information about the mounted on the DUT network controller. Example output: 2f:00.0 Network controller: Intel Corporation Wi-Fi 6 AX201 ( rev 1a ) The output of each nmcli device wifi list` command should return a list of available Wi-Fi networks. Example output: IN-USE BSSID SSID MODE CHAN RATE SIGNAL BARS SECURITY XX:XX:XX:XX:XX:XX DIRECT-ny Infra 6 65 Mbit/s 75 \u2582\u2584\u2586_ WPA2 * XX:XX:XX:XX:XX:XX 3mdeb_abr_5GHz Infra 48 405 Mbit/s 72 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX 3mdeb_abr Infra 11 54 Mbit/s 69 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX FunBox2-F9BF_2.4GHz Infra 1 130 Mbit/s 50 \u2582\u2584__ WPA1 WPA2 XX:XX:XX:XX:XX:XX H_Office Infra 2 270 Mbit/s 35 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-xpPhaser 3330 Infra 1 65 Mbit/s 34 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 108 540 Mbit/s 32 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-KRM288x Series Infra 11 54 Mbit/s 22 \u2582___ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 11 130 Mbit/s 20 \u2582___ WPA2 XX:XX:XX:XX:XX:XX DIRECT-ejPhaser 3330 Infra 1 65 Mbit/s 17 \u2582___ WPA2 XX:XX:XX:XX:XX:XX NED-WIFI Infra 11 270 Mbit/s 17 \u2582___ WPA2","title":"SMW0003.001 Wi-fi connection after reboot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-stability/C02-m2-wi-fi/#smw0004001-wi-fi-connection-after-suspension-ubuntu-2204","text":"Test description This test aims to verify that the Wi-Fi card is detected and working correctly after performing suspension. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the Firmware test suite package. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep \"Network Controller\" Open a terminal window and run the following commands: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Execute the following command to suspend the system and automatically wake it up after 10 seconds: sudo fwts s3 --s3-sleep-delay = 10 Open a terminal window and run the following command: lspci | grep \"Network Controller\" Open a terminal window and run the following commands: nmcli radio wifi on nmcli device wifi rescan # Wait ~5 seconds nmcli device wifi list Expected result The output of each lspci command should contain information about the mounted on the DUT network controller. Example output: 2f:00.0 Network controller: Intel Corporation Wi-Fi 6 AX201 ( rev 1a ) The output of each nmcli device wifi list` command should return a list of available Wi-Fi networks. Example output: IN-USE BSSID SSID MODE CHAN RATE SIGNAL BARS SECURITY XX:XX:XX:XX:XX:XX DIRECT-ny Infra 6 65 Mbit/s 75 \u2582\u2584\u2586_ WPA2 * XX:XX:XX:XX:XX:XX 3mdeb_abr_5GHz Infra 48 405 Mbit/s 72 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX 3mdeb_abr Infra 11 54 Mbit/s 69 \u2582\u2584\u2586_ WPA2 XX:XX:XX:XX:XX:XX FunBox2-F9BF_2.4GHz Infra 1 130 Mbit/s 50 \u2582\u2584__ WPA1 WPA2 XX:XX:XX:XX:XX:XX H_Office Infra 2 270 Mbit/s 35 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-xpPhaser 3330 Infra 1 65 Mbit/s 34 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 108 540 Mbit/s 32 \u2582\u2584__ WPA2 XX:XX:XX:XX:XX:XX DIRECT-KRM288x Series Infra 11 54 Mbit/s 22 \u2582___ WPA2 XX:XX:XX:XX:XX:XX Orange_Swiatlowod_A79A Infra 11 130 Mbit/s 20 \u2582___ WPA2 XX:XX:XX:XX:XX:XX DIRECT-ejPhaser 3330 Infra 1 65 Mbit/s 17 \u2582___ WPA2 XX:XX:XX:XX:XX:XX NED-WIFI Infra 11 270 Mbit/s 17 \u2582___ WPA2","title":"SMW0004.001 Wi-fi connection after suspension (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-stability/C03-nvme-detection/","text":"Dasharo Stability: NVMe detection Test cases common documentation Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk . SNV0001.001 NVMe detection after cold boot (Ubuntu 22.04) Test description This test aims to verify that the NVMe disk is correctly detected after performing a cold boot. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep -i nvme Disconnect the power source, and remove the battery if present. Connect power and battery again. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep -i nvme Expected result The output of each lspci command should contain information about the mounted on the DUT NVMe disk. Example output: 01 :00.0 Non-Volatile memory controller: Samsung Electronics Co Ltd NVMe SSD Controller 980 SNV0001.001 NVMe detection after warm boot (Ubuntu 22.04) Test description This test aims to verify that the NVMe disk is correctly detected after performing a warm boot. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep -i nvme Power off the DUT using the power button. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep -i nvme Expected result The output of each lspci command should contain information about the mounted on the DUT NVMe disk. Example output: 01 :00.0 Non-Volatile memory controller: Samsung Electronics Co Ltd NVMe SSD Controller 980 SNV0003.001 NVMe detection after reboot (Ubuntu 22.04) Test description This test aims to verify that the NVMe disk is correctly detected after performing a reboot. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep -i nvme Disconnect the power source, and remove the battery if present. Connect power and battery again. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep -i nvme Expected result The output of each lspci command should contain information about the mounted on the DUT NVMe disk. Example output: 01 :00.0 Non-Volatile memory controller: Samsung Electronics Co Ltd NVMe SSD Controller 980 SNV0004.001 NVMe detection after suspension (Ubuntu 22.04) Test description This test aims to verify that the NVMe disk is correctly detected after performing suspension. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the Firmware test suite package. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep -i nvme Execute the following command to suspend the system and automatically wake it up after 10 seconds: sudo fwts s3 --s3-sleep-delay = 10 Open a terminal window and run the following command: lspci | grep -i nvme Expected result The output of each lspci command should contain information about the mounted on the DUT NVMe disk. Example output: 01 :00.0 Non-Volatile memory controller: Samsung Electronics Co Ltd NVMe SSD Controller 980","title":"NVMe detection"},{"location":"unified-test-documentation/dasharo-stability/C03-nvme-detection/#dasharo-stability-nvme-detection","text":"","title":"Dasharo Stability: NVMe detection"},{"location":"unified-test-documentation/dasharo-stability/C03-nvme-detection/#test-cases-common-documentation","text":"Test setup Proceed with the Generic test setup: firmware . Proceed with the Generic test setup: OS installer . Proceed with the Generic test setup: OS installation . Proceed with the Generic test setup: OS boot from disk .","title":"Test cases common documentation"},{"location":"unified-test-documentation/dasharo-stability/C03-nvme-detection/#snv0001001-nvme-detection-after-cold-boot-ubuntu-2204","text":"Test description This test aims to verify that the NVMe disk is correctly detected after performing a cold boot. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep -i nvme Disconnect the power source, and remove the battery if present. Connect power and battery again. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep -i nvme Expected result The output of each lspci command should contain information about the mounted on the DUT NVMe disk. Example output: 01 :00.0 Non-Volatile memory controller: Samsung Electronics Co Ltd NVMe SSD Controller 980","title":"SNV0001.001 NVMe detection after cold boot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-stability/C03-nvme-detection/#snv0001001-nvme-detection-after-warm-boot-ubuntu-2204","text":"Test description This test aims to verify that the NVMe disk is correctly detected after performing a warm boot. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep -i nvme Power off the DUT using the power button. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep -i nvme Expected result The output of each lspci command should contain information about the mounted on the DUT NVMe disk. Example output: 01 :00.0 Non-Volatile memory controller: Samsung Electronics Co Ltd NVMe SSD Controller 980","title":"SNV0001.001 NVMe detection after warm boot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-stability/C03-nvme-detection/#snv0003001-nvme-detection-after-reboot-ubuntu-2204","text":"Test description This test aims to verify that the NVMe disk is correctly detected after performing a reboot. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Generic test setup: firmware Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep -i nvme Disconnect the power source, and remove the battery if present. Connect power and battery again. Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep -i nvme Expected result The output of each lspci command should contain information about the mounted on the DUT NVMe disk. Example output: 01 :00.0 Non-Volatile memory controller: Samsung Electronics Co Ltd NVMe SSD Controller 980","title":"SNV0003.001 NVMe detection after reboot (Ubuntu 22.04)"},{"location":"unified-test-documentation/dasharo-stability/C03-nvme-detection/#snv0004001-nvme-detection-after-suspension-ubuntu-2204","text":"Test description This test aims to verify that the NVMe disk is correctly detected after performing suspension. The test should be performed in multiple iterations. Test configuration data FIRMWARE = Dasharo OPERATING_SYSTEM = Ubuntu 22.04 Test setup Proceed with the Test cases common documentation section. Install the Firmware test suite package. Test steps Power on the DUT. Boot into the system. Log into the system by using the proper login and password. Open a terminal window and run the following command: lspci | grep -i nvme Execute the following command to suspend the system and automatically wake it up after 10 seconds: sudo fwts s3 --s3-sleep-delay = 10 Open a terminal window and run the following command: lspci | grep -i nvme Expected result The output of each lspci command should contain information about the mounted on the DUT NVMe disk. Example output: 01 :00.0 Non-Volatile memory controller: Samsung Electronics Co Ltd NVMe SSD Controller 980","title":"SNV0004.001 NVMe detection after suspension (Ubuntu 22.04)"},{"location":"value-prop/compatibility/","text":"Dasharo Compatibility Module From communication bus standards, through industry specifications like ACPI and ending up with support for Operating Systems, each platform needs set of compatibility criteria which have to be maintained across life cycle of market availability and sometimes even after it. This section describes what compatibility features Dasharo offer and how it make sure their availability in every firmware release.","title":"Compatibility"},{"location":"value-prop/compatibility/#dasharo-compatibility-module","text":"From communication bus standards, through industry specifications like ACPI and ending up with support for Operating Systems, each platform needs set of compatibility criteria which have to be maintained across life cycle of market availability and sometimes even after it. This section describes what compatibility features Dasharo offer and how it make sure their availability in every firmware release.","title":"Dasharo Compatibility Module"},{"location":"value-prop/marketing/","text":"Dasharo Marketing Module We think every advanced piece of software requires correct communication to all users who will interact with it. Marketing module helps in organizing and delivering information required to understand and correctly leverage software produced by Dasharo Ecosystem. Key Embedded Firmware marketing issues Differentiation through firmware Most hardware vendors do not leverage ability to differentiate through firmware features, which is way easier then designing new hardware. Products Embedded Firmware Release Website Newsletter Repository Community and Customer Support Issues repository maintenance Documentation repository maintenance Conference speaking Technical Sales Support","title":"Marketing"},{"location":"value-prop/marketing/#dasharo-marketing-module","text":"We think every advanced piece of software requires correct communication to all users who will interact with it. Marketing module helps in organizing and delivering information required to understand and correctly leverage software produced by Dasharo Ecosystem.","title":"Dasharo Marketing Module"},{"location":"value-prop/marketing/#key-embedded-firmware-marketing-issues","text":"","title":"Key Embedded Firmware marketing issues"},{"location":"value-prop/marketing/#products","text":"Embedded Firmware Release Website Newsletter Repository Community and Customer Support Issues repository maintenance Documentation repository maintenance Conference speaking Technical Sales Support","title":"Products"},{"location":"value-prop/overview/","text":"Dasharo Value Proposition There are multiple reasons why you should choose Dasharo. In this section we will try to structure and present whole value that Dasharo can bring to your hardware. Marketing - Dasharo Marketing Module was created to resolve problems of hardware vendors with communicating Embedded Firmware value. Finally, we agree with John Hennessy and David Patterson that we enter era of New Golden Age of domain specific computing with open architectures and open-source implementations. What eventually will lead to more firmware everywhere . Addressing mentioned areas is just beginning for Dasharo we think following years would need way more firmware expertise then at any other point in time.","title":"Overview"},{"location":"value-prop/overview/#dasharo-value-proposition","text":"There are multiple reasons why you should choose Dasharo. In this section we will try to structure and present whole value that Dasharo can bring to your hardware. Marketing - Dasharo Marketing Module was created to resolve problems of hardware vendors with communicating Embedded Firmware value. Finally, we agree with John Hennessy and David Patterson that we enter era of New Golden Age of domain specific computing with open architectures and open-source implementations. What eventually will lead to more firmware everywhere . Addressing mentioned areas is just beginning for Dasharo we think following years would need way more firmware expertise then at any other point in time.","title":"Dasharo Value Proposition"},{"location":"value-prop/security/","text":"Dasharo Security Module This module gathers all security features Dasharo Ecosystem can bring to your platform through software. No matter if this is new hardware at design stage, prototype waiting for bring up or well-established platform looking for after-market boost. In this section we will explain what features Dasharo provide in area of security.","title":"Security"},{"location":"value-prop/security/#dasharo-security-module","text":"This module gathers all security features Dasharo Ecosystem can bring to your platform through software. No matter if this is new hardware at design stage, prototype waiting for bring up or well-established platform looking for after-market boost. In this section we will explain what features Dasharo provide in area of security.","title":"Dasharo Security Module"},{"location":"variants/hardware-compatibility-list/","text":"Hardware Compatibility List Vendor Model Status Roadmap Shop Documentation Dell OptiPlex 7010 SFF Implementation TBD TBD link Dell OptiPlex 7010 DT Implementation TBD TBD link Dell OptiPlex 9010 SFF Implementation TBD TBD link Possible status: Planning - platform support is planned either through internal, community or commercial sponsorship. Implementation - under active development to provide baseline support. Testing and Integration - under validation to sign-off on baseline quality criteria. Maintenance - under active maintenance release cycle according to schedule presented in Roadmap.","title":"Hardware Compatibility List"},{"location":"variants/hardware-compatibility-list/#hardware-compatibility-list","text":"Vendor Model Status Roadmap Shop Documentation Dell OptiPlex 7010 SFF Implementation TBD TBD link Dell OptiPlex 7010 DT Implementation TBD TBD link Dell OptiPlex 9010 SFF Implementation TBD TBD link Possible status: Planning - platform support is planned either through internal, community or commercial sponsorship. Implementation - under active development to provide baseline support. Testing and Integration - under validation to sign-off on baseline quality criteria. Maintenance - under active maintenance release cycle according to schedule presented in Roadmap.","title":"Hardware Compatibility List"},{"location":"variants/overview/","text":"Supported hardware Following is up to date list of hardware platforms supported by Dasharo open-source firmware distribution. Network appliance Following network appliances are supported under Dasharo Support Package: Protectli FW6 Protectli VP2410 Protectli VP2420 Protectli VP46xx Following network appliances are planned to be supported under Dasharo Community Support: PC Engines Laptops Following laptops are supported under Dasharo Support Package NovaCustom NV4x 12th Gen NovaCustom NS5x/7x 12th Gen NovaCustom NV4x 11th Gen NovaCustom NS5x/7x 11th Gen Following laptops are supported under Dasharo Community Support Tuxedo IBS15 Desktop Following desktops are supported under Dasharo Community Support Dell OptiPlex MSI PRO Z690-A MSI PRO Z790-P Workstation Following workstations are supported under Dasharo Community Support Asus KGPE-D16 Raptor CS Talos II Servers Following servers are supported under Dasharo Community Support Supermicro X11 LGA1151 Series","title":"Overview"},{"location":"variants/overview/#supported-hardware","text":"Following is up to date list of hardware platforms supported by Dasharo open-source firmware distribution.","title":"Supported hardware"},{"location":"variants/overview/#network-appliance","text":"Following network appliances are supported under Dasharo Support Package: Protectli FW6 Protectli VP2410 Protectli VP2420 Protectli VP46xx Following network appliances are planned to be supported under Dasharo Community Support: PC Engines","title":"Network appliance"},{"location":"variants/overview/#laptops","text":"Following laptops are supported under Dasharo Support Package NovaCustom NV4x 12th Gen NovaCustom NS5x/7x 12th Gen NovaCustom NV4x 11th Gen NovaCustom NS5x/7x 11th Gen Following laptops are supported under Dasharo Community Support Tuxedo IBS15","title":"Laptops"},{"location":"variants/overview/#desktop","text":"Following desktops are supported under Dasharo Community Support Dell OptiPlex MSI PRO Z690-A MSI PRO Z790-P","title":"Desktop"},{"location":"variants/overview/#workstation","text":"Following workstations are supported under Dasharo Community Support Asus KGPE-D16 Raptor CS Talos II","title":"Workstation"},{"location":"variants/overview/#servers","text":"Following servers are supported under Dasharo Community Support Supermicro X11 LGA1151 Series","title":"Servers"},{"location":"variants/asus_kgpe_d16/building-manual/","text":"Building manual Building coreboot To build coreboot image, follow the steps below: Clone the coreboot repository: git clone https://github.com/dasharo/coreboot.git -b asus_kgpe-d16/release Get the submodules: cd coreboot git submodule update --init --recursive --checkout Start docker container: docker run --rm -it -u $UID \\ -v $PWD :/home/coreboot/coreboot \\ -w /home/coreboot/coreboot \\ coreboot/coreboot-sdk:0ad5fbd48d /bin/bash Inside of the container, configure and start the build process: ( docker ) cp configs/config.asus_kgpe_d16_<variant> .config ( docker ) make olddefconfig ( docker ) make This will produce a debug binary placed in build/coreboot.rom for a 2MB flash chip. In order to build for 8MB or 16MB chip use the configs/config.asus_kgpe_d16_8M and configs/config.asus_kgpe_d16_16M respectively. Dasharo v0.1.0 for KGPE-D16 supports only 8MB target with configs/config.asus_kgpe_d16 . To flash coreboot refer to Flashing section in the hardware setup page. Other variants Since the Dasharo v0.3.0 release the firmware comes in two more variatns: with TPM 1.2 and TPM 2.0 support. Now the possible confis to use are: configs/config.asus_kgpe_d16_vboot_tpm12 - 2MB target with vboot and TPM 1.2 configs/config.asus_kgpe_d16_vboot_tpm2 - 2MB target with vboot and TPM 2.0 configs/config.asus_kgpe_d16_8M_vboot_tpm12 - 8MB target with vboot and TPM 1.2 configs/config.asus_kgpe_d16_8M_vboot_tpm2 - 8MB target with vboot and TPM 2.0 configs/config.asus_kgpe_d16_16M_vboot_tpm12 - 16MB target with vboot and TPM 1.2 configs/config.asus_kgpe_d16_16M_vboot_tpm2 - 16MB target with vboot and TPM 2.0","title":"Building manual"},{"location":"variants/asus_kgpe_d16/building-manual/#building-manual","text":"","title":"Building manual"},{"location":"variants/asus_kgpe_d16/building-manual/#building-coreboot","text":"To build coreboot image, follow the steps below: Clone the coreboot repository: git clone https://github.com/dasharo/coreboot.git -b asus_kgpe-d16/release Get the submodules: cd coreboot git submodule update --init --recursive --checkout Start docker container: docker run --rm -it -u $UID \\ -v $PWD :/home/coreboot/coreboot \\ -w /home/coreboot/coreboot \\ coreboot/coreboot-sdk:0ad5fbd48d /bin/bash Inside of the container, configure and start the build process: ( docker ) cp configs/config.asus_kgpe_d16_<variant> .config ( docker ) make olddefconfig ( docker ) make This will produce a debug binary placed in build/coreboot.rom for a 2MB flash chip. In order to build for 8MB or 16MB chip use the configs/config.asus_kgpe_d16_8M and configs/config.asus_kgpe_d16_16M respectively. Dasharo v0.1.0 for KGPE-D16 supports only 8MB target with configs/config.asus_kgpe_d16 . To flash coreboot refer to Flashing section in the hardware setup page.","title":"Building coreboot"},{"location":"variants/asus_kgpe_d16/building-manual/#other-variants","text":"Since the Dasharo v0.3.0 release the firmware comes in two more variatns: with TPM 1.2 and TPM 2.0 support. Now the possible confis to use are: configs/config.asus_kgpe_d16_vboot_tpm12 - 2MB target with vboot and TPM 1.2 configs/config.asus_kgpe_d16_vboot_tpm2 - 2MB target with vboot and TPM 2.0 configs/config.asus_kgpe_d16_8M_vboot_tpm12 - 8MB target with vboot and TPM 1.2 configs/config.asus_kgpe_d16_8M_vboot_tpm2 - 8MB target with vboot and TPM 2.0 configs/config.asus_kgpe_d16_16M_vboot_tpm12 - 16MB target with vboot and TPM 1.2 configs/config.asus_kgpe_d16_16M_vboot_tpm2 - 16MB target with vboot and TPM 2.0","title":"Other variants"},{"location":"variants/asus_kgpe_d16/fan-control/","text":"Automatic fan control for ASUS KGPE-D16 Starting from KGPE-D16 Dasharo release v0.2.0, coreboot implements automatic fan control. The feature is realized on the Nuvoton W83795 hardware monitor. Testing fan control In order to check the monitoring values of W83795, one needs to install some packages: apt-get install lm-sensors Linux kernel by default should come with w83795 module. Load it with the following command: modprobe w83795 The dmesg should contain the following message after loading the module: i2c i2c-1: Found w83795g rev. B at 0x2f w83795 1 -002f: hwmon_device_register () is deprecated. Please convert the driver to use hwmon_device_register_with_info () . To check the monitoring values execute: sensors The output should be similar to the one below: k10temp-pci-00cb Adapter: PCI adapter temp1: +36.5\u00b0C ( high = +70.0\u00b0C ) ( crit = +106.0\u00b0C, hyst = +101.0\u00b0C ) w83795g-i2c-1-2f Adapter: SMBus PIIX4 adapter at 0b20 in0: 910 .00 mV ( min = +0.90 V, max = +1.50 V ) in1: 0 .00 V ( min = +0.90 V, max = +1.50 V ) ALARM in2: 1 .53 V ( min = +1.10 V, max = +1.61 V ) in3: 22 .00 mV ( min = +1.10 V, max = +1.61 V ) ALARM in4: 1 .21 V ( min = +1.14 V, max = +1.25 V ) in5: 0 .00 V ( min = +1.14 V, max = +1.25 V ) ALARM in6: 1 .19 V ( min = +1.05 V, max = +1.25 V ) in7: 1 .82 V ( min = +1.70 V, max = +1.90 V ) in8: 1 .21 V ( min = +1.14 V, max = +1.25 V ) in9: 1 .09 V ( min = +1.05 V, max = +1.15 V ) in10: 1 .60 V ( min = +1.50 V, max = +1.63 V ) in11: 752 .00 mV ( min = +0.00 V, max = +0.01 V ) ALARM +3.3V: 3 .26 V ( min = +2.96 V, max = +3.63 V ) 3VSB: 3 .28 V ( min = +2.96 V, max = +3.63 V ) Vbat: 3 .16 V ( min = +2.70 V, max = +3.63 V ) in15: 1 .02 V ( min = +0.91 V, max = +1.08 V ) in16: 1 .55 V ( min = +1.50 V, max = +1.62 V ) fan1: 1157 RPM ( min = 329 RPM ) fan2: 0 RPM ( min = 329 RPM ) ALARM fan3: 0 RPM ( min = 329 RPM ) ALARM fan4: 0 RPM ( min = 329 RPM ) ALARM fan5: 0 RPM ( min = 329 RPM ) ALARM fan6: 0 RPM ( min = 329 RPM ) ALARM fan7: 0 RPM ( min = 329 RPM ) ALARM fan8: 0 RPM ( min = 329 RPM ) ALARM temp1: +37.2\u00b0C ( high = +70.0\u00b0C, hyst = +65.0\u00b0C ) ( crit = +90.0\u00b0C, hyst = +80.0\u00b0C ) sensor = thermal diode temp2: -62.5\u00b0C ( high = +0.0\u00b0C, hyst = +0.0\u00b0C ) ( crit = +0.0\u00b0C, hyst = +0.0\u00b0C ) sensor = thermistor temp3: -62.5\u00b0C ( high = +0.0\u00b0C, hyst = +0.0\u00b0C ) ( crit = +0.0\u00b0C, hyst = +0.0\u00b0C ) sensor = thermistor temp7: +36.8\u00b0C ( high = +70.0\u00b0C, hyst = +65.0\u00b0C ) ( crit = +90.0\u00b0C, hyst = +80.0\u00b0C ) sensor = AMD AMDSI temp8: +0.0\u00b0C ( high = +70.0\u00b0C, hyst = +65.0\u00b0C ) ( crit = +90.0\u00b0C, hyst = +80.0\u00b0C ) sensor = AMD AMDSI intrusion0: ALARM beep_enable: disabled fam15h_power-pci-00c4 Adapter: PCI adapter power1: 49 .44 W ( crit = 139 .72 W ) k10temp-pci-00c3 Adapter: PCI adapter temp1: +36.8\u00b0C ( high = +70.0\u00b0C ) ( crit = +106.0\u00b0C, hyst = +99.0\u00b0C ) The CPU temperature is indicated with k10temp and w83795g temp7 inputs and the CPU fan speed is indicated by fan1. Alternative automatic fan control If you are using a coreboot for KGPE-D16 built from 4.11 branch or earlier there is also a software option to enable automatic fan control without modifications in coreboot. In order to configure the fan control, one needs to install the following package: apt-get install fancontrol Now we need to configure the fancontrol application by generating a /etc/fancontrol file containing the relation of temperature inputs to fans. Be sure that w83795 module is loaded (you may also add the module to be loaded automatically with echo w38795 >> /etc/modules ). Execute: pwmconfig This application will lead you through the process of identifying the relation of the fans and temperatures. Simply follow the instructions printed on the console. At the end do not select save and ext, just configure all PWMs, e.g.: Select fan output to configure, or other action: 1 ) hwmon0/device/pwm1 3 ) Just quit 5 ) Show configuration 2 ) Change INTERVAL 4 ) Save and quit select ( 1 -n ) : 1 Then set up temperature correlation by selecting either k10temp or hwmon0/device/temp7_input as temperature source for the fan1 (they should report identical temperature). When finished, select Save and quit . For a single CPU - single fan configuration it should result in a file like this: INTERVAL=10 DEVPATH=hwmon0=devices/pci0000:00/0000:00:14.0/i2c-1/1-002f DEVNAME=hwmon0=w83795g FCTEMPS=hwmon0/device/pwm1=hwmon0/device/temp7_input FCFANS= hwmon0/device/pwm1=hwmon0/device/fan1_input MINTEMP=hwmon0/device/pwm1=20 MAXTEMP=hwmon0/device/pwm1=80 MINSTART=hwmon0/device/pwm1=150 MINSTOP=hwmon0/device/pwm1=0 NOTE: hwmonX may be different depending on the order of loaded modules, if loaded automatically via etc/modules it may be hwmon0, if loaded using modprobe it may be hwmon3 or hwmon4. Now that the configuration file is ready, time to start the fancontrol service: systemctl enable fancontrol systemctl start fancontrol systemctl status fancontrol \u25cf fancontrol.service - fan speed regulator Loaded: loaded ( /lib/systemd/system/fancontrol.service ; enabled ; vendor pr> Active: active ( running ) since Wed 2021 -12-08 11 :23:23 CET ; 9min ago Docs: man:fancontrol ( 8 ) man:pwmconfig ( 8 ) Main PID: 1318 ( fancontrol ) Tasks: 2 ( limit: 19153 ) Memory: 1 .3M CPU: 1 .340s CGroup: /system.slice/fancontrol.service \u251c\u25001318 /bin/bash /usr/sbin/fancontrol \u2514\u25002228 sleep 10 Dec 08 11 :23:24 debian fancontrol [ 1318 ] : Controls hwmon0/device/fan1_input Dec 08 11 :23:24 debian fancontrol [ 1318 ] : MINTEMP = 20 Dec 08 11 :23:24 debian fancontrol [ 1318 ] : MAXTEMP = 80 Dec 08 11 :23:24 debian fancontrol [ 1318 ] : MINSTART = 150 Dec 08 11 :23:24 debian fancontrol [ 1318 ] : MINSTOP = 0 Dec 08 11 :23:24 debian fancontrol [ 1318 ] : MINPWM = 0 Dec 08 11 :23:24 debian fancontrol [ 1318 ] : MAXPWM = 255 Dec 08 11 :23:24 debian fancontrol [ 1318 ] : AVERAGE = 1 Dec 08 11 :23:24 debian fancontrol [ 1318 ] : Enabling PWM on fans... Dec 08 11 :23:24 debian fancontrol [ 1318 ] : Starting automatic fan control... It should print the service is running. Now check the fan speed with sensors command from lm-sensors package (install it if you haven't done it yet). For CPU temperature of 40 Celsius degrees the fan1 speed should be a little bit lower than 3000 RPM. Note it is advised to stop and disable the fancontrol service when using Dasharo for KGPE-D16 release v0.2.0 or newer: systemctl disable fancontrol systemctl stop fancontrol Verifying fan speed adaptation To check if the fan speed adapts to the temperature you may install stress-ng : apt-get install stress-ng With the following command you may cause a 2 minutes stress on the CPUs and raise its temperature (it should hit about 70 Celsius degrees with that): stress-ng --cpu 16 --io 8 --vm 4 --vm-bytes 4G --timeout 120s --metrics Simultaneously watch the fan speed with sensors command. Example for fancontrol service: k10temp-pci-00cb Adapter: PCI adapter temp1: +52.4\u00b0C ( high = +70.0\u00b0C ) w83795g-i2c-1-2f Adapter: SMBus PIIX4 adapter at 0b20 in0: 1 .09 V ( min = +0.90 V, max = +1.50 V ) in1: 0 .00 V ( min = +0.90 V, max = +1.50 V ) ALARM in2: 1 .53 V ( min = +1.10 V, max = +1.61 V ) in3: 22 .00 mV ( min = +1.10 V, max = +1.61 V ) ALARM in4: 1 .21 V ( min = +1.14 V, max = +1.25 V ) in5: 0 .00 V ( min = +1.14 V, max = +1.25 V ) ALARM in6: 1 .20 V ( min = +1.05 V, max = +1.25 V ) in7: 1 .82 V ( min = +1.70 V, max = +1.90 V ) in8: 1 .21 V ( min = +1.14 V, max = +1.25 V ) in9: 1 .09 V ( min = +1.05 V, max = +1.15 V ) in10: 1 .59 V ( min = +1.50 V, max = +1.63 V ) +3.3V: 3 .24 V ( min = +2.96 V, max = +3.63 V ) 3VSB: 3 .28 V ( min = +2.96 V, max = +3.63 V ) Vbat: 3 .06 V ( min = +2.70 V, max = +3.63 V ) in15: 1 .01 V ( min = +0.91 V, max = +1.08 V ) in16: 1 .54 V ( min = +1.50 V, max = +1.62 V ) fan1: 4299 RPM ( min = 329 RPM ) fan2: 0 RPM ( min = 329 RPM ) ALARM fan3: 0 RPM ( min = 329 RPM ) ALARM fan4: 0 RPM ( min = 329 RPM ) ALARM fan5: 0 RPM ( min = 329 RPM ) ALARM fan6: 0 RPM ( min = 329 RPM ) ALARM fan7: 0 RPM ( min = 329 RPM ) ALARM fan8: 0 RPM ( min = 329 RPM ) ALARM temp1: +52.5\u00b0C ( high = +70.0\u00b0C, hyst = +65.0\u00b0C ) ( crit = +85.0\u00b0C, hyst = +80.0\u00b0C ) sensor = thermal diode temp7: +52.8\u00b0C ( high = +70.0\u00b0C, hyst = +65.0\u00b0C ) ( crit = +85.0\u00b0C, hyst = +80.0\u00b0C ) sensor = AMD AMDSI temp8: +0.0\u00b0C ( high = +70.0\u00b0C, hyst = +65.0\u00b0C ) ( crit = +85.0\u00b0C, hyst = +80.0\u00b0C ) sensor = AMD AMDSI intrusion0: ALARM beep_enable: disabled fam15h_power-pci-00c4 Adapter: PCI adapter power1: 141 .35 W ( crit = 139 .72 W ) k10temp-pci-00c3 Adapter: PCI adapter temp1: +52.9\u00b0C ( high = +70.0\u00b0C ) For the software method with fancontrol service the fan speed adapts pretty quickly, but when using the automatic fan control from Dasharo release the spin up/down time is longer. coreboot configures the W83795 in Thermal Cruise mode which automatically probes the CPU temperature via AMD SB TSI interface. The target temperature is set to 50 Celsius degrees which means the chip will try to keep the CPU temperature to be around 50 degrees by adapting the fan speed. Summing it up, the longer the CPU temperature exceeds 50 degrees the faster the fan will spin by slowly increasing the RPM. When the temperature is below 50 degrees for a long period of time the fan rotates with a speed of around 1000 RPM. The critical temperature is set to 90 Celsius degrees. When this point is reached the W83795 should spin up to fans to full speed.","title":"Fan Control"},{"location":"variants/asus_kgpe_d16/fan-control/#automatic-fan-control-for-asus-kgpe-d16","text":"Starting from KGPE-D16 Dasharo release v0.2.0, coreboot implements automatic fan control. The feature is realized on the Nuvoton W83795 hardware monitor.","title":"Automatic fan control for ASUS KGPE-D16"},{"location":"variants/asus_kgpe_d16/fan-control/#testing-fan-control","text":"In order to check the monitoring values of W83795, one needs to install some packages: apt-get install lm-sensors Linux kernel by default should come with w83795 module. Load it with the following command: modprobe w83795 The dmesg should contain the following message after loading the module: i2c i2c-1: Found w83795g rev. B at 0x2f w83795 1 -002f: hwmon_device_register () is deprecated. Please convert the driver to use hwmon_device_register_with_info () . To check the monitoring values execute: sensors The output should be similar to the one below: k10temp-pci-00cb Adapter: PCI adapter temp1: +36.5\u00b0C ( high = +70.0\u00b0C ) ( crit = +106.0\u00b0C, hyst = +101.0\u00b0C ) w83795g-i2c-1-2f Adapter: SMBus PIIX4 adapter at 0b20 in0: 910 .00 mV ( min = +0.90 V, max = +1.50 V ) in1: 0 .00 V ( min = +0.90 V, max = +1.50 V ) ALARM in2: 1 .53 V ( min = +1.10 V, max = +1.61 V ) in3: 22 .00 mV ( min = +1.10 V, max = +1.61 V ) ALARM in4: 1 .21 V ( min = +1.14 V, max = +1.25 V ) in5: 0 .00 V ( min = +1.14 V, max = +1.25 V ) ALARM in6: 1 .19 V ( min = +1.05 V, max = +1.25 V ) in7: 1 .82 V ( min = +1.70 V, max = +1.90 V ) in8: 1 .21 V ( min = +1.14 V, max = +1.25 V ) in9: 1 .09 V ( min = +1.05 V, max = +1.15 V ) in10: 1 .60 V ( min = +1.50 V, max = +1.63 V ) in11: 752 .00 mV ( min = +0.00 V, max = +0.01 V ) ALARM +3.3V: 3 .26 V ( min = +2.96 V, max = +3.63 V ) 3VSB: 3 .28 V ( min = +2.96 V, max = +3.63 V ) Vbat: 3 .16 V ( min = +2.70 V, max = +3.63 V ) in15: 1 .02 V ( min = +0.91 V, max = +1.08 V ) in16: 1 .55 V ( min = +1.50 V, max = +1.62 V ) fan1: 1157 RPM ( min = 329 RPM ) fan2: 0 RPM ( min = 329 RPM ) ALARM fan3: 0 RPM ( min = 329 RPM ) ALARM fan4: 0 RPM ( min = 329 RPM ) ALARM fan5: 0 RPM ( min = 329 RPM ) ALARM fan6: 0 RPM ( min = 329 RPM ) ALARM fan7: 0 RPM ( min = 329 RPM ) ALARM fan8: 0 RPM ( min = 329 RPM ) ALARM temp1: +37.2\u00b0C ( high = +70.0\u00b0C, hyst = +65.0\u00b0C ) ( crit = +90.0\u00b0C, hyst = +80.0\u00b0C ) sensor = thermal diode temp2: -62.5\u00b0C ( high = +0.0\u00b0C, hyst = +0.0\u00b0C ) ( crit = +0.0\u00b0C, hyst = +0.0\u00b0C ) sensor = thermistor temp3: -62.5\u00b0C ( high = +0.0\u00b0C, hyst = +0.0\u00b0C ) ( crit = +0.0\u00b0C, hyst = +0.0\u00b0C ) sensor = thermistor temp7: +36.8\u00b0C ( high = +70.0\u00b0C, hyst = +65.0\u00b0C ) ( crit = +90.0\u00b0C, hyst = +80.0\u00b0C ) sensor = AMD AMDSI temp8: +0.0\u00b0C ( high = +70.0\u00b0C, hyst = +65.0\u00b0C ) ( crit = +90.0\u00b0C, hyst = +80.0\u00b0C ) sensor = AMD AMDSI intrusion0: ALARM beep_enable: disabled fam15h_power-pci-00c4 Adapter: PCI adapter power1: 49 .44 W ( crit = 139 .72 W ) k10temp-pci-00c3 Adapter: PCI adapter temp1: +36.8\u00b0C ( high = +70.0\u00b0C ) ( crit = +106.0\u00b0C, hyst = +99.0\u00b0C ) The CPU temperature is indicated with k10temp and w83795g temp7 inputs and the CPU fan speed is indicated by fan1.","title":"Testing fan control"},{"location":"variants/asus_kgpe_d16/fan-control/#alternative-automatic-fan-control","text":"If you are using a coreboot for KGPE-D16 built from 4.11 branch or earlier there is also a software option to enable automatic fan control without modifications in coreboot. In order to configure the fan control, one needs to install the following package: apt-get install fancontrol Now we need to configure the fancontrol application by generating a /etc/fancontrol file containing the relation of temperature inputs to fans. Be sure that w83795 module is loaded (you may also add the module to be loaded automatically with echo w38795 >> /etc/modules ). Execute: pwmconfig This application will lead you through the process of identifying the relation of the fans and temperatures. Simply follow the instructions printed on the console. At the end do not select save and ext, just configure all PWMs, e.g.: Select fan output to configure, or other action: 1 ) hwmon0/device/pwm1 3 ) Just quit 5 ) Show configuration 2 ) Change INTERVAL 4 ) Save and quit select ( 1 -n ) : 1 Then set up temperature correlation by selecting either k10temp or hwmon0/device/temp7_input as temperature source for the fan1 (they should report identical temperature). When finished, select Save and quit . For a single CPU - single fan configuration it should result in a file like this: INTERVAL=10 DEVPATH=hwmon0=devices/pci0000:00/0000:00:14.0/i2c-1/1-002f DEVNAME=hwmon0=w83795g FCTEMPS=hwmon0/device/pwm1=hwmon0/device/temp7_input FCFANS= hwmon0/device/pwm1=hwmon0/device/fan1_input MINTEMP=hwmon0/device/pwm1=20 MAXTEMP=hwmon0/device/pwm1=80 MINSTART=hwmon0/device/pwm1=150 MINSTOP=hwmon0/device/pwm1=0 NOTE: hwmonX may be different depending on the order of loaded modules, if loaded automatically via etc/modules it may be hwmon0, if loaded using modprobe it may be hwmon3 or hwmon4. Now that the configuration file is ready, time to start the fancontrol service: systemctl enable fancontrol systemctl start fancontrol systemctl status fancontrol \u25cf fancontrol.service - fan speed regulator Loaded: loaded ( /lib/systemd/system/fancontrol.service ; enabled ; vendor pr> Active: active ( running ) since Wed 2021 -12-08 11 :23:23 CET ; 9min ago Docs: man:fancontrol ( 8 ) man:pwmconfig ( 8 ) Main PID: 1318 ( fancontrol ) Tasks: 2 ( limit: 19153 ) Memory: 1 .3M CPU: 1 .340s CGroup: /system.slice/fancontrol.service \u251c\u25001318 /bin/bash /usr/sbin/fancontrol \u2514\u25002228 sleep 10 Dec 08 11 :23:24 debian fancontrol [ 1318 ] : Controls hwmon0/device/fan1_input Dec 08 11 :23:24 debian fancontrol [ 1318 ] : MINTEMP = 20 Dec 08 11 :23:24 debian fancontrol [ 1318 ] : MAXTEMP = 80 Dec 08 11 :23:24 debian fancontrol [ 1318 ] : MINSTART = 150 Dec 08 11 :23:24 debian fancontrol [ 1318 ] : MINSTOP = 0 Dec 08 11 :23:24 debian fancontrol [ 1318 ] : MINPWM = 0 Dec 08 11 :23:24 debian fancontrol [ 1318 ] : MAXPWM = 255 Dec 08 11 :23:24 debian fancontrol [ 1318 ] : AVERAGE = 1 Dec 08 11 :23:24 debian fancontrol [ 1318 ] : Enabling PWM on fans... Dec 08 11 :23:24 debian fancontrol [ 1318 ] : Starting automatic fan control... It should print the service is running. Now check the fan speed with sensors command from lm-sensors package (install it if you haven't done it yet). For CPU temperature of 40 Celsius degrees the fan1 speed should be a little bit lower than 3000 RPM. Note it is advised to stop and disable the fancontrol service when using Dasharo for KGPE-D16 release v0.2.0 or newer: systemctl disable fancontrol systemctl stop fancontrol","title":"Alternative automatic fan control"},{"location":"variants/asus_kgpe_d16/fan-control/#verifying-fan-speed-adaptation","text":"To check if the fan speed adapts to the temperature you may install stress-ng : apt-get install stress-ng With the following command you may cause a 2 minutes stress on the CPUs and raise its temperature (it should hit about 70 Celsius degrees with that): stress-ng --cpu 16 --io 8 --vm 4 --vm-bytes 4G --timeout 120s --metrics Simultaneously watch the fan speed with sensors command. Example for fancontrol service: k10temp-pci-00cb Adapter: PCI adapter temp1: +52.4\u00b0C ( high = +70.0\u00b0C ) w83795g-i2c-1-2f Adapter: SMBus PIIX4 adapter at 0b20 in0: 1 .09 V ( min = +0.90 V, max = +1.50 V ) in1: 0 .00 V ( min = +0.90 V, max = +1.50 V ) ALARM in2: 1 .53 V ( min = +1.10 V, max = +1.61 V ) in3: 22 .00 mV ( min = +1.10 V, max = +1.61 V ) ALARM in4: 1 .21 V ( min = +1.14 V, max = +1.25 V ) in5: 0 .00 V ( min = +1.14 V, max = +1.25 V ) ALARM in6: 1 .20 V ( min = +1.05 V, max = +1.25 V ) in7: 1 .82 V ( min = +1.70 V, max = +1.90 V ) in8: 1 .21 V ( min = +1.14 V, max = +1.25 V ) in9: 1 .09 V ( min = +1.05 V, max = +1.15 V ) in10: 1 .59 V ( min = +1.50 V, max = +1.63 V ) +3.3V: 3 .24 V ( min = +2.96 V, max = +3.63 V ) 3VSB: 3 .28 V ( min = +2.96 V, max = +3.63 V ) Vbat: 3 .06 V ( min = +2.70 V, max = +3.63 V ) in15: 1 .01 V ( min = +0.91 V, max = +1.08 V ) in16: 1 .54 V ( min = +1.50 V, max = +1.62 V ) fan1: 4299 RPM ( min = 329 RPM ) fan2: 0 RPM ( min = 329 RPM ) ALARM fan3: 0 RPM ( min = 329 RPM ) ALARM fan4: 0 RPM ( min = 329 RPM ) ALARM fan5: 0 RPM ( min = 329 RPM ) ALARM fan6: 0 RPM ( min = 329 RPM ) ALARM fan7: 0 RPM ( min = 329 RPM ) ALARM fan8: 0 RPM ( min = 329 RPM ) ALARM temp1: +52.5\u00b0C ( high = +70.0\u00b0C, hyst = +65.0\u00b0C ) ( crit = +85.0\u00b0C, hyst = +80.0\u00b0C ) sensor = thermal diode temp7: +52.8\u00b0C ( high = +70.0\u00b0C, hyst = +65.0\u00b0C ) ( crit = +85.0\u00b0C, hyst = +80.0\u00b0C ) sensor = AMD AMDSI temp8: +0.0\u00b0C ( high = +70.0\u00b0C, hyst = +65.0\u00b0C ) ( crit = +85.0\u00b0C, hyst = +80.0\u00b0C ) sensor = AMD AMDSI intrusion0: ALARM beep_enable: disabled fam15h_power-pci-00c4 Adapter: PCI adapter power1: 141 .35 W ( crit = 139 .72 W ) k10temp-pci-00c3 Adapter: PCI adapter temp1: +52.9\u00b0C ( high = +70.0\u00b0C ) For the software method with fancontrol service the fan speed adapts pretty quickly, but when using the automatic fan control from Dasharo release the spin up/down time is longer. coreboot configures the W83795 in Thermal Cruise mode which automatically probes the CPU temperature via AMD SB TSI interface. The target temperature is set to 50 Celsius degrees which means the chip will try to keep the CPU temperature to be around 50 degrees by adapting the fan speed. Summing it up, the longer the CPU temperature exceeds 50 degrees the faster the fan will spin by slowly increasing the RPM. When the temperature is below 50 degrees for a long period of time the fan rotates with a speed of around 1000 RPM. The critical temperature is set to 90 Celsius degrees. When this point is reached the W83795 should spin up to fans to full speed.","title":"Verifying fan speed adaptation"},{"location":"variants/asus_kgpe_d16/firmware-update/","text":"Firmware update Following documentation describes the process of Dasharo open-source firmware update. Build flashrom Install build dependencies: apt install git build-essential debhelper pkg-config libpci-dev libusb-1.0-0-dev libftdi1-dev meson Obtain source code: git clone https://review.coreboot.org/flashrom.git cd flashrom Build flashrom: make sudo make install Updating Dasharo The whole bios region must be updated. flashrom -p internal -w [ path ] --ifd -i bios","title":"Firmware update"},{"location":"variants/asus_kgpe_d16/firmware-update/#firmware-update","text":"Following documentation describes the process of Dasharo open-source firmware update.","title":"Firmware update"},{"location":"variants/asus_kgpe_d16/firmware-update/#build-flashrom","text":"Install build dependencies: apt install git build-essential debhelper pkg-config libpci-dev libusb-1.0-0-dev libftdi1-dev meson Obtain source code: git clone https://review.coreboot.org/flashrom.git cd flashrom Build flashrom: make sudo make install","title":"Build flashrom"},{"location":"variants/asus_kgpe_d16/firmware-update/#updating-dasharo","text":"The whole bios region must be updated. flashrom -p internal -w [ path ] --ifd -i bios","title":"Updating Dasharo"},{"location":"variants/asus_kgpe_d16/hardware-matrix/","text":"Hardware configuration matrix This document describes the hardware configurations used for validation of the coreboot port on ASUS KGPE-D16 platforms. ASUS KGPE-D16 8MB Component Description Board revision 1.03G CPU AMD Opteron(TM) Processor 6282 SE CPU Cooler RAM DDR3 16GB Kingston KVR16R11D4/16 Flash memory Winbond W25Q64FV 8MB Network Local network wired connection Attached devices 1. Goodram 16GB USB stick 2. ASUS TPM-L R2.0 module (chip Infineon SLB9665 TT2.0) Power Supply 700 W ATX type power supply Power Control 1. Sonoff S20 switch 2. Goldpin cables (RTE <-> Board connection) Remote Testing Environment 1. RTE v1.0.0 (firmware v0.5.3 ) connected via RS232 2. Goldpin cables + qspimux (RTE <-> flash memory connection) TPM Infineon SLB9665 TT2.0 Standard testing procedure is performed on setup without TPM module. ASUS KGPE-D16 16MB Component Description Board revision 1.03G CPU AMD Opteron(TM) Processor 6282 SE CPU Cooler RAM DDR3 16GB Kingston KVR16R11D4/16 Flash memory Winbond W25Q128JV 16MB Network Local network wired connection Attached devices: 1. Goodram 16GB USB stick 2. ASUS TPM 1.2 Rev 1.02h module (chip Infineon SLB9635 TT 1.2) 3. Post Debug Card Power Supply 700 W ATX type power supply Power Control: 1. Sonoff S20 switch 2. Goldpin cables (RTE <-> Board connection) Remote Testing Environment 1. RTE v1.0.0 (firmware v0.5.3 ) connected via RS232 2. POMONA Clip + DIP8/SOIC8 adapter (RTE <-> flash memory connection) TPM Infineon SLB9635 TT1.2 Standard testing procedure is performed on setup without TPM module. ASUS KGPE-D16 board ports, slots, and connectors description is available in the manufacturer documentation (page 2-7).","title":"Hardware configuration matrix"},{"location":"variants/asus_kgpe_d16/hardware-matrix/#hardware-configuration-matrix","text":"This document describes the hardware configurations used for validation of the coreboot port on ASUS KGPE-D16 platforms.","title":"Hardware configuration matrix"},{"location":"variants/asus_kgpe_d16/hardware-matrix/#asus-kgpe-d16-8mb","text":"Component Description Board revision 1.03G CPU AMD Opteron(TM) Processor 6282 SE CPU Cooler RAM DDR3 16GB Kingston KVR16R11D4/16 Flash memory Winbond W25Q64FV 8MB Network Local network wired connection Attached devices 1. Goodram 16GB USB stick 2. ASUS TPM-L R2.0 module (chip Infineon SLB9665 TT2.0) Power Supply 700 W ATX type power supply Power Control 1. Sonoff S20 switch 2. Goldpin cables (RTE <-> Board connection) Remote Testing Environment 1. RTE v1.0.0 (firmware v0.5.3 ) connected via RS232 2. Goldpin cables + qspimux (RTE <-> flash memory connection) TPM Infineon SLB9665 TT2.0 Standard testing procedure is performed on setup without TPM module.","title":"ASUS KGPE-D16 8MB"},{"location":"variants/asus_kgpe_d16/hardware-matrix/#asus-kgpe-d16-16mb","text":"Component Description Board revision 1.03G CPU AMD Opteron(TM) Processor 6282 SE CPU Cooler RAM DDR3 16GB Kingston KVR16R11D4/16 Flash memory Winbond W25Q128JV 16MB Network Local network wired connection Attached devices: 1. Goodram 16GB USB stick 2. ASUS TPM 1.2 Rev 1.02h module (chip Infineon SLB9635 TT 1.2) 3. Post Debug Card Power Supply 700 W ATX type power supply Power Control: 1. Sonoff S20 switch 2. Goldpin cables (RTE <-> Board connection) Remote Testing Environment 1. RTE v1.0.0 (firmware v0.5.3 ) connected via RS232 2. POMONA Clip + DIP8/SOIC8 adapter (RTE <-> flash memory connection) TPM Infineon SLB9635 TT1.2 Standard testing procedure is performed on setup without TPM module. ASUS KGPE-D16 board ports, slots, and connectors description is available in the manufacturer documentation (page 2-7).","title":"ASUS KGPE-D16 16MB"},{"location":"variants/asus_kgpe_d16/initial-deployment/","text":"Initial deployment Initial deployment of Dasharo firmware on ASUS KGPE-D16 can be done: using DTS, manually. Initial deployment using DTS To ensure a smooth deployment process, it is recommended to use the latest version of DTS available from the releases page . Once you have obtained it, you can then proceed with following the Dasharo zero-touch initial deployment section procedure. This will help you set up Dasharo effectively and without manual intervention. Initial deployment manually Initial flashing of Dasharo firmware can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 20.04. Build flashrom Please follow generic guide for Dasharo flashrom fork . Reading flash contents Always prepare a backup of the current firmware image. To read from the flash and save it to a file ( backup.rom ), execute the following command: flashrom -p internal -r backup.rom Flashing Dasharo To flash Dasharo on the platform, execute the following command - replace [path] with the path to the Dasharo image you want to flash, e.g. asus_kgpe-d16_v0.3.0_2M_vboot_TPM1.2.rom . flashrom -p internal -w [ path ] This will flash the full image, including the Intel ME. The operation requires a hard reset of the platform. To perform a hard reset: Power off the platform. Note, it may not power off completely due to flashed ME. Disconnect power supply from the board when OS finishes all tasks after power off (the screen goes dark or black). The platform should power on normally now. You can connect the battery back if it was disconnected.","title":"Initial deployment"},{"location":"variants/asus_kgpe_d16/initial-deployment/#initial-deployment","text":"Initial deployment of Dasharo firmware on ASUS KGPE-D16 can be done: using DTS, manually.","title":"Initial deployment"},{"location":"variants/asus_kgpe_d16/initial-deployment/#initial-deployment-using-dts","text":"To ensure a smooth deployment process, it is recommended to use the latest version of DTS available from the releases page . Once you have obtained it, you can then proceed with following the Dasharo zero-touch initial deployment section procedure. This will help you set up Dasharo effectively and without manual intervention.","title":"Initial deployment using DTS"},{"location":"variants/asus_kgpe_d16/initial-deployment/#initial-deployment-manually","text":"Initial flashing of Dasharo firmware can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 20.04.","title":"Initial deployment manually"},{"location":"variants/asus_kgpe_d16/overview/","text":"Overview Releases - groups information about all releases. Building manual - describes how to build Dasharo for ASUS KGPE D-16. Initial deployment - describes initial Dasharo deployment methods (i. e. flashing new firmware) for ASUS KGPE D16. Firmware update - explains supported Dasharo open-source firmware update methods. Recovery - gathers information on how to recover the platform from potential failure. Hardware configuration matrix - describes the platform's hardware configuration used during the Dasharo firmware validation procedure. Test matrix - describes validation scope used during Dasharo firmware validation procedure. Fan Control - describes the method of testing the automatic fan control mechanism. Hardware Setup - describes the method of enabling external flashing for ASUS KGPE-D16. SPI write protection - describes the method of setting the write protection for flash chip on ASUS KGPE-D16. TPM measured boot - describes the measured boot behaviour on ASUS KGPE D-16.","title":"Overview"},{"location":"variants/asus_kgpe_d16/overview/#overview","text":"Releases - groups information about all releases. Building manual - describes how to build Dasharo for ASUS KGPE D-16. Initial deployment - describes initial Dasharo deployment methods (i. e. flashing new firmware) for ASUS KGPE D16. Firmware update - explains supported Dasharo open-source firmware update methods. Recovery - gathers information on how to recover the platform from potential failure. Hardware configuration matrix - describes the platform's hardware configuration used during the Dasharo firmware validation procedure. Test matrix - describes validation scope used during Dasharo firmware validation procedure. Fan Control - describes the method of testing the automatic fan control mechanism. Hardware Setup - describes the method of enabling external flashing for ASUS KGPE-D16. SPI write protection - describes the method of setting the write protection for flash chip on ASUS KGPE-D16. TPM measured boot - describes the measured boot behaviour on ASUS KGPE D-16.","title":"Overview"},{"location":"variants/asus_kgpe_d16/recovery/","text":"Recovery Prequisitions To proceed with the recovery procedurethe backup with the vendor firmware will be necessary eg. backup.rom . Backup file should be generated before making any changes in device flash chip according to documentation in Reading flash contents section. Internal flashing If platform is booting properly it's possible to recover vendor firmware using procedure described in Flashing Dasharo section, setting path to file with vendor firmware as [path] argument.","title":"Recovery"},{"location":"variants/asus_kgpe_d16/recovery/#recovery","text":"","title":"Recovery"},{"location":"variants/asus_kgpe_d16/recovery/#prequisitions","text":"To proceed with the recovery procedurethe backup with the vendor firmware will be necessary eg. backup.rom . Backup file should be generated before making any changes in device flash chip according to documentation in Reading flash contents section.","title":"Prequisitions"},{"location":"variants/asus_kgpe_d16/recovery/#internal-flashing","text":"If platform is booting properly it's possible to recover vendor firmware using procedure described in Flashing Dasharo section, setting path to file with vendor firmware as [path] argument.","title":"Internal flashing"},{"location":"variants/asus_kgpe_d16/releases/","text":"Release Notes Following Release Notes describe status of Open Source Firmware development for ASUS KGPE-D16. For details about our release process please read Dasharo Standard Release Process . Subscribe to Release Newsletter Feel free to contact us on our Matrix Dasharo space . Test results for this platform can be found here . v0.4.0 - 2022-09-12 Test results for this release can be found here . Changed ACPI cleanup Added missing PCI bridge initialization Fixed KGPE-D16 can not boot with a GPU connected Configs for platforms without TPM Bugs in DQS timing (kudos to Mike Rothfuss) Known issues Booting from recovery doesn't work Fan controller gets stuck at 100% FreeBSD serial output is broken Linux kernel panic on booting USB media Builds are not reproducible Binaries asus_kgpe-d16_v0.4.0_16M_vboot_notpm.rom sha256 sha256.sig asus_kgpe-d16_v0.4.0_16M_vboot_tpm12.rom sha256 sha256.sig asus_kgpe-d16_v0.4.0_16M_vboot_tpm2.rom sha256 sha256.sig asus_kgpe-d16_v0.4.0_8M_vboot_notpm.rom sha256 sha256.sig asus_kgpe-d16_v0.4.0_8M_vboot_tpm12.rom sha256 sha256.sig asus_kgpe-d16_v0.4.0_8M_vboot_tpm2.rom sha256 sha256.sig asus_kgpe-d16_v0.4.0_vboot_notpm.rom sha256 sha256.sig asus_kgpe-d16_v0.4.0_vboot_tpm12.rom sha256 sha256.sig asus_kgpe-d16_v0.4.0_vboot_tpm2.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on 03aef28f1613 revision cef95aaa SeaBIOS based on rel-1.14.0 revision 155821a1 v0.3.0 - 2021-12-16 Added TPM support vboot support (see how to sign and protect the image here ) build targets for vboot with measured boot using TPM 1.2 and TPM 2.0 Fixed cmos.layout being incorrectly mapped from RW CBFS during coreboot tables generation CC6 storage area being incorrectly included in cbmem top calculations ACPI DSDT LPC device name which caused TPM to be undetected by OS SPI controller driver sometimes dropping bytes sent/received through SPI FIFO Binaries 2MB vboot TPM 1.2 asus_kgpe-d16_v0.3.0_2M_vboot_TPM1.2.rom sha256 sha256.sig 2MB vboot TPM 2.0 asus_kgpe-d16_v0.3.0_2M_vboot_TPM2.0.rom sha256 sha256.sig 8MB vboot TPM 1.2 asus_kgpe-d16_v0.3.0_8M_vboot_TPM1.2.rom sha256 sha256.sig 8MB vboot TPM 2.0 asus_kgpe-d16_v0.3.0_8M_vboot_TPM2.0.rom sha256 sha256.sig 16MB vboot TPM 1.2 asus_kgpe-d16_v0.3.0_16M_vboot_TPM1.2.rom sha256 sha256.sig 16MB vboot TPM 2.0 asus_kgpe-d16_v0.3.0_16M_vboot_TPM2.0.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on 4.14 revision 67190bf SeaBIOS based on rel-1.14.0 revision 155821a1 iPXE based on 2019.3 revision ebf2eaf5 nvramcui based on 4.14 revision f1d1309f v0.2.0 - 2021-12-9 Added coreboot resource allocator v4 support Nuvoton W83795 HW monitor driver automatic fan control with W83795 platform and silicon ramstage support 2MB, 8MB and 16MB SPI flash targets SeaBIOS, iPXE and nvramcui payloads Binaries 2MB target asus_kgpe-d16_v0.2.0_2M.rom sha256 sha256.sig 8MB target asus_kgpe-d16_v0.2.0_8M.rom sha256 sha256.sig 16MB target asus_kgpe-d16_v0.2.0_16M.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on 4.14 revision 63b7cbc1 SeaBIOS based on rel-1.14.0 revision 155821a1 iPXE based on 2019.3 revision ebf2eaf5 nvramcui based on 4.14 revision 63b7cbc1 v0.1.0 - 2021-11-10 Added C bootblock support postcar stage and no CAR global migration support separated chipset and mainboard code put non-mainboard specific romstage initialization to northirdge support for relocatable ramstage with caching in CBMEM Binaries asus_kgpe-d16_v0.1.0.rom asus_kgpe-d16_v0.1.0.rom.sha256 asus_kgpe-d16_v0.1.0.rom.sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on 03aef28 revision e6af2206","title":"Releases"},{"location":"variants/asus_kgpe_d16/releases/#release-notes","text":"Following Release Notes describe status of Open Source Firmware development for ASUS KGPE-D16. For details about our release process please read Dasharo Standard Release Process . Subscribe to Release Newsletter Feel free to contact us on our Matrix Dasharo space . Test results for this platform can be found here .","title":"Release Notes"},{"location":"variants/asus_kgpe_d16/releases/#v040-2022-09-12","text":"Test results for this release can be found here .","title":"v0.4.0 - 2022-09-12"},{"location":"variants/asus_kgpe_d16/releases/#v030-2021-12-16","text":"","title":"v0.3.0 - 2021-12-16"},{"location":"variants/asus_kgpe_d16/releases/#v020-2021-12-9","text":"","title":"v0.2.0 - 2021-12-9"},{"location":"variants/asus_kgpe_d16/releases/#v010-2021-11-10","text":"","title":"v0.1.0 - 2021-11-10"},{"location":"variants/asus_kgpe_d16/setup/","text":"RTE v.0.5.3 with ASUS KGPE-D16 connection Power supply Power to the Asus KGPE-D16 is delivered by a common PC power supply. Simply connect the power supply to ATX compatible connectors on the mainboard (SSIPWR1, SSI12V1, SSI12V2). SPI BIOS SPI flash is a socketed DIP-8. There is no simple way to attach to it with any tools. That is why we have thought about the qspimux made by Felix Held which can attach to various SPI modules footprints and sockets. The DIP-8 adapter is put into the DIP-8 socket on the mainboard, which allows attaching the qspimux SPI multiplexer. The multiplexer is responsible for switching between the external SPI lines and the mainboard lines routed to the external SPI flash chip. The external flash chip is soldered on a SOIC8 adapter, which is connected to the qspimux. The connection of the RTE and qspimux is as follows: RTE header J7 pin qspimux J101 pin 1 (VCC) 2 (VCC_PROG) 2 (GND) 7 (GND) 3 (CS) 1 (CS_PROG#) 4 (SCLK) 6 (CLK_PROG) 5 (MISO) 8 (IO0_DI_PROG) 6 (MOSI) 3 (IO1_DO_PROG) 7 (NC) Not connected 8 (NC) Not connected Additionally, one has to tie the IO3_HOLD_PROG (qspimux pin 4) high, so connect it to the 3.3V permanently. Another additional GPIO is required to control the routing of SPI lines. The MUX_SEL (qspimux pin 9) decides whether the programmer is allowed to access the SPI flash or the mainboard. One more GPIO is used to control state of #WP of the flash chip by connecting GPIO to IO2_WP_PROG. The proposed connections used: RTE GPIO400 to control MUX_SEL RTE GPIO401 to control IO3_HOLD_PROG RTE GPIO402 to control IO2_WP_PROG Simple flashing script looks as follows: # select flash <-> programmer echo \"0\" > /sys/class/gpio/gpio400/value # deassert SPI HOLD# echo \"1\" > /sys/class/gpio/gpio401/value flashrom -w firmware.bin -p linux_spi:dev = /dev/spidev1.0,spispeed = 16000 # select flash <-> board echo \"1\" > /sys/class/gpio/gpio400/value Controlling state of #WP: # configure direction of the pin echo \"out\" > /sys/class/gpio/gpio402/direction # deassert WP pin to disable hardware protection of status registers echo \"1\" > /sys/class/gpio/gpio402/value # assert WP pin to enable hardware protection of status registers echo \"0\" > /sys/class/gpio/gpio402/value RTE header J10 pin qspimux J101 pin 1 (GPIO400) 9 (MUX_SEL) 2 (GPIO401) 4 (IO3_HOLD_PROG) 3 (GPIO402) 5 (IO2_WP_PROG) qspimux schematic is available here Serial Asus KGPE-D16 has a DB9 serial connector for the debug UART. Connect it to the RTE via RS232 DB9 cable. TPM Asus KGPE-D16 has an LPC header for TPM or debugging. Since there is no other option to connect a TPM, we use the header for that purpose. IMPORTANT: Use only TPM modules which match their pinout with the board's header! Using a spider web connection degrades the signal quality to the point where CPU cannot properly talk to TPM via LPC bus. Tested with PC Engines TPM module and failed to succeed this way. Designing and producing proper TPM header and/or reliable adapter, could solve this problem. The TwPM project could help here in the future. TPM modules that were tested and verified to work in 3mdeb lab with coreboot: ASUS TPM-L R2.0 module (chip Infineon SLB9665 TT 2.0) ASUS TPM 1.2 Rev 1.02h module (chip Infineon SLB9635 TT 1.2) Power management Asus KGPE-D16 provides a front panel pin header (PANEL1): RTE header J11 pin Asus KGPE-D16 8 (OC buffer output) PANEL1 pin 11 (PWR) 9 (OC buffer output) PANEL1 pin 17 (RESET) Additionally, connect one of the PANEL1 ground pins to one of the ground pins on RTE. Manunal For more details about the KGPE-D16, refer to the manual . Theory of operation Flashing There are two RTEs connected to two Asus KGPE-D16 boards: 192.168.20.15 192.168.4.111 Both boards are equipped with the qspimux and a replaced flash chip (Winbond W25Q64FV 8MB). The flash chip is attached to the qspimux with an adapter available with qspimux. Flashing may be done via the commands shown earlier or the flash script which is present in the root directory of the RTE: ./flash.sh coreboot.rom The script will automatically power off the board and update flash chip contents using flashrom. After the operation is finished the routing of SPI signals is restored to the platform. The flash chip adapter In order to provide an easy way to protect the SPI flash chip one may use a DIP-8 to SOIC-8 adapter with a special long pin header for WP pin jumper. It allows to use a SOIC-8 packaged flash in the DIP-8 socket and easily place a jumper to protect the flash. In order to assembly the adapter you will need the target SPI flash chip (we use either Winbond W25Q64FV (8MB) or W25Q128JV (16MB)), male pin headers 2.54 mm pitch (6 pins) male long pin headers 2.54 mm pitch (2 pins) for the WP jumper SOIC-8 to DIP-8 adapter soldering station and the solder The build shall look like this: Such adapters are now available in our online shop for purchase. For more details how to enable SPI flash protection refer to SPI Flash protection page . Power management RTE can control the power of the board with the RteCtrl command-line application, or with the web GUI ( RteCtrl ) available at RTE's IP address port 8000. Possible commands are: ./RteCtrl -pon # power on the platform ./RteCtrl -poff # force 5seconds power button power off ./RteCtrl -reset # briefly assert platform reset pin to perform reset It is also possible to control the ATX power supply by disconnecting it from the power socket. For this special purpose, Sonoff S20 is used to remotely control the power socket activity. Sonoff IP to RTE IP mapping: RTE IP 192.168.20.15 - Sonoff IP 192.168.4.125 RTE IP 192.168.4.111 - Sonoff IP 192.168.4.146 Sonoffs respond to rest API requests to enable or disable the power socket. Shell scripts have been added to RTE root directories to ease the control of power of the KGPE-D16 platform: #!/bin/bash SONOFF_IP = 192 .168.4.125 if [[ \" $1 \" == \"off\" ]] ; then wget -q -O - http:// $SONOFF_IP /switch/sonoff_s20_relay/turn_off --method = POST elif [[ \" $1 \" == \"on\" ]] ; then wget -q -O - http:// $SONOFF_IP /switch/sonoff_s20_relay/turn_on --method = POST elif [[ \" $1 \" == \"show\" ]] ; then wget -q -O - http:// $SONOFF_IP /switch/sonoff_s20_relay echo -e '\\n' else echo -e \"\\$1 == on|off|show|toggle\\nEdit this script to set the sonoff ip.\" echo -e 'Current state:' wget -q -O - http:// $SONOFF_IP /switch/sonoff_s20_relay echo -e '\\n' fi To turn off the power from the platform ./sonoff.sh off and to turn it on ./sonoff.sh on . Invoking the script without any argument will print the current state of the switch. Serial console access A serial port is very useful in debugging and as a remote console of the system on the platform. The serial port of KGPE-D16 is connected to the RTE's serial port which can be accessed on RTE with /dev/ttyS1 . One may use minicom directly or take advantage of the ser2net service running on RTE which exposes the serial port over the network. The serial port can be accessed remotely like this telnet RTE_IP 13541 , e.g.: telnet 192 .168.20.15 13541 Demo A short demo presenting RTE capabilities with KGPE-D16: Remote access If you are interested in developing coreboot on KGPE-D16 and have some spare time, there is a possibility to obtain access to the hardware. Drop us an email to leads@3mdeb.com with a request. Newsletter If you are interested in this project, you can subscribe to the Dasharo KGPE-D16 Newsletter . If you are interested in the Dasharo in general, you are welcome to subscribe to the Dasharo Newsletter . Gallery","title":"Hardware setup"},{"location":"variants/asus_kgpe_d16/setup/#rte-v053-with-asus-kgpe-d16-connection","text":"","title":"RTE v.0.5.3 with ASUS KGPE-D16 connection"},{"location":"variants/asus_kgpe_d16/setup/#power-supply","text":"Power to the Asus KGPE-D16 is delivered by a common PC power supply. Simply connect the power supply to ATX compatible connectors on the mainboard (SSIPWR1, SSI12V1, SSI12V2).","title":"Power supply"},{"location":"variants/asus_kgpe_d16/setup/#spi","text":"BIOS SPI flash is a socketed DIP-8. There is no simple way to attach to it with any tools. That is why we have thought about the qspimux made by Felix Held which can attach to various SPI modules footprints and sockets. The DIP-8 adapter is put into the DIP-8 socket on the mainboard, which allows attaching the qspimux SPI multiplexer. The multiplexer is responsible for switching between the external SPI lines and the mainboard lines routed to the external SPI flash chip. The external flash chip is soldered on a SOIC8 adapter, which is connected to the qspimux. The connection of the RTE and qspimux is as follows: RTE header J7 pin qspimux J101 pin 1 (VCC) 2 (VCC_PROG) 2 (GND) 7 (GND) 3 (CS) 1 (CS_PROG#) 4 (SCLK) 6 (CLK_PROG) 5 (MISO) 8 (IO0_DI_PROG) 6 (MOSI) 3 (IO1_DO_PROG) 7 (NC) Not connected 8 (NC) Not connected Additionally, one has to tie the IO3_HOLD_PROG (qspimux pin 4) high, so connect it to the 3.3V permanently. Another additional GPIO is required to control the routing of SPI lines. The MUX_SEL (qspimux pin 9) decides whether the programmer is allowed to access the SPI flash or the mainboard. One more GPIO is used to control state of #WP of the flash chip by connecting GPIO to IO2_WP_PROG. The proposed connections used: RTE GPIO400 to control MUX_SEL RTE GPIO401 to control IO3_HOLD_PROG RTE GPIO402 to control IO2_WP_PROG Simple flashing script looks as follows: # select flash <-> programmer echo \"0\" > /sys/class/gpio/gpio400/value # deassert SPI HOLD# echo \"1\" > /sys/class/gpio/gpio401/value flashrom -w firmware.bin -p linux_spi:dev = /dev/spidev1.0,spispeed = 16000 # select flash <-> board echo \"1\" > /sys/class/gpio/gpio400/value Controlling state of #WP: # configure direction of the pin echo \"out\" > /sys/class/gpio/gpio402/direction # deassert WP pin to disable hardware protection of status registers echo \"1\" > /sys/class/gpio/gpio402/value # assert WP pin to enable hardware protection of status registers echo \"0\" > /sys/class/gpio/gpio402/value RTE header J10 pin qspimux J101 pin 1 (GPIO400) 9 (MUX_SEL) 2 (GPIO401) 4 (IO3_HOLD_PROG) 3 (GPIO402) 5 (IO2_WP_PROG) qspimux schematic is available here","title":"SPI"},{"location":"variants/asus_kgpe_d16/setup/#serial","text":"Asus KGPE-D16 has a DB9 serial connector for the debug UART. Connect it to the RTE via RS232 DB9 cable.","title":"Serial"},{"location":"variants/asus_kgpe_d16/setup/#tpm","text":"Asus KGPE-D16 has an LPC header for TPM or debugging. Since there is no other option to connect a TPM, we use the header for that purpose. IMPORTANT: Use only TPM modules which match their pinout with the board's header! Using a spider web connection degrades the signal quality to the point where CPU cannot properly talk to TPM via LPC bus. Tested with PC Engines TPM module and failed to succeed this way. Designing and producing proper TPM header and/or reliable adapter, could solve this problem. The TwPM project could help here in the future. TPM modules that were tested and verified to work in 3mdeb lab with coreboot: ASUS TPM-L R2.0 module (chip Infineon SLB9665 TT 2.0) ASUS TPM 1.2 Rev 1.02h module (chip Infineon SLB9635 TT 1.2)","title":"TPM"},{"location":"variants/asus_kgpe_d16/setup/#power-management","text":"Asus KGPE-D16 provides a front panel pin header (PANEL1): RTE header J11 pin Asus KGPE-D16 8 (OC buffer output) PANEL1 pin 11 (PWR) 9 (OC buffer output) PANEL1 pin 17 (RESET) Additionally, connect one of the PANEL1 ground pins to one of the ground pins on RTE.","title":"Power management"},{"location":"variants/asus_kgpe_d16/setup/#manunal","text":"For more details about the KGPE-D16, refer to the manual .","title":"Manunal"},{"location":"variants/asus_kgpe_d16/setup/#demo","text":"A short demo presenting RTE capabilities with KGPE-D16:","title":"Demo"},{"location":"variants/asus_kgpe_d16/setup/#newsletter","text":"If you are interested in this project, you can subscribe to the Dasharo KGPE-D16 Newsletter . If you are interested in the Dasharo in general, you are welcome to subscribe to the Dasharo Newsletter .","title":"Newsletter"},{"location":"variants/asus_kgpe_d16/setup/#gallery","text":"","title":"Gallery"},{"location":"variants/asus_kgpe_d16/spi-wp/","text":"SPI hardware write protection In order to from a Root of Trust in the firmware, e.g. in the immutable piece of firmware code for Static Root of Trust of Measurement one has to ensure the protection of this piece of code. One may achieve it by enabling Intel Boot Guard or AMD Platform Secure Boot. However these technologies may into always be available. In such case SPI hardware write protection becomes handy. Thanks to the patchset implementing write protection and OTP support in flashrom one can easily set the SPI write protection of the platform from the operating system user space. This page explain how to build the flashrom with WP and OTP support and use to to protect the coreboot's bootblock to form SRTM. Building flashrom In order to build flashrom we will need some packages and librares. For Debian based distros execute: sudo apt-get install git make binutils build-essential ca-certificates \\ libpci-dev libftdi-dev libusb-1.0-0-dev Now clone the flashrom repository and fetch the patchset: git clone https://github.com/flashrom/flashrom cd flashrom git fetch https://review.coreboot.org/flashrom refs/changes/13/59713/7 && \\ git checkout FETCH_HEAD Build flashrom: make The freshly built flashrom will be present in root directory of the repository. Flashrom write protection CLI Invoke the following command to see a list of available options for flashrom: ./flashrom --help flashrom v1.2-585-g3542afe on Linux 5 .10.0-9-amd64 ( x86_64 ) flashrom is free software, get the source code at https://flashrom.org Usage: ./flashrom [ -h | -R | -L | -p <programmername> [ :<parameters> ] [ -c <chipname> ] ( --flash-name | --flash-size | [ -E | -x | ( -r | -w | -v ) <file> ] [( -l <layoutfile> | --ifd | --fmap | --fmap-file <file> ) [ -i <region> [ :<file> ]] ... ] [ -n ] [ -N ] [ -f ])] [ -V [ V [ V ]]] [ -o <logfile> ] -h | --help print this help text -R | --version print version ( release ) -r | --read <file> read flash and save to <file> -w | --write <file | -> write <file> or the content provided on the standard input to flash -v | --verify <file | -> verify flash against <file> or the content provided on the standard input -E | --erase erase flash memory -V | --verbose more verbose output -c | --chip <chipname> probe only for specified flash chip -f | --force force specific operations ( see man page ) -n | --noverify don ' t auto-verify -N | --noverify-all verify included regions only ( cf. -i ) -x | --extract extract regions to files -l | --layout <layoutfile> read ROM layout from <layoutfile> --wp-disable disable write protection --wp-enable enable write protection --wp-list list supported write protection ranges --wp-status show write protection status --wp-range = <start>,<len> set write protection range ( use --wp-range = 0 ,0 to unprotect the entire flash ) --wp-region <region> set write protection region --otp-status print information about OTP regions --otp-region <otp-region> OTP region number ( base 1 ) to operate on --otp-read <file> read OTP region and save it to <file> --otp-write <file> write <file> to OTP region --otp-erase erase OTP region --otp-lock lock OTP region --flash-name read out the detected flash name --flash-size read out the detected flash size --fmap read ROM layout from fmap embedded in ROM --fmap-file <fmapfile> read ROM layout from fmap in <fmapfile> --ifd read layout from an Intel Firmware Descriptor -i | --image <region> [ :<file> ] only read/write image <region> from layout ( optionally with data from <file> ) -o | --output <logfile> log output to <logfile> --flash-contents <ref-file> assume flash contents to be <ref-file> -L | --list-supported print supported devices -p | --programmer <name> [ :<param> ] specify the programmer device. One of internal, dummy, nic3com, nicrealtek, gfxnvidia, raiden_debug_spi, drkaiser, satasii, atavia, it8212, ft2232_spi, serprog, buspirate_spi, dediprog, developerbox, rayer_spi, pony_spi, nicintel, nicintel_spi, nicintel_eeprom, ogp_spi, satamv, linux_mtd, linux_spi, usbblaster_spi, pickit2_spi, ch341a_spi, digilent_spi, stlinkv3_spi. You can specify one of -h, -R, -L, -E, -r, -w, -v or no operation. If no operation is specified, flashrom will only probe for flash chips. We will use only a few of those options to set the protection on the coreboot's bootblock. We protect the bootblock only, since it is the stage responsible for measurements and verification of next stages. Setting flash protection using flashrom NOTE: be sure to update the firmware first before proceeding! Estimating bootblock size and protection range First let's see how much space we need to protect. Take your coreboot.rom file and use cbfstool to show its contents: cd /path/to/coreboot/build ./cbfstool coreboot.rom print FMAP REGION: COREBOOT Name Offset Type Size Comp cbfs master header 0x0 cbfs header 32 none fallback/romstage 0x80 stage 171040 none fallback/ramstage 0x29d40 stage 98703 LZMA ( 229532 decompressed ) config 0x41f40 raw 709 none revision 0x42240 raw 723 none build_info 0x42540 raw 101 none fallback/dsdt.aml 0x42600 raw 7055 none cmos.default 0x441c0 cmos_default 256 none cmos_layout.bin 0x44300 cmos_layout 3676 none fallback/postcar 0x451c0 stage 21216 none img/nvramcui 0x4a500 simple elf 70630 none fallback/payload 0x5b940 simple elf 69936 none payload_config 0x6cac0 raw 1621 none payload_revision 0x6d140 raw 237 none pci8086,10d3.rom 0x6d280 raw 82944 none etc/sercon-port 0x816c0 raw 8 none ( empty ) 0x81700 null 8128932 none bootblock 0xffcac0 bootblock 13056 none The bootblock is taking slightly more than 12KB of space on the bottom of the flash. Converting 12KB to hex would be equal to 0x3000 but we must cover a little bit more than that. Let's see what protection ranges are available for the chip (running from the tagret machine to be protected): ./flashrom -p internal --wp-list ... Available write protection ranges: start = 0x00000000 length = 0x00000000 ( none ) start = 0x00000000 length = 0x00001000 ( lower 1 /2048 ) start = 0x007ff000 length = 0x00001000 ( upper 1 /2048 ) start = 0x00000000 length = 0x00002000 ( lower 1 /1024 ) start = 0x007fe000 length = 0x00002000 ( upper 1 /1024 ) start = 0x00000000 length = 0x00004000 ( lower 1 /512 ) start = 0x007fc000 length = 0x00004000 ( upper 1 /512 ) start = 0x00000000 length = 0x00008000 ( lower 1 /256 ) start = 0x007f8000 length = 0x00008000 ( upper 1 /256 ) start = 0x00000000 length = 0x00020000 ( lower 1 /64 ) start = 0x007e0000 length = 0x00020000 ( upper 1 /64 ) start = 0x00000000 length = 0x00040000 ( lower 1 /32 ) start = 0x007c0000 length = 0x00040000 ( upper 1 /32 ) start = 0x00000000 length = 0x00080000 ( lower 1 /16 ) start = 0x00780000 length = 0x00080000 ( upper 1 /16 ) start = 0x00000000 length = 0x00100000 ( lower 1 /8 ) start = 0x00700000 length = 0x00100000 ( upper 1 /8 ) start = 0x00000000 length = 0x00200000 ( lower 1 /4 ) start = 0x00600000 length = 0x00200000 ( upper 1 /4 ) start = 0x00000000 length = 0x00400000 ( lower 1 /2 ) start = 0x00400000 length = 0x00400000 ( upper 1 /2 ) start = 0x00000000 length = 0x00600000 ( lower 3 /4 ) start = 0x00200000 length = 0x00600000 ( upper 3 /4 ) start = 0x00000000 length = 0x00700000 ( lower 7 /8 ) start = 0x00100000 length = 0x00700000 ( upper 7 /8 ) start = 0x00000000 length = 0x00780000 ( lower 15 /16 ) start = 0x00080000 length = 0x00780000 ( upper 15 /16 ) start = 0x00000000 length = 0x007c0000 ( lower 31 /32 ) start = 0x00040000 length = 0x007c0000 ( upper 31 /32 ) start = 0x00000000 length = 0x007e0000 ( lower 63 /64 ) start = 0x00020000 length = 0x007e0000 ( upper 63 /64 ) start = 0x00000000 length = 0x007f8000 ( lower 255 /256 ) start = 0x00008000 length = 0x007f8000 ( upper 255 /256 ) start = 0x00000000 length = 0x007fc000 ( lower 511 /512 ) start = 0x00004000 length = 0x007fc000 ( upper 511 /512 ) start = 0x00000000 length = 0x007fe000 ( lower 1023 /1024 ) start = 0x00002000 length = 0x007fe000 ( upper 1023 /1024 ) start = 0x00000000 length = 0x007ff000 ( lower 2047 /2048 ) start = 0x00001000 length = 0x007ff000 ( upper 2047 /2048 ) start = 0x00000000 length = 0x00800000 ( all ) The output abvoe comes from Winbond W25Q64FV, a 8MB chip. Bootblock is always mapped to the bottom of the flash. 1MB is equal to 0x100000 so 8MB would be 0x800000. We need at least 0x4000 (16KB) to be protected starting at the bottom of the flash. And fortunately we have found our best match: start=0x007fc000 length=0x00004000 (upper 1/512) . Clearing SPI write protection Now that we have selected the desired range to protect, it is time to check the current protection status: ./flashrom -p internal --wp-status ... WP config bits: SRP1 = 0 SRP0 = 0 CMP = 0 SEC = 0 TB = 0 BP2 = 0 BP1 = 0 BP0 = 0 Protection range: start = 0x00000000 length = 0x00000000 ( none ) Protection mode: disabled The protection range should be set to zeros and all WP config bits should be cleared. If you see some bits were not cleared, ensure the WP pin jumper on the flash is not placed and invoke: ./flashrom -p internal --wp-disable ./flashrom -p internal --wp-range = 0 ,0 now that we have a clear state of the flash protection we may proceed with enabling the right range. Setting protection range Copy the range base and length and invoke: ./flashrom -p internal --wp-range = 0x007fc000,0x00004000 Setting SPI status register protection Flashrom should report Sucessfully set the requested protection range. . Now set the status register protection so the range protection cannot be changed: ./flashrom -p internal --wp-enable Flashrom should report Sucessfully set the requested mode. . Verifying SPI write protection To check whether the settings are desired invoke: ./flashrom -p internal --wp-status ... WP config bits: SRP1 = 0 SRP0 = 1 CMP = 0 SEC = 1 TB = 0 BP2 = 0 BP1 = 1 BP0 = 1 Protection range: start = 0x007fc000 length = 0x00004000 ( upper 1 /512 ) Protection mode: hardware If it matches what you have wanted to set it is time to lock the status register protection bit (SRP0) from being changed. SRP0 protects the CMP, SEC, TB and BPx bits from being changed. In order to lock the SRP0 bit you have to place the jumper on the WP pin and tie it to ground (GND). This will assert the WP pin and prevent any WP config bits from being changed. To verify it invoke: ./flashrom -p internal --wp-disable ... Writing new WP configuration failed during verification: Expected configuration: SRP1 = 0 SRP0 = 0 CMP = 0 SEC = 1 TB = 0 BP2 = 0 BP1 = 1 BP0 = 1 Actual configuration: SRP1 = 0 SRP0 = 1 CMP = 0 SEC = 1 TB = 0 BP2 = 0 BP1 = 1 BP0 = 1 You should get the above result. Changing the protection range Now if you want to reprogram the protection range, you need to take off the jumper and invoke: ./flashrom -p internal --wp-disable Now you should get Sucessfully set the requested mode. now. Check the WP status: WP config bits: SRP1 = 0 SRP0 = 0 CMP = 0 SEC = 1 TB = 0 BP2 = 0 BP1 = 1 BP0 = 1 Protection range: start = 0x007fc000 length = 0x00004000 ( upper 1 /512 ) Protection mode: disabled It must indicate Protection mode: disabled . Now you may reconfigure the range, e.g. ./flashrom -p internal --wp-range = 0x007e0000,0x00020000 And proceed with enabling protection and setting back the jumper. Setting flash protection for vboot In case when vboot is enabled the protection range must be extended in order to cover other parts of the firmware. Vboot model assumes there is a read-only copy of the coreboot and payload called recovery partition. The recovery partition is supposed to be protected with a SPI write protection. The read-only region contains the bootblock, verstage (vboot stage used to verify other firmware components) and vboot keys and all other stages required to boot the platform in case of emergency. Typically the read-only partition occupies a space that matches the possible write protected regions of the flash chip. There are also read-write partitions (up to 2) that contain an updatable copies of the coreboot and payload. Unlike read-only partitions, read-write partitions are being verified using the signatures put into the read-write partitions. vboot checks the signature and decides whether read-write partition is safe to boot, otherwise it proceeds with execution of recovery firmware. The boot flow is shown on the diagram below: In order to properly protect the firmware, one has to lock whole WP_RO region define by flashmap in coreboot. To locate the region offset and size one has to use cbfstool to retrieve layout: cd /path/to/coreboot/build ./cbfstool coreboot.rom layout -w This image contains the following sections that can be accessed with this tool: 'RW_MISC' ( read-only, size 524288 , offset 0 ) 'UNIFIED_MRC_CACHE' ( read-only, size 131072 , offset 0 ) 'RECOVERY_MRC_CACHE' ( size 65536 , offset 0 ) 'RW_MRC_CACHE' ( size 65536 , offset 65536 ) 'SMMSTORE' ( preserve, size 262144 , offset 131072 ) 'CONSOLE' ( size 131072 , offset 393216 ) 'RW_NVRAM' ( size 16384 , offset 524288 ) 'RW_SECTION_A' ( read-only, size 5750784 , offset 540672 ) 'VBLOCK_A' ( size 8192 , offset 540672 ) 'FW_MAIN_A' ( CBFS, size 5742528 , offset 548864 ) 'RW_FWID_A' ( size 64 , offset 6291392 ) 'WP_RO' ( read-only, size 2097152 , offset 6291456 ) 'RO_VPD' ( preserve, size 16384 , offset 6291456 ) 'RO_SECTION' ( read-only, size 2080768 , offset 6307840 ) 'FMAP' ( read-only, size 2048 , offset 6307840 ) 'RO_FRID' ( size 64 , offset 6309888 ) 'RO_FRID_PAD' ( size 1984 , offset 6309952 ) 'GBB' ( size 16384 , offset 6311936 ) 'COREBOOT' ( CBFS, size 2060288 , offset 6328320 ) It is at least possible to perform the read action on every section listed above. The above example shows the KGPE-D16 8MB target with vboot enabled. The WP_RO section is at offset of 6291456 bytes from the beginning of the flash and has size of 2097152 bytes. These numbers are in decimal, so one must convert them to hex. Either use an online hex converter or use the command in bash like a pro :) printf \"0x%x\\n\" 6291456 0x600000 printf \"0x%x\\n\" 2097152 0x200000 So our WP range would be 2MB at 6MB offset start=0x00600000 length=0x00200000 (upper 1/4) . But before proceeding with setting the WP range, one may want to sign the firmware with own vboot keys. The Dasharo build come by default with Google vboot developer keys, so to take advantage of vboot, one should sign the binary before flashing and setting the WP range. Refer to vboot signing . Unfortunately the utilities support only 2 RW partitions for resiging. Otherwise a whole image must be rebuilt. After custo mkeys have been used to sign the ifmrware image and the image has been flashed proceed with enalbing the protection: ./flashrom -p internal --wp-range = 0x00600000,0x00200000 Then proceed with Setting SPI status register protection and Verifying SPI write protection . At this point you should have your coreboot firmware with vboot well protected and ready to go. Place the jumper in order to prevent any changes to the configuration.","title":"SPI write protection"},{"location":"variants/asus_kgpe_d16/spi-wp/#spi-hardware-write-protection","text":"In order to from a Root of Trust in the firmware, e.g. in the immutable piece of firmware code for Static Root of Trust of Measurement one has to ensure the protection of this piece of code. One may achieve it by enabling Intel Boot Guard or AMD Platform Secure Boot. However these technologies may into always be available. In such case SPI hardware write protection becomes handy. Thanks to the patchset implementing write protection and OTP support in flashrom one can easily set the SPI write protection of the platform from the operating system user space. This page explain how to build the flashrom with WP and OTP support and use to to protect the coreboot's bootblock to form SRTM.","title":"SPI hardware write protection"},{"location":"variants/asus_kgpe_d16/spi-wp/#building-flashrom","text":"In order to build flashrom we will need some packages and librares. For Debian based distros execute: sudo apt-get install git make binutils build-essential ca-certificates \\ libpci-dev libftdi-dev libusb-1.0-0-dev Now clone the flashrom repository and fetch the patchset: git clone https://github.com/flashrom/flashrom cd flashrom git fetch https://review.coreboot.org/flashrom refs/changes/13/59713/7 && \\ git checkout FETCH_HEAD Build flashrom: make The freshly built flashrom will be present in root directory of the repository.","title":"Building flashrom"},{"location":"variants/asus_kgpe_d16/spi-wp/#flashrom-write-protection-cli","text":"Invoke the following command to see a list of available options for flashrom: ./flashrom --help flashrom v1.2-585-g3542afe on Linux 5 .10.0-9-amd64 ( x86_64 ) flashrom is free software, get the source code at https://flashrom.org Usage: ./flashrom [ -h | -R | -L | -p <programmername> [ :<parameters> ] [ -c <chipname> ] ( --flash-name | --flash-size | [ -E | -x | ( -r | -w | -v ) <file> ] [( -l <layoutfile> | --ifd | --fmap | --fmap-file <file> ) [ -i <region> [ :<file> ]] ... ] [ -n ] [ -N ] [ -f ])] [ -V [ V [ V ]]] [ -o <logfile> ] -h | --help print this help text -R | --version print version ( release ) -r | --read <file> read flash and save to <file> -w | --write <file | -> write <file> or the content provided on the standard input to flash -v | --verify <file | -> verify flash against <file> or the content provided on the standard input -E | --erase erase flash memory -V | --verbose more verbose output -c | --chip <chipname> probe only for specified flash chip -f | --force force specific operations ( see man page ) -n | --noverify don ' t auto-verify -N | --noverify-all verify included regions only ( cf. -i ) -x | --extract extract regions to files -l | --layout <layoutfile> read ROM layout from <layoutfile> --wp-disable disable write protection --wp-enable enable write protection --wp-list list supported write protection ranges --wp-status show write protection status --wp-range = <start>,<len> set write protection range ( use --wp-range = 0 ,0 to unprotect the entire flash ) --wp-region <region> set write protection region --otp-status print information about OTP regions --otp-region <otp-region> OTP region number ( base 1 ) to operate on --otp-read <file> read OTP region and save it to <file> --otp-write <file> write <file> to OTP region --otp-erase erase OTP region --otp-lock lock OTP region --flash-name read out the detected flash name --flash-size read out the detected flash size --fmap read ROM layout from fmap embedded in ROM --fmap-file <fmapfile> read ROM layout from fmap in <fmapfile> --ifd read layout from an Intel Firmware Descriptor -i | --image <region> [ :<file> ] only read/write image <region> from layout ( optionally with data from <file> ) -o | --output <logfile> log output to <logfile> --flash-contents <ref-file> assume flash contents to be <ref-file> -L | --list-supported print supported devices -p | --programmer <name> [ :<param> ] specify the programmer device. One of internal, dummy, nic3com, nicrealtek, gfxnvidia, raiden_debug_spi, drkaiser, satasii, atavia, it8212, ft2232_spi, serprog, buspirate_spi, dediprog, developerbox, rayer_spi, pony_spi, nicintel, nicintel_spi, nicintel_eeprom, ogp_spi, satamv, linux_mtd, linux_spi, usbblaster_spi, pickit2_spi, ch341a_spi, digilent_spi, stlinkv3_spi. You can specify one of -h, -R, -L, -E, -r, -w, -v or no operation. If no operation is specified, flashrom will only probe for flash chips. We will use only a few of those options to set the protection on the coreboot's bootblock. We protect the bootblock only, since it is the stage responsible for measurements and verification of next stages.","title":"Flashrom write protection CLI"},{"location":"variants/asus_kgpe_d16/spi-wp/#setting-flash-protection-using-flashrom","text":"NOTE: be sure to update the firmware first before proceeding!","title":"Setting flash protection using flashrom"},{"location":"variants/asus_kgpe_d16/spi-wp/#setting-flash-protection-for-vboot","text":"In case when vboot is enabled the protection range must be extended in order to cover other parts of the firmware. Vboot model assumes there is a read-only copy of the coreboot and payload called recovery partition. The recovery partition is supposed to be protected with a SPI write protection. The read-only region contains the bootblock, verstage (vboot stage used to verify other firmware components) and vboot keys and all other stages required to boot the platform in case of emergency. Typically the read-only partition occupies a space that matches the possible write protected regions of the flash chip. There are also read-write partitions (up to 2) that contain an updatable copies of the coreboot and payload. Unlike read-only partitions, read-write partitions are being verified using the signatures put into the read-write partitions. vboot checks the signature and decides whether read-write partition is safe to boot, otherwise it proceeds with execution of recovery firmware. The boot flow is shown on the diagram below: In order to properly protect the firmware, one has to lock whole WP_RO region define by flashmap in coreboot. To locate the region offset and size one has to use cbfstool to retrieve layout: cd /path/to/coreboot/build ./cbfstool coreboot.rom layout -w This image contains the following sections that can be accessed with this tool: 'RW_MISC' ( read-only, size 524288 , offset 0 ) 'UNIFIED_MRC_CACHE' ( read-only, size 131072 , offset 0 ) 'RECOVERY_MRC_CACHE' ( size 65536 , offset 0 ) 'RW_MRC_CACHE' ( size 65536 , offset 65536 ) 'SMMSTORE' ( preserve, size 262144 , offset 131072 ) 'CONSOLE' ( size 131072 , offset 393216 ) 'RW_NVRAM' ( size 16384 , offset 524288 ) 'RW_SECTION_A' ( read-only, size 5750784 , offset 540672 ) 'VBLOCK_A' ( size 8192 , offset 540672 ) 'FW_MAIN_A' ( CBFS, size 5742528 , offset 548864 ) 'RW_FWID_A' ( size 64 , offset 6291392 ) 'WP_RO' ( read-only, size 2097152 , offset 6291456 ) 'RO_VPD' ( preserve, size 16384 , offset 6291456 ) 'RO_SECTION' ( read-only, size 2080768 , offset 6307840 ) 'FMAP' ( read-only, size 2048 , offset 6307840 ) 'RO_FRID' ( size 64 , offset 6309888 ) 'RO_FRID_PAD' ( size 1984 , offset 6309952 ) 'GBB' ( size 16384 , offset 6311936 ) 'COREBOOT' ( CBFS, size 2060288 , offset 6328320 ) It is at least possible to perform the read action on every section listed above. The above example shows the KGPE-D16 8MB target with vboot enabled. The WP_RO section is at offset of 6291456 bytes from the beginning of the flash and has size of 2097152 bytes. These numbers are in decimal, so one must convert them to hex. Either use an online hex converter or use the command in bash like a pro :) printf \"0x%x\\n\" 6291456 0x600000 printf \"0x%x\\n\" 2097152 0x200000 So our WP range would be 2MB at 6MB offset start=0x00600000 length=0x00200000 (upper 1/4) . But before proceeding with setting the WP range, one may want to sign the firmware with own vboot keys. The Dasharo build come by default with Google vboot developer keys, so to take advantage of vboot, one should sign the binary before flashing and setting the WP range. Refer to vboot signing . Unfortunately the utilities support only 2 RW partitions for resiging. Otherwise a whole image must be rebuilt. After custo mkeys have been used to sign the ifmrware image and the image has been flashed proceed with enalbing the protection: ./flashrom -p internal --wp-range = 0x00600000,0x00200000 Then proceed with Setting SPI status register protection and Verifying SPI write protection . At this point you should have your coreboot firmware with vboot well protected and ready to go. Place the jumper in order to prevent any changes to the configuration.","title":"Setting flash protection for vboot"},{"location":"variants/asus_kgpe_d16/test-matrix/","text":"Test matrix About The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary. Module: Dasharo compatibility No. Supported test suite Test suite ID Supported test cases 1. coreboot base port CBP All 2. SMBIOS DMI DMI001.001, DMI002.001, DMI003.001, DMI004.001 3. coreboot fan control FAN All 4. Custom boot menu key CBK All 5. Debian Stable and Ubuntu LTS support LBT LBT001.001, LBT001.002, LBT002.001, LBT002.002 6. Network boot PXE PXE007.001 7. USB detection UDT All 8. USB booting UBT All 9. Platform suspend and resume SUSP SUSP001.001 10. Flash write protection HWP All 11. Display ports and LCD support DSP DSP004.001, DSP004.002 Module: Dasharo security No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM TPM001.002 2. Verified Boot support VBO VBO006.001, VBO007.001, VBO008.001 Module: Dasharo performance No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. Fan control measure FNM All","title":"Test matrix"},{"location":"variants/asus_kgpe_d16/test-matrix/#test-matrix","text":"","title":"Test matrix"},{"location":"variants/asus_kgpe_d16/test-matrix/#about","text":"The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.","title":"About"},{"location":"variants/asus_kgpe_d16/test-matrix/#module-dasharo-compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot base port CBP All 2. SMBIOS DMI DMI001.001, DMI002.001, DMI003.001, DMI004.001 3. coreboot fan control FAN All 4. Custom boot menu key CBK All 5. Debian Stable and Ubuntu LTS support LBT LBT001.001, LBT001.002, LBT002.001, LBT002.002 6. Network boot PXE PXE007.001 7. USB detection UDT All 8. USB booting UBT All 9. Platform suspend and resume SUSP SUSP001.001 10. Flash write protection HWP All 11. Display ports and LCD support DSP DSP004.001, DSP004.002","title":"Module: Dasharo compatibility"},{"location":"variants/asus_kgpe_d16/test-matrix/#module-dasharo-security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM TPM001.002 2. Verified Boot support VBO VBO006.001, VBO007.001, VBO008.001","title":"Module: Dasharo security"},{"location":"variants/asus_kgpe_d16/test-matrix/#module-dasharo-performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. Fan control measure FNM All","title":"Module: Dasharo performance"},{"location":"variants/asus_kgpe_d16/tpm-mboot/","text":"TPM measured boot Since the Dasharo release v0.3.0 for KGPE-D16 TPM and measured boot are enabled by default. The firmware comes with 2 variants for all 3 flash size targets: vboot and TPM 1.2 measured boot for 2MB, 8MB and 16MB flash vboot and TPM 2.0 measured boot for 2MB, 8MB and 16MB flash TPM support 3mdeb office validates the following setups: KGPE-D16 8MB flash with ASUS TPM-L R2.0 (Infineon SLB9665 TT2.0). KGPE-D16 16MB flash with ASUS TPM 1.2 Rev 1.02h (Infineon SLB9635 TT1.2). Both chips are supported by coreboot. For the time being the platforms will be tested with ASUS modules until OSHW lpnTPM with open-source TPM firmware is ready. Measured boot behaviour It is also possible to have builds without vboot: TPM 1.2 measured boot only (no vboot) for 2MB, 8MB and 16MB flash TPM 2.0 measured boot only (no vboot) for 2MB, 8MB and 16MB flash These targets are for cases where only the bootblock is intended to be locked to form Static Root of Trust for Measurement. For details how to lock flash depending on the firmware variant (with or without vboot) refer to SPI hardware write protection . Note the targets without vboot do not need to have any division into read-only and read-write partitions. Everything can be contained in a single COREBOOT flashmap region like in a standard coreboot build to have the largest free space for big payloads like heads. The variants without vboot have enabled measured boot with an additional option to initialize the TPM in bootblock in order to send the measurements directly to TPM in bootblock and other early stages. Otherwise the TPM measurements are cached in memory and sent to TPM PCRs late in ramstage during TPM setup. The downside of this approach is that the memory could be corrupted in the meantime and the measurements could be faked before they are migrated to the TPM. If you check the boot logs either on serial port on via cbmem utility you should see: coreboot-asus_kgpe-d16_v0.2.0-15-g521dec6dff Wed Dec 15 11 :43:34 UTC 2021 bootblock starting ( log level: 8 ) ... CPU INIT detected 00000000 Found TPM SLB9665 TT 2 .0 by Infineon tlcl_send_startup: Startup return code is 0 TPM: Write digests cached in TCPA log to PCR TPM: Write digest for FMAP: FMAP into PCR 2 tlcl_extend: response is 0 TPM: Write digest for FMAP: COREBOOT CBFS: bootblock into PCR 2 tlcl_extend: response is 0 TPM: Write digest for FMAP: COREBOOT CBFS: cmos.default into PCR 3 tlcl_extend: response is 0 TPM: setup succeeded CBFS: Found 'fallback/romstage' @0x80 size 0x2d688 in mcache @0x0004962c FMAP: area COREBOOT found @ 200 ( 8388096 bytes ) TPM: Extending digest for FMAP: COREBOOT CBFS: fallback/romstage into PCR 2 tlcl_extend: response is 0 TPM: Digest of FMAP: COREBOOT CBFS: fallback/romstage to PCR 2 measured BS: bootblock times ( exec / console ) : total ( unknown ) / 62 ms When vboot is enabled and the verstage is being located, the bootblock measures itself and the verstage, but the measurements are sent to the TPM PCRs not in bootblock, but in verstage: coreboot-asus_kgpe-d16_v0.2.0-15-g521dec6dff Wed Dec 15 11 :43:34 UTC 2021 bootblock starting ( log level: 8 ) ... CPU INIT detected 00000000 VBOOT: Loading verstage. CBFS: Found 'fallback/verstage' @0x8c300 size 0xd848 in mcache @0x0004c8fc FMAP: area COREBOOT found @ 609000 ( 2060288 bytes ) TPM: Digest of FMAP: COREBOOT CBFS: fallback/verstage to PCR 2 logged coreboot-asus_kgpe-d16_v0.2.0-15-g521dec6dff Wed Dec 15 11 :43:34 UTC 2021 verstage starting ( log level: 8 ) ... VBNV: CMOS invalid, restoring from flash FMAP: area RW_NVRAM found @ 80000 ( 16384 bytes ) spi_init: SPI base fec10000 Manufacturer: ef SF: Detected ef 4017 with sector size 0x1000, total 0x800000 VBNV: Restore from flash failed Found TPM SLB9665 TT 2 .0 by Infineon tlcl_send_startup: Startup return code is 0 TPM: Write digests cached in TCPA log to PCR TPM: Write digest for FMAP: FMAP into PCR 2 tlcl_extend: response is 0 TPM: Write digest for FMAP: COREBOOT CBFS: bootblock into PCR 2 tlcl_extend: response is 0 TPM: Write digest for FMAP: COREBOOT CBFS: cmos.default into PCR 3 tlcl_extend: response is 0 TPM: Write digest for FMAP: COREBOOT CBFS: fallback/verstage into PCR 2 tlcl_extend: response is 0 TPM: Write digest for FMAP: COREBOOT CBFS: cmos_layout.bin into PCR 2 tlcl_extend: response is 0 TPM: setup succeeded","title":"TPM measured boot"},{"location":"variants/asus_kgpe_d16/tpm-mboot/#tpm-measured-boot","text":"Since the Dasharo release v0.3.0 for KGPE-D16 TPM and measured boot are enabled by default. The firmware comes with 2 variants for all 3 flash size targets: vboot and TPM 1.2 measured boot for 2MB, 8MB and 16MB flash vboot and TPM 2.0 measured boot for 2MB, 8MB and 16MB flash","title":"TPM measured boot"},{"location":"variants/asus_kgpe_d16/tpm-mboot/#tpm-support","text":"3mdeb office validates the following setups: KGPE-D16 8MB flash with ASUS TPM-L R2.0 (Infineon SLB9665 TT2.0). KGPE-D16 16MB flash with ASUS TPM 1.2 Rev 1.02h (Infineon SLB9635 TT1.2). Both chips are supported by coreboot. For the time being the platforms will be tested with ASUS modules until OSHW lpnTPM with open-source TPM firmware is ready.","title":"TPM support"},{"location":"variants/asus_kgpe_d16/tpm-mboot/#measured-boot-behaviour","text":"It is also possible to have builds without vboot: TPM 1.2 measured boot only (no vboot) for 2MB, 8MB and 16MB flash TPM 2.0 measured boot only (no vboot) for 2MB, 8MB and 16MB flash These targets are for cases where only the bootblock is intended to be locked to form Static Root of Trust for Measurement. For details how to lock flash depending on the firmware variant (with or without vboot) refer to SPI hardware write protection . Note the targets without vboot do not need to have any division into read-only and read-write partitions. Everything can be contained in a single COREBOOT flashmap region like in a standard coreboot build to have the largest free space for big payloads like heads. The variants without vboot have enabled measured boot with an additional option to initialize the TPM in bootblock in order to send the measurements directly to TPM in bootblock and other early stages. Otherwise the TPM measurements are cached in memory and sent to TPM PCRs late in ramstage during TPM setup. The downside of this approach is that the memory could be corrupted in the meantime and the measurements could be faked before they are migrated to the TPM. If you check the boot logs either on serial port on via cbmem utility you should see: coreboot-asus_kgpe-d16_v0.2.0-15-g521dec6dff Wed Dec 15 11 :43:34 UTC 2021 bootblock starting ( log level: 8 ) ... CPU INIT detected 00000000 Found TPM SLB9665 TT 2 .0 by Infineon tlcl_send_startup: Startup return code is 0 TPM: Write digests cached in TCPA log to PCR TPM: Write digest for FMAP: FMAP into PCR 2 tlcl_extend: response is 0 TPM: Write digest for FMAP: COREBOOT CBFS: bootblock into PCR 2 tlcl_extend: response is 0 TPM: Write digest for FMAP: COREBOOT CBFS: cmos.default into PCR 3 tlcl_extend: response is 0 TPM: setup succeeded CBFS: Found 'fallback/romstage' @0x80 size 0x2d688 in mcache @0x0004962c FMAP: area COREBOOT found @ 200 ( 8388096 bytes ) TPM: Extending digest for FMAP: COREBOOT CBFS: fallback/romstage into PCR 2 tlcl_extend: response is 0 TPM: Digest of FMAP: COREBOOT CBFS: fallback/romstage to PCR 2 measured BS: bootblock times ( exec / console ) : total ( unknown ) / 62 ms When vboot is enabled and the verstage is being located, the bootblock measures itself and the verstage, but the measurements are sent to the TPM PCRs not in bootblock, but in verstage: coreboot-asus_kgpe-d16_v0.2.0-15-g521dec6dff Wed Dec 15 11 :43:34 UTC 2021 bootblock starting ( log level: 8 ) ... CPU INIT detected 00000000 VBOOT: Loading verstage. CBFS: Found 'fallback/verstage' @0x8c300 size 0xd848 in mcache @0x0004c8fc FMAP: area COREBOOT found @ 609000 ( 2060288 bytes ) TPM: Digest of FMAP: COREBOOT CBFS: fallback/verstage to PCR 2 logged coreboot-asus_kgpe-d16_v0.2.0-15-g521dec6dff Wed Dec 15 11 :43:34 UTC 2021 verstage starting ( log level: 8 ) ... VBNV: CMOS invalid, restoring from flash FMAP: area RW_NVRAM found @ 80000 ( 16384 bytes ) spi_init: SPI base fec10000 Manufacturer: ef SF: Detected ef 4017 with sector size 0x1000, total 0x800000 VBNV: Restore from flash failed Found TPM SLB9665 TT 2 .0 by Infineon tlcl_send_startup: Startup return code is 0 TPM: Write digests cached in TCPA log to PCR TPM: Write digest for FMAP: FMAP into PCR 2 tlcl_extend: response is 0 TPM: Write digest for FMAP: COREBOOT CBFS: bootblock into PCR 2 tlcl_extend: response is 0 TPM: Write digest for FMAP: COREBOOT CBFS: cmos.default into PCR 3 tlcl_extend: response is 0 TPM: Write digest for FMAP: COREBOOT CBFS: fallback/verstage into PCR 2 tlcl_extend: response is 0 TPM: Write digest for FMAP: COREBOOT CBFS: cmos_layout.bin into PCR 2 tlcl_extend: response is 0 TPM: setup succeeded","title":"Measured boot behaviour"},{"location":"variants/dell_optiplex/building-manual/","text":"Dell OptiPlex 7010/9010 Dasharo - building manual Please read the overview page first! To build Dasharo compatible with Dell OptiPlex 7010/9010, follow the steps below: Clone the coreboot repository: git clone https://github.com/dasharo/coreboot.git cd coreboot Replace vX.Y.Z with valid version: git checkout dell_optiplex_9010_vX.Y.Z Checkout submodules: git submodule update --init --recursive --checkout Start docker container: To build Dasharo (coreboot+SeaBIOS) v0.1.0 : docker run --rm -it \\ -v $PWD :/home/coreboot/coreboot \\ -w /home/coreboot/coreboot \\ coreboot/coreboot-sdk:2022-04-04_9a8d0a03db /bin/bash To build Dasharo (coreboot+UEFI) v0.1.0 : docker run --rm -it \\ -v $PWD :/home/coreboot/coreboot \\ -w /home/coreboot/coreboot \\ coreboot/coreboot-sdk:2021-09-23_b0d87f753c /bin/bash To understand difference between versions please read FAQ . Inside of the container, configure and start the build process: make distclean To build Dasharo (coreboot+SeaBIOS) v0.1.0 cp configs/config.dell_optiplex_9010 .config To build Dasharo (coreboot+UEFI) v0.1.0 cp configs/config.dell_optiplex_9010 .config To build Dasharo (coreboot+SeaBIOS) v0.1.0 debug version (very verbose logging). cp configs/config.dell_optiplex_9010.debug .config To build Dasharo (coreboot+UEFI) v0.1.0 debug version (very verbose logging). cp configs/config.dell_optiplex_9010.uefi.debug .config make olddefconfig make or simply: make distclean && cp configs/CONFIG_NAME .config && make olddefconfig && make This will produce a Dasharo binary placed in build/coreboot.rom , which can be flashed in following ways, depending on your situation: To flash Dasharo first time refer to initial deployment manual . To update Dashro refer firmware update .","title":"Building manual"},{"location":"variants/dell_optiplex/building-manual/#dell-optiplex-70109010-dasharo-building-manual","text":"Please read the overview page first! To build Dasharo compatible with Dell OptiPlex 7010/9010, follow the steps below: Clone the coreboot repository: git clone https://github.com/dasharo/coreboot.git cd coreboot Replace vX.Y.Z with valid version: git checkout dell_optiplex_9010_vX.Y.Z Checkout submodules: git submodule update --init --recursive --checkout Start docker container: To build Dasharo (coreboot+SeaBIOS) v0.1.0 : docker run --rm -it \\ -v $PWD :/home/coreboot/coreboot \\ -w /home/coreboot/coreboot \\ coreboot/coreboot-sdk:2022-04-04_9a8d0a03db /bin/bash To build Dasharo (coreboot+UEFI) v0.1.0 : docker run --rm -it \\ -v $PWD :/home/coreboot/coreboot \\ -w /home/coreboot/coreboot \\ coreboot/coreboot-sdk:2021-09-23_b0d87f753c /bin/bash To understand difference between versions please read FAQ . Inside of the container, configure and start the build process: make distclean To build Dasharo (coreboot+SeaBIOS) v0.1.0 cp configs/config.dell_optiplex_9010 .config To build Dasharo (coreboot+UEFI) v0.1.0 cp configs/config.dell_optiplex_9010 .config To build Dasharo (coreboot+SeaBIOS) v0.1.0 debug version (very verbose logging). cp configs/config.dell_optiplex_9010.debug .config To build Dasharo (coreboot+UEFI) v0.1.0 debug version (very verbose logging). cp configs/config.dell_optiplex_9010.uefi.debug .config make olddefconfig make or simply: make distclean && cp configs/CONFIG_NAME .config && make olddefconfig && make This will produce a Dasharo binary placed in build/coreboot.rom , which can be flashed in following ways, depending on your situation: To flash Dasharo first time refer to initial deployment manual . To update Dashro refer firmware update .","title":"Dell OptiPlex 7010/9010 Dasharo - building manual"},{"location":"variants/dell_optiplex/faq/","text":"FAQ I see orange LED blinking, but no output, is my board broken? It means ME is broken and backup firmware would be required to recover it. Please follow additional recovery step to fix that problem. I see white LED, but no output, is my board broken? There maybe many reasons of this behavior. One may be, it boots fine but there is no visible output. It may mean firmware stuck at some point or maybe platform booting normally but all output is disabled. Debugging that requires rebuilding with CONFIG_DEFAULT_CONSOLE_LOGLEVEL_8=y . Instruction for that can be found here . Is it safe to work without heatsink? It should be safe for debugging and recovery purposes. CPU after ~1min will reach temperature limits and will shutdown the platform. CPU was replaced & warm reset required loop If serial console logs contain: [ NOTE ] ME: Wrong mode : 15 [ NOTE ] ME: HFS error : 15 [ NOTE ] ME: FWS2: 0xffffffff [ NOTE ] ME: Bist in progress: 0x1 [ NOTE ] ME: ICC Status : 0x3 [ NOTE ] ME: Invoke MEBx : 0x1 [ NOTE ] ME: CPU replaced : 0x1 [ NOTE ] ME: MBP ready : 0x1 [ NOTE ] ME: MFS failure : 0x1 [ NOTE ] ME: Warm reset req : 0x1 [ NOTE ] ME: CPU repl valid : 0x1 [ NOTE ] ME: ( Reserved ) : 0x3 [ NOTE ] ME: FW update req : 0x1 [ NOTE ] ME: ( Reserved ) : 0xf [ NOTE ] ME: Current state : 0xff [ NOTE ] ME: Current PM event: 0xf [ NOTE ] ME: Progress code : 0xf [ NOTE ] CPU was replaced & warm reset required... [ INFO ] system_reset () called! It means ME is broken and backup firmware would be required to recover it. Please follow additional recovery step to fix that problem. This may happen accidentally when you flash whole 12MB BIOS binary without passing parameters about FMAP.","title":"FAQ"},{"location":"variants/dell_optiplex/faq/#faq","text":"","title":"FAQ"},{"location":"variants/dell_optiplex/faq/#i-see-orange-led-blinking-but-no-output-is-my-board-broken","text":"It means ME is broken and backup firmware would be required to recover it. Please follow additional recovery step to fix that problem.","title":"I see orange LED blinking, but no output, is my board broken?"},{"location":"variants/dell_optiplex/faq/#i-see-white-led-but-no-output-is-my-board-broken","text":"There maybe many reasons of this behavior. One may be, it boots fine but there is no visible output. It may mean firmware stuck at some point or maybe platform booting normally but all output is disabled. Debugging that requires rebuilding with CONFIG_DEFAULT_CONSOLE_LOGLEVEL_8=y . Instruction for that can be found here .","title":"I see white LED, but no output, is my board broken?"},{"location":"variants/dell_optiplex/faq/#is-it-safe-to-work-without-heatsink","text":"It should be safe for debugging and recovery purposes. CPU after ~1min will reach temperature limits and will shutdown the platform.","title":"Is it safe to work without heatsink?"},{"location":"variants/dell_optiplex/faq/#cpu-was-replaced-warm-reset-required-loop","text":"If serial console logs contain: [ NOTE ] ME: Wrong mode : 15 [ NOTE ] ME: HFS error : 15 [ NOTE ] ME: FWS2: 0xffffffff [ NOTE ] ME: Bist in progress: 0x1 [ NOTE ] ME: ICC Status : 0x3 [ NOTE ] ME: Invoke MEBx : 0x1 [ NOTE ] ME: CPU replaced : 0x1 [ NOTE ] ME: MBP ready : 0x1 [ NOTE ] ME: MFS failure : 0x1 [ NOTE ] ME: Warm reset req : 0x1 [ NOTE ] ME: CPU repl valid : 0x1 [ NOTE ] ME: ( Reserved ) : 0x3 [ NOTE ] ME: FW update req : 0x1 [ NOTE ] ME: ( Reserved ) : 0xf [ NOTE ] ME: Current state : 0xff [ NOTE ] ME: Current PM event: 0xf [ NOTE ] ME: Progress code : 0xf [ NOTE ] CPU was replaced & warm reset required... [ INFO ] system_reset () called! It means ME is broken and backup firmware would be required to recover it. Please follow additional recovery step to fix that problem. This may happen accidentally when you flash whole 12MB BIOS binary without passing parameters about FMAP.","title":"CPU was replaced &amp; warm reset required loop"},{"location":"variants/dell_optiplex/firmware-update/","text":"Firmware update Please read the overview page first! Following documentation describe process of Dasharo open-source firmware distribution update. OS booting For simplicity we recommend using network booted Dasharo Tools Suite . Dasharo (coreboot+SeaBIOS) and Dasharo (coreboot+UEFI) update Make sure a wired network cable to the device's Ethernet port Perform DTS network boot Dasharo (coreboot+SeaBIOS) While booting enter SeaBIOS menu using Esc Choose option iPXE (PCI 00:19.0) Dasharo (coreboot+UEFI) Press F7 and choose iPXE Network boot In the Dasharo Network Boot Menu, select the Dasharo Tools Suite option Enter shell using option 9) Download the Dell OptiPlex 7010/9010 Dasharo from release section or build from source . Flash it using: flashrom -p internal --ifd -i bios -w <dasharo_optiplex_9010_firmware> Please note that not using -i bios may lead to this issue","title":"Firmware update"},{"location":"variants/dell_optiplex/firmware-update/#firmware-update","text":"Please read the overview page first! Following documentation describe process of Dasharo open-source firmware distribution update.","title":"Firmware update"},{"location":"variants/dell_optiplex/firmware-update/#os-booting","text":"For simplicity we recommend using network booted Dasharo Tools Suite .","title":"OS booting"},{"location":"variants/dell_optiplex/hardware-matrix/","text":"Hardware configuration matrix Please read the overview page first! The tables below contain information about current components of the testing environment for Dell OptiPlex workstations available in 3mdeb testing laboratory. OptiPlex 7010 Component Description CPU Intel Core iTBD CPU Cooler GPU N/A RAM TBD HDD TBD SSD TBD Flash memory TBD Network Local network wired connection Attached devices 1. TBD USB stick Power Supply TBD Power Control 1. Sonoff TBD Remote Testing Environment 1. RTE TBD OptiPlex 9010 Component Description CPU Intel Core iTBD CPU Cooler GPU N/A RAM TBD HDD TBD SSD TBD Flash memory TBD Network Local network wired connection Attached devices 1. TBD USB stick Power Supply TBD Power Control 1. Sonoff Web Server Remote Testing Environment 1. RTE v1.0.0 (firmware v0.5.3 ) connected via RS232 OptiPlex 9010 full (miczyg) This is private setup. Component Description CPU Intel Core i7-3770 Stock Dell CPU Cooler GPU 1. Integrated Intel HD Graphics 2. Dell Radeon HD7570 low profile, half height in PCIe x16 slot RAM SK-Hynix HMT451U6BFR8A-PB x4 HDD None SSD 1. NVMe: PLEXTOR PX-512M9PeG 2. SATA SSD: SSDPR-CL100-240 3. SATA SSD: Micron_1100_MTFD Flash memory 12MB (8+4) dual SPI flash Network Local network wired connection Attached devices 1. i-tec Adapter PCI-E SATA 2x M.2 Card PCI-E/SATA in PCIe x4 slot 2. PS/2 mouse: Fujitsu M530 via USB to PS/2 adapter 3. PS/2 keyboard: Media-Tech MT122K 4. Display: Samsung SyncMaster 2233 5. Stock Dell DVD RW Power Supply Stock Dell PSU Power Control Manual Remote Testing Environment RTE v1.0.0 (firmware v0.5.3 ) connected via RS232","title":"Hardware Configuration Matrix"},{"location":"variants/dell_optiplex/hardware-matrix/#hardware-configuration-matrix","text":"Please read the overview page first! The tables below contain information about current components of the testing environment for Dell OptiPlex workstations available in 3mdeb testing laboratory.","title":"Hardware configuration matrix"},{"location":"variants/dell_optiplex/hardware-matrix/#optiplex-7010","text":"Component Description CPU Intel Core iTBD CPU Cooler GPU N/A RAM TBD HDD TBD SSD TBD Flash memory TBD Network Local network wired connection Attached devices 1. TBD USB stick Power Supply TBD Power Control 1. Sonoff TBD Remote Testing Environment 1. RTE TBD","title":"OptiPlex 7010"},{"location":"variants/dell_optiplex/hardware-matrix/#optiplex-9010","text":"Component Description CPU Intel Core iTBD CPU Cooler GPU N/A RAM TBD HDD TBD SSD TBD Flash memory TBD Network Local network wired connection Attached devices 1. TBD USB stick Power Supply TBD Power Control 1. Sonoff Web Server Remote Testing Environment 1. RTE v1.0.0 (firmware v0.5.3 ) connected via RS232","title":"OptiPlex 9010"},{"location":"variants/dell_optiplex/hardware-matrix/#optiplex-9010-full-miczyg","text":"This is private setup. Component Description CPU Intel Core i7-3770 Stock Dell CPU Cooler GPU 1. Integrated Intel HD Graphics 2. Dell Radeon HD7570 low profile, half height in PCIe x16 slot RAM SK-Hynix HMT451U6BFR8A-PB x4 HDD None SSD 1. NVMe: PLEXTOR PX-512M9PeG 2. SATA SSD: SSDPR-CL100-240 3. SATA SSD: Micron_1100_MTFD Flash memory 12MB (8+4) dual SPI flash Network Local network wired connection Attached devices 1. i-tec Adapter PCI-E SATA 2x M.2 Card PCI-E/SATA in PCIe x4 slot 2. PS/2 mouse: Fujitsu M530 via USB to PS/2 adapter 3. PS/2 keyboard: Media-Tech MT122K 4. Display: Samsung SyncMaster 2233 5. Stock Dell DVD RW Power Supply Stock Dell PSU Power Control Manual Remote Testing Environment RTE v1.0.0 (firmware v0.5.3 ) connected via RS232","title":"OptiPlex 9010 full (miczyg)"},{"location":"variants/dell_optiplex/initial-deployment/","text":"Initial deployment Please read the overview page first! Following documentation describe process of replacing original BIOS/UEFI firmware with Dasharo open-source firmware. Following procedure is supported for following models Vendor Model Dell OptiPlex 7010 SFF Dell OptiPlex 7010 DT Dell OptiPlex 9010 SFF Dell OptiPlex 9010 MT Hardware preparation Flash descriptor security override To perform any SPI NOR flash operations in the presence of ME, we have to put it in the flash descriptor security override mode. Please follow the below steps: Open the case by lifting the handle on the case. Lift the whole top cover and take it off. Now, it is time to release the disk dock. Lift the handle of the CD/DVD drive bay. Pull the CD/DVD drive bay to the CPU fan side. Move the blue disk dock handle to the CPU fan side. The screw should be at the giant hole now. Lift the whole dock to remove it. When the dock is removed, the service mode jumper should be visible. Place the jumper in the place marked by the red rectangle. It should look like this. Power on the machine. You should see a warning that the service jumper is active. Press F1 to proceed and boot to your Linux system. Initial deployment To ensure a smooth deployment process, it is recommended to use the latest version of DTS available from the releases page . Once you have obtained it, you can then proceed with following the Dasharo zero-touch initial deployment section procedure. This will help you set up Dasharo effectively and without manual intervention. Verification If everything went well (flashrom has verified the flash content), Shut down the machine, move the jumper to the original place Power on the machine. After rebooting, you should see the Dasharo Workstation logo when booting. When the logo appears, you may press Esc to select the boot device if you want to reboot from another source. From that point you can use firmware update methods to update your firmware. Troubleshooting If you do not see the logo after a few seconds, something probably went wrong, or you encountered a bug. If the LED on the power button shines white, that means the platform booted correctly. If the power button LED constantly shines in orange color, that means you have hit an error. The LED will start blinking soon. If you see the logo and after that system does not starts (black screen), please take the following steps: Put a bootable USB stick to the USB port. Restart the computer using the power button. Press the Esc key to enter a boot menu. Choose a USB drive from the list. Re-install the operating system. Common deployment problems you can find in FAQ . Ubuntu installation Ubuntu legacy installers have problems with graphical setup mode. When you see this error: graphics initialization failed Error setting up gfxboot boot:_ You need a workaround to proceed with the installation. To boot the installer, type live-install and press ENTER . It will boot to Ubuntu Live, and the installer will launch automatically. Version affected: Dasharo Workstation v0.1. If you see blinking yellow LED and black screen after reboot: 1. Unplug the power supply cable 2. Wait for the 30s 3. Plug in the power supply again (machine should start automatically) Bug reporting If you encountered an error or bug, please report it in the Dasharo Issues repo .","title":"Initial deployment"},{"location":"variants/dell_optiplex/initial-deployment/#initial-deployment","text":"Please read the overview page first! Following documentation describe process of replacing original BIOS/UEFI firmware with Dasharo open-source firmware. Following procedure is supported for following models Vendor Model Dell OptiPlex 7010 SFF Dell OptiPlex 7010 DT Dell OptiPlex 9010 SFF Dell OptiPlex 9010 MT","title":"Initial deployment"},{"location":"variants/dell_optiplex/initial-deployment/#hardware-preparation","text":"","title":"Hardware preparation"},{"location":"variants/dell_optiplex/initial-deployment/#initial-deployment_1","text":"To ensure a smooth deployment process, it is recommended to use the latest version of DTS available from the releases page . Once you have obtained it, you can then proceed with following the Dasharo zero-touch initial deployment section procedure. This will help you set up Dasharo effectively and without manual intervention.","title":"Initial deployment"},{"location":"variants/dell_optiplex/initial-deployment/#verification","text":"If everything went well (flashrom has verified the flash content), Shut down the machine, move the jumper to the original place Power on the machine. After rebooting, you should see the Dasharo Workstation logo when booting. When the logo appears, you may press Esc to select the boot device if you want to reboot from another source. From that point you can use firmware update methods to update your firmware.","title":"Verification"},{"location":"variants/dell_optiplex/initial-deployment/#troubleshooting","text":"If you do not see the logo after a few seconds, something probably went wrong, or you encountered a bug. If the LED on the power button shines white, that means the platform booted correctly. If the power button LED constantly shines in orange color, that means you have hit an error. The LED will start blinking soon. If you see the logo and after that system does not starts (black screen), please take the following steps: Put a bootable USB stick to the USB port. Restart the computer using the power button. Press the Esc key to enter a boot menu. Choose a USB drive from the list. Re-install the operating system. Common deployment problems you can find in FAQ .","title":"Troubleshooting"},{"location":"variants/dell_optiplex/overview/","text":"Overview Dell OptiPlex 7010/9010 SFF is small SOHO desktop computer sometimes used as firewall or NAS . To learn more about our motivation for the coreboot port and Dasharo compatible with Dell OptiPlex 7010/9010 SFF please check references section. If you want to build, initially deploy, update or recover your setup please check documentation sections on the left. Status Dasharo compatible with Dell OptiPlex 7010/9010 is a community-driven effort. We work on this in our free time, since we have no sponsor for this project. To address the issue we organize virtual hackathon called OptiPlex Tuesday on Dasharo Matrix almost every Tuesday. If you are interested in this project, you can consider joining the event or supporting us in other way . The most advanced code is on rel_v0.1.0 branch and the most advanced documentation related to rel_v0.1.0 branch is already available from menu on the left. This code supports only Dasharo (coreboot+SeaBIOS) , so legacy boot. UEFI is also quite ready, but we need to release v0.1.0 properly first. References Dell OptiPlex and coreboot - a story about porting cursed hardware (part 1) Dell OptiPlex and coreboot - a story about porting cursed hardware (part 2) Dasharo for Dell OptiPlex 7010 / 9010","title":"Overview"},{"location":"variants/dell_optiplex/overview/#overview","text":"Dell OptiPlex 7010/9010 SFF is small SOHO desktop computer sometimes used as firewall or NAS . To learn more about our motivation for the coreboot port and Dasharo compatible with Dell OptiPlex 7010/9010 SFF please check references section. If you want to build, initially deploy, update or recover your setup please check documentation sections on the left.","title":"Overview"},{"location":"variants/dell_optiplex/overview/#status","text":"Dasharo compatible with Dell OptiPlex 7010/9010 is a community-driven effort. We work on this in our free time, since we have no sponsor for this project. To address the issue we organize virtual hackathon called OptiPlex Tuesday on Dasharo Matrix almost every Tuesday. If you are interested in this project, you can consider joining the event or supporting us in other way . The most advanced code is on rel_v0.1.0 branch and the most advanced documentation related to rel_v0.1.0 branch is already available from menu on the left. This code supports only Dasharo (coreboot+SeaBIOS) , so legacy boot. UEFI is also quite ready, but we need to release v0.1.0 properly first.","title":"Status"},{"location":"variants/dell_optiplex/overview/#references","text":"Dell OptiPlex and coreboot - a story about porting cursed hardware (part 1) Dell OptiPlex and coreboot - a story about porting cursed hardware (part 2) Dasharo for Dell OptiPlex 7010 / 9010","title":"References"},{"location":"variants/dell_optiplex/recovery/","text":"Recovery Please read the overview page first! Following documentation describes the process of recovering hardware from brick state with RTE and Dasharo open-source firmware. Following procedure is supported for following models Vendor Model Dell OptiPlex 7010 SFF Dell OptiPlex 7010 DT Dell OptiPlex 9010 SFF Step 1: Prepare hardware To prepare hardware please follow hardware preparation procedure. Follow instruction in the video to remove heatsink: Step 2: Find SPI_1, SPI_2/SPI_3 Step 3: Connect SOIC-8 Pomona clip between RTE and target Connect SOIC-8 Pomona according to MX25L3206E datasheet . RTE J7 Pomona SOIC clip CS pin 1 (upside) MISO pin 2 (upside) GND pin 4 (upside) VCC pin 5 (downside) SCLK pin 7 (downside) MOSI pin 8 (downside) Numbers 1-4 have to be on one side and numbers 5-8 have to be on the other side of the clip. Clip on the SPI_1 chip. Match pin 1 ( CS ) of the Pomona clip with the first pin of SPI_1 chip, marked with a small dot engraved on the chip. Step 4: Connect RTE Connect J2 Orange Pi Zero system debug output Power the board and confirm it boots Please note typical convention of USB-UART converter colors is as follows black - GND red - +5V green - TX white - RX Connect terminal to RTE and read OS version: sudo minicom -b 115200 -D /dev/ttyUSB0 -o -C /tmp/minicom.cap -b 115200 sets baudrate -D /dev/ttyUSB0 points to USB-UART converter device, it can be different if you already have some devices connected or you use different operating system -o skip initialization -C /tmp/minicom.cap capture serial terminal output, if you will have problems with exercises please post this file Login using following credentials: login: root password: meta-rte Step 5: Prepare recovery binary Following procedure assume that you use recovery binary created during backup process . Backup has 12MB, so it have to be split split -b4M bios_backup_YYYYMMDD.bin Step 6: Flash 4MB (BIOS) part echo 1 > /sys/class/gpio/gpio405/value echo 1 > /sys/class/gpio/gpio406/value echo 1 > /sys/class/gpio/gpio404/value xac is third file resulting from the previous binary split, so it contains Dasharo code and data which fits into 4MB and in case of Dell OptiPlex 9010/7010 should be flashed to 4MB SPI. flashrom -w xac -p linux_spi:dev = /dev/spidev1.0,spispeed = 16000 -c \"MX25L3205D/MX25L3208D\" (Optional) Step 7: Flash 8MB (ME) part If a more serious problem occurs, like broken ME , it may be necessary to use your firmware backup and restore content of 8MB chip. Step 7a: Connect SOIC-16 Pomona clip between RTE and target Connect SOIC-16 Pomona according to MX25L6406E datasheet . RTE J7 Pomona SOIC clip VCC pin 2 (upside) CS pin 7 (upside) MISO pin 8 (upside) SCLK pin 16 (downside) MOSI pin 15 (downside) GND pin 10 (downside) Numbers 1-8 have to be on one side and numbers 9-16 have to be on the other side of the clip. Clip on the SPI_2/SPI_3 chip. Match pin 1 ( HOLD# ) of the Pomona clip with the first pin of SPI_2/SPI_3 chip, marked with a small dot engraved on the chip. Step 7b: Flash 8MB (ME) part echo 1 > /sys/class/gpio/gpio405/value echo 1 > /sys/class/gpio/gpio406/value echo 1 > /sys/class/gpio/gpio404/value Dasharo recovery Use following procedure if your 4M flash contain Dasharo open-source firmware. cat > dell_optiplex.layout <<EOF 00000000:00000fff fd 00001000:00004fff gbe 00005000:005fffff me 00600000:007fffff unused EOF flashrom -w your_bios_backup.bin -p linux_spi:dev = /dev/spidev1.0,spispeed = 16000 -c \"MX25L6406E/MX25L6408E\" -i fd -i me --layout dell_optiplex.layout Vendor BIOS recovery Use following procedure if your 4M flash contain vendor BIOS. flashrom -w your_bios_backup_8M.bin -p linux_spi:dev = /dev/spidev1.0,spispeed = 16000 -c \"MX25L6406E/MX25L6408E\"","title":"Recovery"},{"location":"variants/dell_optiplex/recovery/#recovery","text":"Please read the overview page first! Following documentation describes the process of recovering hardware from brick state with RTE and Dasharo open-source firmware. Following procedure is supported for following models Vendor Model Dell OptiPlex 7010 SFF Dell OptiPlex 7010 DT Dell OptiPlex 9010 SFF","title":"Recovery"},{"location":"variants/dell_optiplex/recovery/#step-1-prepare-hardware","text":"To prepare hardware please follow hardware preparation procedure. Follow instruction in the video to remove heatsink:","title":"Step 1: Prepare hardware"},{"location":"variants/dell_optiplex/recovery/#step-2-find-spi_1-spi_2spi_3","text":"","title":"Step 2: Find SPI_1, SPI_2/SPI_3"},{"location":"variants/dell_optiplex/recovery/#step-3-connect-soic-8-pomona-clip-between-rte-and-target","text":"Connect SOIC-8 Pomona according to MX25L3206E datasheet . RTE J7 Pomona SOIC clip CS pin 1 (upside) MISO pin 2 (upside) GND pin 4 (upside) VCC pin 5 (downside) SCLK pin 7 (downside) MOSI pin 8 (downside) Numbers 1-4 have to be on one side and numbers 5-8 have to be on the other side of the clip. Clip on the SPI_1 chip. Match pin 1 ( CS ) of the Pomona clip with the first pin of SPI_1 chip, marked with a small dot engraved on the chip.","title":"Step 3: Connect SOIC-8 Pomona clip between RTE and target"},{"location":"variants/dell_optiplex/recovery/#step-4-connect-rte","text":"Connect J2 Orange Pi Zero system debug output Power the board and confirm it boots Please note typical convention of USB-UART converter colors is as follows black - GND red - +5V green - TX white - RX Connect terminal to RTE and read OS version: sudo minicom -b 115200 -D /dev/ttyUSB0 -o -C /tmp/minicom.cap -b 115200 sets baudrate -D /dev/ttyUSB0 points to USB-UART converter device, it can be different if you already have some devices connected or you use different operating system -o skip initialization -C /tmp/minicom.cap capture serial terminal output, if you will have problems with exercises please post this file Login using following credentials: login: root password: meta-rte","title":"Step 4: Connect RTE"},{"location":"variants/dell_optiplex/recovery/#step-5-prepare-recovery-binary","text":"Following procedure assume that you use recovery binary created during backup process . Backup has 12MB, so it have to be split split -b4M bios_backup_YYYYMMDD.bin","title":"Step 5: Prepare recovery binary"},{"location":"variants/dell_optiplex/recovery/#step-6-flash-4mb-bios-part","text":"echo 1 > /sys/class/gpio/gpio405/value echo 1 > /sys/class/gpio/gpio406/value echo 1 > /sys/class/gpio/gpio404/value xac is third file resulting from the previous binary split, so it contains Dasharo code and data which fits into 4MB and in case of Dell OptiPlex 9010/7010 should be flashed to 4MB SPI. flashrom -w xac -p linux_spi:dev = /dev/spidev1.0,spispeed = 16000 -c \"MX25L3205D/MX25L3208D\"","title":"Step 6: Flash 4MB (BIOS) part"},{"location":"variants/dell_optiplex/recovery/#optional-step-7-flash-8mb-me-part","text":"If a more serious problem occurs, like broken ME , it may be necessary to use your firmware backup and restore content of 8MB chip.","title":"(Optional) Step 7: Flash 8MB (ME) part"},{"location":"variants/dell_optiplex/releases/","text":"Dasharo compatible with Dell OptiPlex 7010/9010 SFF Please read the overview page first! Following Release Notes describe status of Open Source Firmware development for Dell OptiPlex 7010 SFF, DT and Dell OptiPlex 9010 SFF, MT. For details about our release process please read Dasharo Standard Release Process . Subscribe to Dell OptiPlex 7010/9010 Dasharo Release Newsletter","title":"Releases"},{"location":"variants/dell_optiplex/releases/#dasharo-compatible-with-dell-optiplex-70109010-sff","text":"Please read the overview page first! Following Release Notes describe status of Open Source Firmware development for Dell OptiPlex 7010 SFF, DT and Dell OptiPlex 9010 SFF, MT. For details about our release process please read Dasharo Standard Release Process . Subscribe to Dell OptiPlex 7010/9010 Dasharo Release Newsletter","title":"Dasharo compatible with Dell OptiPlex 7010/9010 SFF"},{"location":"variants/dell_optiplex/test-matrix/","text":"Test matrix About The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary. Module: Dasharo compatibility No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. Display ports and LCD support DSP DSP003.001, DSP003.003, DSP004.001, DSP004.003 3. USB HID and MSC Support USB All 4. SMBIOS DMI DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001 5. Custom boot logo CLG All 6. Audio subsystem AUD AUD001.001, AUD004.001, AUD005.001, AUD006.001 7. NVMe support \u00b9 NVM NVM001.001, NVM001.002 8. Network boot PXE Without PXE007.001 9. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 10. Custom boot menu key CBK All 11. PCI Express ports support PEX PEX001.001 12. EC and Super I/O initialization SIO SIO001.001, SIO002.001, SIO002.002, SIO003.001, SIO004.001, SIO004.002 13. Fan control FAN FAN001.002\u00b2 1) Requires a PCIe x4 to M.2 adapter 2) Fans have to be checked manually. No support for reading the fan speed. There is also no W83795G HWM on this machine. Module: Dasharo security No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM TPM001.002 2. Measured Boot support MBO All Module: Dasharo performance No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All","title":"Test matrix"},{"location":"variants/dell_optiplex/test-matrix/#test-matrix","text":"","title":"Test matrix"},{"location":"variants/dell_optiplex/test-matrix/#about","text":"The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.","title":"About"},{"location":"variants/dell_optiplex/test-matrix/#module-dasharo-compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. Display ports and LCD support DSP DSP003.001, DSP003.003, DSP004.001, DSP004.003 3. USB HID and MSC Support USB All 4. SMBIOS DMI DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001 5. Custom boot logo CLG All 6. Audio subsystem AUD AUD001.001, AUD004.001, AUD005.001, AUD006.001 7. NVMe support \u00b9 NVM NVM001.001, NVM001.002 8. Network boot PXE Without PXE007.001 9. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 10. Custom boot menu key CBK All 11. PCI Express ports support PEX PEX001.001 12. EC and Super I/O initialization SIO SIO001.001, SIO002.001, SIO002.002, SIO003.001, SIO004.001, SIO004.002 13. Fan control FAN FAN001.002\u00b2 1) Requires a PCIe x4 to M.2 adapter 2) Fans have to be checked manually. No support for reading the fan speed. There is also no W83795G HWM on this machine.","title":"Module: Dasharo compatibility"},{"location":"variants/dell_optiplex/test-matrix/#module-dasharo-security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM TPM001.002 2. Measured Boot support MBO All","title":"Module: Dasharo security"},{"location":"variants/msi_z690/building-manual/","text":"Building Manual We moved the page to MSI Desktops -> Building Manual","title":"Building Manual"},{"location":"variants/msi_z690/building-manual/#building-manual","text":"We moved the page to MSI Desktops -> Building Manual","title":"Building Manual"},{"location":"variants/msi_z690/community-test-results/","text":"Community Test Results We moved the page to MSI Desktops -> Community Test Results","title":"Community Test Results"},{"location":"variants/msi_z690/community-test-results/#community-test-results","text":"We moved the page to MSI Desktops -> Community Test Results","title":"Community Test Results"},{"location":"variants/msi_z690/cpu-hcl/","text":"CPU HCL We moved the page to MSI Desktops -> Hardware Compatibility","title":"CPU HCL"},{"location":"variants/msi_z690/cpu-hcl/#cpu-hcl","text":"We moved the page to MSI Desktops -> Hardware Compatibility","title":"CPU HCL"},{"location":"variants/msi_z690/development/","text":"Development We moved the page to MSI Desktops -> Development","title":"Development"},{"location":"variants/msi_z690/development/#development","text":"We moved the page to MSI Desktops -> Development","title":"Development"},{"location":"variants/msi_z690/faq/","text":"FAQ We moved the page to MSI Desktops -> FAQ","title":"FAQ"},{"location":"variants/msi_z690/faq/#faq","text":"We moved the page to MSI Desktops -> FAQ","title":"FAQ"},{"location":"variants/msi_z690/firmware-update/","text":"Firmware Update We moved the page to MSI Desktops -> Firmware Update","title":"Firmware Update"},{"location":"variants/msi_z690/firmware-update/#firmware-update","text":"We moved the page to MSI Desktops -> Firmware Update","title":"Firmware Update"},{"location":"variants/msi_z690/gpu-hcl/","text":"GPU HCL We moved the page to MSI Desktops -> Hardware Compatibility","title":"GPU HCL"},{"location":"variants/msi_z690/gpu-hcl/#gpu-hcl","text":"We moved the page to MSI Desktops -> Hardware Compatibility","title":"GPU HCL"},{"location":"variants/msi_z690/hardware-matrix/","text":"Hardware configuration matrix Introduction This document describes the hardware configuration used for validation of the coreboot port on the MSI PRO Z690-A workstation. For additional information, please check the FAQ section . MSI PRO Z690-A WiFi DDR4, SN: 07D2511_LA1E012608 Component Description CPU Intel Core i5-12600K 3.7 Noctua NH-U12S CPU Cooler RAM Slot 1: Kingston KF436C17BBK4/32 Slot 2: Kingston KF436C17BBK4/32 Slot 3: Kingston KF436C17BBK4/32 Slot 4: Kingston KF436C17BBK4/32 Flash memory Macronix MX25U25673G SSD Intel 670p 512 GB M26472-201 NVME USB pendrives 1. SanDisk Ultra Flair USB 3.0 16 GB 2. Kingston DataTraveler 3.1Gen1 16 GB SD cards SanDisk Ultra microSD HC I 16 GB Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p 3. 1-port USB Type-C Network Local network wired connection Power Supply SeaSonic FOCUS Plus Platinum Power Control Sonoff S20 EU type E Remote Testing Environment RTE v1.1.0 KVM PiKVM based on Raspberry Pi 4 MSI PRO Z690-A WiFi DDR4, SN: 07D2511 LA1E346864 Component Description CPU Intel Core i5-12600K 3.7 Noctua NH-U12S CPU Cooler RAM Slot 1: Kingston KF436C17BBK4/32 Slot 2: Kingston KF436C17BBK4/32 Slot 3: Kingston KF436C17BBK4/32 Slot 4: Kingston KF436C17BBK4/32 Flash memory Macronix MX25U25673G SSD Intel 670p 512 GB M26472-201 NVME USB pendrives 1. SanDisk Ultra Flair USB 3.0 16 GB 2. Kingston DataTraveler 3.1Gen1 16 GB SD cards SanDisk Ultra microSD HC I 16 GB Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p 3. 1-port USB Type-C Network Local network wired connection Power Supply SeaSonic FOCUS Plus Platinum Power Control Sonoff S20 EU type E Remote Testing Environment RTE v1.1.0 MSI PRO Z690-A DDR5, SN: 07D2511_LA1E360456 Component Description CPU Intel Core i5-12600K 3.7 Noctua NH-U12S CPU Cooler RAM Slot 1: CRUCIAL CT8G48C40U5 Slot 2: CRUCIAL CT8G48C40U5 Slot 3: CRUCIAL CT8G48C40U5 Slot 4: CRUCIAL CT8G48C40U5 Flash memory Macronix MX25U25635F SSD Intel 670p 512 GB M26472-201 NVME USB pendrives SanDisk Ultra Flair USB 3.0 16 GB Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p Network Local network wired connection Power Supply SeaSonic Focus PX-750 Power Control Sonoff S20 EU type E Remote Testing Environment RTE v1.1.0 KVM PiKVM based on Raspberry Pi 4","title":"Hardware Configuration Matrix"},{"location":"variants/msi_z690/hardware-matrix/#hardware-configuration-matrix","text":"","title":"Hardware configuration matrix"},{"location":"variants/msi_z690/hardware-matrix/#introduction","text":"This document describes the hardware configuration used for validation of the coreboot port on the MSI PRO Z690-A workstation. For additional information, please check the FAQ section .","title":"Introduction"},{"location":"variants/msi_z690/hardware-matrix/#msi-pro-z690-a-wifi-ddr4-sn-07d2511_la1e012608","text":"Component Description CPU Intel Core i5-12600K 3.7 Noctua NH-U12S CPU Cooler RAM Slot 1: Kingston KF436C17BBK4/32 Slot 2: Kingston KF436C17BBK4/32 Slot 3: Kingston KF436C17BBK4/32 Slot 4: Kingston KF436C17BBK4/32 Flash memory Macronix MX25U25673G SSD Intel 670p 512 GB M26472-201 NVME USB pendrives 1. SanDisk Ultra Flair USB 3.0 16 GB 2. Kingston DataTraveler 3.1Gen1 16 GB SD cards SanDisk Ultra microSD HC I 16 GB Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p 3. 1-port USB Type-C Network Local network wired connection Power Supply SeaSonic FOCUS Plus Platinum Power Control Sonoff S20 EU type E Remote Testing Environment RTE v1.1.0 KVM PiKVM based on Raspberry Pi 4","title":"MSI PRO Z690-A WiFi DDR4, SN: 07D2511_LA1E012608"},{"location":"variants/msi_z690/hardware-matrix/#msi-pro-z690-a-wifi-ddr4-sn-07d2511-la1e346864","text":"Component Description CPU Intel Core i5-12600K 3.7 Noctua NH-U12S CPU Cooler RAM Slot 1: Kingston KF436C17BBK4/32 Slot 2: Kingston KF436C17BBK4/32 Slot 3: Kingston KF436C17BBK4/32 Slot 4: Kingston KF436C17BBK4/32 Flash memory Macronix MX25U25673G SSD Intel 670p 512 GB M26472-201 NVME USB pendrives 1. SanDisk Ultra Flair USB 3.0 16 GB 2. Kingston DataTraveler 3.1Gen1 16 GB SD cards SanDisk Ultra microSD HC I 16 GB Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p 3. 1-port USB Type-C Network Local network wired connection Power Supply SeaSonic FOCUS Plus Platinum Power Control Sonoff S20 EU type E Remote Testing Environment RTE v1.1.0","title":"MSI PRO Z690-A WiFi DDR4, SN: 07D2511 LA1E346864"},{"location":"variants/msi_z690/hardware-matrix/#msi-pro-z690-a-ddr5-sn-07d2511_la1e360456","text":"Component Description CPU Intel Core i5-12600K 3.7 Noctua NH-U12S CPU Cooler RAM Slot 1: CRUCIAL CT8G48C40U5 Slot 2: CRUCIAL CT8G48C40U5 Slot 3: CRUCIAL CT8G48C40U5 Slot 4: CRUCIAL CT8G48C40U5 Flash memory Macronix MX25U25635F SSD Intel 670p 512 GB M26472-201 NVME USB pendrives SanDisk Ultra Flair USB 3.0 16 GB Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p Network Local network wired connection Power Supply SeaSonic Focus PX-750 Power Control Sonoff S20 EU type E Remote Testing Environment RTE v1.1.0 KVM PiKVM based on Raspberry Pi 4","title":"MSI PRO Z690-A DDR5, SN: 07D2511_LA1E360456"},{"location":"variants/msi_z690/initial-deployment/","text":"Initial Deployment We moved the page to MSI Desktops -> Initial Deployment","title":"Initial Deployment"},{"location":"variants/msi_z690/initial-deployment/#initial-deployment","text":"We moved the page to MSI Desktops -> Initial Deployment","title":"Initial Deployment"},{"location":"variants/msi_z690/memory-hcl/","text":"Memory HCL We moved the page to MSI Desktops -> Hardware Compatibility","title":"Memory HCL"},{"location":"variants/msi_z690/memory-hcl/#memory-hcl","text":"We moved the page to MSI Desktops -> Hardware Compatibility","title":"Memory HCL"},{"location":"variants/msi_z690/openness_analysis/","text":"Dasharo Openness Score This document aims to compare the openness of Dasharo firmware and AMI BIOS for MSI PRO Z690-A DDR4 WiFI. There is an ongoing discussion about the methodology of the openness metric. BIOS versions used in the analysis Dasharo v1.0.0 AMI BIOS v1.0 MSI original BIOS from AMI In the case of the AMI BIOS, the entire image should be considered proprietary. There are several parts of the image that have a well-known structure or make use of a public standard. However, to decode these structures, one needs to employ reverse-engineering tools and techniques to know what structures are present. For simplicity we treat UEFI variables as BIOS data. All empty padding regions between FFS and all volume free spaces are treated as unused space. Dasharo BIOS CBFS regions The below table shows only a single FMAP region COREBOOT. There are also two RW vboot partitions containing copies of the same components from COREBOOT region (except the verstage, bootblock and cbfs master header). Note that there are other regions to store non-volatile data like MRC cache, UEFI variables or vboot state backup. Region COREBOOT: File Size (bytes) Is it open-source? cbfs master header 32 \u2714 fallback/romstage 95152 \u2714 cpu_microcode_blob.bin 944144 \u2716 intel_fit 80 \u2714 fallback/ramstage 127231(LZMA) \u2714 config 1378 \u2714 revision 842 \u2714 build_info 142 \u2714 fallback/dsdt.aml 9973 \u2714 vbt.bin 1254 (LZMA) \u2714 (empty) 2596 N/A fspm.bin 720896 \u2716 fsps.bin 290481 (LZ4) \u2716 fallback/postcar 37504 \u2714 fallback/payload 1813047 (LZMA) \u2714 (with exceptions) fallback/verstage 77008 \u2714 (empty) 1055076 N/A bootblock 31808 \u2714 The payload used is Tianocore EDK2 UEFIPayload. In order to support network boot over i225 Ethernet, an i225 EFI driver is included in the payload. The driver is 154064 bytes in size uncompressed (63445 LZMA compressed). The 63445 bytes will be added to closed source pool and removed from the payload size in the calculations. Note that UEFIPayload has support for Option ROM loading, for example to support external graphics card output during POST. It is an additional closed-source code which depends on the hardware configuration and is not included in the calculations. Type Total size (bytes) Percent COREBOOT region 5208644 N/A empty 1057672 N/A code size (open + closed) 4150972 N/A open-source 2132006 51.36% closed-source 2018966 48.64% Region FW_MAIN_A/FW_MAIN_B: File Size (bytes) Is it open-source? fallback/romstage 95152 \u2714 cpu_microcode_blob.bin 944144 \u2716 fallback/ramstage 127231(LZMA) \u2714 config 1378 \u2714 revision 842 \u2714 build_info 142 \u2714 fallback/dsdt.aml 9973 \u2714 (empty) 100 N/A fspm.bin 720896 \u2716 fsps.bin 290481 (LZ4) \u2716 vbt.bin 1254 (LZMA) \u2714 fallback/postcar 37504 \u2714 fallback/payload 1813047 (LZMA) \u2714 (with exceptions) (empty) 1306724 N/A The FW_MAIN_A/FW_MAIN_B regions have been expanded first with CBFStool to show whole empty space for given region. Type Total size (bytes) Percent FW_MAIN_A/B region 5340928 N/A empty 1306824 N/A code size (open + closed) 4042044 N/A open-source 2023078 50.05% closed-source 2018966 49.95% COREBOOT has slightly higher open-source code percentage due to verstage and bootblock not being present in FW_MAIN_A/B regions. Summary for all 3 regions: Whole flash image To get the overall BIOS region and full image percentage of open source code we ignore unused space or FMAP regions which do not have CBFS and are merely data generated during build process or boot process. The BIOS region percentage is calculated as follows: (COREBOOT region open-source size + FW_MAIN_A/B open-source size * 2) * 100 divided by (COREBOOT region code size + FW_MAIN_A/B code size * 2) . Full image code only percentage is calculated as follows: (COREBOOT region open-source size + FW_MAIN_A/B open-source size * 2) * 100 divided by (ME + descriptor + COREBOOT region code size + FW_MAIN_A/B code size * 2) . Region Size (bytes) Open-source percent (bytes) descriptor 0x1000 0% ME 0x3D9000 0% unused hole 0xC26000 N/A BIOS 0x1000000 50.5% Summary 0x2000000 38% Comparison of pure code open-source vs closed-source. This was rather expected result. AMI BIOS region statistics: Type Total size (bytes) Percent BIOS data (UEFI var) 524288 N/A empty 7638472 N/A code size (open + closed) 8614456 N/A open-source 0 0% closed-source 8614456 100% Full BIOS region openness compared to AMI BIOS with data and free space: That mean Full image openness code only compared to AMI BIOS: Few conclusions from the above charts: Dasharo needs more space for BIOS data, it is mainly dictated by the usage of vboot which needs a significant amount of space for VBLOCKs, GBB and other stuff BIOS data is rather comparable between the firmware distributions, although it must be noted that vboot also generates BIOS data as explained above Dasharo has much less free space than AMI, however it must be noted that Dasharo contains 3! copies of functional firmware, but AMI only a single copy. Without vboot, BIOS region free space would reach over 70%! While BIOS region's Dasharo Openness Score is 50%, when compared with Intel ME and descriptor, the overall Dasharo Openness Score is 38% ME share is different because the size of BIOS code is different on both distributions Summary Image Open-source percent (bytes) AMI BIOS 0% Dasharo 38% Dasharo code takes approximately 4MB of space for a single region + some space for data which is less than 1MB. This reduces the single copy of firmware from 8MB to roughly 4MB compared to AMI BIOS. This is roughly 50% reduction of TCB! More over, given the 50% share in size of open-source code, Dasharo liberates BIOS in 75%! Few conclusions: Although the reduction of TCB is 50% it cannot be seen on the charts due to 3 copies of the firmware in Dasharo image. It also effectively increases the percentage of BIOS code both open and closed source in the full image. More significant differences would be seen with vboot disabled, there would be more free space and even less BIOS code both open and closed","title":"Openness score"},{"location":"variants/msi_z690/openness_analysis/#dasharo-openness-score","text":"This document aims to compare the openness of Dasharo firmware and AMI BIOS for MSI PRO Z690-A DDR4 WiFI. There is an ongoing discussion about the methodology of the openness metric.","title":"Dasharo Openness Score"},{"location":"variants/msi_z690/openness_analysis/#bios-versions-used-in-the-analysis","text":"Dasharo v1.0.0 AMI BIOS v1.0","title":"BIOS versions used in the analysis"},{"location":"variants/msi_z690/openness_analysis/#msi-original-bios-from-ami","text":"In the case of the AMI BIOS, the entire image should be considered proprietary. There are several parts of the image that have a well-known structure or make use of a public standard. However, to decode these structures, one needs to employ reverse-engineering tools and techniques to know what structures are present. For simplicity we treat UEFI variables as BIOS data. All empty padding regions between FFS and all volume free spaces are treated as unused space.","title":"MSI original BIOS from AMI"},{"location":"variants/msi_z690/openness_analysis/#dasharo-bios","text":"","title":"Dasharo BIOS"},{"location":"variants/msi_z690/openness_analysis/#summary","text":"Image Open-source percent (bytes) AMI BIOS 0% Dasharo 38% Dasharo code takes approximately 4MB of space for a single region + some space for data which is less than 1MB. This reduces the single copy of firmware from 8MB to roughly 4MB compared to AMI BIOS. This is roughly 50% reduction of TCB! More over, given the 50% share in size of open-source code, Dasharo liberates BIOS in 75%! Few conclusions: Although the reduction of TCB is 50% it cannot be seen on the charts due to 3 copies of the firmware in Dasharo image. It also effectively increases the percentage of BIOS code both open and closed source in the full image. More significant differences would be seen with vboot disabled, there would be more free space and even less BIOS code both open and closed","title":"Summary"},{"location":"variants/msi_z690/overview/","text":"Overview We moved the page to MSI Desktops -> Overview","title":"Overview"},{"location":"variants/msi_z690/overview/#overview","text":"We moved the page to MSI Desktops -> Overview","title":"Overview"},{"location":"variants/msi_z690/recovery/","text":"Recovery We moved the page to MSI Desktops -> Recovery","title":"Recovery"},{"location":"variants/msi_z690/recovery/#recovery","text":"We moved the page to MSI Desktops -> Recovery","title":"Recovery"},{"location":"variants/msi_z690/releases/","text":"Release Notes Following Release Notes describe status of Open Source Firmware development for MSI PRO Z690-A (WIFI) DDR4 and MSI PRO Z690-A (WIFI). For details about our release process please read Dasharo Standard Release Process . Subscribe to Dasharo compatible with MSI PRO Z690-A Newsletter Test results for this platform can be found here . v1.1.1 - 2023-02-23 Test results for this release can be found here . To get more details about the changes one may read the Dasharo v1.1.1 release blog post Added Early boot DMA protection menu option ACPI PCI interrupt routing for CPU PCIe Root Ports OC Watchdog ACPI device as in MSI firmware Changed Updated SMMSTORE driver to upstream version in UEFI Payload Improved visual comfort in the boot manager Fixed MSI PRO Z690-A WIFI DDR4 doesn't initialize IGP on certain Processors models MSI PRO Z690-A WIFI DDR4 with two Video Cards (2x Radeon 5600XT) has issues related to MMIO resource allocation Suspend doesn't work in Qubes OS with v1.1.0 Intel XTU on Windows reports \"The platform does not support overclocking\" on the MSI PRO Z690-A WIFI DDR4 with a K-series Processor SATA ports malfunction or Hot-Plug function disabled Platform sometimes automatically powers on after power off GPIO controller ACPI device yellow bang in Windows device manager Resource conflicts with chipset internal P2SB PCI device being incorrectly defined and initialized in coreboot Reset button hanging the platform for up to 2 minutes due to watchdog bug Known issues MSI FLASHBIOS feature is not working Reset to defaults with F9 causes the wrong settings to be restored Binaries msi_ms7d25_v1.1.1_ddr4.rom sha256 sha256.sig msi_ms7d25_v1.1.1_ddr5.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) Dasharo coreboot fork based on 912a262b7bf revision aa4701cd Dasharo EDKII fork based on dd7523b5b1 revision a913e338 v1.1.0 - 2022-11-22 Added Vboot recovery popup informing that platform has booted in recovery mode TCG2 TPM Physical Presence Interface support Support for DDR5 board variant PS/2 Controller enable/disable option Chipset watchdog support during boot and watchdog configuration menu Early boot DMA protection Option to reset Secure Boot keys to defaults Intel ME disable support and menu options Dasharo setup password SED/OPAL disk password support SATA disk password Firmware performance reporting USB stack and mass storage enable/disable option Network Boot enable/disable option SMM BIOS Write Protection support and enable/disable option AcpiView command to UEFI Shell Platform will beep 12 times and blink HDD led on critical firmware errors, e.g. if memory training failed PCIe 5.0 firmware caching in flash which allows to disable ME without losing PCIe 5.0 port functionality cbmem logging from UEFI Payload is now supported and one can check complete firmware logs from OS using coreboot's cbmem utility Added Intel default settings for missing Alder Lake S CPUs Changed Added new ACPI Platform driver that installs coreboot exposed ACPI tables and all allows native EDK2 ACPI table protocol to install new tables, e.g. Firmware Performance Data Table, BGRT (Boot Logo) of VFCT (AMD GPU ACPI table) Secure Boot is now disabled by default with all keys erased iPXE is now built from source using coreboot-sdk and included externally into UEFI Payload Dasharo setup menu full screen mode support Disabled PCIe ASPM and Clock PM for better PCIe device compatibility Disabled GPIO programming by FSP, coreboot handles the GPIO completely. This additionally fixes a bug in FSP which did not enable SATA DEVSLP properly. Changed Super I/O pin for PECI mode to reflect vendor firmware setting Switched from IOT FSP to public ADL Client FSP Switched to include microcode from public Intel microcode repository Disabled PCIe hotplug Network boot disabled by default, now configurable via menu option Fixed Vboot recovery popup is displayed before logo, so that logo do not disappear after popup is displayed Wrong Tau values from Turbo Boost PCI Express OptionROM loading causing certain dGPU cards to not work during POST PS/2 keyboard detection and inclusion to platform Console Input causing long delays in Ventoy or lockups in USB enumeration Incorrect USB2 PHY tuning values for USB-C ports causing hard USB controller lockups during USB enumeration and resulting in firmware hangs as long as USB Type-C devices were plugged or devices being unable to detect and enumerate in OS Broken PCI resource parsing above 4G Incorrect SMBIOS product name for non-WiFi variants USB storage devices disappear after reboot/power failure Known issues MSI FLASHBIOS feature is not working MMIO resource allocation issues with two Video Cards Slow video performance with Radeon 5600XT Reset to defaults with F9 causes the wrong settings to be restored Binaries msi_ms7d25_v1.1.0_ddr4.rom sha256 sha256.sig msi_ms7d25_v1.1.0_ddr5.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key Commands snippet: gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/keys/master-key/3mdeb-master-key.asc gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/3mdeb-dasharo-master-key.asc gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/msi_ms7d25/dasharo-release-1.x-compatible-with-msi-ms-7d25-signing-key.asc gpg --list-sigs \"3mdeb Master Key\" \"3mdeb Dasharo Master Key\" \"Dasharo release 1.x compatible with MSI MS-7D25 signing key\" # DDR4 wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.0/msi_ms7d25_v1.1.0_ddr4.rom wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.0/msi_ms7d25_v1.1.0_ddr4.rom.sha256 wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.0/msi_ms7d25_v1.1.0_ddr4.rom.sha256.sig sha256sum -c msi_ms7d25_v1.1.0_ddr4.rom.sha256 gpg --verify msi_ms7d25_v1.1.0_ddr4.rom.sha256.sig msi_ms7d25_v1.1.0_ddr4.rom.sha256 # DDR5 wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.0/msi_ms7d25_v1.1.0_ddr5.rom wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.0/msi_ms7d25_v1.1.0_ddr5.rom.sha256 wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.1.0/msi_ms7d25_v1.1.0_ddr5.rom.sha256.sig sha256sum -c msi_ms7d25_v1.1.0_ddr5.rom.sha256 gpg --verify msi_ms7d25_v1.1.0_ddr5.rom.sha256.sig msi_ms7d25_v1.1.0_ddr5.rom.sha256 SBOM (Software Bill of Materials) Dasharo coreboot fork based on 912a262b7bf revision b76a1467 Dasharo EDKII fork based on dd7523b5b1 revision 5738f9e8 v1.0.0 - 2022-05-27 Added Serial number and UUID in CBFS support TPM Physical Presence Interface support Changed Updated i225 EFI driver to version 0.10.04 to reduce the POST time Vboot submodule revision to fix recovery mode loop Fixed fTPM is not working Known issues USB storage devices disappear after reboot/power failure Binaries MSI PRO Z690-A WIFI DDR4 v1.0.0 sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key Commands snippet: gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/keys/master-key/3mdeb-master-key.asc gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/3mdeb-dasharo-master-key.asc gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/msi_ms7d25/dasharo-release-1.x-compatible-with-msi-ms-7d25-signing-key.asc gpg --list-sigs \"3mdeb Master Key\" \"3mdeb Dasharo Master Key\" \"Dasharo release 1.x compatible with MSI MS-7D25 signing key\" wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.0.0/msi_ms7d25_v1.0.0.rom wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.0.0/msi_ms7d25_v1.0.0.rom.sha256 wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v1.0.0/msi_ms7d25_v1.0.0.rom.sha256.sig sha256sum -c msi_ms7d25_v1.0.0.rom.sha256 gpg --verify msi_ms7d25_v1.0.0.rom.sha256.sig msi_ms7d25_v1.0.0.rom.sha256 SBOM (Software Bill of Materials) coreboot based on a552cfc9 revision d22caaa0a edk2 based on 4d2846ba revision 0c94299b v0.4.0 - 2022-05-13 Added Verified boot support Fixed Some PCIe ports are not working Known issues USB storage devices disappear after reboot/power failure fTPM is not working Binaries MSI PRO Z690-A WIFI DDR4 v0.4.0 sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key Commands snippet: gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/keys/master-key/3mdeb-master-key.asc gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/3mdeb-dasharo-master-key.asc gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/msi_ms7d25/dasharo-release-0.x-compatible-with-msi-ms-7d25-signing-key.asc gpg --list-sigs \"3mdeb Master Key\" \"3mdeb Dasharo Master Key\" \"Dasharo release 0.x compatible with MSI MS-7D25 signing key\" wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v0.4.0/msi_ms7d25_v0.4.0.rom wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v0.4.0/msi_ms7d25_v0.4.0.rom.sha256 wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v0.4.0/msi_ms7d25_v0.4.0.rom.sha256.sig sha256sum -c msi_ms7d25_v0.4.0.rom.sha256 gpg --verify msi_ms7d25_v0.4.0.rom.sha256.sig msi_ms7d25_v0.4.0.rom.sha256 SBOM (Software Bill of Materials) coreboot based on a552cfc9 revision 31c1da6b edk2 based on 4d2846ba revision 5494c8e2 v0.3.0 - 2022-05-05 Added Mainboard-specific SMBIOS data for slots and ports PCI Subsystem ID configuration CPU VR and PCH FIVR configuration Memory HCL UEFI Secure Boot TPM Support Measured Boot Custom boot menu keys Known issues USB storage devices disappear after reboot/power failure Some PCIe ports are not working fTPM is not working Binaries MSI PRO Z690-A WIFI DDR4 v0.3.0 sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key Commands snippet: gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/keys/master-key/3mdeb-master-key.asc gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/3mdeb-dasharo-master-key.asc gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/msi_ms7d25/dasharo-release-0.x-compatible-with-msi-ms-7d25-signing-key.asc gpg --list-sigs \"3mdeb Master Key\" \"3mdeb Dasharo Master Key\" \"Dasharo release 0.x compatible with MSI MS-7D25 signing key\" wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v0.3.0/msi_ms7d25_v0.3.0.rom wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v0.3.0/msi_ms7d25_v0.3.0.rom.sha256 wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v0.3.0/msi_ms7d25_v0.3.0.rom.sha256.sig sha256sum -c msi_ms7d25_v0.3.0.rom.sha256 gpg --verify msi_ms7d25_v0.3.0.rom.sha256.sig msi_ms7d25_v0.3.0.rom.sha256 SBOM (Software Bill of Materials) coreboot based on a552cfc9 revision b45173e9 edk2 based on 4d2846ba revision 5494c8e2 v0.2.0 - 2022-04-22 Added Configurable boot order Configurable boot options NVMe support Integrated WiFi and BT support PCIe support Network boot with integrated Ethernet Audio support Known issues USB storage devices disappear after reboot/power failure Some PCIe ports are not working Binaries MSI PRO Z690-A WIFI DDR4 v0.2.0 sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key Commands snippet: gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/keys/master-key/3mdeb-master-key.asc gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/3mdeb-dasharo-master-key.asc gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/msi_ms7d25/dasharo-release-0.x-compatible-with-msi-ms-7d25-signing-key.asc gpg --list-sigs \"3mdeb Master Key\" \"3mdeb Dasharo Master Key\" \"Dasharo release 0.x compatible with MSI MS-7D25 signing key\" wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v0.2.0/msi_ms7d25_v0.2.0.rom wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v0.2.0/msi_ms7d25_v0.2.0.rom.sha256 wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/v0.2.0/msi_ms7d25_v0.2.0.rom.sha256.sig sha256sum -c msi_ms7d25_v0.2.0.rom.sha256 gpg --verify msi_ms7d25_v0.2.0.rom.sha256.sig msi_ms7d25_v0.2.0.rom.sha256 SBOM (Software Bill of Materials) coreboot based on a552cfc9 revision 83fbdcf1 edk2 based on 4d2846ba revision 0a188758 v0.1.0 - 2022-04-13 Added Initial support for the MSI PRO Z690-A WIFI DDR4 platform Dasharo boot logo Dasharo SMBIOS compatibility UEFI compatibility UEFI shell One-time boot feature External HDMI and Display Port rear panel display support USB support Known issues USB storage devices disappear after reboot/power failure Binaries MSI PRO Z690-A WIFI DDR4 v0.1.0 sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key Commands snippet: gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/keys/master-key/3mdeb-master-key.asc gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/3mdeb-dasharo-master-key.asc gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/msi_ms7d25/dasharo-release-0.x-compatible-with-msi-ms-7d25-signing-key.asc gpg --list-sigs \"3mdeb Master Key\" \"3mdeb Dasharo Master Key\" \"Dasharo release 0.x compatible with MSI MS-7D25 signing key\" wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/msi_ms7d25_v0.1.0.rom wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/msi_ms7d25_v0.1.0.rom.sha256 wget https://3mdeb.com/open-source-firmware/Dasharo/msi_ms7d25/msi_ms7d25_v0.1.0.rom.sha256.sig sha256sum -c msi_ms7d25_v0.1.0.rom.sha256 gpg --verify msi_ms7d25_v0.1.0.rom.sha256.sig msi_ms7d25_v0.1.0.rom.sha256 SBOM (Software Bill of Materials) coreboot based on a552cfc9 revision 53948cd8 edk2 based on 4d2846ba revision 4d2846ba","title":"Releases"},{"location":"variants/msi_z690/releases/#release-notes","text":"Following Release Notes describe status of Open Source Firmware development for MSI PRO Z690-A (WIFI) DDR4 and MSI PRO Z690-A (WIFI). For details about our release process please read Dasharo Standard Release Process . Subscribe to Dasharo compatible with MSI PRO Z690-A Newsletter Test results for this platform can be found here .","title":"Release Notes"},{"location":"variants/msi_z690/releases/#v111-2023-02-23","text":"Test results for this release can be found here . To get more details about the changes one may read the Dasharo v1.1.1 release blog post","title":"v1.1.1 - 2023-02-23"},{"location":"variants/msi_z690/releases/#v110-2022-11-22","text":"","title":"v1.1.0 - 2022-11-22"},{"location":"variants/msi_z690/releases/#v100-2022-05-27","text":"","title":"v1.0.0 - 2022-05-27"},{"location":"variants/msi_z690/releases/#v040-2022-05-13","text":"","title":"v0.4.0 - 2022-05-13"},{"location":"variants/msi_z690/releases/#v030-2022-05-05","text":"","title":"v0.3.0 - 2022-05-05"},{"location":"variants/msi_z690/releases/#v020-2022-04-22","text":"","title":"v0.2.0 - 2022-04-22"},{"location":"variants/msi_z690/releases/#v010-2022-04-13","text":"","title":"v0.1.0 - 2022-04-13"},{"location":"variants/msi_z690/test-matrix/","text":"Test matrix About The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary. Note, that the below-described test scope is used during Dasharo Certification Procedure for both tested platforms: MSI PRO Z690-A WiFi DDR4 and MSI PRO Z690-A DDR5 . Module: Dasharo compatibility No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. UEFI Shell USH All 4. Display ports and LCD support DSP DSP002.001, DSP002.002, DSP002.003, DSP003.001, DSP003.002, DSP003.003 5. USB HID and MSC Support USB All 6. SMBIOS DMI DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001, DMI008.001 7. Custom boot logo CLG All 8. M.2 WiFi/Bluetooth WLE All 9. Audio subsystem AUD AUD001.001, AUD001.002, AUD004.001, AUD004.002 AUD005.001, AUD005.002 AUD006.001, AUD006.002 10. NVMe support NVM All 11. Network boot PXE Without PXE007.001 12. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 13. Windows booting WBT All 14. SD card support SDC All 15. Custom Boot Keys CBK All 16. Dasharo Tools Suite DTS DTS001.001, DTS002.001, DTS003.001, DTS004.001, DTS005.001, DTS006.001 17. CPU status CPU All 18. Platform suspend and resume SUSP Without SUSP004.001 19. Super I/O initialization - QubesOS PPS All 20. Device power control operations DPC All 21. Display resolution - QubesOS DSR All 22. SATA hot-plug detection SHT All Module: Dasharo security No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO Without VBO006.001, VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO All 5. ME disable/neuter support MNE All 6. BIOS lock support BLS All 7. SMM BIOS write protection SMM All 8. Early boot DMA protection EDP All 9. UEFI Setup password PSW All 10. Network stack enable/disable NBA All 11. USB stack enable/disable USS All Module: Dasharo performance No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF All","title":"Test matrix"},{"location":"variants/msi_z690/test-matrix/#test-matrix","text":"","title":"Test matrix"},{"location":"variants/msi_z690/test-matrix/#about","text":"The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary. Note, that the below-described test scope is used during Dasharo Certification Procedure for both tested platforms: MSI PRO Z690-A WiFi DDR4 and MSI PRO Z690-A DDR5 .","title":"About"},{"location":"variants/msi_z690/test-matrix/#module-dasharo-compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. UEFI Shell USH All 4. Display ports and LCD support DSP DSP002.001, DSP002.002, DSP002.003, DSP003.001, DSP003.002, DSP003.003 5. USB HID and MSC Support USB All 6. SMBIOS DMI DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001, DMI008.001 7. Custom boot logo CLG All 8. M.2 WiFi/Bluetooth WLE All 9. Audio subsystem AUD AUD001.001, AUD001.002, AUD004.001, AUD004.002 AUD005.001, AUD005.002 AUD006.001, AUD006.002 10. NVMe support NVM All 11. Network boot PXE Without PXE007.001 12. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 13. Windows booting WBT All 14. SD card support SDC All 15. Custom Boot Keys CBK All 16. Dasharo Tools Suite DTS DTS001.001, DTS002.001, DTS003.001, DTS004.001, DTS005.001, DTS006.001 17. CPU status CPU All 18. Platform suspend and resume SUSP Without SUSP004.001 19. Super I/O initialization - QubesOS PPS All 20. Device power control operations DPC All 21. Display resolution - QubesOS DSR All 22. SATA hot-plug detection SHT All","title":"Module: Dasharo compatibility"},{"location":"variants/msi_z690/test-matrix/#module-dasharo-security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO Without VBO006.001, VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO All 5. ME disable/neuter support MNE All 6. BIOS lock support BLS All 7. SMM BIOS write protection SMM All 8. Early boot DMA protection EDP All 9. UEFI Setup password PSW All 10. Network stack enable/disable NBA All 11. USB stack enable/disable USS All","title":"Module: Dasharo security"},{"location":"variants/msi_z790/hardware-matrix/","text":"Hardware configuration matrix Introduction This document describes the hardware configuration used for validation of the coreboot port on the MSI PRO Z790-P workstation. For additional information, please check the FAQ section . MSI PRO Z790-P, SN: 601-7E06-030B2210001398 Component Description CPU Intel Core i5-13600K 3.5 GHz CPU cooler Noctua NH-U12S CPU Cooler RAM Slot 1: Kingston KF556C40BB-8 Slot 1: Kingston KF556C40BB-8 Slot 1: Kingston KF556C40BB-8 Slot 1: Kingston KF556C40BB-8 Flash memory Macronix MX25U25635F SSD Intel 670p 512 GB M26472-201 NVME USB pendrives 1. Adata C008 USB 2.0 16 GB 2. Kingston DataTraveler USB 3.2 16 GB SD cards SanDisk Ultra microSD HC I 16 GB Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p 3. 1-port USB Type-C Network Local network wired connection Power Supply SeaSonic FOCUS Plus Platinum Power Control Sonoff S20 EU type E Remote Testing Environment RTE v1.1.0 KVM PiKVM based on Raspberry Pi 4","title":"Hardware Configuration Matrix"},{"location":"variants/msi_z790/hardware-matrix/#hardware-configuration-matrix","text":"","title":"Hardware configuration matrix"},{"location":"variants/msi_z790/hardware-matrix/#introduction","text":"This document describes the hardware configuration used for validation of the coreboot port on the MSI PRO Z790-P workstation. For additional information, please check the FAQ section .","title":"Introduction"},{"location":"variants/msi_z790/hardware-matrix/#msi-pro-z790-p-sn-601-7e06-030b2210001398","text":"Component Description CPU Intel Core i5-13600K 3.5 GHz CPU cooler Noctua NH-U12S CPU Cooler RAM Slot 1: Kingston KF556C40BB-8 Slot 1: Kingston KF556C40BB-8 Slot 1: Kingston KF556C40BB-8 Slot 1: Kingston KF556C40BB-8 Flash memory Macronix MX25U25635F SSD Intel 670p 512 GB M26472-201 NVME USB pendrives 1. Adata C008 USB 2.0 16 GB 2. Kingston DataTraveler USB 3.2 16 GB SD cards SanDisk Ultra microSD HC I 16 GB Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p 3. 1-port USB Type-C Network Local network wired connection Power Supply SeaSonic FOCUS Plus Platinum Power Control Sonoff S20 EU type E Remote Testing Environment RTE v1.1.0 KVM PiKVM based on Raspberry Pi 4","title":"MSI PRO Z790-P, SN: 601-7E06-030B2210001398"},{"location":"variants/msi_z790/releases/","text":"Release Notes Following Release Notes describe the status of Open-Source Firmware development for MSI PRO Z790-P (WIFI) DDR4 and MSI PRO Z790-P (WIFI). For details about our release process please read Dasharo Standard Release Process . Subscribe to Dasharo compatible with MSI PRO Z790-P Newsletter Test results for this platform can be found here .","title":"Releases"},{"location":"variants/msi_z790/releases/#release-notes","text":"Following Release Notes describe the status of Open-Source Firmware development for MSI PRO Z790-P (WIFI) DDR4 and MSI PRO Z790-P (WIFI). For details about our release process please read Dasharo Standard Release Process . Subscribe to Dasharo compatible with MSI PRO Z790-P Newsletter Test results for this platform can be found here .","title":"Release Notes"},{"location":"variants/msi_z790/test-matrix/","text":"Test matrix About The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary. Note, that the below-described test scope is used during Dasharo Certification Procedure for MSI PRO Z790-P platform. Module: Dasharo compatibility No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. UEFI Shell USH All 4. Display ports and LCD support DSP DSP002.001, DSP002.002, DSP002.003, DSP003.001, DSP003.002, DSP003.003 5. USB HID and MSC Support USB All 6. SMBIOS DMI DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001, DMI008.001 7. Custom boot logo CLG All 8. M.2 WiFi/Bluetooth WLE All 9. Audio subsystem AUD AUD001.001, AUD001.002, AUD004.001, AUD004.002 AUD005.001, AUD005.002 AUD006.001, AUD006.002 10. NVMe support NVM All 11. Network boot PXE Without PXE007.001 12. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 13. Windows booting WBT All 14. SD card support SDC All 15. Custom Boot Keys CBK All 16. Dasharo Tools Suite DTS DTS001.001, DTS002.001, DTS003.001, DTS004.001, DTS005.001, DTS006.001 17. CPU status CPU All 18. Platform suspend and resume SUSP Without SUSP004.001 19. Super I/O initialization - QubesOS PPS All 20. Device power control operations DPC All 21. Display resolution - QubesOS DSR All 22. SATA hot-plug detection SHT All Module: Dasharo security No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO Without VBO006.001, VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO All 5. ME disable/neuter support MNE All 6. BIOS lock support BLS All 7. SMM BIOS write protection SMM All 8. Early boot DMA protection EDP All 9. UEFI Setup password PSW All 10. Network stack enable/disable NBA All 11. USB stack enable/disable USS All Module: Dasharo performance No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF All","title":"Test matrix"},{"location":"variants/msi_z790/test-matrix/#test-matrix","text":"","title":"Test matrix"},{"location":"variants/msi_z790/test-matrix/#about","text":"The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary. Note, that the below-described test scope is used during Dasharo Certification Procedure for MSI PRO Z790-P platform.","title":"About"},{"location":"variants/msi_z790/test-matrix/#module-dasharo-compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. UEFI Shell USH All 4. Display ports and LCD support DSP DSP002.001, DSP002.002, DSP002.003, DSP003.001, DSP003.002, DSP003.003 5. USB HID and MSC Support USB All 6. SMBIOS DMI DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001, DMI008.001 7. Custom boot logo CLG All 8. M.2 WiFi/Bluetooth WLE All 9. Audio subsystem AUD AUD001.001, AUD001.002, AUD004.001, AUD004.002 AUD005.001, AUD005.002 AUD006.001, AUD006.002 10. NVMe support NVM All 11. Network boot PXE Without PXE007.001 12. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 13. Windows booting WBT All 14. SD card support SDC All 15. Custom Boot Keys CBK All 16. Dasharo Tools Suite DTS DTS001.001, DTS002.001, DTS003.001, DTS004.001, DTS005.001, DTS006.001 17. CPU status CPU All 18. Platform suspend and resume SUSP Without SUSP004.001 19. Super I/O initialization - QubesOS PPS All 20. Device power control operations DPC All 21. Display resolution - QubesOS DSR All 22. SATA hot-plug detection SHT All","title":"Module: Dasharo compatibility"},{"location":"variants/msi_z790/test-matrix/#module-dasharo-security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO Without VBO006.001, VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO All 5. ME disable/neuter support MNE All 6. BIOS lock support BLS All 7. SMM BIOS write protection SMM All 8. Early boot DMA protection EDP All 9. UEFI Setup password PSW All 10. Network stack enable/disable NBA All 11. USB stack enable/disable USS All","title":"Module: Dasharo security"},{"location":"variants/novacustom_ns5x_adl/hardware-matrix/","text":"Hardware configuration matrix Introduction This document describes the hardware configurations used for validation of the coreboot port on the NovaCustom NS5x/7x laptops. Ports specification Right side view No. Description 1. Speaker 2. 2-In-1 Audio Jack (Headphone / Microphone) 3. MicroSD Card Reader 4. USB 2.0 Port 5. LED Indicator 6. Power Button 7. RJ-45 LAN Jack 8. Security Lock Slot Left side view No. Description 1. DC-In Jack 2. HDMI-Out Port 3. USB 3.2 Gen 2 Type-A Port 4. USB 3.2 Gen 2 Type-C Port 5. Thunderbolt 4 Port with Power Delivery (DC-IN) 6. Speaker The graphics used are from pages 17-18 of the official service manual for the NS51/70 platforms. NS5xPU Component Description CPU Intel(R) Core(TM) i5-1240P Internal Cooling RAM Slot 1: KVR32S22S8/8 Slot 2: KVR32S22S8/8 SSD Samsung SSD 990 PRO 1 TB Flash memory GigaDevice 25B1256EYIG 32 MB USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card Intel Wi-Fi 6 AX201 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices Thunderbolt 4 Port: Wavlink 100W PD Pro docking station USB Type-C Port: Adapter USB-C-RJ45 with connected Ethernet cable Power Supply Chicony 19V, 4.74A, 90 W NS7xPU Component Description CPU Intel(R) Core(TM) i7-1260P Internal Cooling RAM Slot 1: KVR32S22S8/8 Slot 2: KVR32S22S8/8 SSD Samsung SSD 980 PRO 250 GB Flash memory GigaDevice 25B1256EYIG 32 MB USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card Intel Wi-Fi 6 AX201 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices Thunderbolt 4 Port: Wavlink 100W PD Pro docking station USB Type-C Port: Adapter USB-C-RJ45 with connected Ethernet cable Power Supply Chicony 19V, 4.74A, 90 W","title":"Hardware Configuration Matrix"},{"location":"variants/novacustom_ns5x_adl/hardware-matrix/#hardware-configuration-matrix","text":"","title":"Hardware configuration matrix"},{"location":"variants/novacustom_ns5x_adl/hardware-matrix/#introduction","text":"This document describes the hardware configurations used for validation of the coreboot port on the NovaCustom NS5x/7x laptops.","title":"Introduction"},{"location":"variants/novacustom_ns5x_adl/hardware-matrix/#ports-specification","text":"","title":"Ports specification"},{"location":"variants/novacustom_ns5x_adl/hardware-matrix/#ns5xpu","text":"Component Description CPU Intel(R) Core(TM) i5-1240P Internal Cooling RAM Slot 1: KVR32S22S8/8 Slot 2: KVR32S22S8/8 SSD Samsung SSD 990 PRO 1 TB Flash memory GigaDevice 25B1256EYIG 32 MB USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card Intel Wi-Fi 6 AX201 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices Thunderbolt 4 Port: Wavlink 100W PD Pro docking station USB Type-C Port: Adapter USB-C-RJ45 with connected Ethernet cable Power Supply Chicony 19V, 4.74A, 90 W","title":"NS5xPU"},{"location":"variants/novacustom_ns5x_adl/hardware-matrix/#ns7xpu","text":"Component Description CPU Intel(R) Core(TM) i7-1260P Internal Cooling RAM Slot 1: KVR32S22S8/8 Slot 2: KVR32S22S8/8 SSD Samsung SSD 980 PRO 250 GB Flash memory GigaDevice 25B1256EYIG 32 MB USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card Intel Wi-Fi 6 AX201 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices Thunderbolt 4 Port: Wavlink 100W PD Pro docking station USB Type-C Port: Adapter USB-C-RJ45 with connected Ethernet cable Power Supply Chicony 19V, 4.74A, 90 W","title":"NS7xPU"},{"location":"variants/novacustom_ns5x_adl/post_install/","text":"Post-installation setup This document contains extra steps to perform after installing Dasharo in order to enable full functionality. Touchpad hotkey enablement (Linux) The touchpad hotkey needs extra setup to function correctly under Linux. To enable the touchpad hotkey to work under Linux, follow the steps below: Create a file /etc/udev/hwdb.d/60-keyboard.hwdb with the following contents: evdev:atkbd:dmi:bvn*:bvr*:svnNotebook:pnNS5x_NS7xPU:* KEYBOARD_KEY_f7 = 191 KEYBOARD_KEY_f8 = 191 Execute the following commands: sudo systemd-hwdb update sudo udevadm trigger After executing these steps, it should be possible to enable and disable the touchpad using the touchpad hotkey (Fn+F1) on the keyboard when using GNOME. Touchpad multi-touch support (NS7x / 17-inch model, Linux) On NS7x an additional fix is necessary to enable multi-touch on Linux. Create a file /etc/modprobe.d/blacklist-psmouse.conf with the following contents: blacklist psmouse and then run the following commands: sudo depmod -a sudo update-initramfs -u Now reboot your computer to apply the changes. Installing updates and drivers (Windows 11) Several features on Windows 11 (i. e. suspending the device) may not work or work unexpectedly without installing all of the updates and drivers. To install all of them, log into system, connect the device to the mains and Internet, then follow the steps below: Press the Windows button on the keypad. Type Windows Update Settings in the search and press Enter . Select the Check for updates bar to start installing available updates and drivers. During this process previously selected bar might be changed to Restart now or Retry , so click them if something hasn't been installed yet, something has gone wrong or restart is just required. The entire process may take up to 30 minutes. Select the Advanced options option in the Windows Update Settings window. Locate the Optional updates option and click on it. Select all displayed updates and drivers. Select the Download & Install bar to start installing additional updates and drivers. During this process previously selected bar might be changed to Restart now or Retry , so click them if something hasn't been installed yet, something has gone wrong or restart is just required. The entire process may take up to 30 minutes. Repeat all steps until all updates have been installed. Suspend fix for SATA disks (Windows and Linux) Only affects laptops with M.2 SATA disks experiencing sleep issues (the power LED not blinking while the laptop is suspended). Windows and certain Linux distros such as Ubuntu do not enable the necessary power saving tweaks to enable sleep mode while a SATA disk is installed. To apply the fix, run the following scripts Windows Download the script: link Double click on the script to install the tweak Linux Download the script: link Execute as root: chmod +x install_dipm_service.sh sudo ./install_dipm_service.sh","title":"Post-installation setup"},{"location":"variants/novacustom_ns5x_adl/post_install/#post-installation-setup","text":"This document contains extra steps to perform after installing Dasharo in order to enable full functionality.","title":"Post-installation setup"},{"location":"variants/novacustom_ns5x_adl/post_install/#touchpad-hotkey-enablement-linux","text":"The touchpad hotkey needs extra setup to function correctly under Linux. To enable the touchpad hotkey to work under Linux, follow the steps below: Create a file /etc/udev/hwdb.d/60-keyboard.hwdb with the following contents: evdev:atkbd:dmi:bvn*:bvr*:svnNotebook:pnNS5x_NS7xPU:* KEYBOARD_KEY_f7 = 191 KEYBOARD_KEY_f8 = 191 Execute the following commands: sudo systemd-hwdb update sudo udevadm trigger After executing these steps, it should be possible to enable and disable the touchpad using the touchpad hotkey (Fn+F1) on the keyboard when using GNOME.","title":"Touchpad hotkey enablement (Linux)"},{"location":"variants/novacustom_ns5x_adl/post_install/#touchpad-multi-touch-support-ns7x-17-inch-model-linux","text":"On NS7x an additional fix is necessary to enable multi-touch on Linux. Create a file /etc/modprobe.d/blacklist-psmouse.conf with the following contents: blacklist psmouse and then run the following commands: sudo depmod -a sudo update-initramfs -u Now reboot your computer to apply the changes.","title":"Touchpad multi-touch support (NS7x / 17-inch model, Linux)"},{"location":"variants/novacustom_ns5x_adl/post_install/#installing-updates-and-drivers-windows-11","text":"Several features on Windows 11 (i. e. suspending the device) may not work or work unexpectedly without installing all of the updates and drivers. To install all of them, log into system, connect the device to the mains and Internet, then follow the steps below: Press the Windows button on the keypad. Type Windows Update Settings in the search and press Enter . Select the Check for updates bar to start installing available updates and drivers. During this process previously selected bar might be changed to Restart now or Retry , so click them if something hasn't been installed yet, something has gone wrong or restart is just required. The entire process may take up to 30 minutes. Select the Advanced options option in the Windows Update Settings window. Locate the Optional updates option and click on it. Select all displayed updates and drivers. Select the Download & Install bar to start installing additional updates and drivers. During this process previously selected bar might be changed to Restart now or Retry , so click them if something hasn't been installed yet, something has gone wrong or restart is just required. The entire process may take up to 30 minutes. Repeat all steps until all updates have been installed.","title":"Installing updates and drivers (Windows 11)"},{"location":"variants/novacustom_ns5x_adl/post_install/#suspend-fix-for-sata-disks-windows-and-linux","text":"Only affects laptops with M.2 SATA disks experiencing sleep issues (the power LED not blinking while the laptop is suspended). Windows and certain Linux distros such as Ubuntu do not enable the necessary power saving tweaks to enable sleep mode while a SATA disk is installed. To apply the fix, run the following scripts","title":"Suspend fix for SATA disks (Windows and Linux)"},{"location":"variants/novacustom_ns5x_adl/releases/","text":"NovaCustom NS5x/NS7x ADL (12th Gen) Dasharo Release Notes Following Release Notes describe status of open-source firmware development for NovaCustom NS5x/NS7x ADL (12th Gen) For details about our release process please read Dasharo Standard Release Process . Subscribe to NovaCustom NS5x/NS7x ADL (12th Gen) Dasharo Release Newsletter v1.6.0 - 2023-04-07 Test results for this release can be found here . Added Intel Management Engine Disable The same keyboard illumination setting is restored after suspend or poweroff One of the two fan profiles can now be selected in Setup Menu Fn lock hotkey feature Setup menu option for switching between S0ix and S3 suspend mode Changed Keys must be provisioned prior enabling Secure Boot The function keys responsible for entering the setup and boot menu in BIOS have been changed from ESC/F12 to F2/F7 Fixed Waking up from sleep on Ubuntu 22.04 is not 100% reliable (Dasharo issue #205) The connected RJ45 cable to the Ethernet socket causes a hardware error on Windows 11 (Dasharo issue #264) Laptop not starting after fully discharging (NS70PU) (Dasharo issue #287) The Auto Boot time-out value is not respected (Dasharo issue #292) ACPI boot errors during booting Ubuntu 22.04 (Dasharo issue #293) Windows update KB5012170 cannot be installed (Dasharo issue #294) Internal keyboard sometimes does not work in firmware (Dasharo issue #295) SMMStore sometimes gets wiped out by UEFI payload on NovaCustom ADL laptops (Dasharo issue #298) Known issues The power LED is not always blinking while in sleep mode on Windows 11 (Dasharo issue #182) Suspend does not work correctly while a SATA disk is installed (Dasharo issue #230) Touchpad isn't work on Debian 11.3 (Dasharo issue #240) Sleep sometimes not working (Dasharo issue #261) Popup with information about recovery mode is displayed after flashing with a valid binary (Dasharo issue #269) Missing information about cache (Dasharo issue #343) Keyboard backlight not working after restart (Dasharo issue #349) Connecting and immediately disconnecting the charger, sets the battery status in OS to charging for about 2 minutes (Dasharo issue #350) Reset to defaults with F9 causes the wrong settings to be restored (Dasharo issue #355) Laptop not suspending while connected to a USB-C docking station (Dasharo issue #368) Keyboard backlight brightness is not properly restored after cold-boot (Dasharo issue #402) After changing the Intel ME mode the Reset option in the setup menu turns off the device (Dasharo issue #403) The docking station is not detected after cold-boot and warm-boot (Dasharo issue #404) Binaries novacustom_ns5x_adl_ec_v1.6.0.rom sha256 sha256.sig novacustom_ns5x_adl_v1.6.0.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) Dasharo coreboot fork based on 1a8eb6c02103727431ac1ea23f4f507e49f3cde7 revision ae10b20f Dasharo EDKII fork based on e0334c228ce4ba51f47ff79a118f214031d4650f revision bd421b40 Intel ME version 16.1.25.1865 v1.5.0 - Non-public engineering release v1.4.0 - 2022-11-06 Test results for this release can be found here . Added Support for NovaCustom NS5x/NS7x 12th Gen UEFI Boot Support Configurable boot order Configurable boot options UEFI Secure Boot support NovaCustom boot logo Vboot Verified Boot Vboot recovery mode information popup Dasharo setup menu full screen mode support Support for RGB backlit keyboard Support for open-source EC firmware Known issues The power LED is not always blinking while in sleep mode on Windows 11 (Dasharo issue #182) Suspend does not work correctly while a SATA disk is installed (Dasharo issue #230) Binaries novacustom_ns5x_adl_ec_v1.4.0.rom sha256 sha256.sig novacustom_ns5x_adl_v1.4.0.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) Dasharo coreboot fork based on 1a8eb6c02103 revision cf81af26 Dasharo EDKII fork based on dd7523b5b123 revision abfdef40","title":"Releases"},{"location":"variants/novacustom_ns5x_adl/releases/#novacustom-ns5xns7x-adl-12th-gen-dasharo-release-notes","text":"Following Release Notes describe status of open-source firmware development for NovaCustom NS5x/NS7x ADL (12th Gen) For details about our release process please read Dasharo Standard Release Process . Subscribe to NovaCustom NS5x/NS7x ADL (12th Gen) Dasharo Release Newsletter","title":"NovaCustom NS5x/NS7x ADL (12th Gen) Dasharo Release Notes"},{"location":"variants/novacustom_ns5x_adl/releases/#v160-2023-04-07","text":"Test results for this release can be found here .","title":"v1.6.0 - 2023-04-07"},{"location":"variants/novacustom_ns5x_adl/releases/#v150-non-public-engineering-release","text":"","title":"v1.5.0 - Non-public engineering release"},{"location":"variants/novacustom_ns5x_adl/releases/#v140-2022-11-06","text":"Test results for this release can be found here .","title":"v1.4.0 - 2022-11-06"},{"location":"variants/novacustom_ns5x_adl/test-matrix/","text":"Test matrix About The test matrix is used to determine the scope of tests to which the DUT is subjected before the release of the new binary. Module: Dasharo compatibility No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports and LCD support DSP DSP001.001, DSP001.002, DSP001.003, DSP002.001, DSP002.002 4. Embedded Controller and Super I/O initialization ECR Without ECR010.001, ECR010.002, ECR25.001, ECR26.001, ECR27.001, ECR28.001 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot keys CBK All 8. USB HID and MSC Support USB All 9. Debian Stable and Ubuntu LTS support LBT LBT004.001, LBT004.002 10. UEFI Shell USH All 11. Windows booting WBT WBT001.001 12. Audio subsystem AUD All 13. USB-C support UTC All 14. Network boot PXE Without PXE007.001 15. M.2 WiFi/Bluetooth WLE All 16. SD card support SDC All 17. USB Camera verification CAM All 18. Fan speed measure FAN FAN001.001 19. SMBIOS DMI Without DMI001.001 20. Firmware update using fwupd FFW All 21. Dasharo Tools Suite DTS DTS006.001, DTS007.001 22. CPU status CPU All 23. Embedded controller flashing ECF All 24. Logo customization functionality LCM LCM001.001 25. Firmware locally building and flashing FLB All 26. Custom Boot Order CBO CBO001.002 27. QubesOS support QBS All 28. Fedora support FED All 29. Platform suspend and resume SUSP Without SUSP004.001 and SUSP006.001 30. BIOS menu function keys BMF All Module: Dasharo security No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO Without SBO006.001, SBO007.001 and SBO008.001 5. ME disable/neuter support MNE Without MNE006.001 Module: Dasharo performance No. Supported test suite Test suite ID Supported test cases 1. coreboot boot measure CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF All 4. Custom fan curve CFC All 5. Platform stability STB All Module: Dasharo stability No. Supported test suite Test suite ID Supported test cases 1. USB Type-A devices detection SUD All 2. M.2 Wi-fi SMW All 3. NVMe detection SNV All 4. NET interface after coldboot/warmboot/reboot/suspend NET All","title":"Test matrix"},{"location":"variants/novacustom_ns5x_adl/test-matrix/#test-matrix","text":"","title":"Test matrix"},{"location":"variants/novacustom_ns5x_adl/test-matrix/#about","text":"The test matrix is used to determine the scope of tests to which the DUT is subjected before the release of the new binary.","title":"About"},{"location":"variants/novacustom_ns5x_adl/test-matrix/#module-dasharo-compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports and LCD support DSP DSP001.001, DSP001.002, DSP001.003, DSP002.001, DSP002.002 4. Embedded Controller and Super I/O initialization ECR Without ECR010.001, ECR010.002, ECR25.001, ECR26.001, ECR27.001, ECR28.001 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot keys CBK All 8. USB HID and MSC Support USB All 9. Debian Stable and Ubuntu LTS support LBT LBT004.001, LBT004.002 10. UEFI Shell USH All 11. Windows booting WBT WBT001.001 12. Audio subsystem AUD All 13. USB-C support UTC All 14. Network boot PXE Without PXE007.001 15. M.2 WiFi/Bluetooth WLE All 16. SD card support SDC All 17. USB Camera verification CAM All 18. Fan speed measure FAN FAN001.001 19. SMBIOS DMI Without DMI001.001 20. Firmware update using fwupd FFW All 21. Dasharo Tools Suite DTS DTS006.001, DTS007.001 22. CPU status CPU All 23. Embedded controller flashing ECF All 24. Logo customization functionality LCM LCM001.001 25. Firmware locally building and flashing FLB All 26. Custom Boot Order CBO CBO001.002 27. QubesOS support QBS All 28. Fedora support FED All 29. Platform suspend and resume SUSP Without SUSP004.001 and SUSP006.001 30. BIOS menu function keys BMF All","title":"Module: Dasharo compatibility"},{"location":"variants/novacustom_ns5x_adl/test-matrix/#module-dasharo-security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO Without SBO006.001, SBO007.001 and SBO008.001 5. ME disable/neuter support MNE Without MNE006.001","title":"Module: Dasharo security"},{"location":"variants/novacustom_ns5x_adl/test-matrix/#module-dasharo-performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot boot measure CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF All 4. Custom fan curve CFC All 5. Platform stability STB All","title":"Module: Dasharo performance"},{"location":"variants/novacustom_ns5x_adl/test-matrix/#module-dasharo-stability","text":"No. Supported test suite Test suite ID Supported test cases 1. USB Type-A devices detection SUD All 2. M.2 Wi-fi SMW All 3. NVMe detection SNV All 4. NET interface after coldboot/warmboot/reboot/suspend NET All","title":"Module: Dasharo stability"},{"location":"variants/novacustom_ns5x_tgl/hardware-matrix/","text":"Hardware configuration matrix Introduction This document describes the hardware configurations used for validation of the coreboot port on the NovaCustom NS51/NS70 laptops. Ports specification Right side view No. Description 1. Speaker 2. 2-In-1 Audio Jack (Headphone / Microphone) 3. MicroSD Card Reader 4. USB 2.0 Port 5. LED Indicator 6. Power Button 7. RJ-45 LAN Jack 8. Security Lock Slot Left side view No. Description 1. DC-In Jack 2. HDMI-Out Port 3. USB 3.2 Gen 2 Type-A Port 4. USB 3.2 Gen 2 Type-C Port 5. Thunderbolt 4 Port with Power Delivery (DC-IN) 6. Speaker The graphics used are from pages 17-18 of the official service manual for the NS51/70 platforms. NS51 Component Description CPU Intel(R) Core(TM) i5-1135G7 Internal Cooling RAM Slot 1: KVR32S22D8/16 Slot 2: KVR32S22D8/16 SSD 1. Samsung SSD 980 PRO 250 GB 2. Samsung SSD 980 PRO 500 GB Flash memory Winbond 25Q128JVSQ 2118 16 MB USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card Intel Wi-Fi 6 AX201 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices Thunderbolt 4 Port: Wavlink 100W PD Pro docking station USB Type-C Port: Adapter USB-C-RJ45 with connected Ethernet cable Power Supply Chicony 19V, 3.42A, 65 W NS70 Component Description CPU Intel(R) Core(TM) i5-1135G7 Internal Cooling RAM Slot 1: KVR32S22S8/8 Slot 2: KVR32S22S8/8 SSD Samsung SSD 980 1 TB Flash memory GigaDevice 25B127DSIG 16 MB USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card Intel Wi-Fi 6 AX201 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices Thunderbolt 4 Port: Wavlink 100W PD Pro docking station USB Type-C Port: Adapter USB-C-RJ45 with connected Ethernet cable Power Supply Chicony 19V, 3.42A, 65 W","title":"Hardware Configuration Matrix"},{"location":"variants/novacustom_ns5x_tgl/hardware-matrix/#hardware-configuration-matrix","text":"","title":"Hardware configuration matrix"},{"location":"variants/novacustom_ns5x_tgl/hardware-matrix/#introduction","text":"This document describes the hardware configurations used for validation of the coreboot port on the NovaCustom NS51/NS70 laptops.","title":"Introduction"},{"location":"variants/novacustom_ns5x_tgl/hardware-matrix/#ports-specification","text":"","title":"Ports specification"},{"location":"variants/novacustom_ns5x_tgl/hardware-matrix/#ns51","text":"Component Description CPU Intel(R) Core(TM) i5-1135G7 Internal Cooling RAM Slot 1: KVR32S22D8/16 Slot 2: KVR32S22D8/16 SSD 1. Samsung SSD 980 PRO 250 GB 2. Samsung SSD 980 PRO 500 GB Flash memory Winbond 25Q128JVSQ 2118 16 MB USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card Intel Wi-Fi 6 AX201 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices Thunderbolt 4 Port: Wavlink 100W PD Pro docking station USB Type-C Port: Adapter USB-C-RJ45 with connected Ethernet cable Power Supply Chicony 19V, 3.42A, 65 W","title":"NS51"},{"location":"variants/novacustom_ns5x_tgl/hardware-matrix/#ns70","text":"Component Description CPU Intel(R) Core(TM) i5-1135G7 Internal Cooling RAM Slot 1: KVR32S22S8/8 Slot 2: KVR32S22S8/8 SSD Samsung SSD 980 1 TB Flash memory GigaDevice 25B127DSIG 16 MB USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card Intel Wi-Fi 6 AX201 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices Thunderbolt 4 Port: Wavlink 100W PD Pro docking station USB Type-C Port: Adapter USB-C-RJ45 with connected Ethernet cable Power Supply Chicony 19V, 3.42A, 65 W","title":"NS70"},{"location":"variants/novacustom_ns5x_tgl/releases/","text":"NovaCustom NS5x/NS7x TGL (11th Gen) Dasharo Release Notes Following Release Notes describe the status of Open Source Firmware development for NovaCustom NS5x/7x. For details about our release process please read Dasharo Standard Release Process . Subscribe to NovaCustom NS5x/7x Dasharo Release Newsletter Test results for this platform can be found here . v1.4.0 - 2023-03-02 Added The same keyboard illumination setting is restored after suspend or poweroff One of the two fan profiles can now be selected in Setup Menu Fn lock hotkey feature Changed Keys must be provisioned prior enabling Secure Boot Trackpad no longer working after 1.3.0 upgrade from 1.1.0 (Dasharo issue #313) Known issues Low level interfering crackling/popping of the speakers while playing no sound (Dasharo issue #224) The power LED is not always blinking while in sleep mode on Windows 11 (Dasharo issue #182) Keyboard backlight turns on after resuming from sleep mode (Dasharo issue #332) The screen brightness level gets stuck when key are held or pressed too fast (Dasharo issue #341) Connecting and immediately disconnecting the charger, sets the battery status in OS to 'charging' for about 2 minutes (Dasharo issue #350) Reset to defaults with F9 causes the wrong settings to be restored (Dasharo issue #355) Connecting the RJ45 cable to the Gigabit Ethernet port on the docking station does not result in obtaining an Internet connection (Dasharo issue #356) Unable to login to Windows 11 with the docking station connected (Dasharo issue #357) Binaries novacustom_ns5x_tgl_ec_v1.4.0.rom sha256 sha256.sig novacustom_ns5x_tgl_v1.4.0.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on 1a8eb6c02103727431ac1ea23f4f507e49f3cde7 revision 636f432a EDK2 based on e0334c228ce4ba51f47ff79a118f214031d4650f revision 2c61576a Intel ME version 15.0.30.1776 v1.3.0 - 2022-09-01 EC firmware transition Please note, that version 1.3.0 of Dasharo BIOS firmware works correctly only with the Dasharo EC firmware . This is the first release when this open-source EC firmware is used, so additional steps need to be taken when upgrading. Please refer to the Firmware update section for more details on upgrading your firmware. Added Enabled Vboot Verified Boot Vboot Recovery Popup Fullscreen setup menu Changed Rebased on upstream coreboot revision 1a8eb6c0 Support for Open EC Firmware Disabled UEFI Secure Boot by default Fixed The touchpad ON/OFF switch Fn key is not functional Binaries novacustom_ns5x_v1.3.0.rom sha256 sha256.sig novacustom_ns5x_v1.3.0_ec.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on 1a8eb6c02103727431ac1ea23f4f507e49f3cde7 revision 1153a18d EDK2 based on e0334c228ce4ba51f47ff79a118f214031d4650f revision abfdef40 v1.2.0 - 2022-05-26 Added Persistent RGB keyboard settings Increased power limits to CPU defaults (28W PL1 / 35W PL2) Fixed CVE-2022-29264 SMM loader vulnerability Incorrect vendor name in SMBIOS Known issues CPU not running on expected frequency and usage NS50MU UCM-UCSI ACPI device displays an error in Windows Device Manager Headsets connected to the docking station are not recognizable on NS70/50 v1.2.0 General problem with charging the DUT via the docking station using USB Type-C slot NS70/50 v1.2.0 Binaries novacustom_ns5x_v1.2.0.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on 4.16 revision b087dcbd tianocore based on e0334c228ce4ba51f47ff79a118f214031d4650f revision 90364638 v1.1.0 - 2022-04-22 Added Support for NovaCustom NS7x Support for RGB Keyboard Persistent boot logo implementation Changed Temporarily disable vboot due to the risk of bricinkg certain units when flashing via internal programmer Known issues CPU not running on expected frequency and usage NS50MU UCM-UCSI ACPI device displays an error in Windows Device Manager The touchpad ON/OFF switch Fn key is not functional Incorrect vendor name in SMBIOS Binaries novacustom_ns5x_v1.1.0.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on 4.16 revision c2f031af tianocore based on e0334c228ce4ba51f47ff79a118f214031d4650f revision 4d2846ba v1.0.0 - 2022-03-23 Added Support for NovaCustom NS5x Support for EC firmware 1.07.07 UEFI Boot Support Configurable boot order Configurable boot options UEFI Secure Boot support NovaCustom boot logo Known issues The touchpad ON/OFF switch Fn key is not functional Binaries novacustom_ns5x_v1.0.0.rom sha256 sha256.sig SBOM (Software Bill of Materials) coreboot based on 4.16 revision ecf1e9b8 tianocore based on e0334c228ce4ba51f47ff79a118f214031d4650f revision ec6805c2","title":"Releases"},{"location":"variants/novacustom_ns5x_tgl/releases/#novacustom-ns5xns7x-tgl-11th-gen-dasharo-release-notes","text":"Following Release Notes describe the status of Open Source Firmware development for NovaCustom NS5x/7x. For details about our release process please read Dasharo Standard Release Process . Subscribe to NovaCustom NS5x/7x Dasharo Release Newsletter Test results for this platform can be found here .","title":"NovaCustom NS5x/NS7x TGL (11th Gen) Dasharo Release Notes"},{"location":"variants/novacustom_ns5x_tgl/releases/#v140-2023-03-02","text":"","title":"v1.4.0 - 2023-03-02"},{"location":"variants/novacustom_ns5x_tgl/releases/#v130-2022-09-01","text":"","title":"v1.3.0 - 2022-09-01"},{"location":"variants/novacustom_ns5x_tgl/releases/#v120-2022-05-26","text":"","title":"v1.2.0 - 2022-05-26"},{"location":"variants/novacustom_ns5x_tgl/releases/#v110-2022-04-22","text":"","title":"v1.1.0 - 2022-04-22"},{"location":"variants/novacustom_ns5x_tgl/releases/#v100-2022-03-23","text":"","title":"v1.0.0 - 2022-03-23"},{"location":"variants/novacustom_ns5x_tgl/test-matrix/","text":"Test matrix About The test matrix is used to determine the scope of tests to which the DUT is subjected before the release of the new binary. Module: Dasharo compatibility No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports and LCD support DSP DSP001.001, DSP001.002, DSP001.003, DSP002.001, DSP002.002 4. Embedded Controller and Super I/O initialization ECR Without ECR010.001, ECR010.002, ECR25.001, ECR26.001, ECR27.001, ECR28.001 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB All 9. Debian Stable and Ubuntu LTS support LBT LBT004.001, LBT004.002 10. UEFI Shell USH All 11. Windows booting WBT WBT001.001 12. Audio subsystem AUD All 13. USB-C support UTC All 14. Network boot PXE Without PXE007.001 15. M.2 WiFi/Bluetooth WLE All 16. SD card support SDC All 17. USB Camera verification CAM All 18. Fan speed measure FAN FAN001.001 19. SMBIOS DMI Without DMI001.001 20. Firmware update using fwupd FFW All 21. Dasharo Tools Suite DTS DTS006.001, DTS007.001 22. CPU status CPU All 23. Embedded controller flashing ECF All 24. Logo customization functionality LCM LCM001.001 25. Firmware locally building and flashing FLB All 26. Custom Boot Order CBO CBO001.002 27. QubesOS support QBS All 28. Fedora support FED All 29. Platform suspend and resume SUSP SUSP001.001, SUSP002.001, SUSP003.001 30. Sign of life SOL All 31. BIOS menu function keys BMF All Module: Dasharo security No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO Without SBO006.001, SBO007.001 and SBO008.001 5. ME disable/neuter support MNE Without MNE006.001 Module: Dasharo performance No. Supported test suite Test suite ID Supported test cases 1. coreboot boot measure CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF All 4. Custom fan curve CFC All 5. Platform stability STB All Module: Dasharo stability No. Supported test suite Test suite ID Supported test cases 1. USB Type-A devices detection SUD All 2. M.2 Wi-fi SMW All 3. NVMe detection SNV All 4. NET interface after coldboot/warmboot/reboot/suspend NET All","title":"Test matrix"},{"location":"variants/novacustom_ns5x_tgl/test-matrix/#test-matrix","text":"","title":"Test matrix"},{"location":"variants/novacustom_ns5x_tgl/test-matrix/#about","text":"The test matrix is used to determine the scope of tests to which the DUT is subjected before the release of the new binary.","title":"About"},{"location":"variants/novacustom_ns5x_tgl/test-matrix/#module-dasharo-compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports and LCD support DSP DSP001.001, DSP001.002, DSP001.003, DSP002.001, DSP002.002 4. Embedded Controller and Super I/O initialization ECR Without ECR010.001, ECR010.002, ECR25.001, ECR26.001, ECR27.001, ECR28.001 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB All 9. Debian Stable and Ubuntu LTS support LBT LBT004.001, LBT004.002 10. UEFI Shell USH All 11. Windows booting WBT WBT001.001 12. Audio subsystem AUD All 13. USB-C support UTC All 14. Network boot PXE Without PXE007.001 15. M.2 WiFi/Bluetooth WLE All 16. SD card support SDC All 17. USB Camera verification CAM All 18. Fan speed measure FAN FAN001.001 19. SMBIOS DMI Without DMI001.001 20. Firmware update using fwupd FFW All 21. Dasharo Tools Suite DTS DTS006.001, DTS007.001 22. CPU status CPU All 23. Embedded controller flashing ECF All 24. Logo customization functionality LCM LCM001.001 25. Firmware locally building and flashing FLB All 26. Custom Boot Order CBO CBO001.002 27. QubesOS support QBS All 28. Fedora support FED All 29. Platform suspend and resume SUSP SUSP001.001, SUSP002.001, SUSP003.001 30. Sign of life SOL All 31. BIOS menu function keys BMF All","title":"Module: Dasharo compatibility"},{"location":"variants/novacustom_ns5x_tgl/test-matrix/#module-dasharo-security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO Without SBO006.001, SBO007.001 and SBO008.001 5. ME disable/neuter support MNE Without MNE006.001","title":"Module: Dasharo security"},{"location":"variants/novacustom_ns5x_tgl/test-matrix/#module-dasharo-performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot boot measure CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF All 4. Custom fan curve CFC All 5. Platform stability STB All","title":"Module: Dasharo performance"},{"location":"variants/novacustom_ns5x_tgl/test-matrix/#module-dasharo-stability","text":"No. Supported test suite Test suite ID Supported test cases 1. USB Type-A devices detection SUD All 2. M.2 Wi-fi SMW All 3. NVMe detection SNV All 4. NET interface after coldboot/warmboot/reboot/suspend NET All","title":"Module: Dasharo stability"},{"location":"variants/novacustom_nv4x_adl/hardware-matrix/","text":"Hardware configuration matrix Introduction This document describes the hardware configurations used for validation of the coreboot port on the NovaCustom NV4X laptop. Ports specification Right side view No. Description 1. Speaker 2. 2-In-1 Audio Jack (Headphone / Microphone) 3. USB 3.2 Gen 2 Type-C Port 4. USB 3.2 Gen 2 Type-A Port 5. HDMI-Out Port 6. Power Button 7. DC-In Jack 8. Led Indicator Left side view No. Description 1. Security Lock Slot 2. RJ-45 LAN Jack 3. USB 3.2 Gen 2 Type-A Port 4. SD Card Reader 5. Thunderbolt 4 Port with Power Delivery (DC-IN) 6. Speaker The graphics used are from pages 17-18 of the official service manual for the NV41 platforms. NV41PZ Component Description CPU Intel(R) Core(TM) i5-1240P Internal Cooling RAM Slot 1: KVR32S22S8/8 Slot 2: KVR32S22S8/8 SSD Samsung SSD 980 PRO 250 GB Flash memory Macronix MX25L25673GZ4I-08G USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card Intel Wi-Fi 6 AX201 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices Thunderbolt 4 Port: Wavlink 100W PD Pro docking station USB Type-C Port: Adapter USB-C-RJ45 with connected Ethernet cable Power Supply Chicony 19V, 4.74A, 90 W","title":"Hardware Configuration Matrix"},{"location":"variants/novacustom_nv4x_adl/hardware-matrix/#hardware-configuration-matrix","text":"","title":"Hardware configuration matrix"},{"location":"variants/novacustom_nv4x_adl/hardware-matrix/#introduction","text":"This document describes the hardware configurations used for validation of the coreboot port on the NovaCustom NV4X laptop.","title":"Introduction"},{"location":"variants/novacustom_nv4x_adl/hardware-matrix/#ports-specification","text":"","title":"Ports specification"},{"location":"variants/novacustom_nv4x_adl/hardware-matrix/#nv41pz","text":"Component Description CPU Intel(R) Core(TM) i5-1240P Internal Cooling RAM Slot 1: KVR32S22S8/8 Slot 2: KVR32S22S8/8 SSD Samsung SSD 980 PRO 250 GB Flash memory Macronix MX25L25673GZ4I-08G USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card Intel Wi-Fi 6 AX201 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices Thunderbolt 4 Port: Wavlink 100W PD Pro docking station USB Type-C Port: Adapter USB-C-RJ45 with connected Ethernet cable Power Supply Chicony 19V, 4.74A, 90 W","title":"NV41PZ"},{"location":"variants/novacustom_nv4x_adl/releases/","text":"NovaCustom NV4x ADL (12th Gen) Dasharo Release Notes Following Release Notes describe status of open-source firmware development for NovaCustom NV4x ADL (12th Gen) For details about our release process please read Dasharo Standard Release Process . Subscribe to NovaCustom NV4x ADL (12th Gen) Dasharo Release Newsletter Test results for this platform can be found here . v1.6.0 - 2023-04-19 Added Intel Management Engine Disable The same keyboard illumination setting is restored after suspend or poweroff One of the two fan profiles can now be selected in Setup Menu Fn lock hotkey feature Setup menu option for switching between S0ix and S3 suspend mode Changed Keys must be provisioned prior enabling Secure Boot The function keys responsible for entering the setup and boot menu in BIOS have been changed from ESC/F12 to F2/F7 Fixed The power LED is not always blinking while in sleep mode on Ubuntu 22.04 (#260) Suspend mode not working under Qubes OS 4.1 (#266) Docking station under Qubes OS (#267) The Auto Boot time-out value is not respected (#292) ACPI boot errors during booting Ubuntu 22.04 (#293) Windows update KB5012170 cannot be installed (#294) Internal keyboard sometimes does not work in firmware (#295) Laptop hangs up after 20 cycles of the suspend procedure (#305) Keyboard backlight not working after restart (#349) Function key display on/off does not completely blank the screen (#354) Connecting the RJ45 cable to the Gigabit Ethernet port on the docking station does not result in obtaining an Internet connection (#356) Unable to wake up from suspend (#362) Known issues The power LED is not always blinking while in sleep mode on Windows 11 (#182) Popup with information about recovery mode is displayed after flashing with a valid binary (#269) Missing information about cache (#343) Connecting and immediately disconnecting the charger, sets the battery status in OS to charging for about 2 minutes (#350) Reset to defaults with F9 causes the wrong settings to be restored (#355) Unwanted reset of BIOS settings (#365) Laptop not suspending while connected to a USB-C docking station (#368) The docking station is not detected after cold-boot and warm-boot (#404) Binaries novacustom_nv4x_adl_ec_v1.6.0.rom sha256 sha256.sig novacustom_nv4x_adl_v1.6.0.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) Dasharo coreboot fork based on 1a8eb6c02103727431ac1ea23f4f507e49f3cde7 revision a3056ac5 Dasharo EDKII fork based on e0334c228ce4ba51f47ff79a118f214031d4650f revision bd421b40 Intel ME version 16.1.25.1865 v1.5.0 - Non-public engineering release v1.4.0 - 2022-12-13 Added Support for NovaCustom NV4x 12th Gen UEFI Boot Support Configurable boot order Configurable boot options UEFI Secure Boot support NovaCustom boot logo Vboot Verified Boot Vboot Recovery Popup Fullscreen setup menu Open-source Embedded Controller Firmware Fixed The external headset connected to the jack slot doesn't work ISO keyboard issue for non-US layouts NV4xMx Sleep sometimes not working The connected RJ45 cable to the Ethernet socket causes a hardware error on Windows 11 The touchpad ON/OFF switch Fn key is not functional Known issues Popup with information about recovery mode is displayed after flashing with a valid binary The power LED is not blinking during sleep mode when the docking station is connected on Windows 11 Binaries novacustom_nv4x_adl_ec_v1.4.0.rom sha256 sha256.sig novacustom_nv4x_adl_v1.4.0.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) Dasharo coreboot fork based on 1a8eb6c02103727431ac1ea23f4f507e49f3cde7 revision cd975d74 Dasharo EDKII fork based on e0334c228ce4ba51f47ff79a118f214031d4650f revision abfdef40","title":"Releases"},{"location":"variants/novacustom_nv4x_adl/releases/#novacustom-nv4x-adl-12th-gen-dasharo-release-notes","text":"Following Release Notes describe status of open-source firmware development for NovaCustom NV4x ADL (12th Gen) For details about our release process please read Dasharo Standard Release Process . Subscribe to NovaCustom NV4x ADL (12th Gen) Dasharo Release Newsletter Test results for this platform can be found here .","title":"NovaCustom NV4x ADL (12th Gen) Dasharo Release Notes"},{"location":"variants/novacustom_nv4x_adl/releases/#v160-2023-04-19","text":"","title":"v1.6.0 - 2023-04-19"},{"location":"variants/novacustom_nv4x_adl/releases/#v150-non-public-engineering-release","text":"","title":"v1.5.0 - Non-public engineering release"},{"location":"variants/novacustom_nv4x_adl/releases/#v140-2022-12-13","text":"","title":"v1.4.0 - 2022-12-13"},{"location":"variants/novacustom_nv4x_adl/test-matrix/","text":"Test matrix About The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary. Module: Dasharo compatibility No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports and LCD support DSP DSP001.001, DSP001.002, DSP001.003, DSP002.001, DSP002.002 4. Embedded Controller and Super I/O initialization ECR Without ECR021.xxx - ECR024.xxx, ECR25.001, ECR26.001, ECR27.001, ECR28.001 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot keys CBK All 8. USB HID and MSC Support USB All 9. Debian Stable and Ubuntu LTS support LBT LBT004.001, LBT004.002 10. UEFI Shell USH All 11. Windows booting WBT WBT001.001 12. Audio subsystem AUD All 13. USB-C support UTC All 14. Network boot PXE Without PXE007.001 15. M.2 WiFi/Bluetooth WLE All 16. SD card support SDC All 17. USB Camera verification CAM All 18. Fan speed measure FAN FAN001.001 19. SMBIOS DMI Without DMI001.001 20. Firmware update using fwupd FFW All 21. Dasharo Tools Suite DTS DTS006.001, DTS007.001 22. CPU status CPU All 23. Embedded controller flashing ECF All 24. Logo customization functionality LCM LCM001.001 25. Firmware locally building and flashing FLB All 26. Custom Boot Order CBO CBO001.002 27. QubesOS support QBS All 28. Fedora support FED All 29. Platform suspend and resume SUSP Without SUSP004.001 30. BIOS menu function keys BMF All Module: Dasharo security No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO Without SBO006.001, SBO007.001 and SBO008.001 5. ME disable/neuter support MNE Without MNE006.001 Module: Dasharo performance No. Supported test suite Test suite ID Supported test cases 1. coreboot boot measure CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF All 4. Custom fan curve CFC All 5. Platform stability STB All Module: Dasharo stability No. Supported test suite Test suite ID Supported test cases 1. USB Type-A devices detection SUD All 2. M.2 Wi-fi SMW All 3. NVMe detection SNV All 4. NET interface after coldboot/warmboot/reboot/suspend NET All","title":"Test matrix"},{"location":"variants/novacustom_nv4x_adl/test-matrix/#test-matrix","text":"","title":"Test matrix"},{"location":"variants/novacustom_nv4x_adl/test-matrix/#about","text":"The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.","title":"About"},{"location":"variants/novacustom_nv4x_adl/test-matrix/#module-dasharo-compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports and LCD support DSP DSP001.001, DSP001.002, DSP001.003, DSP002.001, DSP002.002 4. Embedded Controller and Super I/O initialization ECR Without ECR021.xxx - ECR024.xxx, ECR25.001, ECR26.001, ECR27.001, ECR28.001 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot keys CBK All 8. USB HID and MSC Support USB All 9. Debian Stable and Ubuntu LTS support LBT LBT004.001, LBT004.002 10. UEFI Shell USH All 11. Windows booting WBT WBT001.001 12. Audio subsystem AUD All 13. USB-C support UTC All 14. Network boot PXE Without PXE007.001 15. M.2 WiFi/Bluetooth WLE All 16. SD card support SDC All 17. USB Camera verification CAM All 18. Fan speed measure FAN FAN001.001 19. SMBIOS DMI Without DMI001.001 20. Firmware update using fwupd FFW All 21. Dasharo Tools Suite DTS DTS006.001, DTS007.001 22. CPU status CPU All 23. Embedded controller flashing ECF All 24. Logo customization functionality LCM LCM001.001 25. Firmware locally building and flashing FLB All 26. Custom Boot Order CBO CBO001.002 27. QubesOS support QBS All 28. Fedora support FED All 29. Platform suspend and resume SUSP Without SUSP004.001 30. BIOS menu function keys BMF All","title":"Module: Dasharo compatibility"},{"location":"variants/novacustom_nv4x_adl/test-matrix/#module-dasharo-security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO Without SBO006.001, SBO007.001 and SBO008.001 5. ME disable/neuter support MNE Without MNE006.001","title":"Module: Dasharo security"},{"location":"variants/novacustom_nv4x_adl/test-matrix/#module-dasharo-performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot boot measure CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF All 4. Custom fan curve CFC All 5. Platform stability STB All","title":"Module: Dasharo performance"},{"location":"variants/novacustom_nv4x_adl/test-matrix/#module-dasharo-stability","text":"No. Supported test suite Test suite ID Supported test cases 1. USB Type-A devices detection SUD All 2. M.2 Wi-fi SMW All 3. NVMe detection SNV All 4. NET interface after coldboot/warmboot/reboot/suspend NET All","title":"Module: Dasharo stability"},{"location":"variants/novacustom_nv4x_tgl/compatibility-check-results-ubuntu/","text":"Checkbox logs comparison Introduction Checkbox is a flexible test automation software. It\u2019s the main tool used in Ubuntu Certification program. You can use this software without any modification to check if your system is behaving correctly or you can develop your own set of tests to check your needs. Checkbox optionally generates test reports in different formats (JSON, HTML, etc.) that can be used to easily share the results of a test session. Checkbox comparison - vendor firmware vs Dasharo Testing assumptions Tests have been conducted on the same OS version (Ubuntu 22.04 LTS). Tests have been conducted on the same device, firstly with vendor firmware and secondly with Dasharo firmware (version 1.2.1). Test results Test results - vendor firmware: PASSED: 74, FAILED: 80, NOT SUPPORTED: 25. Test results - Dasharo firmware: PASSED: 74, FAILED: 80, NOT SUPPORTED: 25. Fails comparison The following table collects information about all errors detected by the certification program. In the second column test case name is described and in the third and fourth columns, the information about bug appearance on vendor/Dasharo firmware is shown. No. Test case name Dasharo firmware Vendor firmware 1 graphics/1_driver_version_TigerLake-LP_GT2__Iris_Xe_Graphics_ YES YES 2 graphics/1_driver_version_TigerLake-LP_GT2__Iris_Xe_Graphics_ YES YES 3 bluetooth4/beacon_eddystone_url_hci0 YES YES 4 mediacard/storage-preinserted-disk/by-uuid/0868-01F6 YES YES 5 mediacard/storage-preinserted-disk/by-uuid/2adea2a3-f163-4d14-b6f3-b8d628611e23 YES YES 6 mediacard/storage-preinserted-disk/by-uuid/2d67f8a9-7f79-4419-b1d3-e096ca010512 YES YES 7 mediacard/storage-preinserted-disk/by-uuid/3bb6b676-1c4d-4ffb-8ede-e68f513fcdf1 YES YES 8 wireless/wireless_connection_open_ac_nm_wlp55s0 YES YES 9 wireless/wireless_connection_open_ax_nm_wlp55s0 YES YES 10 wireless/wireless_connection_open_bg_nm_wlp55s0 YES YES 11 wireless/wireless_connection_open_n_nm_wlp55s0 YES YES 12 wireless/wireless_connection_wpa_ac_nm_wlp55s0 YES YES 13 wireless/wireless_connection_wpa_ax_nm_wlp55s0 YES YES 14 wireless/wireless_connection_wpa_bg_nm_wlp55s0 YES YES 15 wireless/wireless_connection_wpa_n_nm_wlp55s0 YES YES 16 tpm2.0_4.1.1/tpm2_import YES YES 17 tpm2.0_4.1.1/tpm2_clockrateadjust YES YES 18 tpm2.0_4.1.1/tpm2_loadexternal YES YES 19 tpm2.0_4.1.1/tpm2_rsadecrypt YES YES 20 tpm2.0_4.1.1/tpm2_activecredential YES YES 21 tpm2.0_4.1.1/tpm2_attestation YES YES 22 tpm2.0_4.1.1/tpm2_certify YES YES 23 tpm2.0_4.1.1/tpm2_certifycreation YES YES 24 tpm2.0_4.1.1/tpm2_changeauth YES YES 25 tpm2.0_4.1.1/tpm2_checkquote YES YES 26 tpm2.0_4.1.1/tpm2_clear YES YES 27 tpm2.0_4.1.1/tpm2_create YES YES 28 tpm2.0_4.1.1/tpm2_createak YES YES 29 tpm2.0_4.1.1/tpm2_createek YES YES 30 tpm2.0_4.1.1/tpm2_createpolicy YES YES 31 tpm2.0_4.1.1/tpm2_createprimary YES YES 32 tpm2.0_4.1.1/tpm2_dictionarylockout YES YES 33 tpm2.0_4.1.1/tpm2_duplicate YES YES 34 tpm2.0_4.1.1/tpm2_evictcontrol YES YES 35 tpm2.0_4.1.1/tpm2_flushcontext YES YES 36 tpm2.0_4.1.1/tpm2_getcap YES YES 37 tpm2.0_4.1.1/tpm2_getekcertificate YES YES 38 tpm2.0_4.1.1/tpm2_getrandom YES YES 39 tpm2.0_4.1.1/tpm2_gettestresult YES YES 40 tpm2.0_4.1.1/tpm2_gettime YES YES 41 tpm2.0_4.1.1/tpm2_hash YES YES 42 tpm2.0_4.1.1/tpm2_hmac YES YES 43 tpm2.0_4.1.1/tpm2_import_tpm YES YES 44 tpm2.0_4.1.1/tpm2_incrementalselftest YES YES 45 tpm2.0_4.1.1/tpm2_load YES YES 46 tpm2.0_4.1.1/tpm2_makecredential YES YES 47 tpm2.0_4.1.1/tpm2_nv YES YES 48 tpm2.0_4.1.1/tpm2_nvcertify YES YES 49 tpm2.0_4.1.1/tpm2_nvinc YES YES 50 tpm2.0_4.1.1/tpm2_output_formats YES YES 51 tpm2.0_4.1.1/tpm2_pcrevent YES YES 52 tpm2.0_4.1.1/tpm2_pcrextend YES YES 53 tpm2.0_4.1.1/tpm2_pcrlist YES YES 54 tpm2.0_4.1.1/tpm2_pcrreset YES YES 55 tpm2.0_4.1.1/tpm2_print YES YES 56 tpm2.0_4.1.1/tpm2_quote YES YES 57 tpm2.0_4.1.1/tpm2_readclock YES YES 58 tpm2.0_4.1.1/tpm2_readpublic YES YES 59 tpm2.0_4.1.1/tpm2_rsaencrypt YES YES 60 tpm2.0_4.1.1/tpm2_selftest YES YES 61 tpm2.0_4.1.1/tpm2_send YES YES 62 tpm2.0_4.1.1/tpm2_setclock YES YES 63 tpm2.0_4.1.1/tpm2_setprimarypolicy YES YES 64 tpm2.0_4.1.1/tpm2_sign YES YES 65 tpm2.0_4.1.1/tpm2_startup YES YES 66 tpm2.0_4.1.1/tpm2_stirrandom YES YES 67 tpm2.0_4.1.1/tpm2_testparms YES YES 68 tpm2.0_4.1.1/tpm2_unseal YES YES 69 tpm2.0_4.1.1/tpm2_verifysignature YES YES 70 audio/detect_sinks_sources YES YES 71 suspend/1_driver_version_after_suspend_TigerLake-LP_GT2__Iris_Xe_Graphics__auto YES YES 72 suspend/2_driver_version_after_suspend_TU117M_auto YES YES 73 suspend/audio_before_suspend YES YES 74 suspend/bluetooth_obex_send_after_suspend_auto YES YES 75 suspend/bluetooth_obex_send_before_suspend YES YES 76 usb/storage-preinserted-disk/by-uuid/0868-01F6 YES YES 77 usb/storage-preinserted-disk/by-uuid/2adea2a3-f163-4d14-b6f3-b8d628611e23 YES YES 78 usb/storage-preinserted-disk/by-uuid/2d67f8a9-7f79-4419-b1d3-e096ca010512 YES YES 79 usb/storage-preinserted-disk/by-uuid/3bb6b676-1c4d-4ffb-8ede-e68f513fcdf1 YES YES 80 usb/storage-preinserted-disk/by-uuid/452E-652F YES YES Logs from tests Logs are available under this link . Summary Test results are the same for vendor and dasharo firmware, with no differences.","title":"Checbox results"},{"location":"variants/novacustom_nv4x_tgl/compatibility-check-results-ubuntu/#checkbox-logs-comparison","text":"","title":"Checkbox logs comparison"},{"location":"variants/novacustom_nv4x_tgl/compatibility-check-results-ubuntu/#introduction","text":"Checkbox is a flexible test automation software. It\u2019s the main tool used in Ubuntu Certification program. You can use this software without any modification to check if your system is behaving correctly or you can develop your own set of tests to check your needs. Checkbox optionally generates test reports in different formats (JSON, HTML, etc.) that can be used to easily share the results of a test session.","title":"Introduction"},{"location":"variants/novacustom_nv4x_tgl/compatibility-check-results-ubuntu/#checkbox-comparison-vendor-firmware-vs-dasharo","text":"","title":"Checkbox comparison - vendor firmware vs Dasharo"},{"location":"variants/novacustom_nv4x_tgl/compatibility-check-results-ubuntu/#summary","text":"Test results are the same for vendor and dasharo firmware, with no differences.","title":"Summary"},{"location":"variants/novacustom_nv4x_tgl/hardware-matrix/","text":"Hardware configuration matrix Introduction This document describes the hardware configurations used for validation of the coreboot port on the NovaCustom NV4X laptop. Ports specification Right side view No. Description 1. Speaker 2. 2-In-1 Audio Jack (Headphone / Microphone) 3. USB 3.2 Gen 2 Type-C Port 4. USB 3.2 Gen 2 Type-A Port 5. HDMI-Out Port 6. Power Button 7. DC-In Jack 8. Led Indicator Left side view No. Description 1. Security Lock Slot 2. RJ-45 LAN Jack 3. USB 3.2 Gen 2 Type-A Port 4. SD Card Reader 5. Thunderbolt 4 Port with Power Delivery (DC-IN) 6. Speaker The graphics used are from pages 17-18 of the official service manual for the NV41 platforms. NV41MZ Component Description CPU Intel(R) Core(TM) i7-1165G7 Internal Cooling RAM Slot 1: KVR29S21S6/8 Slot 2: KVR29S21S6/8 SSD Samsung 980 PRO NVMe 500 GB Flash memory GigaDevice 25B127DSIG 16 MB USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card Intel Wi-Fi 6 AX201 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices Thunderbolt 4 Port: Wavlink 100W PD Pro docking station USB Type-C Port: Adapter USB-C-RJ45 with connected Ethernet cable Power Supply Chicony 19V, 3.42A, 65 W NV41MB Component Description CPU Intel(R) Core(TM) i7-1165G7 Internal Cooling GPU NVIDIA GeForce GTX1650 4 GB RAM Slot 1: KVR29S21D8/32 Slot 2: KVR29S21D8/32 SSD Samsung 980 PRO NVMe 250 GB Flash memory GigaDevice 25B127DSIG 16 MB USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card Intel Wi-Fi 6 AX201 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices Thunderbolt 4 Port: Wavlink 100W PD Pro docking station USB Type-C Port: Adapter USB-C-RJ45 with connected Ethernet cable Power Supply Chicony 19V, 4.74A, 90 W","title":"Hardware Configuration Matrix"},{"location":"variants/novacustom_nv4x_tgl/hardware-matrix/#hardware-configuration-matrix","text":"","title":"Hardware configuration matrix"},{"location":"variants/novacustom_nv4x_tgl/hardware-matrix/#introduction","text":"This document describes the hardware configurations used for validation of the coreboot port on the NovaCustom NV4X laptop.","title":"Introduction"},{"location":"variants/novacustom_nv4x_tgl/hardware-matrix/#ports-specification","text":"","title":"Ports specification"},{"location":"variants/novacustom_nv4x_tgl/hardware-matrix/#nv41mz","text":"Component Description CPU Intel(R) Core(TM) i7-1165G7 Internal Cooling RAM Slot 1: KVR29S21S6/8 Slot 2: KVR29S21S6/8 SSD Samsung 980 PRO NVMe 500 GB Flash memory GigaDevice 25B127DSIG 16 MB USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card Intel Wi-Fi 6 AX201 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices Thunderbolt 4 Port: Wavlink 100W PD Pro docking station USB Type-C Port: Adapter USB-C-RJ45 with connected Ethernet cable Power Supply Chicony 19V, 3.42A, 65 W","title":"NV41MZ"},{"location":"variants/novacustom_nv4x_tgl/hardware-matrix/#nv41mb","text":"Component Description CPU Intel(R) Core(TM) i7-1165G7 Internal Cooling GPU NVIDIA GeForce GTX1650 4 GB RAM Slot 1: KVR29S21D8/32 Slot 2: KVR29S21D8/32 SSD Samsung 980 PRO NVMe 250 GB Flash memory GigaDevice 25B127DSIG 16 MB USB pendrives SanDisk Ultra USB 3.0 32 GB USB Keyboard Logitech, Inc. Keyboard K120 Wireless card Intel Wi-Fi 6 AX201 Display Display 1: HDMI 1920x1080p Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Camera 5. Audio subsystem Attached devices Thunderbolt 4 Port: Wavlink 100W PD Pro docking station USB Type-C Port: Adapter USB-C-RJ45 with connected Ethernet cable Power Supply Chicony 19V, 4.74A, 90 W","title":"NV41MB"},{"location":"variants/novacustom_nv4x_tgl/lvfs_report/","text":"NovaCustom fwupd/LVFS support service Introduction This document contains the report of the discovery of the most appropriate fwupd/LVFS firmware update method, including potential risks and roadblocks. Device specification NovaCustom NV4x system firmware Intel i7-1165G7 (Tiger Lake ULV platform) Samsung 980PRO NVMe SSD 2x SO-DIMM DDR4 system memory Optional NVIDIA discrete graphics Dasharo coreboot-based firmware Firmware stored on a SPI flash chip, flashable internally via flashrom Update protocol The device is flashable internally via flashrom No special unlocks necessary for flashing the required BIOS flash portions (only requirement is that UEFI Secure Boot is disabled while updating) Feasibility analysis Tiger Lake-U is supported in flashrom Present since this commit , not yet released to stable as of 14.01.2022 flashrom is supported in fwupd flashrom plugin is enabled by default in many common desktop Linux distributions, including Ubuntu (starting with 21.10) and Arch Linux enabling a device in the flashrom plugin is a matter of adding device-specific entries to the plugin quirk list Potential risk: vboot support in fwupd flashrom supports flashing vboot rw slots, which are coreboot images located within the BIOS partition of the flash however, fwupd only implements flashing the entire BIOS region of the SPI flash, which includes other firmware components such as vboot keys, vboot recovery partition and user settings the device currently has vboot partially implemented - the BIOS flash is not protected and the binaries are signed with (public) developer keys this means we can currently update the BIOS using the traditional fwupd update path once we decide to change the vboot keys and lock down the rest of the, flash, proper vboot support will need to be implemented in fwupd until then, it will not be possible to enable vboot fully Further steps: Vboot support In case full vboot support in fwupd is desired, the following are currently missing and need to be implemented: Support reading and processing VBNV (Vboot non-volatile store) data in fwupd: this store contains information about the current vboot state, e.g. currently booted slot (A/B/Recovery), recovery reason, firmware signature verification status. This information is stored in CMOS, but the exact offset varies by device - so a method for determining the offset is also required. For Google Chromebooks, this offset is exposed in a Chromebook-specific ACPI device which we cannot use in non-Chromebook device. An alternative interface or possibly a quirk in fwupd's flashrom plugin will need to be added (though this approach is not preferred by fwupd maintainers). Support for flashing fmap regions in fwupd's flashrom plugin: currently, fwupd only attempts to read flash layout from the Intel Flash Descriptor located in the flash. This only allows fwupd to flash the entire BIOS region, while vboot requires only a portion of the BIOS partition to be updated at a given time, with some of the BIOS partition being read-only. This means that with vboot fully enabled, updating will fail by attempting to write to a read-only portion of the flash. Vboot partitions (slots) are a subset of the bios partition and are defined in FMAP (flashmap). Support for it will need to be implemented in fwupd (possible by utilizing libflashrom). Additionally, some user settings like boot order and setup options are stored in a separate FMAP region, so implementing FMAP support in fwupd will allow us to preserve them across firmware updates. Vboot A/B slot support In Google Chromebooks, the firmware updater only updates one slot at a time and if it succeeds (the device reboots into it successfully and works stably), then it will also update the other slot to the same (now confirmed good) firmware. fwupd does not currently support anything like this, so support for it will also need to be implemented. Prior work: fwupd #1370 fwupd #1481 LKML thread","title":"LVFS report"},{"location":"variants/novacustom_nv4x_tgl/lvfs_report/#novacustom-fwupdlvfs-support-service","text":"","title":"NovaCustom fwupd/LVFS support service"},{"location":"variants/novacustom_nv4x_tgl/lvfs_report/#introduction","text":"This document contains the report of the discovery of the most appropriate fwupd/LVFS firmware update method, including potential risks and roadblocks.","title":"Introduction"},{"location":"variants/novacustom_nv4x_tgl/openness_analysis/","text":"Intro This document aims to compare the openness of Dasharo Firmware and Insyde BIOS. There is an ongoing discussion about the methodology of the openness metric. BIOS versions used in the analysis Dasharo coreboot v0.5.0 Insyde BIOS Insyde BIOS In the case of the Insyde bios, the entire image should be considered proprietary. There are several parts of the image that have a well-known structure or make use of a public standard. However, to decode these structures, one needs to employ reverse-engineering tools and techniques to know what structures are present. Dasharo BIOS CBFS image size (bytes) Is it open-source? cbfs master header 20h Yes fallback/romstage 14770h Yes cpu_microcode_blob.bin 31C00h No intel_fit 50h Yes fallback/ramstage 1E626h Yes config 579h Yes revision 351h Yes build_info 5Dh Yes fallback/dsdt.aml 6233h Yes vbt.bin 51Ch Yes (empty) 1E4h N/A fspm.bin 9F000h No cmos_layout.bin 22Ch Yes (empty) D24h N/A fsps.bin 43676h No fallback/postcar 8F24h Yes fallback/payload 1771C5h Yes fallback/verstage 12C80h Yes (empty) 10E5E4h N/A bootblock 74C0h Yes Summary 3F7A33h In 62.9% Open and closed source images are in the table below. type summarised size Percent open-source 1D42D1h 62.9% closed-source 114276h 37.1% empty (not included) 10F4ECh Whole flash image region size open-source percent (bytes) descriptor 1000h 0% ME 4FF000h 0% BIOS B00000h 62.9% Summary 1000000h 43.2% Summary image open-source percent (bytes) Insyde 0% Dasharo 43.2%","title":"Openness score"},{"location":"variants/novacustom_nv4x_tgl/openness_analysis/#intro","text":"This document aims to compare the openness of Dasharo Firmware and Insyde BIOS. There is an ongoing discussion about the methodology of the openness metric.","title":"Intro"},{"location":"variants/novacustom_nv4x_tgl/openness_analysis/#bios-versions-used-in-the-analysis","text":"Dasharo coreboot v0.5.0 Insyde BIOS","title":"BIOS versions used in the analysis"},{"location":"variants/novacustom_nv4x_tgl/openness_analysis/#insyde-bios","text":"In the case of the Insyde bios, the entire image should be considered proprietary. There are several parts of the image that have a well-known structure or make use of a public standard. However, to decode these structures, one needs to employ reverse-engineering tools and techniques to know what structures are present.","title":"Insyde BIOS"},{"location":"variants/novacustom_nv4x_tgl/openness_analysis/#dasharo-bios","text":"","title":"Dasharo BIOS"},{"location":"variants/novacustom_nv4x_tgl/openness_analysis/#summary","text":"image open-source percent (bytes) Insyde 0% Dasharo 43.2%","title":"Summary"},{"location":"variants/novacustom_nv4x_tgl/releases/","text":"NovaCustom NV4X Dasharo Release Notes Following Release Notes describe status of Open Source Firmware development for NovaCustom NV4X For details about our release process please read Dasharo Standard Release Process . Subscribe to NovaCustom NV4X Dasharo Release Newsletter Test results for this platform can be found here . v1.4.0 - 2023-02-24 Test results for this release can be found here . Added The same keyboard illumination setting is restored after suspend or poweroff One of the two fan profiles can now be selected in Setup Menu Fn lock hotkey feature Changed Keys must be provisioned prior enabling Secure Boot Fixed ISO keyboard issue for non-US layouts (Dasharo issue #259) The NVIDIA graphics power management isn't properly functional (Dasharo issue #145) Known issues Low level interfering crackling/popping of the speakers while playing no sound (Dasharo issue #224) Waking up from sleep on Ubuntu 22.04 is not 100% reliable (Dasharo issue #205) The power LED is not always blinking while in sleep mode on Windows 11 (Dasharo issue #182) No video output via USB-C after shutdown if PowerDelivery (PD) is active NV40MZ (Dasharo issue #237) Buggy touchpad when charging via USB-C (NV40MZ) (Dasharo issue #265) Keyboard backlight turns on after resuming from sleep mode (Dasharo issue #332) The screen brightness level gets stuck when key are held or pressed too fast (Dasharo issue #341) Connecting and immediately disconnecting the charger, sets the battery status in OS to 'charging' for about 2 minutes (Dasharo issue #350) Binaries novacustom_nv4x_tgl_ec_v1.4.0.rom sha256 sha256.sig novacustom_nv4x_tgl_v1.4.0.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) Dasharo coreboot fork based on 1a8eb6c02103727431ac1ea23f4f507e49f3cde7 revision 636f432a Dasharo EDKII fork based on e0334c228ce4ba51f47ff79a118f214031d4650f revision 2c61576a Intel ME version 15.0.30.1776 v1.3.0 - 2022-10-18 Test results for this release can be found here . EC firmware transition Please note, that version 1.3.0 of Dasharo BIOS firmware works correctly only with the Dasharo EC firmware . This is the first release when this open-source EC firmware is used, so additional steps need to be taken when upgrading. Please refer to the Firmware update section for more details on upgrading your firmware. Added Vboot recovery mode information popup Dasharo setup menu full screen mode support Changed Rebased on upstream coreboot revision from 18 Aug 2022 Support for open-source EC firmware (transition procedure is required) Disabled UEFI Secure Boot by default Fixed Custom fan curve is not applied after suspend (Dasharo issue #45) The touchpad ON/OFF switch Fn key is not functional (Dasharo issue #38) UCM-UCSI ACPI device displays an error in Windows Device Manager Laptop cannot output video via the Tunderbolt 4 USB Type-C port Known issues Low level interfering crackling/popping of the speakers while playing no sound (Dasharo issue #224) Waking up from sleep on Ubuntu 22.04 is not 100% reliable (Dasharo issue #205) After emergency shutdown, keyboard doesn't work before OS (Dasharo issue #199) The power LED is not always blinking while in sleep mode on Windows 11 (Dasharo issue #182) The NVIDIA graphics power management isn't properly functional (Dasharo issue #145) Binaries novacustom_nv4x_ec_v1.3.0.rom sha256 sha256.sig novacustom_nv4x_v1.3.0.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) Dasharo coreboot fork based on bcc2fb719aaf2d466f9fb429b892f2d268bed5a7 revision a087c3e2 Dasharo EDKII fork based on e0334c228ce4ba51f47ff79a118f214031d4650f revision abfdef40 v1.2.1 - 2022-06-23 Fixed cbfstool logo replacement not working on NV4x v1.2.0 Known issues Custom fan curve is not applied after suspend (Dasharo issue #45) UCM-UCSI ACPI device displays an error in Windows Device Manager USB4 Root Device Router device displays an error in Windows 11 Device Manager Windows 10 SD card reader driver needs manual installation on NV41MB Low level interfering crackling/popping of the speakers while playing no sound Laptop cannot output video via the Tunderbolt 4 USB Type-C port Binaries novacustom_nv4x_v1.2.1.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on e3e965b1 revision baada726 edk2 based on 2020.03.17 revision cad23725 v1.2.0 - 2022-06-10 Added Renamed device to NovaCustom NV4x Fixed Wake from suspend doesn't work with certain SSDs CVE-2022-29264 SMM loader vulnerability Fix BIOS vendor name in SMBIOS Known issues Custom fan curve is not applied after suspend (Dasharo issue #45) UCM-UCSI ACPI device displays an error in Windows Device Manager USB4 Root Device Router device displays an error in Windows 11 Device Manager Windows 10 SD card reader driver needs manual installation on NV41MB Low level interfering crackling/popping of the speakers while playing no sound Laptop cannot output video via the Tunderbolt 4 USB Type-C port Binaries novacustom_nv4x_v1.2.0.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on e3e965b1 revision baada726 edk2 based on 2020.03.17 revision cad23725 v1.1.0 - 2022-03-23 Added Add Dasharo Tools Suite network boot integration Add a persistent bootlogo implementation Known issues UCM-UCSI ACPI device displays an error in Windows Device Manager USB4 Root Device Router device displays an error in Windows 11 Device Manager Windows 10 SD card reader driver needs manual installation on NV41MB Low level interfering crackling/popping of the speakers while playing no sound Laptop cannot output video via the Tunderbolt 4 USB Type-C port Binaries clevo_nv41mz_v1.1.0.rom sha256 sha256.sig SBOM (Software Bill of Materials) coreboot based on ae9a8447 revision 0722fdf0 edk2 based on 2020.03.17 revision ec6805c2 v1.0.1 - 2022-03-01 Added Change DMI fields to match previous Insyde firmware Hide unknown ACPI devices Set correct Realtek HD Audio subsystem ID Set correct ACPI path for the TPM Set TPM IRQ in a manner understood by Windows Removed Removed proprietary blobs from built coreboot images Fixed Updating firmware using fwupd MIC-in phone jack not working This PC can't run Windows 11 error while installing Windows 11 from a USB pen drive Known issues Custom fan curve is not functional after suspend UCM-UCSI ACPI device displays an error in Windows Device Manager USB4 Root Device Router device displays an error in Windows 11 Device Manager Windows 10 SD card reader driver needs manual installation on NV41MB Low level interfering crackling/popping of the speakers while playing no sound Laptop cannot output video via the Tunderbolt 4 USB Type-C port Binaries clevo_nv41mz_v1.0.1.rom sha256 sha256.sig SBOM (Software Bill of Materials) coreboot based on ae9a8447 revision 3a3808f9 edk2 based on 2020.03.17 revision e0334c22 v1.0.0 - 2022-01-19 Added Documentation for touchpad hotkey enablement on Linux Removed Removed proprietary blobs from built coreboot images Fixed The touchpad ON/OFF switch Fn key is not functional Charging indicator displays wrong state if power adapter was unplugged while in sleep mode Bluetooth does not work under Windows Known issues Unable to download the system by using iPXE Laptop cannot output video via the Tunderbolt 4 USB Type-C port Windows 10 SD card reader driver needs manual installation on NV41MB Binaries clevo_nv41mz_v1.0.0.rom sha256 sha256.sig SBOM (Software Bill of Materials) coreboot based on ae9a8447 revision e995fc1c edk2 based on 2020.03.17 revision 59ae285f v0.5.0 - 2021-11-19 Added vboot Verified Boot TPM Measured Boot Custom fan curve Microcode for Tiger Lake stepping 0x2 Documentation for EC firmware update Changed Disabled unused DPTF device Fixed Performance drop when the power adaptor is disconnected High Nvidia GPU energy draw at idle in Windows Known issues Unable to download the system by using iPXE Laptop cannot output video via the Tunderbolt 4 USB Type-C port The touchpad ON/OFF switch Fn key is not functional Binaries dasharo_clevo_nv41mz_v0.5.0.rom sha256 sha256.sig SBOM (Software Bill of Materials) coreboot based on ae9a8447 revision 7d439573 EDK2 based on 2020.03.17 revision bfd3d1a2 v0.4.0 - 2021-10-26 Added Added full support for sleep mode (s0ix / Modern Standby) Added support for NV41MB model Added support for nvidia discrete graphics (doesn't power off in Windows yet) Changed Fixed regression with non-funtional airplane mode hotkey on Windows Disabled legacy 8254 timer for lower power draw Fixed Sleep mode is not functional The camera ON/OFF switch Fn key is not functional Known issues Unable to download the system by using iPXE Laptop cannot output video via the Tunderbolt 4 USB Type-C port High Nvidia GPU energy draw at idle in Windows Performance drop when the power adaptor is disconnected The touchpad ON/OFF switch Fn key is not functional Binaries dasharo_clevo_nv41mz_v0.4.0.rom sha256 sha256.sig SBOM (Software Bill of Materials) coreboot based on ae9a8447 revision 03972293 EDK2 based on 2020.03.17 revision bfd3d1a2 v0.3.0 - 2021-10-11 Added Support for discrete TPM USB Type-C ACPI support (UCSI) Improved runtime power management for SSD (reduces power usage while in sleep) Added partial sleep support (system saves power, but fans still spin) Changed Rebased on coreboot revision ae9a8447 Known issues Sleep mode is not functional The camera ON/OFF switch Fn key is not functional The touchpad ON/OFF switch Fn key is not functional Binaries dasharo_clevo_nv41mz_v0.3.0.rom sha256 sha256.sig SBOM (Software Bill of Materials) coreboot based on ae9a8447 revision v0.3.0 EDK2 based on 2020.03.17 revision bfd3d1a2 v0.2.1 - 2021-9-29 Added Integrated graphics backlight configuration for Windows Changed Updated the Video Bios Table Fixed Screen brightness is stuck at 0% in the Windows Installer Known issues Sleep mode is not functional The camera ON/OFF switch Fn key is not functional The touchpad ON/OFF switch Fn key is not functional Binaries dasharo_clevo_nv41mz_v0.2.1.rom sha256 sha256.sig SBOM (Software Bill of Materials) coreboot based on 4.14 revision 43c9604b EDK2 based on 2020.03.17 revision bfd3d1a2 v0.2.0 - 2021-9-24 Added UEFI Secure Boot support UEFI Shell selectable in boot menu iPXE selectable in boot menu NovaCustom boot logo Customized boot menu keys Customized setup menu keys Support for backlight hotkey in Windows Preserve boot order settings after Dasharo update Changed Replaced CorebootPayloadPkg with Dasharo UEFIPayloadPkg Changed the behavior of airplane mode to match stock firmware (now it can be disabled in software) Known issues Screen brightness is stuck at 0% in the Windows Installer Sleep mode is not functional The camera ON/OFF switch Fn key is not functional The touchpad ON/OFF switch Fn key is not functional Binaries dasharo_clevo_nv41mz_v0.2.0.rom sha256 sha256.sig SBOM (Software Bill of Materials) coreboot based on 4.14 revision ff1c6572 EDK2 based on 2020.03.17 revision bfd3d1a2 v0.1.2 - 2021-08-31 Added Clevo NV41MZ platform support Clevo IT5570 EC support UEFI boot support configurable boot order configurable boot options Integrated graphics initialization for internal LCD (eDP) and external HDMI port Binaries clevo_nv41mz_v0.1.2.rom sha256 sha256.sig All in one zip SBOM (Software Bill of Materials) coreboot 4.14 (with additional commits for Clevo NV41MZ board support) EDK2","title":"Releases"},{"location":"variants/novacustom_nv4x_tgl/releases/#novacustom-nv4x-dasharo-release-notes","text":"Following Release Notes describe status of Open Source Firmware development for NovaCustom NV4X For details about our release process please read Dasharo Standard Release Process . Subscribe to NovaCustom NV4X Dasharo Release Newsletter Test results for this platform can be found here .","title":"NovaCustom NV4X Dasharo Release Notes"},{"location":"variants/novacustom_nv4x_tgl/releases/#v140-2023-02-24","text":"Test results for this release can be found here .","title":"v1.4.0 - 2023-02-24"},{"location":"variants/novacustom_nv4x_tgl/releases/#v130-2022-10-18","text":"Test results for this release can be found here .","title":"v1.3.0 - 2022-10-18"},{"location":"variants/novacustom_nv4x_tgl/releases/#v121-2022-06-23","text":"","title":"v1.2.1 - 2022-06-23"},{"location":"variants/novacustom_nv4x_tgl/releases/#v120-2022-06-10","text":"","title":"v1.2.0 - 2022-06-10"},{"location":"variants/novacustom_nv4x_tgl/releases/#v110-2022-03-23","text":"","title":"v1.1.0 - 2022-03-23"},{"location":"variants/novacustom_nv4x_tgl/releases/#v101-2022-03-01","text":"","title":"v1.0.1 - 2022-03-01"},{"location":"variants/novacustom_nv4x_tgl/releases/#v100-2022-01-19","text":"","title":"v1.0.0 - 2022-01-19"},{"location":"variants/novacustom_nv4x_tgl/releases/#v050-2021-11-19","text":"","title":"v0.5.0 - 2021-11-19"},{"location":"variants/novacustom_nv4x_tgl/releases/#v040-2021-10-26","text":"","title":"v0.4.0 - 2021-10-26"},{"location":"variants/novacustom_nv4x_tgl/releases/#v030-2021-10-11","text":"","title":"v0.3.0 - 2021-10-11"},{"location":"variants/novacustom_nv4x_tgl/releases/#v021-2021-9-29","text":"","title":"v0.2.1 - 2021-9-29"},{"location":"variants/novacustom_nv4x_tgl/releases/#v020-2021-9-24","text":"","title":"v0.2.0 - 2021-9-24"},{"location":"variants/novacustom_nv4x_tgl/releases/#v012-2021-08-31","text":"","title":"v0.1.2 - 2021-08-31"},{"location":"variants/novacustom_nv4x_tgl/test-matrix/","text":"Test matrix About The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary. NV41MB test matrix Module: Dasharo compatibility No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports and LCD support DSP DSP001.001, DSP001.002, DSP001.003, DSP002.001, DSP002.002 4. Embedded Controller and Super I/O initialization ECR Without ECR021.xxx - ECR024.xxx, ECR25.001, ECR26.001, ECR27.001, ECR28.001 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB All 9. Debian Stable and Ubuntu LTS support LBT LBT004.001, LBT004.002 10. UEFI Shell USH All 11. Windows booting WBT WBT001.001 12. Audio subsystem AUD All 13. USB-C support UTC All 14. Network boot PXE Without PXE007.001 15. M.2 WiFi/Bluetooth WLE All 16. SD card support SDC All 17. USB Camera verification CAM All 18. Fan speed measure FAN FAN001.001 19. SMBIOS DMI Without DMI001.001 20. Firmware update using fwupd FFW All 21. Dasharo Tools Suite DTS DTS006.001, DTS007.001 22. CPU status CPU All 23. Embedded controller flashing ECF All 24. Logo customization functionality LCM LCM001.001 25. Firmware locally building and flashing FLB All 26. Custom Boot Order CBO CBO001.002 27. QubesOS support QBS All 28. Fedora support FED All 29. Platform suspend and resume SUSP SUSP001.001, SUSP002.001, SUSP003.001 30. Sign of life SOL All 31. NVIDIA Graphics support NVI All 32. BIOS menu function keys BMF All Module: Dasharo security No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO Without SBO006.001, SBO007.001 and SBO008.001 5. ME disable/neuter support MNE Without MNE006.001 Module: Dasharo performance No. Supported test suite Test suite ID Supported test cases 1. coreboot boot measure CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF All 4. Custom fan curve CFC All 5. Platform stability STB All Module: Dasharo stability No. Supported test suite Test suite ID Supported test cases 1. USB Type-A devices detection SUD All 2. M.2 Wi-fi SMW All 3. NVMe detection SNV All NV41MZ test matrix Module: Dasharo compatibility No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports and LCD support DSP DSP001.001, DSP001.002, DSP001.003, DSP002.001, DSP002.002 4. Embedded Controller and Super I/O initialization ECR Without ECR021.xxx - ECR024.xxx, ECR25.001, ECR26.001, ECR27.001, ECR28.001 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB All 9. Debian Stable and Ubuntu LTS support LBT LBT004.001, LBT004.002 10. UEFI Shell USH All 11. Windows booting WBT WBT001.001 12. Audio subsystem AUD All 13. USB-C support UTC All 14. Network boot PXE Without PXE007.001 15. M.2 WiFi/Bluetooth WLE All 16. SD card support SDC All 17. USB Camera verification CAM All 18. Fan speed measure FAN FAN001.001 19. SMBIOS DMI Without DMI001.001 20. [USB-C docking station detect][DUD] DUD All 21. [USB-C docking station USB devices][DUB] DUB All 22. [USB-C docking station Audio][DAU] DAU All 23. [USB-C docking station Display ports][DDP] DDP All 24. [USB-C docking station NET interface][DET] DET All 25. Firmware update using fwupd FFW All 26. Dasharo Tools Suite DTS DTS006.001, DTS007.001 27. CPU status CPU All 28. Embedded controller flashing ECF All 29. Logo customization functionality LCM LCM001.001 30. Firmware locally building and flashing FLB All 31. Custom Boot Order CBO CBO001.002 32. QubesOS support QBS All 33. Fedora support FED All 34. Platform suspend and resume SUSP SUSP001.001, SUSP002.001, SUSP003.001, SUSP005.001 35. [Thunderbolt docking station detect][TDD] TDD All 36. [Thunderbolt docking station USB devices][TDU] TDU All 37. [Thunderbolt docking station Audio][TDA] TDA All 38. [Thunderbolt docking station][TDS] TDS All 39. [Thunderbolt docking station Display ports][TDP] TDP All 40. [Thunderbolt docking station NET interface][TDN] TDN All 41. Sign of life SOL All 42. [USB-C docking station SD card reader][DSD] DSD All 43. BIOS menu function keys BMF All Module: Dasharo security No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO Without SBO006.001, SBO007.001 and SBO008.001 5. ME disable/neuter support MNE Without MNE006.001 Module: Dasharo performance No. Supported test suite Test suite ID Supported test cases 1. coreboot boot measure CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF All 4. Custom fan curve CFC All 5. Platform stability STB All Module: Dasharo stability No. Supported test suite Test suite ID Supported test cases 1. USB Type-A devices detection SUD All 2. M.2 Wi-fi SMW All 3. NVMe detection SNV All 4. NET interface after coldboot/warmboot/reboot/suspend NET All","title":"Test matrix"},{"location":"variants/novacustom_nv4x_tgl/test-matrix/#test-matrix","text":"","title":"Test matrix"},{"location":"variants/novacustom_nv4x_tgl/test-matrix/#about","text":"The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.","title":"About"},{"location":"variants/novacustom_nv4x_tgl/test-matrix/#nv41mb-test-matrix","text":"","title":"NV41MB test matrix"},{"location":"variants/novacustom_nv4x_tgl/test-matrix/#module-dasharo-stability","text":"No. Supported test suite Test suite ID Supported test cases 1. USB Type-A devices detection SUD All 2. M.2 Wi-fi SMW All 3. NVMe detection SNV All","title":"Module: Dasharo stability"},{"location":"variants/novacustom_nv4x_tgl/test-matrix/#nv41mz-test-matrix","text":"","title":"NV41MZ test matrix"},{"location":"variants/novacustom_nv4x_tgl/test-matrix/#module-dasharo-stability_1","text":"No. Supported test suite Test suite ID Supported test cases 1. USB Type-A devices detection SUD All 2. M.2 Wi-fi SMW All 3. NVMe detection SNV All 4. NET interface after coldboot/warmboot/reboot/suspend NET All","title":"Module: Dasharo stability"},{"location":"variants/pc_engines/overview/","text":"Overview PC Engines is a Swiss-based company that specializes in the design and manufacture of small form factor computer hardware, including single-board computers (SBCs), network appliances, and embedded systems. Their products are often used in networking, telecommunications, security applications, in-home automation, and other industrial applications. PC Engines is particularly well-known for its low-power, high-performance SBCs, including the APU (Accelerated Processing Unit) series, which feature AMD G-series embedded processors, and the ALIX series, based on the AMD Geode processor. These SBCs are commonly used as firewalls, routers, and other network appliances. PC Engines is a well-recognized brand in the open-source community mostly because of full schematics availability (apu2d example) and use of open-source firmware . PC Engines products are top-rated among pfSense and OPNsense users. What you can see based on the number of forum topics regarding apu platforms. Status In 2016 PC Engines contracted 3mdeb to take over the maintenance of open-source firmware for PC Engines products. Development happened in PC Engines Github organization until September 2022, when PC Engines decided to discontinue its sponsorship for open-source firmware. Dasharo Team working on creating a sustainable path forward for PC Engines' open-source firmware through a subscription and donation model. For more details please check Post EOL firmware announcement , contact us directly or through community chat . References Post-EOL firmware announcement","title":"Overview"},{"location":"variants/pc_engines/overview/#overview","text":"PC Engines is a Swiss-based company that specializes in the design and manufacture of small form factor computer hardware, including single-board computers (SBCs), network appliances, and embedded systems. Their products are often used in networking, telecommunications, security applications, in-home automation, and other industrial applications. PC Engines is particularly well-known for its low-power, high-performance SBCs, including the APU (Accelerated Processing Unit) series, which feature AMD G-series embedded processors, and the ALIX series, based on the AMD Geode processor. These SBCs are commonly used as firewalls, routers, and other network appliances. PC Engines is a well-recognized brand in the open-source community mostly because of full schematics availability (apu2d example) and use of open-source firmware . PC Engines products are top-rated among pfSense and OPNsense users. What you can see based on the number of forum topics regarding apu platforms.","title":"Overview"},{"location":"variants/pc_engines/overview/#status","text":"In 2016 PC Engines contracted 3mdeb to take over the maintenance of open-source firmware for PC Engines products. Development happened in PC Engines Github organization until September 2022, when PC Engines decided to discontinue its sponsorship for open-source firmware. Dasharo Team working on creating a sustainable path forward for PC Engines' open-source firmware through a subscription and donation model. For more details please check Post EOL firmware announcement , contact us directly or through community chat .","title":"Status"},{"location":"variants/pc_engines/overview/#references","text":"Post-EOL firmware announcement","title":"References"},{"location":"variants/pc_engines/post-eol-fw-announcement/","text":"Post EOL firmware announcement Dear valued PC Engines hardware owners, We apologize for the delay in our announcement. We understand that many of you have eagerly awaited the next PC Engines firmware release. Rest assured that our commitment to supporting the PC Engines firmware remains strong, and we are working hard to bring you new features through the upcoming Dasharo firmware distribution. We appreciate your patience and continued support. We regret to inform the community that v4.17.0.3 was the last version of the firmware sponsored by PC Engines. However, 3mdeb has since released v4.19.0.1 , the final version delivered to the community using the existing model. As some may know, 3mdeb is a small open-source firmware consulting company based in Poland. Our team consists of passionate engineers and developers from open-source software, firmware, and hardware communities, frequent conference speakers, and people who love to tinker with bits. Every day we develop bleeding-edge low-level security solutions using top open-source frameworks. We are committed to continuing support and PC Engines hardware in the open-source firmware community but can't afford that on our dime. Since February 2016, we have made 87 binary releases for all PC Engines hardware platforms from apu1 through famous apu2 up to apu7. We published over 30k test results from our automated testing framework. Thanks to community feedback, we created extensive documentation . Our firmware development effort extended the lifetime value of PC Engines hardware. Most notable examples were: CPU Core Performance Boost feature enabling - blog DRAM Error Correction Code enabling - blog AMD Cryptographic Coprocessor enabling - issue tracker and many small things like a watchdog or SPI flash lockdown. According to PC Engines EOL statement apu2 / apu3 series availability will be: \"Based on an AMD embedded CPU, this platform should have good long term availability. This CPU should be available until 2024 according to AMD.\" We would like to continue support for PC Engines firmware through our Dasharo open-source firmware distribution. Further releases could include regular maintenance updates and new features such as UEFI compatibility, fwupd, Verified Boot, UEFI Setup password, DMA protection, and more. For a complete list of planned enhancements, please visit the dasharo-issues repository on GitHub. Your support will play a crucial role in determining the roadmap and the speed of its implementation. We hope you will support our efforts to bring these new features and improvements to the PC Engines firmware. We are exploring the possibility of implementing a subscription model for firmware updates. We would like to hear from you to ensure that the pricing option is fair and reasonable for our community. We have created a survey to gather your thoughts and preferences on pricing. Your feedback is important to us and will help us make informed decisions about the future of our offerings. Please take about two minutes to participate in the survey . Your input will be greatly appreciated. In case of any questions feel free to contact us .","title":"Announcement"},{"location":"variants/pc_engines/post-eol-fw-announcement/#post-eol-firmware-announcement","text":"Dear valued PC Engines hardware owners, We apologize for the delay in our announcement. We understand that many of you have eagerly awaited the next PC Engines firmware release. Rest assured that our commitment to supporting the PC Engines firmware remains strong, and we are working hard to bring you new features through the upcoming Dasharo firmware distribution. We appreciate your patience and continued support. We regret to inform the community that v4.17.0.3 was the last version of the firmware sponsored by PC Engines. However, 3mdeb has since released v4.19.0.1 , the final version delivered to the community using the existing model. As some may know, 3mdeb is a small open-source firmware consulting company based in Poland. Our team consists of passionate engineers and developers from open-source software, firmware, and hardware communities, frequent conference speakers, and people who love to tinker with bits. Every day we develop bleeding-edge low-level security solutions using top open-source frameworks. We are committed to continuing support and PC Engines hardware in the open-source firmware community but can't afford that on our dime. Since February 2016, we have made 87 binary releases for all PC Engines hardware platforms from apu1 through famous apu2 up to apu7. We published over 30k test results from our automated testing framework. Thanks to community feedback, we created extensive documentation . Our firmware development effort extended the lifetime value of PC Engines hardware. Most notable examples were: CPU Core Performance Boost feature enabling - blog DRAM Error Correction Code enabling - blog AMD Cryptographic Coprocessor enabling - issue tracker and many small things like a watchdog or SPI flash lockdown. According to PC Engines EOL statement apu2 / apu3 series availability will be: \"Based on an AMD embedded CPU, this platform should have good long term availability. This CPU should be available until 2024 according to AMD.\" We would like to continue support for PC Engines firmware through our Dasharo open-source firmware distribution. Further releases could include regular maintenance updates and new features such as UEFI compatibility, fwupd, Verified Boot, UEFI Setup password, DMA protection, and more. For a complete list of planned enhancements, please visit the dasharo-issues repository on GitHub. Your support will play a crucial role in determining the roadmap and the speed of its implementation. We hope you will support our efforts to bring these new features and improvements to the PC Engines firmware. We are exploring the possibility of implementing a subscription model for firmware updates. We would like to hear from you to ensure that the pricing option is fair and reasonable for our community. We have created a survey to gather your thoughts and preferences on pricing. Your feedback is important to us and will help us make informed decisions about the future of our offerings. Please take about two minutes to participate in the survey . Your input will be greatly appreciated. In case of any questions feel free to contact us .","title":"Post EOL firmware announcement"},{"location":"variants/protectli_fw6/building-manual/","text":"Building manual Requirements Docker follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux Git sudo apt-get install git Building To build Dasharo firmware image, follow the steps below: Clone the coreboot repository: git clone https://github.com/Dasharo/coreboot.git -b protectli_vault_kbl/release To build a specific version replace protectli_vault_kbl/release to protectli_vault_kbl_v1.0.x where x is the version number. Start build process (note it requires certain blobs to proceed): cd coreboot git submodule update --init --checkout # you will need to obtain the ZIP with blobs at this point unzip protectli_blobs.zip -d 3rdparty/blobs/mainboard ./build.sh fw6","title":"Building manual"},{"location":"variants/protectli_fw6/building-manual/#building-manual","text":"","title":"Building manual"},{"location":"variants/protectli_fw6/building-manual/#requirements","text":"Docker follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux Git sudo apt-get install git","title":"Requirements"},{"location":"variants/protectli_fw6/building-manual/#building","text":"To build Dasharo firmware image, follow the steps below: Clone the coreboot repository: git clone https://github.com/Dasharo/coreboot.git -b protectli_vault_kbl/release To build a specific version replace protectli_vault_kbl/release to protectli_vault_kbl_v1.0.x where x is the version number. Start build process (note it requires certain blobs to proceed): cd coreboot git submodule update --init --checkout # you will need to obtain the ZIP with blobs at this point unzip protectli_blobs.zip -d 3rdparty/blobs/mainboard ./build.sh fw6","title":"Building"},{"location":"variants/protectli_fw6/hardware-matrix/","text":"Hardware configuration matrix Introduction This document describes the hardware configuration used for validation of the coreboot port on the Protectli FW6 firewall. Protectli FW6E Dasharo Component Description CPU IIntel(R) Celeron(TM) 3865U SSD M.2 SSD SATA: Hoodisk SSL032GTTC7-S9A-2S external SATA 2.5 inch: Goodram SSDPR-CL100-240-G2 240GB RAM CRUCIAL CT4G4SFS824A CRUCIAL CT4G4SFS824A Wireless card Qualcomm Atheros QCA9377 LTE miniPCIe card Quectel EC-20 Display HDMI 1920x1080p Ethernet 6x Intel i211 (on-board) Attached devices 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. SanDisk USB 3.2Gen1 16 GB 4. USB Type-C Hub Pro UCN3286 USB Keyboard DELL KB216 Power supply Channel Well Technology 12V, 7.5A 90W Protectli FW6B Dasharo Component Description CPU Intel(R) Core(TM) i3-7100U SSD M.2 SSD SATA: Hoodisk SSL032GTTC7-S9A-2S external SATA 2.5 inch: Goodram SSDPR-CL100-240-G2 240GB RAM CRUCIAL CT4G4SFS824A CRUCIAL CT4G4SFS824A Wireless card Qualcomm Atheros QCA9377 LTE miniPCIe card Quectel EC-20 Display HDMI 1920x1080p Ethernet 6x Intel i211 (on-board) Attached devices 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. SanDisk USB 3.2Gen1 16 GB 4. USB Type-C Hub Pro UCN3286 USB Keyboard DELL KB216 Power supply Channel Well Technology 12V, 7.5A 90W Protectli FW6C Dasharo Component Description CPU Intel(R) Core(TM) i5-7200U SSD M.2 SSD SATA: Hoodisk SSL032GTTC7-S9A-2S external SATA 2.5 inch: Goodram SSDPR-CL100-240-G2 240GB RAM CRUCIAL CT4G4SFS824A CRUCIAL CT4G4SFS824A Wireless card Qualcomm Atheros QCA9377 LTE miniPCIe card Quectel EC-20 Display HDMI 1920x1080p Ethernet 6x Intel i210 (on-board) Attached devices 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. SanDisk USB 3.2Gen1 16 GB 4. USB Type-C Hub Pro UCN3286 USB Keyboard DELL KB216 Power supply Channel Well Technology 12V, 7.5A 90W Protectli FW6D Dasharo Component Description CPU Intel(R) Core(TM) i5-8250U SSD M.2 SSD SATA: Hoodisk SSL032GTTC7-S9A-2S external SATA 2.5 inch: Goodram SSDPR-CL100-240-G2 240GB RAM CRUCIAL CT4G4SFS824A CRUCIAL CT4G4SFS824A Wireless card Qualcomm Atheros QCA9377 LTE miniPCIe card Quectel EC-20 Display HDMI 1920x1080p Ethernet 6x Intel i210 (on-board) Attached devices 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. SanDisk USB 3.2Gen1 16 GB 4. USB Type-C Hub Pro UCN3286 USB Keyboard DELL KB216 Power supply Channel Well Technology 12V, 7.5A 90W Protectli FW6E Dasharo Component Description CPU Intel(R) Core(TM) i5-8250U SSD M.2 SSD SATA: Hoodisk SSL032GTTC7-S9A-2S external SATA 2.5 inch: Goodram SSDPR-CL100-240-G2 240GB RAM CRUCIAL CT4G4SFS824A CRUCIAL CT4G4SFS824A Wireless card Qualcomm Atheros QCA9377 LTE miniPCIe card Quectel EC-20 Display HDMI 1920x1080p Ethernet 6x Intel i210 (on-board) Attached devices 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. SanDisk USB 3.2Gen1 16 GB 4. USB Type-C Hub Pro UCN3286 USB Keyboard DELL KB216 Power supply Channel Well Technology 12V, 7.5A 90W","title":"Hardware Configuration Matrix"},{"location":"variants/protectli_fw6/hardware-matrix/#hardware-configuration-matrix","text":"","title":"Hardware configuration matrix"},{"location":"variants/protectli_fw6/hardware-matrix/#introduction","text":"This document describes the hardware configuration used for validation of the coreboot port on the Protectli FW6 firewall.","title":"Introduction"},{"location":"variants/protectli_fw6/hardware-matrix/#protectli-fw6e-dasharo","text":"Component Description CPU IIntel(R) Celeron(TM) 3865U SSD M.2 SSD SATA: Hoodisk SSL032GTTC7-S9A-2S external SATA 2.5 inch: Goodram SSDPR-CL100-240-G2 240GB RAM CRUCIAL CT4G4SFS824A CRUCIAL CT4G4SFS824A Wireless card Qualcomm Atheros QCA9377 LTE miniPCIe card Quectel EC-20 Display HDMI 1920x1080p Ethernet 6x Intel i211 (on-board) Attached devices 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. SanDisk USB 3.2Gen1 16 GB 4. USB Type-C Hub Pro UCN3286 USB Keyboard DELL KB216 Power supply Channel Well Technology 12V, 7.5A 90W","title":"Protectli FW6E Dasharo"},{"location":"variants/protectli_fw6/hardware-matrix/#protectli-fw6b-dasharo","text":"Component Description CPU Intel(R) Core(TM) i3-7100U SSD M.2 SSD SATA: Hoodisk SSL032GTTC7-S9A-2S external SATA 2.5 inch: Goodram SSDPR-CL100-240-G2 240GB RAM CRUCIAL CT4G4SFS824A CRUCIAL CT4G4SFS824A Wireless card Qualcomm Atheros QCA9377 LTE miniPCIe card Quectel EC-20 Display HDMI 1920x1080p Ethernet 6x Intel i211 (on-board) Attached devices 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. SanDisk USB 3.2Gen1 16 GB 4. USB Type-C Hub Pro UCN3286 USB Keyboard DELL KB216 Power supply Channel Well Technology 12V, 7.5A 90W","title":"Protectli FW6B Dasharo"},{"location":"variants/protectli_fw6/hardware-matrix/#protectli-fw6c-dasharo","text":"Component Description CPU Intel(R) Core(TM) i5-7200U SSD M.2 SSD SATA: Hoodisk SSL032GTTC7-S9A-2S external SATA 2.5 inch: Goodram SSDPR-CL100-240-G2 240GB RAM CRUCIAL CT4G4SFS824A CRUCIAL CT4G4SFS824A Wireless card Qualcomm Atheros QCA9377 LTE miniPCIe card Quectel EC-20 Display HDMI 1920x1080p Ethernet 6x Intel i210 (on-board) Attached devices 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. SanDisk USB 3.2Gen1 16 GB 4. USB Type-C Hub Pro UCN3286 USB Keyboard DELL KB216 Power supply Channel Well Technology 12V, 7.5A 90W","title":"Protectli FW6C Dasharo"},{"location":"variants/protectli_fw6/hardware-matrix/#protectli-fw6d-dasharo","text":"Component Description CPU Intel(R) Core(TM) i5-8250U SSD M.2 SSD SATA: Hoodisk SSL032GTTC7-S9A-2S external SATA 2.5 inch: Goodram SSDPR-CL100-240-G2 240GB RAM CRUCIAL CT4G4SFS824A CRUCIAL CT4G4SFS824A Wireless card Qualcomm Atheros QCA9377 LTE miniPCIe card Quectel EC-20 Display HDMI 1920x1080p Ethernet 6x Intel i210 (on-board) Attached devices 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. SanDisk USB 3.2Gen1 16 GB 4. USB Type-C Hub Pro UCN3286 USB Keyboard DELL KB216 Power supply Channel Well Technology 12V, 7.5A 90W","title":"Protectli FW6D Dasharo"},{"location":"variants/protectli_fw6/hardware-matrix/#protectli-fw6e-dasharo_1","text":"Component Description CPU Intel(R) Core(TM) i5-8250U SSD M.2 SSD SATA: Hoodisk SSL032GTTC7-S9A-2S external SATA 2.5 inch: Goodram SSDPR-CL100-240-G2 240GB RAM CRUCIAL CT4G4SFS824A CRUCIAL CT4G4SFS824A Wireless card Qualcomm Atheros QCA9377 LTE miniPCIe card Quectel EC-20 Display HDMI 1920x1080p Ethernet 6x Intel i210 (on-board) Attached devices 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. SanDisk USB 3.2Gen1 16 GB 4. USB Type-C Hub Pro UCN3286 USB Keyboard DELL KB216 Power supply Channel Well Technology 12V, 7.5A 90W","title":"Protectli FW6E Dasharo"},{"location":"variants/protectli_fw6/installation-manual/","text":"Installation manual Flashing coreboot can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 22.04. Installing flashrom Your distribution will need at least flashrom v1.0. sudo apt install flashrom Reading flash contents Always prepare a backup of the current firmware image. To read from the flash and save them to a file ( dump.rom ), execute the following command: sudo flashrom -p internal -r dump.rom Flashing Dasharo flashrom -p internal -w [ path ] --ifd -i bios To flash Dasharo on the platform, execute the following command - replace [path] with the path to the Dasharo image you want to flash, e.g. protectli_fw6_DF_v1.0.14.rom . sudo flashrom -p internal -w protectli_fw6_DF_v1.0.14.rom --ifd -i bios After successful operation reboot the platform.","title":"Installation manual"},{"location":"variants/protectli_fw6/installation-manual/#installation-manual","text":"Flashing coreboot can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 22.04.","title":"Installation manual"},{"location":"variants/protectli_fw6/installation-manual/#installing-flashrom","text":"Your distribution will need at least flashrom v1.0. sudo apt install flashrom","title":"Installing flashrom"},{"location":"variants/protectli_fw6/installation-manual/#reading-flash-contents","text":"Always prepare a backup of the current firmware image. To read from the flash and save them to a file ( dump.rom ), execute the following command: sudo flashrom -p internal -r dump.rom","title":"Reading flash contents"},{"location":"variants/protectli_fw6/installation-manual/#flashing-dasharo","text":"flashrom -p internal -w [ path ] --ifd -i bios To flash Dasharo on the platform, execute the following command - replace [path] with the path to the Dasharo image you want to flash, e.g. protectli_fw6_DF_v1.0.14.rom . sudo flashrom -p internal -w protectli_fw6_DF_v1.0.14.rom --ifd -i bios After successful operation reboot the platform.","title":"Flashing Dasharo"},{"location":"variants/protectli_fw6/overview/","text":"Overview Releases - list of all releases Building manual - how to build Dasharo for Protectli FW6 Installation manual - how to install Dasharo for Protectli FW6 Hardware configuration matrix - definition of hardware configuration used during validation Test matrix - validation scope for the Protectli FW6","title":"Overview"},{"location":"variants/protectli_fw6/overview/#overview","text":"Releases - list of all releases Building manual - how to build Dasharo for Protectli FW6 Installation manual - how to install Dasharo for Protectli FW6 Hardware configuration matrix - definition of hardware configuration used during validation Test matrix - validation scope for the Protectli FW6","title":"Overview"},{"location":"variants/protectli_fw6/releases/","text":"Release Notes Following Release Notes describe status of Open Source Firmware development for Protectli FW6. For details about our release process please read Dasharo Standard Release Process . Subscribe to Protectli FW6 Dasharo Release Newsletter Test results for this platform can be found here . v1.0.14 - 2022-05-13 Changed Throttling temperature to 75 Celsius degrees Known issues Samsung memory modules do not work properly on older FW6A/B/C (SKU6LAV20) Binaries protectli_vault_kbl_v1.0.14.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on 87f9fc85 revision e04b0ac8 seabios based on v1.0.6 revision 03bcdcaf ipxe based on 2019.3 stable revision ebf2eaf5 memtest based on v002 revision dd5b4ff2 Management Engine: ME 11.8.50.3399, SHA256: e1ce735139b6d9ebb81d7f6db288b0a896c39e4b1e606324b915bec949b6aca6 microcode: CPU signature: 0x0406E3, Date: 03.10.2019, Revision: 0xD6 CPU signature: 0x0806E9, Date: 27.04.2020, Revision: 0xD6 CPU signature: 0x0806E9, Date: 27.04.2020, Revision: 0xD6 CPU signature: 0x0806EA, Date: 27.04.2020, Revision: 0xD6 VBIOS: VBIOS blob for FW6A/B/C, SHA256: 470d3faefb09432bea00d637ec6b3ff51854e6cff0ee56627c0773acaffa4830 VBIOS blob for FW6D/E, SHA256: d1c746127e5288942efae65907739e18ff395fab70925b44dbafafd9e7b30cd7","title":"Releases"},{"location":"variants/protectli_fw6/releases/#release-notes","text":"Following Release Notes describe status of Open Source Firmware development for Protectli FW6. For details about our release process please read Dasharo Standard Release Process . Subscribe to Protectli FW6 Dasharo Release Newsletter Test results for this platform can be found here .","title":"Release Notes"},{"location":"variants/protectli_fw6/releases/#v1014-2022-05-13","text":"","title":"v1.0.14 - 2022-05-13"},{"location":"variants/protectli_fw6/test-matrix/","text":"Test matrix About The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary. Module: Dasharo compatibility No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. Display ports and LCD support DSP DSP002.001, DSP002.003 3. USB HID and MSC Support USB USB001.001, USB001.002, USB002.001, USB002.002 4. SMBIOS DMI DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001 5. Custom boot logo CLG DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001 6. M.2 WiFi/Bluetooth WLE WLE001.001, WLE002.001, WLE003.001 7. Network boot PXE PXE007.001 8. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 9. Custom boot menu key CBK All 10. FreeBSD support BSD All 11. miniPCIe LTE/WiFi/Bluetooth MWL MWL004.001 12. Custom network boot entries CNB CNB001.002 Module: Dasharo performance No. Supported test suite Test suite ID Supported test cases 1. CPU temperature CPT All","title":"Test matrix"},{"location":"variants/protectli_fw6/test-matrix/#test-matrix","text":"","title":"Test matrix"},{"location":"variants/protectli_fw6/test-matrix/#about","text":"The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.","title":"About"},{"location":"variants/protectli_fw6/test-matrix/#module-dasharo-compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. Display ports and LCD support DSP DSP002.001, DSP002.003 3. USB HID and MSC Support USB USB001.001, USB001.002, USB002.001, USB002.002 4. SMBIOS DMI DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001 5. Custom boot logo CLG DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001 6. M.2 WiFi/Bluetooth WLE WLE001.001, WLE002.001, WLE003.001 7. Network boot PXE PXE007.001 8. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 9. Custom boot menu key CBK All 10. FreeBSD support BSD All 11. miniPCIe LTE/WiFi/Bluetooth MWL MWL004.001 12. Custom network boot entries CNB CNB001.002","title":"Module: Dasharo compatibility"},{"location":"variants/protectli_fw6/test-matrix/#module-dasharo-performance","text":"No. Supported test suite Test suite ID Supported test cases 1. CPU temperature CPT All","title":"Module: Dasharo performance"},{"location":"variants/protectli_v1x10/building-manual/","text":"Building manual Intro This document describes the procedure for compiling coreboot for Protectli V1210, V1410 and V1610. Requirements Docker follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux Git Build Dasharo BIOS firmware This build procedure produces full firmware binary including blobs such as FSP, and ME. Currently, access to them is restricted to the OEM (Protectli) via a private repository. Clone the coreboot repository: git clone https://github.com/Dasharo/coreboot Checkout the desired version, e.g. v0.9.0 : cd coreboot git checkout protectli_vault_jsl_v0.9.0 Checkout submodules: git submodule update --init --checkout Obtain the Protectli blobs package: Replace <PROTECTLI_BLOBS_REPO> with a a proper path to the repository in a form of: git@repo-path.git . You should checkout to the same tag as in case aof the coreboot repository. cd 3rdparty/blobs/mainboard/ git init git remote add origin <PROTECTLI_BLOBS_REPO> git fetch origin && git checkout protectli_vault_jsl_v0.9.0 cd - Build the firmware v1.0.19 or newer: for V1210 ./build.sh V1210 for V1410 ./build.sh V1410 for V1610 ./build.sh V1610 The resulting coreboot image will be placed in the coreboot directory as protectli_V1210.rom , protectli_V1410.rom or protectli_V1610.rom respectvely.","title":"Building manual"},{"location":"variants/protectli_v1x10/building-manual/#building-manual","text":"","title":"Building manual"},{"location":"variants/protectli_v1x10/building-manual/#intro","text":"This document describes the procedure for compiling coreboot for Protectli V1210, V1410 and V1610.","title":"Intro"},{"location":"variants/protectli_v1x10/building-manual/#requirements","text":"Docker follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux Git","title":"Requirements"},{"location":"variants/protectli_v1x10/building-manual/#build-dasharo-bios-firmware","text":"This build procedure produces full firmware binary including blobs such as FSP, and ME. Currently, access to them is restricted to the OEM (Protectli) via a private repository. Clone the coreboot repository: git clone https://github.com/Dasharo/coreboot Checkout the desired version, e.g. v0.9.0 : cd coreboot git checkout protectli_vault_jsl_v0.9.0 Checkout submodules: git submodule update --init --checkout Obtain the Protectli blobs package: Replace <PROTECTLI_BLOBS_REPO> with a a proper path to the repository in a form of: git@repo-path.git . You should checkout to the same tag as in case aof the coreboot repository. cd 3rdparty/blobs/mainboard/ git init git remote add origin <PROTECTLI_BLOBS_REPO> git fetch origin && git checkout protectli_vault_jsl_v0.9.0 cd - Build the firmware v1.0.19 or newer: for V1210 ./build.sh V1210 for V1410 ./build.sh V1410 for V1610 ./build.sh V1610 The resulting coreboot image will be placed in the coreboot directory as protectli_V1210.rom , protectli_V1410.rom or protectli_V1610.rom respectvely.","title":"Build Dasharo BIOS firmware"},{"location":"variants/protectli_v1x10/firmware-update/","text":"Firmware update The following documentation describes the process of Dasharo open-source firmware update. If your device is currently flashed with the proprietary firmware please refer to the Initial deployment documentation. The update process may be different, depending on the currently installed Dasharo firmware version. For simplicity of the update process, we recommend using Dasharo Tools Suite . Before starting the update procedure be sure to disable Secure Boot: Power on the device. While the device is booting, hold the DELETE key to enter the UEFI Setup Menu. Enter the Device Manager menu. Enter the Secure Boot Configuration submenu. Verify that the Current Secure Boot State field says Disabled - if not, unselect the Attempt Secure Boot option below then press F10 to save the changes. Reboot the device to properly apply the changes. The settings of all the above options can be restored after a firmware update. Updating Dasharo flashrom -p internal -w protectli_<variant>_v<version>.rom --fmap -i COREBOOT","title":"Firmware update"},{"location":"variants/protectli_v1x10/firmware-update/#firmware-update","text":"The following documentation describes the process of Dasharo open-source firmware update. If your device is currently flashed with the proprietary firmware please refer to the Initial deployment documentation. The update process may be different, depending on the currently installed Dasharo firmware version. For simplicity of the update process, we recommend using Dasharo Tools Suite . Before starting the update procedure be sure to disable Secure Boot: Power on the device. While the device is booting, hold the DELETE key to enter the UEFI Setup Menu. Enter the Device Manager menu. Enter the Secure Boot Configuration submenu. Verify that the Current Secure Boot State field says Disabled - if not, unselect the Attempt Secure Boot option below then press F10 to save the changes. Reboot the device to properly apply the changes. The settings of all the above options can be restored after a firmware update.","title":"Firmware update"},{"location":"variants/protectli_v1x10/firmware-update/#updating-dasharo","text":"flashrom -p internal -w protectli_<variant>_v<version>.rom --fmap -i COREBOOT","title":"Updating Dasharo"},{"location":"variants/protectli_v1x10/hardware-matrix/","text":"Hardware configuration matrix Introduction This document describes the hardware configuration used for validation of the coreboot port on the Protectli V1210/V1410/V1610 firewall. Protectli V1210 Component Description CPU Intel(R) Celeron(R) N5105 @ 2.00GHz RAM Micron MT53D512M64D4RQ-046 Flash memory Winbond 25Q16JVSSIQ USB Keyboard DELL KB216 USB Mouse DELL MS116p USB pendrives 1. SanDisk Ultra Flair USB 3.0 16 GB Display HDMI 1920x1080p Ethernet controller 2x intel i225/i226 (on-board) Internal devices Audio subsystem 4G Modem AMIT MDG200-0T001 Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply Power Adapter GA-0481204000V Protectli V1410 Component Description CPU Intel(R) Celeron(R) N5105 @ 2.00GHz RAM Micron MT53D512M64D4RQ-046 Flash memory Winbond 25Q128JVSIQ USB Keyboard DELL KB216 USB Mouse DELL MS116p USB pendrives 1. SanDisk Ultra Flair USB 3.0 16 GB Display HDMI 1920x1080p Ethernet controller 4x intel i225/i226 (on-board) Internal devices Audio subsystem 4G Modem AMIT MDG200-0T001 Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply Power Adapter GA-0481204000V Protectli V1610 Component Description CPU Intel(R) Pentium(R) Silver N6005 @ 2.00GHz RAM Micron MT53E512M32D4NQ-053 Flash memory Winbond 25Q128JVSIQ USB Keyboard DELL KB216 USB Mouse DELL MS116p USB pendrives 1. SanDisk Ultra Flair USB 3.0 16 GB Display HDMI 1920x1080p Ethernet controller 6x intel i225/i226 (on-board) Internal devices Audio subsystem 4G Modem AMIT MDG200-0T001 Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply Power Adapter GA-0481204000V","title":"Hardware configuration matrix"},{"location":"variants/protectli_v1x10/hardware-matrix/#hardware-configuration-matrix","text":"","title":"Hardware configuration matrix"},{"location":"variants/protectli_v1x10/hardware-matrix/#introduction","text":"This document describes the hardware configuration used for validation of the coreboot port on the Protectli V1210/V1410/V1610 firewall.","title":"Introduction"},{"location":"variants/protectli_v1x10/hardware-matrix/#protectli-v1210","text":"Component Description CPU Intel(R) Celeron(R) N5105 @ 2.00GHz RAM Micron MT53D512M64D4RQ-046 Flash memory Winbond 25Q16JVSSIQ USB Keyboard DELL KB216 USB Mouse DELL MS116p USB pendrives 1. SanDisk Ultra Flair USB 3.0 16 GB Display HDMI 1920x1080p Ethernet controller 2x intel i225/i226 (on-board) Internal devices Audio subsystem 4G Modem AMIT MDG200-0T001 Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply Power Adapter GA-0481204000V","title":"Protectli V1210"},{"location":"variants/protectli_v1x10/hardware-matrix/#protectli-v1410","text":"Component Description CPU Intel(R) Celeron(R) N5105 @ 2.00GHz RAM Micron MT53D512M64D4RQ-046 Flash memory Winbond 25Q128JVSIQ USB Keyboard DELL KB216 USB Mouse DELL MS116p USB pendrives 1. SanDisk Ultra Flair USB 3.0 16 GB Display HDMI 1920x1080p Ethernet controller 4x intel i225/i226 (on-board) Internal devices Audio subsystem 4G Modem AMIT MDG200-0T001 Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply Power Adapter GA-0481204000V","title":"Protectli V1410"},{"location":"variants/protectli_v1x10/hardware-matrix/#protectli-v1610","text":"Component Description CPU Intel(R) Pentium(R) Silver N6005 @ 2.00GHz RAM Micron MT53E512M32D4NQ-053 Flash memory Winbond 25Q128JVSIQ USB Keyboard DELL KB216 USB Mouse DELL MS116p USB pendrives 1. SanDisk Ultra Flair USB 3.0 16 GB Display HDMI 1920x1080p Ethernet controller 6x intel i225/i226 (on-board) Internal devices Audio subsystem 4G Modem AMIT MDG200-0T001 Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply Power Adapter GA-0481204000V","title":"Protectli V1610"},{"location":"variants/protectli_v1x10/initial-deployment/","text":"Initial deployment Initial flashing of Dasharo firmware can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 22.04. Deploy using Dasharo Tools Suite For simplicity we recommend using Dasharo Tools Suite to omit all compilation steps and deploy the Dasharo firmware seamlessly. Boot Dasharo Tools Suite. Perform Dasharo installation. This will flash the BIOS region only. After the successful operation, DTS will reboot the platform. This concludes Dasharo deployment process using DTS. Build flashrom Please follow generic guide for Dasharo flashrom fork . Reading flash contents Always prepare a backup of the current firmware image. To read from the flash and save it to a file ( dump.rom ), execute the following command: flashrom -p internal -r dump.rom Flashing Dasharo To flash Dasharo on the platform, execute the following command - replace [path] with the path to the Dasharo image you want to flash, e.g. protectli_vault_V1210_v0.9.0.rom . flashrom -p internal -w protectli_vault_V1210_v0.9.0.rom --ifd -i bios This will flash the BIOS region only. After the operation is successful, reboot the platform.","title":"Initial deployment"},{"location":"variants/protectli_v1x10/initial-deployment/#initial-deployment","text":"Initial flashing of Dasharo firmware can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 22.04.","title":"Initial deployment"},{"location":"variants/protectli_v1x10/initial-deployment/#deploy-using-dasharo-tools-suite","text":"For simplicity we recommend using Dasharo Tools Suite to omit all compilation steps and deploy the Dasharo firmware seamlessly. Boot Dasharo Tools Suite. Perform Dasharo installation. This will flash the BIOS region only. After the successful operation, DTS will reboot the platform. This concludes Dasharo deployment process using DTS.","title":"Deploy using Dasharo Tools Suite"},{"location":"variants/protectli_v1x10/initial-deployment/#build-flashrom","text":"Please follow generic guide for Dasharo flashrom fork .","title":"Build flashrom"},{"location":"variants/protectli_v1x10/initial-deployment/#reading-flash-contents","text":"Always prepare a backup of the current firmware image. To read from the flash and save it to a file ( dump.rom ), execute the following command: flashrom -p internal -r dump.rom","title":"Reading flash contents"},{"location":"variants/protectli_v1x10/initial-deployment/#flashing-dasharo","text":"To flash Dasharo on the platform, execute the following command - replace [path] with the path to the Dasharo image you want to flash, e.g. protectli_vault_V1210_v0.9.0.rom . flashrom -p internal -w protectli_vault_V1210_v0.9.0.rom --ifd -i bios This will flash the BIOS region only. After the operation is successful, reboot the platform.","title":"Flashing Dasharo"},{"location":"variants/protectli_v1x10/overview/","text":"Overview The Vault is a small form network appliance built for use as a firewall / router, virtualization platform, a daily-driven personal computer, and more. The V1210/V1410/V1610 feature an Intel Jasper Lake CPU, soldered down LPDDR4X memory, Intel i225-V/i226-V 2.5G Ethernet ports, 4x USB-A 3.x ports, eMMC, PCIe NVMe storage, M.2 WIFI and WWAN slots, serial console over USB-C and a firmware TPM. V1210 - Intel\u00ae Celeron\u00ae N5105, 2x i225/i226, 4GB LPDDR4X V1410 - Intel\u00ae Celeron\u00ae N5105, 4x i225/i226, 8GB LPDDR4X V1610 - Intel\u00ae Pentium\u00ae Silver N6005, 6x i225/i226, 16GB LPDDR4X Documentation sections Releases - groups information about all releases. Building manual - describes how to build Dasharo for Protectli V1210/V1410/V1610. Initial deployment - describes initial Dasharo deployment methods (i. e. flashing new firmware) for Protectli V1210/V1410/V1610. Firmware update - explains supported Dasharo open-source firmware update methods. Recovery - gathers information on how to recover the platform from potential failure. Hardware configuration matrix - describes the platform's hardware configuration used during the Dasharo firmware validation procedure. Test matrix - describes validation scope used during Dasharo firmware validation procedure.","title":"Overview"},{"location":"variants/protectli_v1x10/overview/#overview","text":"The Vault is a small form network appliance built for use as a firewall / router, virtualization platform, a daily-driven personal computer, and more. The V1210/V1410/V1610 feature an Intel Jasper Lake CPU, soldered down LPDDR4X memory, Intel i225-V/i226-V 2.5G Ethernet ports, 4x USB-A 3.x ports, eMMC, PCIe NVMe storage, M.2 WIFI and WWAN slots, serial console over USB-C and a firmware TPM. V1210 - Intel\u00ae Celeron\u00ae N5105, 2x i225/i226, 4GB LPDDR4X V1410 - Intel\u00ae Celeron\u00ae N5105, 4x i225/i226, 8GB LPDDR4X V1610 - Intel\u00ae Pentium\u00ae Silver N6005, 6x i225/i226, 16GB LPDDR4X","title":"Overview"},{"location":"variants/protectli_v1x10/overview/#documentation-sections","text":"Releases - groups information about all releases. Building manual - describes how to build Dasharo for Protectli V1210/V1410/V1610. Initial deployment - describes initial Dasharo deployment methods (i. e. flashing new firmware) for Protectli V1210/V1410/V1610. Firmware update - explains supported Dasharo open-source firmware update methods. Recovery - gathers information on how to recover the platform from potential failure. Hardware configuration matrix - describes the platform's hardware configuration used during the Dasharo firmware validation procedure. Test matrix - describes validation scope used during Dasharo firmware validation procedure.","title":"Documentation sections"},{"location":"variants/protectli_v1x10/recovery/","text":"Recovery Intro The following documentation describes the process of recovering hardware from the brick state with RTE and Dasharo open-source firmware. Prerequisites Prepared RTE 6x female-female wire cables Connections To prepare the stand for flashing follow the steps described below: Open the platform cover. Connect the 6-pin flash header to the SPI header on RTE. SPI header 6 pin header Vcc pin 1 (Vcc) GND pin 2 (GND) CS pin 4 (CS) SCLK pin 6 (CLK) MISO pin 5 (MISO) MOSI pin 3 (MOSI) ______ > | | Vcc 3.3V ----1 2---- GND | | MOSI ----3 4---- CS | | MISO ----5 6---- CLK |______| Firmware flashing To flash firmware follow the steps described below: Login to RTE via ssh or minicom . Turn on the platform by connecting the power supply. Wait at least 5 seconds. Turn off the platform by using the power button. Wait at least 3 seconds. Set the proper state of the SPI by using the following commands on RTE: # set SPI Vcc to 3.3V echo 1 > /sys/class/gpio/gpio405/value # SPI Vcc on echo 1 > /sys/class/gpio/gpio406/value # SPI lines ON echo 1 > /sys/class/gpio/gpio404/value Wait at least 2 seconds. Disconnect the power supply from the platform. Wait at least 2 seconds. Flash the platform by using the following command: flashrom -p linux_spi:dev = /dev/spidev1.0,spispeed = 16000 -w [ path_to_binary ] Flashing with flashrom takes about 1 minute. Change back the state of the SPI by using the following commands: echo 0 > /sys/class/gpio/gpio404/value echo 0 > /sys/class/gpio/gpio406/value Turn on the platform by connecting the power supply. The first boot of the platform after proceeding with the above procedure can take much longer than standard.","title":"Recovery"},{"location":"variants/protectli_v1x10/recovery/#recovery","text":"","title":"Recovery"},{"location":"variants/protectli_v1x10/recovery/#intro","text":"The following documentation describes the process of recovering hardware from the brick state with RTE and Dasharo open-source firmware.","title":"Intro"},{"location":"variants/protectli_v1x10/recovery/#prerequisites","text":"Prepared RTE 6x female-female wire cables","title":"Prerequisites"},{"location":"variants/protectli_v1x10/recovery/#connections","text":"To prepare the stand for flashing follow the steps described below: Open the platform cover. Connect the 6-pin flash header to the SPI header on RTE. SPI header 6 pin header Vcc pin 1 (Vcc) GND pin 2 (GND) CS pin 4 (CS) SCLK pin 6 (CLK) MISO pin 5 (MISO) MOSI pin 3 (MOSI) ______ > | | Vcc 3.3V ----1 2---- GND | | MOSI ----3 4---- CS | | MISO ----5 6---- CLK |______|","title":"Connections"},{"location":"variants/protectli_v1x10/recovery/#firmware-flashing","text":"To flash firmware follow the steps described below: Login to RTE via ssh or minicom . Turn on the platform by connecting the power supply. Wait at least 5 seconds. Turn off the platform by using the power button. Wait at least 3 seconds. Set the proper state of the SPI by using the following commands on RTE: # set SPI Vcc to 3.3V echo 1 > /sys/class/gpio/gpio405/value # SPI Vcc on echo 1 > /sys/class/gpio/gpio406/value # SPI lines ON echo 1 > /sys/class/gpio/gpio404/value Wait at least 2 seconds. Disconnect the power supply from the platform. Wait at least 2 seconds. Flash the platform by using the following command: flashrom -p linux_spi:dev = /dev/spidev1.0,spispeed = 16000 -w [ path_to_binary ] Flashing with flashrom takes about 1 minute. Change back the state of the SPI by using the following commands: echo 0 > /sys/class/gpio/gpio404/value echo 0 > /sys/class/gpio/gpio406/value Turn on the platform by connecting the power supply. The first boot of the platform after proceeding with the above procedure can take much longer than standard.","title":"Firmware flashing"},{"location":"variants/protectli_v1x10/releases/","text":"Release Notes Following Release Notes describe status of Open Source Firmware development for Protectli V1210/V1410/V1610 For details about our release process please read Dasharo Standard Release Process . Subscribe to Protectli V1210/V1410/V1610 Dasharo Release Newsletter Test results for this platform can be found here .","title":"Release Notes"},{"location":"variants/protectli_v1x10/releases/#release-notes","text":"Following Release Notes describe status of Open Source Firmware development for Protectli V1210/V1410/V1610 For details about our release process please read Dasharo Standard Release Process . Subscribe to Protectli V1210/V1410/V1610 Dasharo Release Newsletter Test results for this platform can be found here .","title":"Release Notes"},{"location":"variants/protectli_v1x10/test-matrix/","text":"Test matrix About The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary. The test scope is the same for all platforms of the V1210/V1410/V1610 family. Module: Dasharo compatibility No. Supported test suite Test suite ID Supported test cases 1. UEFI compatible interface EFI All 2. Display ports DSP DSP002.001, DSP002.002, DSP002.003 3. Network boot utilities NBT All 4. NVMe support NVM All 5. Custom logo CLG All 6. Custom Boot Keys CBK All 7. USB HID and MSC Support USB USB001.xxx and USB002.xxx 8. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 9. miniPCIe LTE/WiFi/Bluetooth MWL MWL004.001 10. M.2 WiFi/Bluetooth WLE All 11. eMMC support MMC All 12. SMBIOS DMI DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001 13. Custom network boot entries CNB CNB001.002 14. Audio subsystem AUD AUD007.xxx, AUD008.xxx 15. UEFI Shell USH All 16. USB detection UDT All 17. USB booting UBT All 18. Windows booting WBT WBT001.001 Module: Dasharo security No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM TPM001.002, TPM001.003, TPM002.002, TPM002.003, TPM003.002, TPM003.003 2. Secure Boot support SBO All Module: Dasharo performance No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF Without CPU003.XXX and CPU005.XXX 4. Platform stability STB All","title":"Test matrix"},{"location":"variants/protectli_v1x10/test-matrix/#test-matrix","text":"","title":"Test matrix"},{"location":"variants/protectli_v1x10/test-matrix/#about","text":"The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary. The test scope is the same for all platforms of the V1210/V1410/V1610 family.","title":"About"},{"location":"variants/protectli_v1x10/test-matrix/#module-dasharo-compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. UEFI compatible interface EFI All 2. Display ports DSP DSP002.001, DSP002.002, DSP002.003 3. Network boot utilities NBT All 4. NVMe support NVM All 5. Custom logo CLG All 6. Custom Boot Keys CBK All 7. USB HID and MSC Support USB USB001.xxx and USB002.xxx 8. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 9. miniPCIe LTE/WiFi/Bluetooth MWL MWL004.001 10. M.2 WiFi/Bluetooth WLE All 11. eMMC support MMC All 12. SMBIOS DMI DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001 13. Custom network boot entries CNB CNB001.002 14. Audio subsystem AUD AUD007.xxx, AUD008.xxx 15. UEFI Shell USH All 16. USB detection UDT All 17. USB booting UBT All 18. Windows booting WBT WBT001.001","title":"Module: Dasharo compatibility"},{"location":"variants/protectli_v1x10/test-matrix/#module-dasharo-security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM TPM001.002, TPM001.003, TPM002.002, TPM002.003, TPM003.002, TPM003.003 2. Secure Boot support SBO All","title":"Module: Dasharo security"},{"location":"variants/protectli_v1x10/test-matrix/#module-dasharo-performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF Without CPU003.XXX and CPU005.XXX 4. Platform stability STB All","title":"Module: Dasharo performance"},{"location":"variants/protectli_vp2410/building-manual/","text":"Building manual Intro This document describes the procedure for compiling coreboot for Protectli VP2410. Requirements Docker follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux Git Build Dasharo BIOS firmware This build procedure produces full firmware binary including blobs such as FSP, and ME. Currently, access to them is restricted to the OEM (Protectli) via a private repository. Clone the coreboot repository: git clone https://github.com/Dasharo/coreboot Checkout the desired version, e.g. v1.0.15 : cd coreboot git checkout protectli_vault_glk_v1.0.15 Checkout submodules: git submodule update --init --checkout Obtain the Protectli blobs package: Replace <PROTECTLI_BLOBS_REPO> with a a proper path to the repository in a form of: git@repo-path.git . You should checkout to the same tag as in case aof the coreboot repository. cd 3rdparty/blobs/mainboard/ git init git remote add origin <PROTECTLI_BLOBS_REPO> git fetch origin && git checkout protectli_vault_glk_v1.0.15 cd - ln -s ../blobs/mainboard/protectli/vault_glk/GeminilakeFspBinPkg/ 3rdparty/fsp/GeminilakeFspBinPkg Build the firmware v1.0.15 or newer: ./build.sh vp2410 The resulting coreboot image will be placed in the coreboot directory as protectli_vp2410_<version>.rom .","title":"Building manual"},{"location":"variants/protectli_vp2410/building-manual/#building-manual","text":"","title":"Building manual"},{"location":"variants/protectli_vp2410/building-manual/#intro","text":"This document describes the procedure for compiling coreboot for Protectli VP2410.","title":"Intro"},{"location":"variants/protectli_vp2410/building-manual/#requirements","text":"Docker follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux Git","title":"Requirements"},{"location":"variants/protectli_vp2410/building-manual/#build-dasharo-bios-firmware","text":"This build procedure produces full firmware binary including blobs such as FSP, and ME. Currently, access to them is restricted to the OEM (Protectli) via a private repository. Clone the coreboot repository: git clone https://github.com/Dasharo/coreboot Checkout the desired version, e.g. v1.0.15 : cd coreboot git checkout protectli_vault_glk_v1.0.15 Checkout submodules: git submodule update --init --checkout Obtain the Protectli blobs package: Replace <PROTECTLI_BLOBS_REPO> with a a proper path to the repository in a form of: git@repo-path.git . You should checkout to the same tag as in case aof the coreboot repository. cd 3rdparty/blobs/mainboard/ git init git remote add origin <PROTECTLI_BLOBS_REPO> git fetch origin && git checkout protectli_vault_glk_v1.0.15 cd - ln -s ../blobs/mainboard/protectli/vault_glk/GeminilakeFspBinPkg/ 3rdparty/fsp/GeminilakeFspBinPkg Build the firmware v1.0.15 or newer: ./build.sh vp2410 The resulting coreboot image will be placed in the coreboot directory as protectli_vp2410_<version>.rom .","title":"Build Dasharo BIOS firmware"},{"location":"variants/protectli_vp2410/hardware-matrix/","text":"Hardware configuration matrix Introduction This document describes the hardware configuration used for validation of the coreboot port on the Protectli VP2410 firewall. Protectli VP2410 Component Description CPU Intel Celeron J4125 @ 2.70GHz RAM CRUCIAL CT4G4SFS824A SAMSUNG M471A4G43MB1-CTD SAMSUNG M471A1K43CB1-CTD SAMSUNG M471A5244BB0-CRC KINGSTON KVR24S17S8/8 KINGSTON KVR26S19S8/16 Flash memory Macronix MX25U6473F SSD M.2 SSD SATA: Hoodisk SSL032GTTC7-S9A-2S external SATA 2.5 inch: Goodram SSDPR-CL100-240-G2 240GB MMC drive SAMSUNG 8GTF4R (on-board) USB pendrives 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. USB Type-C Hub Pro UCN3286 Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p 3. USB Type-C Hub Pro UCN3286 LTE miniPCIe card Quectel EC-20 Wireless card Intel Wi-Fi 6 AX200 Display HDMI 1920x1080p, DP 1920x1080p Ethernet 4x intel i211 (on-board) TPM PC Engines TPM1A LPC TPM Power supply Channel Well Technology 12V, 5.0A 60W Note, that in RAM section all used during verification procedure modules have been listed. Device has only one RAM mounting slot.","title":"Hardware Configuration Matrix"},{"location":"variants/protectli_vp2410/hardware-matrix/#hardware-configuration-matrix","text":"","title":"Hardware configuration matrix"},{"location":"variants/protectli_vp2410/hardware-matrix/#introduction","text":"This document describes the hardware configuration used for validation of the coreboot port on the Protectli VP2410 firewall.","title":"Introduction"},{"location":"variants/protectli_vp2410/hardware-matrix/#protectli-vp2410","text":"Component Description CPU Intel Celeron J4125 @ 2.70GHz RAM CRUCIAL CT4G4SFS824A SAMSUNG M471A4G43MB1-CTD SAMSUNG M471A1K43CB1-CTD SAMSUNG M471A5244BB0-CRC KINGSTON KVR24S17S8/8 KINGSTON KVR26S19S8/16 Flash memory Macronix MX25U6473F SSD M.2 SSD SATA: Hoodisk SSL032GTTC7-S9A-2S external SATA 2.5 inch: Goodram SSDPR-CL100-240-G2 240GB MMC drive SAMSUNG 8GTF4R (on-board) USB pendrives 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. USB Type-C Hub Pro UCN3286 Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p 3. USB Type-C Hub Pro UCN3286 LTE miniPCIe card Quectel EC-20 Wireless card Intel Wi-Fi 6 AX200 Display HDMI 1920x1080p, DP 1920x1080p Ethernet 4x intel i211 (on-board) TPM PC Engines TPM1A LPC TPM Power supply Channel Well Technology 12V, 5.0A 60W Note, that in RAM section all used during verification procedure modules have been listed. Device has only one RAM mounting slot.","title":"Protectli VP2410"},{"location":"variants/protectli_vp2410/initial-deployment/","text":"Initial deployment Initial flashing of Dasharo firmware can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 22.04. Deploy using Dasharo Tools Suite For simplicity we recommend using Dasharo Tools Suite to omit all compilation steps and deploy the Dasharo firmware seamlessly. Be sure to disable the BIOS lock in the AMI firmware setup utility: Go to Chipset tab Enter PCH IO Configuration Disable BIOS Lock . Save changes and reset. Now you are ready to use Dasharo Tools Suite (DTS): Boot Dasharo Tools Suite. Perform Dasharo installation. This will flash the full image, including the Intel ME. The operation requires a hard reset of the platform. To perform a hard reset: Power off the platform. Note, it may not power off completely due to flashed ME. Disconnect power supply from the board when OS finishes all tasks after power off (the screen goes dark or black). Disconnect the RTC/CMOS battery OR clear the CMOS using the pin header located near memory slots. Wait about 10 seconds and unshort the pins. Connect the power supply back. The platform should power on normally now. You can connect the battery back if it was disconnected. This concludes Dasharo deployment process using DTS. Build flashrom Please follow generic guide for Dasharo flashrom fork . Reading flash contents Always prepare a backup of the current firmware image. To read from the flash and save them to a file ( dump.rom ), execute the following command: flashrom -p internal -r dump.rom Keep the backup for later recovery if needed. Flashing Dasharo To flash Dasharo on the platform, execute the following command - replace [path] with the path to the Dasharo image you want to flash, e.g. protectli_vault_glk_v1.0.15.rom . If stock firmware is currently installed: flashrom -p internal -w [ path ] If Dasharo is currently installed, only the COREBOOT and IFWI partitions of the flash needs to be updated. Flash it using the following command: flashrom -p internal -w protectli_vault_glk_v1.0.15.rom --fmap -i COREBOOT -i IFWI This command also preserves Dasharo UEFI settings and the boot order.","title":"Initial deployment"},{"location":"variants/protectli_vp2410/initial-deployment/#initial-deployment","text":"Initial flashing of Dasharo firmware can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 22.04.","title":"Initial deployment"},{"location":"variants/protectli_vp2410/initial-deployment/#deploy-using-dasharo-tools-suite","text":"For simplicity we recommend using Dasharo Tools Suite to omit all compilation steps and deploy the Dasharo firmware seamlessly. Be sure to disable the BIOS lock in the AMI firmware setup utility: Go to Chipset tab Enter PCH IO Configuration Disable BIOS Lock . Save changes and reset. Now you are ready to use Dasharo Tools Suite (DTS): Boot Dasharo Tools Suite. Perform Dasharo installation. This will flash the full image, including the Intel ME. The operation requires a hard reset of the platform. To perform a hard reset: Power off the platform. Note, it may not power off completely due to flashed ME. Disconnect power supply from the board when OS finishes all tasks after power off (the screen goes dark or black). Disconnect the RTC/CMOS battery OR clear the CMOS using the pin header located near memory slots. Wait about 10 seconds and unshort the pins. Connect the power supply back. The platform should power on normally now. You can connect the battery back if it was disconnected. This concludes Dasharo deployment process using DTS.","title":"Deploy using Dasharo Tools Suite"},{"location":"variants/protectli_vp2410/initial-deployment/#build-flashrom","text":"Please follow generic guide for Dasharo flashrom fork .","title":"Build flashrom"},{"location":"variants/protectli_vp2410/initial-deployment/#reading-flash-contents","text":"Always prepare a backup of the current firmware image. To read from the flash and save them to a file ( dump.rom ), execute the following command: flashrom -p internal -r dump.rom Keep the backup for later recovery if needed.","title":"Reading flash contents"},{"location":"variants/protectli_vp2410/initial-deployment/#flashing-dasharo","text":"To flash Dasharo on the platform, execute the following command - replace [path] with the path to the Dasharo image you want to flash, e.g. protectli_vault_glk_v1.0.15.rom . If stock firmware is currently installed: flashrom -p internal -w [ path ] If Dasharo is currently installed, only the COREBOOT and IFWI partitions of the flash needs to be updated. Flash it using the following command: flashrom -p internal -w protectli_vault_glk_v1.0.15.rom --fmap -i COREBOOT -i IFWI This command also preserves Dasharo UEFI settings and the boot order.","title":"Flashing Dasharo"},{"location":"variants/protectli_vp2410/overview/","text":"Overview The Vault Pro is a small form network appliance built for use as a firewall / router, virtualization platform, a daily-driven personal computer, and more. The VP2410 is based on a 4 network port design that leverages a low power, but versatile Intel Celeron J4125 CPU. The VP2410 can accommodate up to 16GB DDR4 RAM and 2TB m.2 SATA SSD storage drive. The built-in 8GB eMMC module can be used for booting a light-weight OS for example, or for use as optional storage. VP2410 specification: Intel Celeron\u00ae J4125 Quad Core at 2 GHz (Burst up to 2.7 GHz) 4 Intel\u00ae Gigabit Ethernet NIC ports 8GB eMMC module on board Intel\u00ae AES-NI support Fanless and Silent Included 12v Power Supply, VESA mount kit, Serial Console Cable, SATA data and power cables for internal SSD, Quick Start Guide For more information please refer to the references below. References Protectli knowledge base Buy VP2410 in Protectli shop Documentation sections Releases - groups information about all releases. Building manual - describes how to build Dasharo for Protecli 2410. Initial deployment - describes initial Dasharo deployment methods (i. e. flashing new firmware) for Protectli VP2410. Recovery - gathers information on how to recover the platform from potential failure. Hardware configuration matrix - describes the platform's hardware configuration used during the Dasharo firmware validation procedure. Test matrix - describes validation scope used during Dasharo firmware validation procedure.","title":"Overview"},{"location":"variants/protectli_vp2410/overview/#overview","text":"The Vault Pro is a small form network appliance built for use as a firewall / router, virtualization platform, a daily-driven personal computer, and more. The VP2410 is based on a 4 network port design that leverages a low power, but versatile Intel Celeron J4125 CPU. The VP2410 can accommodate up to 16GB DDR4 RAM and 2TB m.2 SATA SSD storage drive. The built-in 8GB eMMC module can be used for booting a light-weight OS for example, or for use as optional storage. VP2410 specification: Intel Celeron\u00ae J4125 Quad Core at 2 GHz (Burst up to 2.7 GHz) 4 Intel\u00ae Gigabit Ethernet NIC ports 8GB eMMC module on board Intel\u00ae AES-NI support Fanless and Silent Included 12v Power Supply, VESA mount kit, Serial Console Cable, SATA data and power cables for internal SSD, Quick Start Guide For more information please refer to the references below.","title":"Overview"},{"location":"variants/protectli_vp2410/overview/#references","text":"Protectli knowledge base Buy VP2410 in Protectli shop","title":"References"},{"location":"variants/protectli_vp2410/overview/#documentation-sections","text":"Releases - groups information about all releases. Building manual - describes how to build Dasharo for Protecli 2410. Initial deployment - describes initial Dasharo deployment methods (i. e. flashing new firmware) for Protectli VP2410. Recovery - gathers information on how to recover the platform from potential failure. Hardware configuration matrix - describes the platform's hardware configuration used during the Dasharo firmware validation procedure. Test matrix - describes validation scope used during Dasharo firmware validation procedure.","title":"Documentation sections"},{"location":"variants/protectli_vp2410/recovery/","text":"Recovery Intro The following documentation describes the process of recovering hardware from the brick state with RTE and Dasharo open-source firmware. Prerequisites Prepared RTE SOIC-8 Pomona clip 6x female-female wire cables Connections To prepare the stand for flashing follow the steps described below: Connect the wire cables to the Pomona clip. Connect the Pomona clip to the SPI header on RTE. SPI header Pomona clip Vcc pin 5 (Vcc) GND pin 4 (GND) CS pin 1 (CS) SCLK pin 7 (CLK) MISO pin 2 (MISO) MOSI pin 8 (MOSI) Completely remove the motherboard from the platform cover. If there is little thermal paste on the CPU, apply it before reassembling the motherboard to the platform cover. Match pin 1(CS) on the Pomona clip with the first pin of the one of flash chip, marked with a small dot engraved on the chip. Firmware flashing To flash firmware follow the steps described below: Login to RTE via ssh or minicom . Turn on the platform by connecting the power supply. Wait at least 5 seconds. Turn off the platform by using the power button. Wait at least 3 seconds. Set the proper state of the SPI by using the following commands on RTE: # set SPI Vcc to 1.8V echo 0 > /sys/class/gpio/gpio405/value # SPI Vcc on echo 1 > /sys/class/gpio/gpio406/value # SPI lines ON echo 1 > /sys/class/gpio/gpio404/value Wait at least 2 seconds. Disconnect the power supply from the platform. Wait at least 2 seconds. Flash the platform by using the following command: flashrom -p linux_spi:dev = /dev/spidev1.0,spispeed = 16000 -c \"MX25U6435E/F\" -w [ path_to_binary ] Flashing with flashrom takes about 1 minute. Change back the state of the SPI by using the following commands: echo 0 > /sys/class/gpio/gpio404/value echo 0 > /sys/class/gpio/gpio406/value Reset CMOS, this can be done by two methods: Disconnect the CMOS battery, wait at least 10 seconds and connect again. Short the two pins from the CMOS header for at least 10 seconds. Turn on the platform by connecting the power supply. The first boot of the platform after proceeding with the above procedure can take much longer than standard.","title":"Recovery"},{"location":"variants/protectli_vp2410/recovery/#recovery","text":"","title":"Recovery"},{"location":"variants/protectli_vp2410/recovery/#intro","text":"The following documentation describes the process of recovering hardware from the brick state with RTE and Dasharo open-source firmware.","title":"Intro"},{"location":"variants/protectli_vp2410/recovery/#prerequisites","text":"Prepared RTE SOIC-8 Pomona clip 6x female-female wire cables","title":"Prerequisites"},{"location":"variants/protectli_vp2410/recovery/#connections","text":"To prepare the stand for flashing follow the steps described below: Connect the wire cables to the Pomona clip. Connect the Pomona clip to the SPI header on RTE. SPI header Pomona clip Vcc pin 5 (Vcc) GND pin 4 (GND) CS pin 1 (CS) SCLK pin 7 (CLK) MISO pin 2 (MISO) MOSI pin 8 (MOSI) Completely remove the motherboard from the platform cover. If there is little thermal paste on the CPU, apply it before reassembling the motherboard to the platform cover. Match pin 1(CS) on the Pomona clip with the first pin of the one of flash chip, marked with a small dot engraved on the chip.","title":"Connections"},{"location":"variants/protectli_vp2410/recovery/#firmware-flashing","text":"To flash firmware follow the steps described below: Login to RTE via ssh or minicom . Turn on the platform by connecting the power supply. Wait at least 5 seconds. Turn off the platform by using the power button. Wait at least 3 seconds. Set the proper state of the SPI by using the following commands on RTE: # set SPI Vcc to 1.8V echo 0 > /sys/class/gpio/gpio405/value # SPI Vcc on echo 1 > /sys/class/gpio/gpio406/value # SPI lines ON echo 1 > /sys/class/gpio/gpio404/value Wait at least 2 seconds. Disconnect the power supply from the platform. Wait at least 2 seconds. Flash the platform by using the following command: flashrom -p linux_spi:dev = /dev/spidev1.0,spispeed = 16000 -c \"MX25U6435E/F\" -w [ path_to_binary ] Flashing with flashrom takes about 1 minute. Change back the state of the SPI by using the following commands: echo 0 > /sys/class/gpio/gpio404/value echo 0 > /sys/class/gpio/gpio406/value Reset CMOS, this can be done by two methods: Disconnect the CMOS battery, wait at least 10 seconds and connect again. Short the two pins from the CMOS header for at least 10 seconds. Turn on the platform by connecting the power supply. The first boot of the platform after proceeding with the above procedure can take much longer than standard.","title":"Firmware flashing"},{"location":"variants/protectli_vp2410/releases/","text":"Release Notes Following Release Notes describe status of open-source firmware development for Protectli VP2410 family. For details about our release process please read Dasharo Standard Release Process . Subscribe to Protectli VP2410 Dasharo Release Newsletter Test results for this platform can be found here . v1.0.15 - 2022-05-31 Changed Customized Network boot menu and strings Fixed SMBIOS memory information showing 0 MB DRAM in setup Known issues USB 2.0 sticks not detected on VP2410 S3 resume does not work in Geminilake FSP Binaries protectli_VP2410_DF_v1.0.15.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on b77cf229 revision f59b1ec9 edk2 based on 7f90b9cd revision 90364638 iPXE for EFI revision 988d2 FSP: Custom version based on Intel GeminiLake FSP 2.2.1.3 Management Engine: Custom image based on CSE 4.0.30.1392 microcode: CPU signature: 0x0706A8, Date: 09.06.2020, Revision: 0x18 CPU signature: 0x0706A0, Date: 12.07.2017, Revision: 0x26 CPU signature: 0x0706A1, Date: 09.06.2020, Revision: 0x34","title":"Releases"},{"location":"variants/protectli_vp2410/releases/#release-notes","text":"Following Release Notes describe status of open-source firmware development for Protectli VP2410 family. For details about our release process please read Dasharo Standard Release Process . Subscribe to Protectli VP2410 Dasharo Release Newsletter Test results for this platform can be found here .","title":"Release Notes"},{"location":"variants/protectli_vp2410/releases/#v1015-2022-05-31","text":"","title":"v1.0.15 - 2022-05-31"},{"location":"variants/protectli_vp2410/test-matrix/","text":"Test matrix About The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary. Module: Dasharo compatibility No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports DSP DSP002.001, DSP002.002, DSP002.003, DSP003.001, DSP003.002, DSP003.003 4. Network boot utilities NBT All 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB All 9. FreeBSD support BSD All 10. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 11. USB-C support UTC UTC004.001, UTC004.001 12. M.2 WiFi/Bluetooth WLE ALL 13. eMMC support MMC MMC001.001 14. SMBIOS DMI DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001 15. Custom network boot entries CNB CNB001.002 16. M.2 automatic SATA/NVMe switching support MSS MSS001.001 17. Windows booting WBT WBT001.001 18. Audio subsystem AUD AUD001.001, AUD001.002, AUD002.001, AUD002.002, AUD003.001, AUD003.002, AUD004.001, AUD004.002, AUD005.001, AUD005.002, AUD006.001, AUD006.002 19. UEFI Shell USH All 20. USB detection UDT All 21. USB booting UBT All Module: Dasharo security No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO VBO006.002, VBO007.002, VBO008.001 3. Measured Boot support MBO All 4. Secure Boot support SBO All 5. BIOS lock support BLS All Module: Dasharo performance No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF All 4. Platform stability STB All","title":"Test matrix"},{"location":"variants/protectli_vp2410/test-matrix/#test-matrix","text":"","title":"Test matrix"},{"location":"variants/protectli_vp2410/test-matrix/#about","text":"The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.","title":"About"},{"location":"variants/protectli_vp2410/test-matrix/#module-dasharo-compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports DSP DSP002.001, DSP002.002, DSP002.003, DSP003.001, DSP003.002, DSP003.003 4. Network boot utilities NBT All 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB All 9. FreeBSD support BSD All 10. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 11. USB-C support UTC UTC004.001, UTC004.001 12. M.2 WiFi/Bluetooth WLE ALL 13. eMMC support MMC MMC001.001 14. SMBIOS DMI DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001 15. Custom network boot entries CNB CNB001.002 16. M.2 automatic SATA/NVMe switching support MSS MSS001.001 17. Windows booting WBT WBT001.001 18. Audio subsystem AUD AUD001.001, AUD001.002, AUD002.001, AUD002.002, AUD003.001, AUD003.002, AUD004.001, AUD004.002, AUD005.001, AUD005.002, AUD006.001, AUD006.002 19. UEFI Shell USH All 20. USB detection UDT All 21. USB booting UBT All","title":"Module: Dasharo compatibility"},{"location":"variants/protectli_vp2410/test-matrix/#module-dasharo-security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO VBO006.002, VBO007.002, VBO008.001 3. Measured Boot support MBO All 4. Secure Boot support SBO All 5. BIOS lock support BLS All","title":"Module: Dasharo security"},{"location":"variants/protectli_vp2410/test-matrix/#module-dasharo-performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF All 4. Platform stability STB All","title":"Module: Dasharo performance"},{"location":"variants/protectli_vp2420/building-manual/","text":"Building manual Intro This document describes the procedure for compiling coreboot for Protectli VP2420. Requirements Docker follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux Git Build Dasharo BIOS firmware This build procedure produces full firmware binary including blobs such as FSP, and ME. Currently, access to them is restricted to the OEM (Protectli) via a private repository. Clone the coreboot repository: git clone https://github.com/Dasharo/coreboot Checkout the desired version, e.g. v1.1.0 : cd coreboot git checkout protectli_vault_ehl_v1.1.0 Checkout submodules: git submodule update --init --checkout Obtain the Protectli blobs package: Replace <PROTECTLI_BLOBS_REPO> with a a proper path to the repository in a form of: git@repo-path.git . You should checkout to the same tag as in case aof the coreboot repository. cd 3rdparty/blobs/mainboard/ git init git remote add origin <PROTECTLI_BLOBS_REPO> git fetch origin && git checkout protectli_vault_ehl_v1.1.0 cd - Build the firmware v1.1.0 or newer: ./build.sh vp2420 The resulting coreboot image will be placed in the coreboot directory as protectli_vp2420_<version>.rom .","title":"Building manual"},{"location":"variants/protectli_vp2420/building-manual/#building-manual","text":"","title":"Building manual"},{"location":"variants/protectli_vp2420/building-manual/#intro","text":"This document describes the procedure for compiling coreboot for Protectli VP2420.","title":"Intro"},{"location":"variants/protectli_vp2420/building-manual/#requirements","text":"Docker follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux Git","title":"Requirements"},{"location":"variants/protectli_vp2420/building-manual/#build-dasharo-bios-firmware","text":"This build procedure produces full firmware binary including blobs such as FSP, and ME. Currently, access to them is restricted to the OEM (Protectli) via a private repository. Clone the coreboot repository: git clone https://github.com/Dasharo/coreboot Checkout the desired version, e.g. v1.1.0 : cd coreboot git checkout protectli_vault_ehl_v1.1.0 Checkout submodules: git submodule update --init --checkout Obtain the Protectli blobs package: Replace <PROTECTLI_BLOBS_REPO> with a a proper path to the repository in a form of: git@repo-path.git . You should checkout to the same tag as in case aof the coreboot repository. cd 3rdparty/blobs/mainboard/ git init git remote add origin <PROTECTLI_BLOBS_REPO> git fetch origin && git checkout protectli_vault_ehl_v1.1.0 cd - Build the firmware v1.1.0 or newer: ./build.sh vp2420 The resulting coreboot image will be placed in the coreboot directory as protectli_vp2420_<version>.rom .","title":"Build Dasharo BIOS firmware"},{"location":"variants/protectli_vp2420/firmware-update/","text":"Firmware update The following documentation describes the process of Dasharo open-source firmware update. If your device is currently flashed with the proprietary firmware please refer to the Initial deployment documentation. For simplicity of the update process, we recommend using Dasharo Tools Suite . Before starting the update procedure be sure to disable Dasharo BIOS Boot medium lock, SMM BIOS Write Protection and Secure boot: Power on the device. While the device is booting, hold the DELETE key to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify the state of the Lock the BIOS boot medium and Enable SMM BIOS write protection options - if any of those are set, press Space to unselect them and then F10 to save the changes. Go back to the main menu using the ESC key. Enter the Device Manager menu. Enter the Secure Boot Configuration submenu. Verify that the Current Secure Boot State field says Disabled - if not, unselect the Attempt Secure Boot option below then press F10 to save the changes. Reboot the device to properly apply the changes. The settings of all the above options can be restored after a firmware update. Updating minor versions v1.x.y Both WP_RO and RW_SECTION_A partitions of the flash needs to be updated. Flash it using the following command: flashrom -p internal -w [ path ] --fmap -i RW_SECTION_A -i WP_RO This command also preserves current Dasharo UEFI settings and the boot order. Updating patch version v1.0.x Only the RW_SECTION_A partition of the flash needs to be updated. Flash it using the following command: flashrom -p internal -w [ path ] --fmap -i RW_SECTION_A This command also preserves Dasharo UEFI settings and the boot order.","title":"Firmware update"},{"location":"variants/protectli_vp2420/firmware-update/#firmware-update","text":"The following documentation describes the process of Dasharo open-source firmware update. If your device is currently flashed with the proprietary firmware please refer to the Initial deployment documentation. For simplicity of the update process, we recommend using Dasharo Tools Suite . Before starting the update procedure be sure to disable Dasharo BIOS Boot medium lock, SMM BIOS Write Protection and Secure boot: Power on the device. While the device is booting, hold the DELETE key to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify the state of the Lock the BIOS boot medium and Enable SMM BIOS write protection options - if any of those are set, press Space to unselect them and then F10 to save the changes. Go back to the main menu using the ESC key. Enter the Device Manager menu. Enter the Secure Boot Configuration submenu. Verify that the Current Secure Boot State field says Disabled - if not, unselect the Attempt Secure Boot option below then press F10 to save the changes. Reboot the device to properly apply the changes. The settings of all the above options can be restored after a firmware update.","title":"Firmware update"},{"location":"variants/protectli_vp2420/firmware-update/#updating-minor-versions-v1xy","text":"Both WP_RO and RW_SECTION_A partitions of the flash needs to be updated. Flash it using the following command: flashrom -p internal -w [ path ] --fmap -i RW_SECTION_A -i WP_RO This command also preserves current Dasharo UEFI settings and the boot order.","title":"Updating minor versions v1.x.y"},{"location":"variants/protectli_vp2420/firmware-update/#updating-patch-version-v10x","text":"Only the RW_SECTION_A partition of the flash needs to be updated. Flash it using the following command: flashrom -p internal -w [ path ] --fmap -i RW_SECTION_A This command also preserves Dasharo UEFI settings and the boot order.","title":"Updating patch version v1.0.x"},{"location":"variants/protectli_vp2420/hardware-matrix/","text":"Hardware configuration matrix Introduction This document describes the hardware configuration used for validation of the coreboot port on the Protectli VP2420 firewall. Protectli VP2420 Component Description CPU Intel(R) Celeron(R) J6412 @ 2.60GHz RAM KINGSTON KVR29S21S8/16 Flash memory Macronix KH25L12835F SSD 1. SSD Samsung 860 EVO M.2 NZ-N6E250 250GB 2. SSDPR-CL100-240-g2 MMC drive SAMSUNG 8GTF4R (on-board) USB pendrives 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. USB Type-C Hub Pro UCN3286 USB headers USB Expander Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p 3. USB Type-C Hub Pro UCN3286 Wireless card Intel Wi-Fi 6 AX200 Display HDMI 1920x1080p, DP 1920x1080p Ethernet 4x intel i225 (on-board) Power supply Channel Well Technology 12V, 5.0A 60W Note, that in RAM section all used during verification procedure modules have been listed. Device has only one RAM mounting slot.","title":"Hardware Configuration Matrix"},{"location":"variants/protectli_vp2420/hardware-matrix/#hardware-configuration-matrix","text":"","title":"Hardware configuration matrix"},{"location":"variants/protectli_vp2420/hardware-matrix/#introduction","text":"This document describes the hardware configuration used for validation of the coreboot port on the Protectli VP2420 firewall.","title":"Introduction"},{"location":"variants/protectli_vp2420/hardware-matrix/#protectli-vp2420","text":"Component Description CPU Intel(R) Celeron(R) J6412 @ 2.60GHz RAM KINGSTON KVR29S21S8/16 Flash memory Macronix KH25L12835F SSD 1. SSD Samsung 860 EVO M.2 NZ-N6E250 250GB 2. SSDPR-CL100-240-g2 MMC drive SAMSUNG 8GTF4R (on-board) USB pendrives 1. SanDisk USB 3.2Gen1 16 GB 2. SanDisk USB 3.2Gen1 16 GB 3. USB Type-C Hub Pro UCN3286 USB headers USB Expander Attached devices 1. Logitech, Inc. Keyboard K120 2. Dell Mouse MS116p 3. USB Type-C Hub Pro UCN3286 Wireless card Intel Wi-Fi 6 AX200 Display HDMI 1920x1080p, DP 1920x1080p Ethernet 4x intel i225 (on-board) Power supply Channel Well Technology 12V, 5.0A 60W Note, that in RAM section all used during verification procedure modules have been listed. Device has only one RAM mounting slot.","title":"Protectli VP2420"},{"location":"variants/protectli_vp2420/initial-deployment/","text":"Initial deployment Initial flashing of Dasharo firmware can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 22.04. Deploy using Dasharo Tools Suite For simplicity we recommend using Dasharo Tools Suite to omit all compilation steps and deploy the Dasharo firmware seamlessly. Be sure to disable the BIOS lock in the AMI firmware setup utility: Go to Chipset tab Enter PCH IO Configuration Disable BIOS Lock . Save changes and reset. Now you are ready to use Dasharo Tools Suite (DTS): Boot Dasharo Tools Suite. Perform Dasharo installation. Build flashrom Please follow generic guide for Dasharo flashrom fork . Reading flash contents Always prepare a backup of the current firmware image. To read from the flash and save them to a file ( backup.rom ), execute the following command: flashrom -p internal -r dump.rom Keep the backup for later recovery if needed. Flashing Dasharo To flash Dasharo on the platform, execute the following command - replace [path] with the path to the Dasharo image you want to flash, e.g. protectli_vault_ehl_v1.0.0.rom . If stock firmware is currently installed: flashrom -p internal -w [ path ] --ifd -i bios If Dasharo is currently installed, only the RW_SECTION_A partition of the flash needs to be updated. Flash it using the following command: flashrom -p internal -w protectli_vault_ehl_v1.x.y.rom --fmap -i RW_SECTION_A This command also preserves Dasharo UEFI settings and the boot order.","title":"Initial deployment"},{"location":"variants/protectli_vp2420/initial-deployment/#initial-deployment","text":"Initial flashing of Dasharo firmware can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 22.04.","title":"Initial deployment"},{"location":"variants/protectli_vp2420/initial-deployment/#deploy-using-dasharo-tools-suite","text":"For simplicity we recommend using Dasharo Tools Suite to omit all compilation steps and deploy the Dasharo firmware seamlessly. Be sure to disable the BIOS lock in the AMI firmware setup utility: Go to Chipset tab Enter PCH IO Configuration Disable BIOS Lock . Save changes and reset. Now you are ready to use Dasharo Tools Suite (DTS): Boot Dasharo Tools Suite. Perform Dasharo installation.","title":"Deploy using Dasharo Tools Suite"},{"location":"variants/protectli_vp2420/initial-deployment/#build-flashrom","text":"Please follow generic guide for Dasharo flashrom fork .","title":"Build flashrom"},{"location":"variants/protectli_vp2420/initial-deployment/#reading-flash-contents","text":"Always prepare a backup of the current firmware image. To read from the flash and save them to a file ( backup.rom ), execute the following command: flashrom -p internal -r dump.rom Keep the backup for later recovery if needed.","title":"Reading flash contents"},{"location":"variants/protectli_vp2420/initial-deployment/#flashing-dasharo","text":"To flash Dasharo on the platform, execute the following command - replace [path] with the path to the Dasharo image you want to flash, e.g. protectli_vault_ehl_v1.0.0.rom . If stock firmware is currently installed: flashrom -p internal -w [ path ] --ifd -i bios If Dasharo is currently installed, only the RW_SECTION_A partition of the flash needs to be updated. Flash it using the following command: flashrom -p internal -w protectli_vault_ehl_v1.x.y.rom --fmap -i RW_SECTION_A This command also preserves Dasharo UEFI settings and the boot order.","title":"Flashing Dasharo"},{"location":"variants/protectli_vp2420/overview/","text":"Overview The Vault Pro is a small form network appliance built for use as a firewall / router, virtualization platform, a daily-driven personal computer, and more. The VP2420 is based on a 4 x 2.5 G network port design that leverages a low power, but versatile Intel Celeron J6412 CPU. The VP2420 can accommodate up to 32 GB DDR4 RAM and 2 TB M.2 SATA SSD storage drive (Note: The VP2420 supports M.2 SATA drives, not NVMe drives). The built-in 8 GB eMMC module can be used for booting a light-weight OS for example, or for use as optional storage. VP2410 specification: Intel Celeron\u00ae J6412 Quad Core at 2 GHz (Burst up to 2.6 GHz) 4 Intel\u00ae 2.5 Gigabit Ethernet NIC ports M.2 SATA SSD Slot (Note: This device does not support NVMe drives) 8 GB eMMC module on board Intel\u00ae AES-NI support Fanless and Silent Included 12v Power Supply, VESA mount kit, Serial Console Cable, SATA data and power cables for internal SSD, Quick Start Guide For more information please refer to the references below. References Protectli knowledge base Buy VP2420 in Protectli shop Documentation sections Releases - groups information about all releases. Building manual - describes how to build Dasharo for Protecli 2420. Initial deployment - describes initial Dasharo deployment methods (i. e. flashing new firmware) for Protectli VP2420. Recovery - gathers information on how to recover the platform from potential failure. Hardware configuration matrix - describes the platform's hardware configuration used during the Dasharo firmware validation procedure. Test matrix - describes validation scope used during Dasharo firmware validation procedure.","title":"Overview"},{"location":"variants/protectli_vp2420/overview/#overview","text":"The Vault Pro is a small form network appliance built for use as a firewall / router, virtualization platform, a daily-driven personal computer, and more. The VP2420 is based on a 4 x 2.5 G network port design that leverages a low power, but versatile Intel Celeron J6412 CPU. The VP2420 can accommodate up to 32 GB DDR4 RAM and 2 TB M.2 SATA SSD storage drive (Note: The VP2420 supports M.2 SATA drives, not NVMe drives). The built-in 8 GB eMMC module can be used for booting a light-weight OS for example, or for use as optional storage. VP2410 specification: Intel Celeron\u00ae J6412 Quad Core at 2 GHz (Burst up to 2.6 GHz) 4 Intel\u00ae 2.5 Gigabit Ethernet NIC ports M.2 SATA SSD Slot (Note: This device does not support NVMe drives) 8 GB eMMC module on board Intel\u00ae AES-NI support Fanless and Silent Included 12v Power Supply, VESA mount kit, Serial Console Cable, SATA data and power cables for internal SSD, Quick Start Guide For more information please refer to the references below.","title":"Overview"},{"location":"variants/protectli_vp2420/overview/#references","text":"Protectli knowledge base Buy VP2420 in Protectli shop","title":"References"},{"location":"variants/protectli_vp2420/overview/#documentation-sections","text":"Releases - groups information about all releases. Building manual - describes how to build Dasharo for Protecli 2420. Initial deployment - describes initial Dasharo deployment methods (i. e. flashing new firmware) for Protectli VP2420. Recovery - gathers information on how to recover the platform from potential failure. Hardware configuration matrix - describes the platform's hardware configuration used during the Dasharo firmware validation procedure. Test matrix - describes validation scope used during Dasharo firmware validation procedure.","title":"Documentation sections"},{"location":"variants/protectli_vp2420/recovery/","text":"Recovery Intro The following documentation describes the process of recovering hardware from the brick state with RTE and Dasharo open-source firmware. Prerequisites Prepared RTE SOIC-8 Pomona clip 6x female-female wire cables Connections To prepare the stand for flashing follow the steps described below: Connect the wire cables to the Pomona clip. Connect the Pomona clip to the SPI header on RTE. SPI header Pomona clip Vcc pin 5 (Vcc) GND pin 4 (GND) CS pin 1 (CS) SCLK pin 7 (CLK) MISO pin 2 (MISO) MOSI pin 8 (MOSI) Open the platform cover. Match pin 1(CS) on the Pomona clip with the first pin of the one of flash chip, marked with a small dot engraved on the chip. Firmware flashing To flash firmware follow the steps described below: Login to RTE via ssh or minicom . Turn on the platform by connecting the power supply. Wait at least 5 seconds. Turn off the platform by using the power button. Wait at least 3 seconds. Set the proper state of the SPI by using the following commands on RTE: # set SPI Vcc to 3.3V echo 1 > /sys/class/gpio/gpio405/value # SPI Vcc on echo 1 > /sys/class/gpio/gpio406/value # SPI lines ON echo 1 > /sys/class/gpio/gpio404/value Wait at least 2 seconds. Disconnect the power supply from the platform. Wait at least 2 seconds. Flash the platform by using the following command: flashrom -p linux_spi:dev = /dev/spidev1.0,spispeed = 16000 -c \"MX25L12835F/MX25L12845E/MX25L12865E\" -w [ path_to_binary ] Flashing with flashrom takes about 1 minute. Change back the state of the SPI by using the following commands: echo 0 > /sys/class/gpio/gpio404/value echo 0 > /sys/class/gpio/gpio406/value Reset CMOS, this can be done by two methods: Disconnect the CMOS battery, wait at least 10 seconds and connect again. Short the two pins from the CMOS header for at least 10 seconds. Turn on the platform by connecting the power supply. The first boot of the platform after proceeding with the above procedure can take much longer than standard.","title":"Recovery"},{"location":"variants/protectli_vp2420/recovery/#recovery","text":"","title":"Recovery"},{"location":"variants/protectli_vp2420/recovery/#intro","text":"The following documentation describes the process of recovering hardware from the brick state with RTE and Dasharo open-source firmware.","title":"Intro"},{"location":"variants/protectli_vp2420/recovery/#prerequisites","text":"Prepared RTE SOIC-8 Pomona clip 6x female-female wire cables","title":"Prerequisites"},{"location":"variants/protectli_vp2420/recovery/#connections","text":"To prepare the stand for flashing follow the steps described below: Connect the wire cables to the Pomona clip. Connect the Pomona clip to the SPI header on RTE. SPI header Pomona clip Vcc pin 5 (Vcc) GND pin 4 (GND) CS pin 1 (CS) SCLK pin 7 (CLK) MISO pin 2 (MISO) MOSI pin 8 (MOSI) Open the platform cover. Match pin 1(CS) on the Pomona clip with the first pin of the one of flash chip, marked with a small dot engraved on the chip.","title":"Connections"},{"location":"variants/protectli_vp2420/recovery/#firmware-flashing","text":"To flash firmware follow the steps described below: Login to RTE via ssh or minicom . Turn on the platform by connecting the power supply. Wait at least 5 seconds. Turn off the platform by using the power button. Wait at least 3 seconds. Set the proper state of the SPI by using the following commands on RTE: # set SPI Vcc to 3.3V echo 1 > /sys/class/gpio/gpio405/value # SPI Vcc on echo 1 > /sys/class/gpio/gpio406/value # SPI lines ON echo 1 > /sys/class/gpio/gpio404/value Wait at least 2 seconds. Disconnect the power supply from the platform. Wait at least 2 seconds. Flash the platform by using the following command: flashrom -p linux_spi:dev = /dev/spidev1.0,spispeed = 16000 -c \"MX25L12835F/MX25L12845E/MX25L12865E\" -w [ path_to_binary ] Flashing with flashrom takes about 1 minute. Change back the state of the SPI by using the following commands: echo 0 > /sys/class/gpio/gpio404/value echo 0 > /sys/class/gpio/gpio406/value Reset CMOS, this can be done by two methods: Disconnect the CMOS battery, wait at least 10 seconds and connect again. Short the two pins from the CMOS header for at least 10 seconds. Turn on the platform by connecting the power supply. The first boot of the platform after proceeding with the above procedure can take much longer than standard.","title":"Firmware flashing"},{"location":"variants/protectli_vp2420/releases/","text":"Release Notes Following Release Notes describe status of open-source firmware development for Protectli VP2420 family. For details about our release process please read Dasharo Standard Release Process . Subscribe to Protectli VP2420 Dasharo Release Newsletter Test results for this platform can be found here . v1.1.0 - 2023-04-20 Added USB stack and mass storage enable/disable option SMM BIOS write protection enable/disable option Changed Updating from v1.0.x requires flashing the WP_RO recovery partition Firmware version v1.1.x are signed with a new key Keys must be provisioned prior enabling Secure Boot Fixed VP2420 memory issues and incorrectly reported memory capacity Popup with information about recovery mode is still displayed after flashing with a valid binary Known issues pfSense boot time Double characters in pfSense initial boot phase Binaries protectli_vp2420_v1.1.0.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on c86c926 revision e36a117d edk2 based on 7f90b9cd revision 19bf14b4 v1.0.1 - 2023-02-02 Added TPM 2.0 support over SPI interface TPM Measured Boot Changed Downgrade edk2 Secure Boot driver to achieve consistent user experience as on the VP46XX v1.0.19 release Fixed Dasharo BIOS lock menu is missing iPXE entry doesn't occur in setup menu Impossibility of pfSense/OPNsense console versions installation Known issues Popup with information about recovery mode is still displayed after flashing with a valid binary pfSense boot time Double characters in pfSense initial boot phase Binaries protectli_vp2420_v1.0.1.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on c86c926 revision 54cbbc5b edk2 based on 7f90b9cd revision e31b7a71 v1.0.0 - 2022-12-22 Added Support for VP2420 platform Vboot Verified Boot TPM Measured Boot Vboot recovery notification in UEFI Payload UEFI Shell UEFI Secure Boot BIOS flash protection for Vboot recovery region UEFI boot support Intel i225 controller network boot support Customized boot menu keys Customized setup menu keys Configurable boot order Configurable boot options Binaries protectli_VP2420_v1.0.0.rom sha256 sha256.sig How to verify signatures: wget https://3mdeb.com/open-source-firmware/Dasharo/protectli_vault_ehl/v1.0.0/protectli_vp2420_v1.0.0.rom wget https://3mdeb.com/open-source-firmware/Dasharo/protectli_vault_ehl/v1.0.0/protectli_vp2420_v1.0.0.rom.sha256 wget https://3mdeb.com/open-source-firmware/Dasharo/protectli_vault_ehl/v1.0.0/protectli_vp2420_v1.0.0.rom.sha256.sig gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/keys/master-key/3mdeb-master-key.asc gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/dasharo/3mdeb-dasharo-master-key.asc gpg --fetch-keys https://raw.githubusercontent.com/3mdeb/3mdeb-secpack/master/customer-keys/protectli/release-keys/protectli-dasharo-firewall-release-1.0-key.asc gpg --list-sigs \"3mdeb Master Key\" \"3mdeb Dasharo Master Key\" \"Protectli Dasharo Firewall Release 1.0 Signing Key\" sha256sum -c protectli_vp2420_v1.0.0.rom.sha256 gpg -v --verify protectli_vp2420_v1.0.0.rom.sha256.sig protectli_vp2420_v1.0.0.rom.sha256 SBOM (Software Bill of Materials) coreboot based on c492b427 revision c86c9266 edk2 based on e461f08 revision 7948a20 iPXE for EFI revision 988d2","title":"Releases"},{"location":"variants/protectli_vp2420/releases/#release-notes","text":"Following Release Notes describe status of open-source firmware development for Protectli VP2420 family. For details about our release process please read Dasharo Standard Release Process . Subscribe to Protectli VP2420 Dasharo Release Newsletter Test results for this platform can be found here .","title":"Release Notes"},{"location":"variants/protectli_vp2420/releases/#v110-2023-04-20","text":"","title":"v1.1.0 - 2023-04-20"},{"location":"variants/protectli_vp2420/releases/#v101-2023-02-02","text":"","title":"v1.0.1 - 2023-02-02"},{"location":"variants/protectli_vp2420/releases/#v100-2022-12-22","text":"","title":"v1.0.0 - 2022-12-22"},{"location":"variants/protectli_vp2420/test-matrix/","text":"Test matrix About The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary. Module: Dasharo compatibility No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports DSP DSP002.001, DSP002.002, DSP002.003, DSP003.001, DSP003.002, DSP003.003 4. Network boot utilities NBT All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB USB001.XXX and USB002.XXX 9. FreeBSD support BSD All 10. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 11. USB-C support UTC UTC004.001, UTC004.002 12. M.2 WiFi/Bluetooth WLE ALL 13. eMMC support MMC MMC001.001 14. SMBIOS DMI DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001 15. Custom network boot entries CNB CNB001.002 17. Windows booting WBT WBT001.001 18. UEFI Shell USH All 19. USB detection UDT All 20. USB booting UBT All 21. pfSense support PFS All 22. OPNsense support OPN All 23. Proxmox support PVE All 24. Ubuntu Server support USS All Module: Dasharo security No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM TPM001.002 and TPM001.003 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO All 5. BIOS lock support BLS All 6. USB stack enable/disable USS All 7. SMM BIOS write protection SMM All Module: Dasharo performance No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF Without CPU003.XXX and CPU005.XXX 4. Platform stability STB All 5. Ubuntu booting performance test BUB All 6. Debian booting performance test BDE All 7. FreeBSD booting performance test BFB All 8. Proxmox booting performance test BPM All 9. Ubuntu Server booting performance test BUS All 10. OPNsense (serial output) booting performance test BOS All 11. OPNsense (VGA output) booting performance test BOV All 12. pfSense (serial output) booting performance test BPS All 13. pfSense (VGA output) booting performance test BPV All","title":"Test matrix"},{"location":"variants/protectli_vp2420/test-matrix/#test-matrix","text":"","title":"Test matrix"},{"location":"variants/protectli_vp2420/test-matrix/#about","text":"The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.","title":"About"},{"location":"variants/protectli_vp2420/test-matrix/#module-dasharo-compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports DSP DSP002.001, DSP002.002, DSP002.003, DSP003.001, DSP003.002, DSP003.003 4. Network boot utilities NBT All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB USB001.XXX and USB002.XXX 9. FreeBSD support BSD All 10. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 11. USB-C support UTC UTC004.001, UTC004.002 12. M.2 WiFi/Bluetooth WLE ALL 13. eMMC support MMC MMC001.001 14. SMBIOS DMI DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001 15. Custom network boot entries CNB CNB001.002 17. Windows booting WBT WBT001.001 18. UEFI Shell USH All 19. USB detection UDT All 20. USB booting UBT All 21. pfSense support PFS All 22. OPNsense support OPN All 23. Proxmox support PVE All 24. Ubuntu Server support USS All","title":"Module: Dasharo compatibility"},{"location":"variants/protectli_vp2420/test-matrix/#module-dasharo-security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM TPM001.002 and TPM001.003 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO All 5. BIOS lock support BLS All 6. USB stack enable/disable USS All 7. SMM BIOS write protection SMM All","title":"Module: Dasharo security"},{"location":"variants/protectli_vp2420/test-matrix/#module-dasharo-performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF Without CPU003.XXX and CPU005.XXX 4. Platform stability STB All 5. Ubuntu booting performance test BUB All 6. Debian booting performance test BDE All 7. FreeBSD booting performance test BFB All 8. Proxmox booting performance test BPM All 9. Ubuntu Server booting performance test BUS All 10. OPNsense (serial output) booting performance test BOS All 11. OPNsense (VGA output) booting performance test BOV All 12. pfSense (serial output) booting performance test BPS All 13. pfSense (VGA output) booting performance test BPV All","title":"Module: Dasharo performance"},{"location":"variants/protectli_vp46xx/building-manual/","text":"Building manual Intro This document describes the procedure for compiling coreboot for Protectli VP4630, VP4650 and VP4670. Requirements Docker follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux Git Build Dasharo BIOS firmware This build procedure produces full firmware binary including blobs such as FSP, and ME. Currently, access to them is restricted to the OEM (Protectli) via a private repository. Since version v1.0.18 VP4630 and VP4650 use different configuration file than VP4670. Versions v1.0.17 and older do not support VP4650 and VP4670 at all. Clone the coreboot repository: git clone https://github.com/Dasharo/coreboot Checkout the desired version, e.g. v1.0.19 : cd coreboot git checkout protectli_vault_cml_v1.0.19 Checkout submodules: git submodule update --init --checkout Obtain the Protectli blobs package: Replace <PROTECTLI_BLOBS_REPO> with a a proper path to the repository in a form of: git@repo-path.git . You should checkout to the same tag as in case aof the coreboot repository. cd 3rdparty/blobs/mainboard/ git init git remote add origin <PROTECTLI_BLOBS_REPO> git fetch origin && git checkout protectli_vault_cml_v1.0.19 cd - Build the firmware v1.0.19 or newer: for VP4630 and VP4650 ./build.sh vp4630_vp4650 for VP4670 ./build.sh vp4670 The resulting coreboot image will be placed in the coreboot directory as protectli_vault_cml_<version>_vp4630_vp4650.rom or protectli_vault_cml_<version>_vp4670.rom respectvely.","title":"Building manual"},{"location":"variants/protectli_vp46xx/building-manual/#building-manual","text":"","title":"Building manual"},{"location":"variants/protectli_vp46xx/building-manual/#intro","text":"This document describes the procedure for compiling coreboot for Protectli VP4630, VP4650 and VP4670.","title":"Intro"},{"location":"variants/protectli_vp46xx/building-manual/#requirements","text":"Docker follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux Git","title":"Requirements"},{"location":"variants/protectli_vp46xx/building-manual/#build-dasharo-bios-firmware","text":"This build procedure produces full firmware binary including blobs such as FSP, and ME. Currently, access to them is restricted to the OEM (Protectli) via a private repository. Since version v1.0.18 VP4630 and VP4650 use different configuration file than VP4670. Versions v1.0.17 and older do not support VP4650 and VP4670 at all. Clone the coreboot repository: git clone https://github.com/Dasharo/coreboot Checkout the desired version, e.g. v1.0.19 : cd coreboot git checkout protectli_vault_cml_v1.0.19 Checkout submodules: git submodule update --init --checkout Obtain the Protectli blobs package: Replace <PROTECTLI_BLOBS_REPO> with a a proper path to the repository in a form of: git@repo-path.git . You should checkout to the same tag as in case aof the coreboot repository. cd 3rdparty/blobs/mainboard/ git init git remote add origin <PROTECTLI_BLOBS_REPO> git fetch origin && git checkout protectli_vault_cml_v1.0.19 cd - Build the firmware v1.0.19 or newer: for VP4630 and VP4650 ./build.sh vp4630_vp4650 for VP4670 ./build.sh vp4670 The resulting coreboot image will be placed in the coreboot directory as protectli_vault_cml_<version>_vp4630_vp4650.rom or protectli_vault_cml_<version>_vp4670.rom respectvely.","title":"Build Dasharo BIOS firmware"},{"location":"variants/protectli_vp46xx/firmware-update/","text":"Firmware update The following documentation describes the process of Dasharo open-source firmware update. If your device is currently flashed with the proprietary firmware please refer to the Initial deployment documentation. The update process may be different, depending on the currently installed Dasharo firmware version. For simplicity of the update process, we recommend using Dasharo Tools Suite . Before starting the update procedure be sure to disable Dasharo BIOS Boot medium lock and Secure Boot: Power on the device. While the device is booting, hold the DELETE key to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify the state of the Lock the BIOS boot medium option - if the option is chosen, press Space and then F10 to save the changes. Go back to the main menu using the ESC key. Enter the Device Manager menu. Enter the Secure Boot Configuration submenu. Verify that the Current Secure Boot State field says Disabled - if not, unselect the Attempt Secure Boot option below then press F10 to save the changes. Reboot the device to properly apply the changes. The settings of all the above options can be restored after a firmware update. Updating to Dasharo v1.0.18 or v1.0.19 or v1.1.0 From v1.0.18 Dasharo firmware is rebased on the more up-to-date revision of coreboot. If the current version of the firmware on the device is older than v1.0.18 or you are migrating from proprietary firmware the whole flash chip should be flashed as described in Initial Deployment . If the current version of the firmware on the device is v1.0.18 and it should be updated to v1.0.19 or v1.1.0, only the WP_RO and RW_SECTION_A should be flashed. To do this the following command should be used: flashrom -p internal -w protectli_vault_cml_v1.0.19.rom --fmap -i WP_RO -i RW_SECTION_A Updating on Dasharo v1.0.16 or v1.0.17 Only the RW_SECTION_A partition of the flash needs to be updated. Flash it using the following command: flashrom -p internal -w protectli_vault_cml_v1.0.16.rom --fmap -i RW_SECTION_A This command also preserves Dasharo UEFI settings and the boot order. Updating on older Dasharo versions In this case, the whole bios region must be updated. flashrom -p internal -w protectli_vault_cml_v1.0.13.rom --ifd -i bios","title":"Firmware update"},{"location":"variants/protectli_vp46xx/firmware-update/#firmware-update","text":"The following documentation describes the process of Dasharo open-source firmware update. If your device is currently flashed with the proprietary firmware please refer to the Initial deployment documentation. The update process may be different, depending on the currently installed Dasharo firmware version. For simplicity of the update process, we recommend using Dasharo Tools Suite . Before starting the update procedure be sure to disable Dasharo BIOS Boot medium lock and Secure Boot: Power on the device. While the device is booting, hold the DELETE key to enter the UEFI Setup Menu. Enter the Dasharo System Features menu using the arrow keys and Enter. Enter the Dasharo Security Options submenu. Verify the state of the Lock the BIOS boot medium option - if the option is chosen, press Space and then F10 to save the changes. Go back to the main menu using the ESC key. Enter the Device Manager menu. Enter the Secure Boot Configuration submenu. Verify that the Current Secure Boot State field says Disabled - if not, unselect the Attempt Secure Boot option below then press F10 to save the changes. Reboot the device to properly apply the changes. The settings of all the above options can be restored after a firmware update.","title":"Firmware update"},{"location":"variants/protectli_vp46xx/firmware-update/#updating-to-dasharo-v1018-or-v1019-or-v110","text":"From v1.0.18 Dasharo firmware is rebased on the more up-to-date revision of coreboot. If the current version of the firmware on the device is older than v1.0.18 or you are migrating from proprietary firmware the whole flash chip should be flashed as described in Initial Deployment . If the current version of the firmware on the device is v1.0.18 and it should be updated to v1.0.19 or v1.1.0, only the WP_RO and RW_SECTION_A should be flashed. To do this the following command should be used: flashrom -p internal -w protectli_vault_cml_v1.0.19.rom --fmap -i WP_RO -i RW_SECTION_A","title":"Updating to Dasharo v1.0.18 or v1.0.19 or v1.1.0"},{"location":"variants/protectli_vp46xx/firmware-update/#updating-on-dasharo-v1016-or-v1017","text":"Only the RW_SECTION_A partition of the flash needs to be updated. Flash it using the following command: flashrom -p internal -w protectli_vault_cml_v1.0.16.rom --fmap -i RW_SECTION_A This command also preserves Dasharo UEFI settings and the boot order.","title":"Updating on Dasharo v1.0.16 or v1.0.17"},{"location":"variants/protectli_vp46xx/firmware-update/#updating-on-older-dasharo-versions","text":"In this case, the whole bios region must be updated. flashrom -p internal -w protectli_vault_cml_v1.0.13.rom --ifd -i bios","title":"Updating on older Dasharo versions"},{"location":"variants/protectli_vp46xx/hardware-matrix/","text":"Hardware configuration matrix Introduction This document describes the hardware configuration used for validation of the coreboot port on the Protectli VP46XX firewall. Protectli VP4630 Component Description CPU Intel Core i3-10110U RAM Slot 1: Empty Slot 2: SAMSUNG M471A4G43MB1-CTD Flash memory Macronix KH25L12835F SSD Kingston NV1 250GB SNVS/250G MMC drive SAMSUNG KLM8G1GETF-B041 (on-board) USB pendrives 1. SanDisk Ultra Flair USB 3.0 16 GB USB Keyboard DELL KB216 USB Mouse DELL MS116p Wireless card Intel Wi-Fi 6 AX200 4G Modem AMIT MDG200-0T001 Display Display 1: HDMI 1920x1080p Display 2: DP 1920x1080p Ethernet controller 6x intel i225 (on-board) Internal devices Audio subsystem TPM Protectli TPM Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply Channel Well Technology 12V, 5.0A 60W Protectli VP4650 Component Description CPU Intel Core i5-10210U RAM Slot 1: Kingston KVR24S17S8/8 Slot 2: Kingston KVR26S19S8/16 Flash memory Macronix KH25L12835F SSD Samsung 980 PRO NVMe 250 GB MMC drive SAMSUNG KLM8G1GETF-B041 (on-board) USB Keyboard DELL KB216 USB Mouse DELL MS116p Wireless card JJPLUS JWW6051 4G Modem AMIT MDG200-0T001 Display Display 1: HDMI 1920x1080p Display 2: DP 1920x1080p Ethernet controller 6x intel i225 (on-board) Internal devices Audio subsystem TPM Protectli TPM Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply Channel Well Technology 12V, 7.5A 90W Protectli VP4670 Component Description CPU Intel Core i7-10810U RAM Slot 1: Samsung 4GB 1Rx8 PC4-2133P-SA0-11 Slot 2: Samsung 4GB 1Rx8 PC4-2133P-SA0-11 Flash memory Macronix KH25L12835F SSD Kingston NV1 250GB SNVS/250G MMC drive SAMSUNG KLM8G1GETF-B041 (on-board) USB Keyboard DELL KB216 USB Mouse DELL MS116p Wireless card JJPLUS JWW6051 4G Modem AMIT MDG200-0T001 Display Display 1: HDMI 1920x1080p Display 2: DP 1920x1080p Ethernet controller 6x intel i225 (on-board) Internal devices Audio subsystem TPM Protectli TPM Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply Channel Well Technology 12V, 7.5A 90W","title":"Hardware Configuration Matrix"},{"location":"variants/protectli_vp46xx/hardware-matrix/#hardware-configuration-matrix","text":"","title":"Hardware configuration matrix"},{"location":"variants/protectli_vp46xx/hardware-matrix/#introduction","text":"This document describes the hardware configuration used for validation of the coreboot port on the Protectli VP46XX firewall.","title":"Introduction"},{"location":"variants/protectli_vp46xx/hardware-matrix/#protectli-vp4630","text":"Component Description CPU Intel Core i3-10110U RAM Slot 1: Empty Slot 2: SAMSUNG M471A4G43MB1-CTD Flash memory Macronix KH25L12835F SSD Kingston NV1 250GB SNVS/250G MMC drive SAMSUNG KLM8G1GETF-B041 (on-board) USB pendrives 1. SanDisk Ultra Flair USB 3.0 16 GB USB Keyboard DELL KB216 USB Mouse DELL MS116p Wireless card Intel Wi-Fi 6 AX200 4G Modem AMIT MDG200-0T001 Display Display 1: HDMI 1920x1080p Display 2: DP 1920x1080p Ethernet controller 6x intel i225 (on-board) Internal devices Audio subsystem TPM Protectli TPM Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply Channel Well Technology 12V, 5.0A 60W","title":"Protectli VP4630"},{"location":"variants/protectli_vp46xx/hardware-matrix/#protectli-vp4650","text":"Component Description CPU Intel Core i5-10210U RAM Slot 1: Kingston KVR24S17S8/8 Slot 2: Kingston KVR26S19S8/16 Flash memory Macronix KH25L12835F SSD Samsung 980 PRO NVMe 250 GB MMC drive SAMSUNG KLM8G1GETF-B041 (on-board) USB Keyboard DELL KB216 USB Mouse DELL MS116p Wireless card JJPLUS JWW6051 4G Modem AMIT MDG200-0T001 Display Display 1: HDMI 1920x1080p Display 2: DP 1920x1080p Ethernet controller 6x intel i225 (on-board) Internal devices Audio subsystem TPM Protectli TPM Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply Channel Well Technology 12V, 7.5A 90W","title":"Protectli VP4650"},{"location":"variants/protectli_vp46xx/hardware-matrix/#protectli-vp4670","text":"Component Description CPU Intel Core i7-10810U RAM Slot 1: Samsung 4GB 1Rx8 PC4-2133P-SA0-11 Slot 2: Samsung 4GB 1Rx8 PC4-2133P-SA0-11 Flash memory Macronix KH25L12835F SSD Kingston NV1 250GB SNVS/250G MMC drive SAMSUNG KLM8G1GETF-B041 (on-board) USB Keyboard DELL KB216 USB Mouse DELL MS116p Wireless card JJPLUS JWW6051 4G Modem AMIT MDG200-0T001 Display Display 1: HDMI 1920x1080p Display 2: DP 1920x1080p Ethernet controller 6x intel i225 (on-board) Internal devices Audio subsystem TPM Protectli TPM Network Local network wired connection Remote Testing Environment RTE v1.1.0 Power Control RTE v1.1.0 Power supply Channel Well Technology 12V, 7.5A 90W","title":"Protectli VP4670"},{"location":"variants/protectli_vp46xx/initial-deployment/","text":"Initial deployment Initial flashing of Dasharo firmware can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 22.04. Deploy using Dasharo Tools Suite For simplicity we recommend using Dasharo Tools Suite to omit all compilation steps and deploy the Dasharo firmware seamlessly. Be sure to disable the BIOS lock in the AMI firmware setup utility: Go to Chipset tab Enter PCH IO Configuration Disable BIOS Lock . Save changes and reset. Now you are ready to use Dasharo Tools Suite (DTS): Boot Dasharo Tools Suite. Perform Dasharo installation. This will flash the full image, including the Intel ME. The operation requires a hard reset of the platform. To perform a hard reset: Power off the platform. Note, it may not power off completely due to flashed ME. Disconnect power supply from the board when OS finishes all tasks after power off (the screen goes dark or black). Disconnect the RTC/CMOS battery OR clear the CMOS using the pin header located near memory slots. Wait about 10 seconds and unshort the pins. Connect the power supply back. The platform should power on normally now. You can connect the battery back if it was disconnected. This concludes Dasharo deployment process using DTS. Build flashrom Please follow generic guide for Dasharo flashrom fork . Reading flash contents Always prepare a backup of the current firmware image. To read from the flash and save it to a file ( dump.rom ), execute the following command: flashrom -p internal -r dump.rom Flashing Dasharo To flash Dasharo on the platform, execute the following command - replace [path] with the path to the Dasharo image you want to flash, e.g. protectli_vault_cml_v1.0.13.rom . flashrom -p internal -w protectli_vault_cml_v1.0.13.rom This will flash the full image, including the Intel ME. The operation requires a hard reset of the platform. To perform a hard reset: Power off the platform. Note, it may not power off completely due to flashed ME. Disconnect power supply from the board when OS finishes all tasks after power off (the screen goes dark or black). Disconnect the RTC/CMOS battery OR clear the CMOS using the pin header located near memory slots. Wait about half a minute (unshort the pins). Connect the power supply back. The platform should power on normally now. You can connect the battery back if it was disconnected.","title":"Initial deployment"},{"location":"variants/protectli_vp46xx/initial-deployment/#initial-deployment","text":"Initial flashing of Dasharo firmware can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 22.04.","title":"Initial deployment"},{"location":"variants/protectli_vp46xx/initial-deployment/#deploy-using-dasharo-tools-suite","text":"For simplicity we recommend using Dasharo Tools Suite to omit all compilation steps and deploy the Dasharo firmware seamlessly. Be sure to disable the BIOS lock in the AMI firmware setup utility: Go to Chipset tab Enter PCH IO Configuration Disable BIOS Lock . Save changes and reset. Now you are ready to use Dasharo Tools Suite (DTS): Boot Dasharo Tools Suite. Perform Dasharo installation. This will flash the full image, including the Intel ME. The operation requires a hard reset of the platform. To perform a hard reset: Power off the platform. Note, it may not power off completely due to flashed ME. Disconnect power supply from the board when OS finishes all tasks after power off (the screen goes dark or black). Disconnect the RTC/CMOS battery OR clear the CMOS using the pin header located near memory slots. Wait about 10 seconds and unshort the pins. Connect the power supply back. The platform should power on normally now. You can connect the battery back if it was disconnected. This concludes Dasharo deployment process using DTS.","title":"Deploy using Dasharo Tools Suite"},{"location":"variants/protectli_vp46xx/initial-deployment/#build-flashrom","text":"Please follow generic guide for Dasharo flashrom fork .","title":"Build flashrom"},{"location":"variants/protectli_vp46xx/initial-deployment/#reading-flash-contents","text":"Always prepare a backup of the current firmware image. To read from the flash and save it to a file ( dump.rom ), execute the following command: flashrom -p internal -r dump.rom","title":"Reading flash contents"},{"location":"variants/protectli_vp46xx/initial-deployment/#flashing-dasharo","text":"To flash Dasharo on the platform, execute the following command - replace [path] with the path to the Dasharo image you want to flash, e.g. protectli_vault_cml_v1.0.13.rom . flashrom -p internal -w protectli_vault_cml_v1.0.13.rom This will flash the full image, including the Intel ME. The operation requires a hard reset of the platform. To perform a hard reset: Power off the platform. Note, it may not power off completely due to flashed ME. Disconnect power supply from the board when OS finishes all tasks after power off (the screen goes dark or black). Disconnect the RTC/CMOS battery OR clear the CMOS using the pin header located near memory slots. Wait about half a minute (unshort the pins). Connect the power supply back. The platform should power on normally now. You can connect the battery back if it was disconnected.","title":"Flashing Dasharo"},{"location":"variants/protectli_vp46xx/overview/","text":"Overview The Vault is a small form network appliance built for use as a firewall / router, virtualization platform, a daily-driven personal computer, and more. The VP46XX is the second platform of the Vault Pro series with higher performance and newer technology than the original FW6 series. The VP46XX features an Intel 10th Generation CPU, 2x DDR4 DIMM modules, 6x Intel i225-V 2.5G Ethernet ports, PCIe x4/SATA NVMe storage, LPC TPM, M.2 WIFI and WWAN slots. VP4630 - Intel Core i3-10110U VP4650 - Intel Core i5-10210U VP4670 - Intel Core i7-10810U For more information please refer to the references below. References Buy VP4630 in Protectli shop Documentation sections Releases - groups information about all releases. Building manual - describes how to build Dasharo for NovaCustom NV4x. Initial deployment - describes initial Dasharo deployment methods (i. e. flashing new firmware) for Protectli VP46xx. Firmware update - explains supported Dasharo open-source firmware update methods. Recovery - gathers information on how to recover the platform from potential failure. Hardware configuration matrix - describes the platform's hardware configuration used during the Dasharo firmware validation procedure. Test matrix - describes validation scope used during Dasharo firmware validation procedure.","title":"Overview"},{"location":"variants/protectli_vp46xx/overview/#overview","text":"The Vault is a small form network appliance built for use as a firewall / router, virtualization platform, a daily-driven personal computer, and more. The VP46XX is the second platform of the Vault Pro series with higher performance and newer technology than the original FW6 series. The VP46XX features an Intel 10th Generation CPU, 2x DDR4 DIMM modules, 6x Intel i225-V 2.5G Ethernet ports, PCIe x4/SATA NVMe storage, LPC TPM, M.2 WIFI and WWAN slots. VP4630 - Intel Core i3-10110U VP4650 - Intel Core i5-10210U VP4670 - Intel Core i7-10810U For more information please refer to the references below.","title":"Overview"},{"location":"variants/protectli_vp46xx/overview/#references","text":"Buy VP4630 in Protectli shop","title":"References"},{"location":"variants/protectli_vp46xx/overview/#documentation-sections","text":"Releases - groups information about all releases. Building manual - describes how to build Dasharo for NovaCustom NV4x. Initial deployment - describes initial Dasharo deployment methods (i. e. flashing new firmware) for Protectli VP46xx. Firmware update - explains supported Dasharo open-source firmware update methods. Recovery - gathers information on how to recover the platform from potential failure. Hardware configuration matrix - describes the platform's hardware configuration used during the Dasharo firmware validation procedure. Test matrix - describes validation scope used during Dasharo firmware validation procedure.","title":"Documentation sections"},{"location":"variants/protectli_vp46xx/recovery/","text":"Recovery Intro The following documentation describes the process of recovering hardware from the brick state with RTE and Dasharo open-source firmware. Prerequisites Prepared RTE SOIC-8 Pomona clip 6x female-female wire cables Connections To prepare the stand for flashing follow the steps described below: Connect the wire cables to the Pomona clip. Connect the Pomona clip to the SPI header on RTE. SPI header Pomona clip Vcc pin 5 (Vcc) GND pin 4 (GND) CS pin 1 (CS) SCLK pin 7 (CLK) MISO pin 2 (MISO) MOSI pin 8 (MOSI) Open the platform cover. Match pin 1(CS) on the Pomona clip with the first pin of the flash chip, marked with a small dot engraved on the chip. Firmware flashing To flash firmware follow the steps described below: Login to RTE via ssh or minicom . Turn on the platform by connecting the power supply. Wait at least 5 seconds. Turn off the platform by using the power button. Wait at least 3 seconds. Set the proper state of the SPI by using the following commands on RTE: # set SPI Vcc to 3.3V echo 1 > /sys/class/gpio/gpio405/value # SPI Vcc on echo 1 > /sys/class/gpio/gpio406/value # SPI lines ON echo 1 > /sys/class/gpio/gpio404/value Wait at least 2 seconds. Disconnect the power supply from the platform. Wait at least 2 seconds. Flash the platform by using the following command: flashrom -p linux_spi:dev = /dev/spidev1.0,spispeed = 16000 -c \"MX25L12835F/MX25L12845E/MX25L12865E\" -w [ path_to_binary ] Flashing with flashrom takes about 1 minute. Change back the state of the SPI by using the following commands: echo 0 > /sys/class/gpio/gpio404/value echo 0 > /sys/class/gpio/gpio406/value Reset CMOS, this can be done by two methods: Disconnect the CMOS battery, wait at least 10 seconds and connect again. Short the two pins from the CMOS header for at least 10 seconds. Turn on the platform by connecting the power supply. The first boot of the platform after proceeding with the above procedure can take much longer than standard.","title":"Recovery"},{"location":"variants/protectli_vp46xx/recovery/#recovery","text":"","title":"Recovery"},{"location":"variants/protectli_vp46xx/recovery/#intro","text":"The following documentation describes the process of recovering hardware from the brick state with RTE and Dasharo open-source firmware.","title":"Intro"},{"location":"variants/protectli_vp46xx/recovery/#prerequisites","text":"Prepared RTE SOIC-8 Pomona clip 6x female-female wire cables","title":"Prerequisites"},{"location":"variants/protectli_vp46xx/recovery/#connections","text":"To prepare the stand for flashing follow the steps described below: Connect the wire cables to the Pomona clip. Connect the Pomona clip to the SPI header on RTE. SPI header Pomona clip Vcc pin 5 (Vcc) GND pin 4 (GND) CS pin 1 (CS) SCLK pin 7 (CLK) MISO pin 2 (MISO) MOSI pin 8 (MOSI) Open the platform cover. Match pin 1(CS) on the Pomona clip with the first pin of the flash chip, marked with a small dot engraved on the chip.","title":"Connections"},{"location":"variants/protectli_vp46xx/recovery/#firmware-flashing","text":"To flash firmware follow the steps described below: Login to RTE via ssh or minicom . Turn on the platform by connecting the power supply. Wait at least 5 seconds. Turn off the platform by using the power button. Wait at least 3 seconds. Set the proper state of the SPI by using the following commands on RTE: # set SPI Vcc to 3.3V echo 1 > /sys/class/gpio/gpio405/value # SPI Vcc on echo 1 > /sys/class/gpio/gpio406/value # SPI lines ON echo 1 > /sys/class/gpio/gpio404/value Wait at least 2 seconds. Disconnect the power supply from the platform. Wait at least 2 seconds. Flash the platform by using the following command: flashrom -p linux_spi:dev = /dev/spidev1.0,spispeed = 16000 -c \"MX25L12835F/MX25L12845E/MX25L12865E\" -w [ path_to_binary ] Flashing with flashrom takes about 1 minute. Change back the state of the SPI by using the following commands: echo 0 > /sys/class/gpio/gpio404/value echo 0 > /sys/class/gpio/gpio406/value Reset CMOS, this can be done by two methods: Disconnect the CMOS battery, wait at least 10 seconds and connect again. Short the two pins from the CMOS header for at least 10 seconds. Turn on the platform by connecting the power supply. The first boot of the platform after proceeding with the above procedure can take much longer than standard.","title":"Firmware flashing"},{"location":"variants/protectli_vp46xx/releases/","text":"Release Notes Following Release Notes describe status of Open Source Firmware development for Protectli VP46xx For details about our release process please read Dasharo Standard Release Process . Subscribe to Protectli VP46xx Dasharo Release Newsletter Test results for this platform can be found here . v1.1.0 - 2023-06-05 Release version v1.1.0 is currently only available for the VP4670 platform. Added USB stack and mass storage enable/disable option SMM BIOS write protection enable/disable option Changed Reverted to use FSP GOP for graphics initialization as it caused problems with Windows 11 display on VP4670 Switched to use driver for IT8784E Super I/O, which is present on the boards CPU power limits increased from baseline to performance Updating from v1.0.x requires flashing the WP_RO recovery partition Firmware version v1.1.x are signed with a new key Fixed Booting problems with Ubuntu 22.04 Low CPU frequency values Disabled C states deeper than C1 on VP4670 to fix Proxmox booting issue Protectli VP4670 - windows crashes after installing updates The inconvenience of using external headsets VP46XX Known issues Popup with information about recovery mode is still displayed after flashing with a valid binary Binaries protectli_vp4670_v1.1.0.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on c6ee1509da revision dcc5f2e2 edk2 based on 7f90b9cd revision 19bf14b4 iPXE based on 6ba671ac revision 6ba671ac v1.0.19 - 2022-12-08 Changed ME is now disabled by default (ME soft-disable) vboot is now run as separate verstage (previously was run inside bootblock) increased pre-RAM console buffer to fit more early cbmem logs Binaries protectli_vp4630_vp4650_v1.0.19.rom sha256 sha256.sig protectli_vp4670_v1.0.19.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on c6ee1509da revision 9034fb12 edk2 based on 7f90b9cd revision e31b7a71 iPXE for EFI revision 988d2 VP4670: Cometlake1 FSP 9.0.7B.20 VP4630 and VP4650: Cometlake2 FSP 9.2.7B.20 Intel i225 EFI driver version 0.10.4, SHA256: 2d234ecf629fc10dc0c291a1390de3d27a05c6ecbd935628b6ff154f386d061e Management Engine: Custom image based on ME 14.0.47.1558, SHA256: 7fa37e108176c9a2d0df60c93b10b3ad9c7725f1f82b87197a2991208c4cffec microcode: CPU signature: 0x0806EC, Date: 17.11.2021, Revision: 0xF0 CPU signature: 0x0A0660, Date: 15.11.2021, Revision: 0xF0 CPU signature: 0x0A0661, Date: 16.11.2021, Revision: 0xF0 v1.0.18 - 2022-11-16 Test results for this release can be found here . Added Support for VP4650 and VP4670 platforms Platform will beep 12 times and blink HDD led on critical firmware errors Changed Disabled Intel PTT (fTPM) Removed workaround for graphics power management as the issue no longer reproduces on newer revision of the hardware Binaries are built with coreboot-sdk 2021-09-23_b0d87f753c (was 0ad5fbd48d) Open-source graphics initialization with libgfxinit instead of proprietary and closed FSP GOP driver Binaries protectli_vp4630_vp4650_v1.0.18.rom sha256 sha256.sig protectli_vp4670_v1.0.18.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on c6ee1509da revision ed9f6fe0 edk2 based on 7f90b9cd revision e31b7a71 iPXE for EFI revision 988d2 VP4670: Cometlake1 FSP 9.0.7B.20 VP4630 and VP4650: Cometlake2 FSP 9.2.7B.20 Intel i225 EFI driver version 0.10.4, SHA256: 2d234ecf629fc10dc0c291a1390de3d27a05c6ecbd935628b6ff154f386d061e Management Engine: Custom image based on ME 14.0.47.1558, SHA256: 7fa37e108176c9a2d0df60c93b10b3ad9c7725f1f82b87197a2991208c4cffec microcode: CPU signature: 0x0806EC, Date: 17.11.2021, Revision: 0xF0 CPU signature: 0x0A0660, Date: 15.11.2021, Revision: 0xF0 CPU signature: 0x0A0661, Date: 16.11.2021, Revision: 0xF0 v1.0.17 - 2022-08-17 Test results for this release can be found here . Added Tools for resigning Vboot images with one RW partition Changed Set thermal throttling temperature to 80 degrees Disabled UEFI Secure Boot by default Fixed Platform rebooting every 56 minutes Incorrect menu labels displayed in network boot menu Built-in audio jack does not work Binaries protectli_vault_cml_v1.0.17.rom_file protectli_vault_cml_v1.0.17.rom_hash protectli_vault_cml_v1.0.17.rom_sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on 4.16 revision d662831d edk2 based on 7f90b9cd revision 576aa6a4 iPXE for EFI revision 988d2 Cometlake2 FSP 9.2.7B.20 Intel i225 EFI driver version 0.10.4, SHA256: 2d234ecf629fc10dc0c291a1390de3d27a05c6ecbd935628b6ff154f386d061e Management Engine: Custom image based on ME 14.0.47.1558, SHA256: 7fa37e108176c9a2d0df60c93b10b3ad9c7725f1f82b87197a2991208c4cffec microcode: CPU signature: 0x0806EC, Date: 28.04.2021, Revision: 0xEC CPU signature: 0x0A0660, Date: 28.04.2021, Revision: 0xEA CPU signature: 0x0A0661, Date: 29.04.2021, Revision: 0xEC v1.0.16 - 2022-07-13 Test results for this release can be found here . Added Vboot Verified Boot TPM Measured Boot Vboot recovery notification in UEFI Payload UEFI Shell UEFI Secure Boot Intel ME soft disable BIOS flash protection for Vboot recovery region Changed Changed supported CPUs to Comet Lake stepping 2 Fixed i225 network controller initialization takes too much time CVE-2022-29264 Binaries protectli_vault_cml_v1.0.16.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on 4.16 revision dfaaf44d edk2 based on 7f90b9cd revision 5345a611 iPXE for EFI revision 988d2 Cometlake2 FSP 9.2.7B.20 Intel i225 EFI driver version 0.10.4, SHA256: 2d234ecf629fc10dc0c291a1390de3d27a05c6ecbd935628b6ff154f386d061e Management Engine: Custom image based on ME 14.0.47.1558, SHA256: 7fa37e108176c9a2d0df60c93b10b3ad9c7725f1f82b87197a2991208c4cffec microcode: CPU signature: 0x0806EC, Date: 28.04.2021, Revision: 0xEC CPU signature: 0x0A0660, Date: 28.04.2021, Revision: 0xEA CPU signature: 0x0A0661, Date: 29.04.2021, Revision: 0xEC v1.0.13 - 2022-03-22 Added UEFI boot support i225 network controller network boot support Customized boot menu keys Customized setup menu keys Configurable boot order Configurable boot options Changed ME version to 14.0.47.1558 Known issues i225 network controller initialization takes too much time Binaries protectli_vault_cml_v1.0.13.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on 4.16 revision 546e1c86 edk2 based on 7f90b9cd revision 7f90b9cd iPXE for EFI revision 988d2 Cometlake1 FSP 9.0.7B.20 Intel i225 EFI driver version 0.9.03, SHA256: 63e77b237dc9a8aacdd7465675ee88afc01dad3204156a91a0976a4ad1ed5b00 Management Engine: Custom image based on ME 14.0.47.1558, SHA256: 7fa37e108176c9a2d0df60c93b10b3ad9c7725f1f82b87197a2991208c4cffec microcode: CPU signature: 0x0806EC, Date: 28.04.2021, Revision: 0xEC CPU signature: 0x0A0660, Date: 28.04.2021, Revision: 0xEA","title":"Releases"},{"location":"variants/protectli_vp46xx/releases/#release-notes","text":"Following Release Notes describe status of Open Source Firmware development for Protectli VP46xx For details about our release process please read Dasharo Standard Release Process . Subscribe to Protectli VP46xx Dasharo Release Newsletter Test results for this platform can be found here .","title":"Release Notes"},{"location":"variants/protectli_vp46xx/releases/#v110-2023-06-05","text":"Release version v1.1.0 is currently only available for the VP4670 platform.","title":"v1.1.0 - 2023-06-05"},{"location":"variants/protectli_vp46xx/releases/#v1019-2022-12-08","text":"","title":"v1.0.19 - 2022-12-08"},{"location":"variants/protectli_vp46xx/releases/#v1018-2022-11-16","text":"Test results for this release can be found here .","title":"v1.0.18 - 2022-11-16"},{"location":"variants/protectli_vp46xx/releases/#v1017-2022-08-17","text":"Test results for this release can be found here .","title":"v1.0.17 - 2022-08-17"},{"location":"variants/protectli_vp46xx/releases/#v1016-2022-07-13","text":"Test results for this release can be found here .","title":"v1.0.16 - 2022-07-13"},{"location":"variants/protectli_vp46xx/releases/#v1013-2022-03-22","text":"","title":"v1.0.13 - 2022-03-22"},{"location":"variants/protectli_vp46xx/test-matrix/","text":"Test matrix About The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary. The test scope is the same for all platforms of the VP46XX family. Module: Dasharo compatibility No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports DSP DSP002.001, DSP002.002, DSP002.003, DSP003.001, DSP003.002, DSP003.003 4. Network boot utilities NBT All 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB USB001.XXX and USB002.XXX 9. FreeBSD support BSD All 10. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 11. USB-C support UTC UTC004.001, UTC004.002 12. M.2 WiFi/Bluetooth WLE ALL 13. eMMC support MMC MMC001.001 14. SMBIOS DMI DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001 15. Custom network boot entries CNB CNB001.002 16. M.2 automatic SATA/NVMe switching support MSS MSS001.001 17. Windows booting WBT WBT001.001 18. Audio subsystem AUD AUD001.001, AUD001.002, AUD002.001, AUD002.002, AUD003.001, AUD003.002, AUD004.001, AUD004.002, AUD005.001, AUD005.002, AUD006.001, AUD006.002 19. UEFI Shell USH All 20. USB detection UDT All 21. USB booting UBT All 22. pfSense support PFS All 23. OPNsense support OPN All 24. Proxmox support PVE All 25. Ubuntu Server support USS All Module: Dasharo security No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001,TPM002.001 and TPM003.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO All 5. ME disable/neuter support MNE MNE004.001 6. BIOS lock support BLS All 7. USB stack enable/disable USS All 8. SMM BIOS write protection SMM All Note: in Dasharo compatible with Protectli VP46xx ME is soft-disabled by default - no additional option for ME disabling is available in the Setup Menu. Module: Dasharo performance No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF Without CPU003.XXX and CPU005.XXX 4. Platform stability STB All 5. Ubuntu booting performance test BUB All 6. Debian booting performance test BDE All 7. FreeBSD booting performance test BFB All 8. Proxmox booting performance test BPM All 9. Ubuntu Server booting performance test BUS All 10. OPNsense (serial output) booting performance test BOS All 11. OPNsense (VGA output) booting performance test BOV All 12. pfSense (serial output) booting performance test BPS All 13. pfSense (VGA output) booting performance test BPV All","title":"Test matrix"},{"location":"variants/protectli_vp46xx/test-matrix/#test-matrix","text":"","title":"Test matrix"},{"location":"variants/protectli_vp46xx/test-matrix/#about","text":"The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary. The test scope is the same for all platforms of the VP46XX family.","title":"About"},{"location":"variants/protectli_vp46xx/test-matrix/#module-dasharo-compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports DSP DSP002.001, DSP002.002, DSP002.003, DSP003.001, DSP003.002, DSP003.003 4. Network boot utilities NBT All 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB USB001.XXX and USB002.XXX 9. FreeBSD support BSD All 10. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 11. USB-C support UTC UTC004.001, UTC004.002 12. M.2 WiFi/Bluetooth WLE ALL 13. eMMC support MMC MMC001.001 14. SMBIOS DMI DMI002.001, DMI003.001, DMI004.001, DMI005.001, DMI006.001 15. Custom network boot entries CNB CNB001.002 16. M.2 automatic SATA/NVMe switching support MSS MSS001.001 17. Windows booting WBT WBT001.001 18. Audio subsystem AUD AUD001.001, AUD001.002, AUD002.001, AUD002.002, AUD003.001, AUD003.002, AUD004.001, AUD004.002, AUD005.001, AUD005.002, AUD006.001, AUD006.002 19. UEFI Shell USH All 20. USB detection UDT All 21. USB booting UBT All 22. pfSense support PFS All 23. OPNsense support OPN All 24. Proxmox support PVE All 25. Ubuntu Server support USS All","title":"Module: Dasharo compatibility"},{"location":"variants/protectli_vp46xx/test-matrix/#module-dasharo-security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001,TPM002.001 and TPM003.001 2. Verified Boot support VBO Without VBO006.001 and VBO007.001 3. Measured Boot support MBO All 4. Secure Boot support SBO All 5. ME disable/neuter support MNE MNE004.001 6. BIOS lock support BLS All 7. USB stack enable/disable USS All 8. SMM BIOS write protection SMM All Note: in Dasharo compatible with Protectli VP46xx ME is soft-disabled by default - no additional option for ME disabling is available in the Setup Menu.","title":"Module: Dasharo security"},{"location":"variants/protectli_vp46xx/test-matrix/#module-dasharo-performance","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot bring up time measurement CBMEM All 2. CPU temperature measure CPT All 3. CPU frequency measure CPF Without CPU003.XXX and CPU005.XXX 4. Platform stability STB All 5. Ubuntu booting performance test BUB All 6. Debian booting performance test BDE All 7. FreeBSD booting performance test BFB All 8. Proxmox booting performance test BPM All 9. Ubuntu Server booting performance test BUS All 10. OPNsense (serial output) booting performance test BOS All 11. OPNsense (VGA output) booting performance test BOV All 12. pfSense (serial output) booting performance test BPS All 13. pfSense (VGA output) booting performance test BPV All","title":"Module: Dasharo performance"},{"location":"variants/qemu_q35/building-manual/","text":"Dasharo (UEFI) v0.1.0 for QEMU Q35 - Building Manual Follow below steps to create the \"Dasharo (UEFI) OVMF image for QEMU Q35\" from EDK2: Requirements Docker follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux Procedure Easiest way to build OVMF for QEMU Q35 is to use coreboot Docker image. As some dependencies maybe missing in given local instance. Obtain the docker image: docker pull coreboot/coreboot-sdk:2021-09-23_b0d87f753c Clone official Dasharo EDK2 repository to your docker instance, with git or downloading the source code from github. git clone https://github.com/Dasharo/edk2.git Start the instance of the docker image under the Dasharo/edk2 repository: sudo docker run --rm -it -v $PWD :/home/coreboot/coreboot \\ -w /home/coreboot/coreboot coreboot/coreboot-sdk:2021-09-23_b0d87f753c \\ /bin/bash Follow below instructions, to prepare your environment for building OVMF image. Setup the environment variables with the following command make -C BaseTools source edksetup.sh Update the submodules in order get latest dependencies. git submodule update --init --checkout Clone the edk2-platforms repository for additional packages git clone https://github.com/Dasharo/edk2-platforms.git \\ -b 3323ed481d35096fb6a7eae7b49f35eff00f86cf Update the PACKAGES_PATH variable export EDK2_PLATFORMS_PATH = \" $WORKSPACE /edk2-platforms\" export PACKAGES_PATH = \" $WORKSPACE :\\ $EDK2_PLATFORMS_PATH /Platform/Intel:\\ $EDK2_PLATFORMS_PATH /Silicon/Intel:\\ $EDK2_PLATFORMS_PATH /Features/Intel:\\ $EDK2_PLATFORMS_PATH /Features/Intel/Debugging:\\ $EDK2_PLATFORMS_PATH /Features/Intel/Network:\\ $EDK2_PLATFORMS_PATH /Features/Intel/OutOfBandManagement:\\ $EDK2_PLATFORMS_PATH /Features/Intel/PowerManagement:\\ $EDK2_PLATFORMS_PATH /Features/Intel/SystemInformation:\\ $EDK2_PLATFORMS_PATH /Features/Intel/UserInterface\" Building the firmware image To build the image simply invoke the following command build -a IA32 -a X64 -t GCC5 -b RELEASE -p OvmfPkg/OvmfPkgX64.dsc You can also enable additional options, for example CSM with by adding -D CSM_ENABLE : build -a IA32 -a X64 -t GCC5 -b RELEASE -p OvmfPkg/OvmfPkgX64.dsc -D CSM_ENABLE Once the build is completed, the OVMF firmware image can be found below given path: edk2/Build/Ovmf/RELEASE_GCC5/FV/OVMF_CODE.fd edk2/Build/Ovmf/RELEASE_GCC5/FV/OVMF_VARS.fd For debug build use: build -a IA32 -a X64 -t GCC5 -b DEBUG -p OvmfPkg/OvmfPkgX64.dsc Then the resulting files will be placed in: edk2/Build/Ovmf/DEBUG_GCC5/FV/OVMF_CODE.fd edk2/Build/Ovmf/DEBUG_GCC5/FV/OVMF_VARS.fd","title":"Building manual"},{"location":"variants/qemu_q35/building-manual/#dasharo-uefi-v010-for-qemu-q35-building-manual","text":"Follow below steps to create the \"Dasharo (UEFI) OVMF image for QEMU Q35\" from EDK2:","title":"Dasharo (UEFI) v0.1.0 for QEMU Q35 - Building Manual"},{"location":"variants/qemu_q35/building-manual/#requirements","text":"Docker follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux","title":"Requirements"},{"location":"variants/qemu_q35/building-manual/#procedure","text":"Easiest way to build OVMF for QEMU Q35 is to use coreboot Docker image. As some dependencies maybe missing in given local instance. Obtain the docker image: docker pull coreboot/coreboot-sdk:2021-09-23_b0d87f753c Clone official Dasharo EDK2 repository to your docker instance, with git or downloading the source code from github. git clone https://github.com/Dasharo/edk2.git Start the instance of the docker image under the Dasharo/edk2 repository: sudo docker run --rm -it -v $PWD :/home/coreboot/coreboot \\ -w /home/coreboot/coreboot coreboot/coreboot-sdk:2021-09-23_b0d87f753c \\ /bin/bash Follow below instructions, to prepare your environment for building OVMF image. Setup the environment variables with the following command make -C BaseTools source edksetup.sh Update the submodules in order get latest dependencies. git submodule update --init --checkout Clone the edk2-platforms repository for additional packages git clone https://github.com/Dasharo/edk2-platforms.git \\ -b 3323ed481d35096fb6a7eae7b49f35eff00f86cf Update the PACKAGES_PATH variable export EDK2_PLATFORMS_PATH = \" $WORKSPACE /edk2-platforms\" export PACKAGES_PATH = \" $WORKSPACE :\\ $EDK2_PLATFORMS_PATH /Platform/Intel:\\ $EDK2_PLATFORMS_PATH /Silicon/Intel:\\ $EDK2_PLATFORMS_PATH /Features/Intel:\\ $EDK2_PLATFORMS_PATH /Features/Intel/Debugging:\\ $EDK2_PLATFORMS_PATH /Features/Intel/Network:\\ $EDK2_PLATFORMS_PATH /Features/Intel/OutOfBandManagement:\\ $EDK2_PLATFORMS_PATH /Features/Intel/PowerManagement:\\ $EDK2_PLATFORMS_PATH /Features/Intel/SystemInformation:\\ $EDK2_PLATFORMS_PATH /Features/Intel/UserInterface\"","title":"Procedure"},{"location":"variants/qemu_q35/building-manual/#building-the-firmware-image","text":"To build the image simply invoke the following command build -a IA32 -a X64 -t GCC5 -b RELEASE -p OvmfPkg/OvmfPkgX64.dsc You can also enable additional options, for example CSM with by adding -D CSM_ENABLE : build -a IA32 -a X64 -t GCC5 -b RELEASE -p OvmfPkg/OvmfPkgX64.dsc -D CSM_ENABLE Once the build is completed, the OVMF firmware image can be found below given path: edk2/Build/Ovmf/RELEASE_GCC5/FV/OVMF_CODE.fd edk2/Build/Ovmf/RELEASE_GCC5/FV/OVMF_VARS.fd For debug build use: build -a IA32 -a X64 -t GCC5 -b DEBUG -p OvmfPkg/OvmfPkgX64.dsc Then the resulting files will be placed in: edk2/Build/Ovmf/DEBUG_GCC5/FV/OVMF_CODE.fd edk2/Build/Ovmf/DEBUG_GCC5/FV/OVMF_VARS.fd","title":"Building the firmware image"},{"location":"variants/qemu_q35/development/","text":"Dasharo (UEFI) v0.1.0 for QEMU Q35 Intro Please check your qemu setup and launch qemu outside docker instance (host machine) using built OVMF firmware image. Install QEMU on your linux distro Run the OVMF in QEMU: qemu-system-x86_64 -machine q35,smm = on \\ -global driver = cfi.pflash01,property = secure,value = on \\ -drive if = pflash,format = raw,unit = 0 ,file = Build/OvmfX64/DEBUG_GCC5/FV/OVMF_CODE.fd,readonly = on \\ -drive if = pflash,format = raw,unit = 1 ,file = Build/OvmfX64/DEBUG_GCC5/FV/OVMF_VARS.fd \\ -debugcon file:debug.log -global isa-debugcon.iobase = 0x402 \\ -global ICH9-LPC.disable_s3 = 1 -drive indicate device is pflash with firmware image of built OVMF*.fd image. -debugcon file:debug.log -global isa-debugcon.iobase=0x402 default OVMF build writes debug messages to IO port 0x402 . The following qemu command line options save them in the file called debug.log. -global ICH9-LPC.disable_s3=1 SMM is put to use in the S3 suspend and resume infrastructure, and in the UEFI variable driver stack. Similarly, a pflash-backed variable store is a requirement. -machine q35,smm=on For SMM to work, only Q35 machines are supported hence the machine type. After executing the above qemu command, qemu boots into UEFI built-in shell and to BIOS selection area. The features which are enabled in OvmfPkgX64.dsc can be verified at Setup menu . At Device Manager section Dasharo features can be verified in Dasharo System Features section. Useful Tips for modifying the DSC & FDF Follow the steps below to rebuild firmware image & experiment with the features If any code is added to C file or any library functions are invoked in other files, rebuild the OVMF image with the following command. build -a IA32 -a X64 -t GCC5 -b DEBUG -p OvmfPkg/OvmfPkgX64.dsc By making some changes in the OvmfPkgX64.dsc file, one can add features like OPAL, SATA security support for QEMU Q35 machine and also for specific platforms. An example of where the changes can be made in the OvmfPkgX64.dsc file is given below. The following changes describe defining in the Defines Section of OvmfPkgX64.dsc # Defines for default states. These can be changed on the command line. # -D FLAG=VALUE # ( ... ) DEFINE SATA_PASSWORD_ENABLE = TRUE DEFINE OPAL_PASSWORD_ENABLE = TRUE Include the appropriate libraries in the Libraries Section of OvmfPkgX64.dsc . !if $( OPAL_PASSWORD_ENABLE ) == TRUE TcgStorageCoreLib | SecurityPkg/Library/TcgStorageCoreLib/TcgStorageCoreLib.inf TcgStorageOpalLib | SecurityPkg/Library/TcgStorageOpalLib/TcgStorageOpalLib.inf !endif According to the feature, proper PCD's must be defined in OvmfPkgX64.dsc file. Adding components in Components Section of OvmfPkgX64.dsc file: !if $( SATA_PASSWORD_ENABLE ) == TRUE SecurityPkg/HddPassword/HddPasswordPei.inf !endif Dasharo System Features The .fdf describes the source files' location and variables used during the build process. Below code snippet shows the location of SATA disk password INF file. !if $( SATA_PASSWORD_ENABLE ) == TRUE INF SecurityPkg/HddPassword/HddPasswordDxe.inf !endif Include all necessary source file locations to point at source libraries in FDF file. Below is the screenshot of the SATA_PASSWORD support in Device Manager . By default the Dasharo System Features are enabled in the DasharoSystemFeatures.dec . It describes the configuration of the platform. The flags can be toggled inside platform DSC file in order to enable Dasharo System Features . [ PcdsFixedAtBuild ] gDasharoSystemFeaturesTokenSpaceGuid.PcdShowMenu | TRUE gDasharoSystemFeaturesTokenSpaceGuid.PcdShowSecurityMenu | TRUE gDasharoSystemFeaturesTokenSpaceGuid.PcdShowIntelMeMenu | TRUE gDasharoSystemFeaturesTokenSpaceGuid.PcdShowUsbMenu | TRUE gDasharoSystemFeaturesTokenSpaceGuid.PcdShowNetworkMenu | TRUE gDasharoSystemFeaturesTokenSpaceGuid.PcdShowChipsetMenu | TRUE gDasharoSystemFeaturesTokenSpaceGuid.PcdDefaultNetworkBootEnable | FALSE In the above PCD definitions, please check column after PCD definition to find TRUE/FALSE . By toggling these flags, one can enable or disable the Dasharo System Features. The below image shows the Dasharo System Features enabled for the QEMU Q35 machine.","title":"Development"},{"location":"variants/qemu_q35/development/#dasharo-uefi-v010-for-qemu-q35","text":"","title":"Dasharo (UEFI) v0.1.0 for QEMU Q35"},{"location":"variants/qemu_q35/development/#intro","text":"Please check your qemu setup and launch qemu outside docker instance (host machine) using built OVMF firmware image. Install QEMU on your linux distro Run the OVMF in QEMU: qemu-system-x86_64 -machine q35,smm = on \\ -global driver = cfi.pflash01,property = secure,value = on \\ -drive if = pflash,format = raw,unit = 0 ,file = Build/OvmfX64/DEBUG_GCC5/FV/OVMF_CODE.fd,readonly = on \\ -drive if = pflash,format = raw,unit = 1 ,file = Build/OvmfX64/DEBUG_GCC5/FV/OVMF_VARS.fd \\ -debugcon file:debug.log -global isa-debugcon.iobase = 0x402 \\ -global ICH9-LPC.disable_s3 = 1 -drive indicate device is pflash with firmware image of built OVMF*.fd image. -debugcon file:debug.log -global isa-debugcon.iobase=0x402 default OVMF build writes debug messages to IO port 0x402 . The following qemu command line options save them in the file called debug.log. -global ICH9-LPC.disable_s3=1 SMM is put to use in the S3 suspend and resume infrastructure, and in the UEFI variable driver stack. Similarly, a pflash-backed variable store is a requirement. -machine q35,smm=on For SMM to work, only Q35 machines are supported hence the machine type. After executing the above qemu command, qemu boots into UEFI built-in shell and to BIOS selection area. The features which are enabled in OvmfPkgX64.dsc can be verified at Setup menu . At Device Manager section Dasharo features can be verified in Dasharo System Features section.","title":"Intro"},{"location":"variants/qemu_q35/development/#useful-tips-for-modifying-the-dsc-fdf","text":"","title":"Useful Tips for modifying the DSC &amp; FDF"},{"location":"variants/qemu_q35/development/#dasharo-system-features","text":"The .fdf describes the source files' location and variables used during the build process. Below code snippet shows the location of SATA disk password INF file. !if $( SATA_PASSWORD_ENABLE ) == TRUE INF SecurityPkg/HddPassword/HddPasswordDxe.inf !endif Include all necessary source file locations to point at source libraries in FDF file. Below is the screenshot of the SATA_PASSWORD support in Device Manager . By default the Dasharo System Features are enabled in the DasharoSystemFeatures.dec . It describes the configuration of the platform. The flags can be toggled inside platform DSC file in order to enable Dasharo System Features . [ PcdsFixedAtBuild ] gDasharoSystemFeaturesTokenSpaceGuid.PcdShowMenu | TRUE gDasharoSystemFeaturesTokenSpaceGuid.PcdShowSecurityMenu | TRUE gDasharoSystemFeaturesTokenSpaceGuid.PcdShowIntelMeMenu | TRUE gDasharoSystemFeaturesTokenSpaceGuid.PcdShowUsbMenu | TRUE gDasharoSystemFeaturesTokenSpaceGuid.PcdShowNetworkMenu | TRUE gDasharoSystemFeaturesTokenSpaceGuid.PcdShowChipsetMenu | TRUE gDasharoSystemFeaturesTokenSpaceGuid.PcdDefaultNetworkBootEnable | FALSE In the above PCD definitions, please check column after PCD definition to find TRUE/FALSE . By toggling these flags, one can enable or disable the Dasharo System Features. The below image shows the Dasharo System Features enabled for the QEMU Q35 machine.","title":"Dasharo System Features"},{"location":"variants/qemu_q35/firmware-update/","text":"Firmware Update The update process of Dasharo OVMF firmware on QEMU Q35 does not need any special actions. QEMU Q35 is an emulated platform, not real hardware. Updating the Dasharo OVMF firmware is as simple as invoking a QEMU command with a newer OVMF*.fd files: qemu-system-x86_64 -machine q35,smm = on \\ -global driver = cfi.pflash01,property = secure,value = on \\ -drive if = pflash,format = raw,unit = 0 ,file = Build/OvmfX64/RELEASE_GCC5/FV/OVMF_CODE.fd,readonly = on \\ -drive if = pflash,format = raw,unit = 1 ,file = Build/OvmfX64/RELEASE_GCC5/FV/OVMF_VARS.fd \\ -debugcon file:debug.log -global isa-debugcon.iobase = 0x402 \\ -global ICH9-LPC.disable_s3 = 1","title":"Firmware update"},{"location":"variants/qemu_q35/firmware-update/#firmware-update","text":"The update process of Dasharo OVMF firmware on QEMU Q35 does not need any special actions. QEMU Q35 is an emulated platform, not real hardware. Updating the Dasharo OVMF firmware is as simple as invoking a QEMU command with a newer OVMF*.fd files: qemu-system-x86_64 -machine q35,smm = on \\ -global driver = cfi.pflash01,property = secure,value = on \\ -drive if = pflash,format = raw,unit = 0 ,file = Build/OvmfX64/RELEASE_GCC5/FV/OVMF_CODE.fd,readonly = on \\ -drive if = pflash,format = raw,unit = 1 ,file = Build/OvmfX64/RELEASE_GCC5/FV/OVMF_VARS.fd \\ -debugcon file:debug.log -global isa-debugcon.iobase = 0x402 \\ -global ICH9-LPC.disable_s3 = 1","title":"Firmware Update"},{"location":"variants/qemu_q35/hardware-matrix/","text":"Hardware configuration matrix Introduction This document describes the devices emulated by the QEMU Q35. QEMU Q35 Component Description CPU QEMU emulated with Q35 emulated chipset RAM Slot 1: QEMU DIMM CDROM QEMU DVD-ROM USB Keyboard AT Translated Set 2 Keyboard USB Mouse Virtual/PS 2 VMware Mouse Display Display 1: Emulated 1024px768p Ethernet controller Emulated Intel 82574L Gigabit Ethernet Internal devices QEMU emulated Audio subsystem Network Local Network Connection from host Power Control None Power supply Power Button Emulated","title":"Hardware Configuration Matrix"},{"location":"variants/qemu_q35/hardware-matrix/#hardware-configuration-matrix","text":"","title":"Hardware configuration matrix"},{"location":"variants/qemu_q35/hardware-matrix/#introduction","text":"This document describes the devices emulated by the QEMU Q35.","title":"Introduction"},{"location":"variants/qemu_q35/hardware-matrix/#qemu-q35","text":"Component Description CPU QEMU emulated with Q35 emulated chipset RAM Slot 1: QEMU DIMM CDROM QEMU DVD-ROM USB Keyboard AT Translated Set 2 Keyboard USB Mouse Virtual/PS 2 VMware Mouse Display Display 1: Emulated 1024px768p Ethernet controller Emulated Intel 82574L Gigabit Ethernet Internal devices QEMU emulated Audio subsystem Network Local Network Connection from host Power Control None Power supply Power Button Emulated","title":"QEMU Q35"},{"location":"variants/qemu_q35/initial-deployment/","text":"Initial Deployment Initial deployment of Dasharo OVMF firmware on QEMU Q35 does not need any special actions. QEMU Q35 is an emulated platform, not real hardware. Running the Dasharo OVMF is as simple as invoking a QEMU command: qemu-system-x86_64 -machine q35,smm = on \\ -global driver = cfi.pflash01,property = secure,value = on \\ -drive if = pflash,format = raw,unit = 0 ,file = Build/OvmfX64/RELEASE_GCC5/FV/OVMF_CODE.fd,readonly = on \\ -drive if = pflash,format = raw,unit = 1 ,file = Build/OvmfX64/RELEASE_GCC5/FV/OVMF_VARS.fd \\ -debugcon file:debug.log -global isa-debugcon.iobase = 0x402 \\ -global ICH9-LPC.disable_s3 = 1","title":"Initial Deployment"},{"location":"variants/qemu_q35/initial-deployment/#initial-deployment","text":"Initial deployment of Dasharo OVMF firmware on QEMU Q35 does not need any special actions. QEMU Q35 is an emulated platform, not real hardware. Running the Dasharo OVMF is as simple as invoking a QEMU command: qemu-system-x86_64 -machine q35,smm = on \\ -global driver = cfi.pflash01,property = secure,value = on \\ -drive if = pflash,format = raw,unit = 0 ,file = Build/OvmfX64/RELEASE_GCC5/FV/OVMF_CODE.fd,readonly = on \\ -drive if = pflash,format = raw,unit = 1 ,file = Build/OvmfX64/RELEASE_GCC5/FV/OVMF_VARS.fd \\ -debugcon file:debug.log -global isa-debugcon.iobase = 0x402 \\ -global ICH9-LPC.disable_s3 = 1","title":"Initial Deployment"},{"location":"variants/qemu_q35/overview/","text":"Overview Releases - Groups information about all releases. Building manual - describes how to build Dasharo (UEFI) for the QEMU Emulator Q35 Machine type. Test matrix - describes the validation scope used during the Dasharo firmware validation procedure. Development - describes information for running Dasharo OVMF in QEMU Q35 machine and for Dasharo Developers. Initial deployment - QEMU is an emulation environment and not real hardware thus firmware deployment is not applicable. Firmware update - QEMU is an emulation environment and not real hardware thus firmware update is not applicable. Recovery - QEMU is an emulation environment and not a real hardware thus firmware recovery is not applicable. Hardware configuration matrix - describes about the devices emulated by QEMU. Useful documents EDK2 OVMF Package Documentation Dasharo EDK2 repo for the reference","title":"Overview"},{"location":"variants/qemu_q35/overview/#overview","text":"Releases - Groups information about all releases. Building manual - describes how to build Dasharo (UEFI) for the QEMU Emulator Q35 Machine type. Test matrix - describes the validation scope used during the Dasharo firmware validation procedure. Development - describes information for running Dasharo OVMF in QEMU Q35 machine and for Dasharo Developers. Initial deployment - QEMU is an emulation environment and not real hardware thus firmware deployment is not applicable. Firmware update - QEMU is an emulation environment and not real hardware thus firmware update is not applicable. Recovery - QEMU is an emulation environment and not a real hardware thus firmware recovery is not applicable. Hardware configuration matrix - describes about the devices emulated by QEMU.","title":"Overview"},{"location":"variants/qemu_q35/overview/#useful-documents","text":"EDK2 OVMF Package Documentation Dasharo EDK2 repo for the reference","title":"Useful documents"},{"location":"variants/qemu_q35/recovery/","text":"Recovery The recovery process of Dasharo OVMF firmware on QEMU Q35 does not need any special actions. QEMU Q35 is an emulated platform, not real hardware, so it doesn't brick itself. If something goes wrong simply rerun the QEMU command: qemu-system-x86_64 -machine q35,smm = on \\ -global driver = cfi.pflash01,property = secure,value = on \\ -drive if = pflash,format = raw,unit = 0 ,file = Build/OvmfX64/RELEASE_GCC5/FV/OVMF_CODE.fd,readonly = on \\ -drive if = pflash,format = raw,unit = 1 ,file = Build/OvmfX64/RELEASE_GCC5/FV/OVMF_VARS.fd \\ -debugcon file:debug.log -global isa-debugcon.iobase = 0x402 \\ -global ICH9-LPC.disable_s3 = 1 Or build a debug image, gather the logs in debug.log file qemu-system-x86_64 -machine q35,smm = on \\ -global driver = cfi.pflash01,property = secure,value = on \\ -drive if = pflash,format = raw,unit = 0 ,file = Build/OvmfX64/DEBUG_GCC5/FV/OVMF_CODE.fd,readonly = on \\ -drive if = pflash,format = raw,unit = 1 ,file = Build/OvmfX64/DEBUG_GCC5/FV/OVMF_VARS.fd \\ -debugcon file:debug.log -global isa-debugcon.iobase = 0x402 \\ -global ICH9-LPC.disable_s3 = 1 and report an issue with attached log.","title":"Recovery"},{"location":"variants/qemu_q35/recovery/#recovery","text":"The recovery process of Dasharo OVMF firmware on QEMU Q35 does not need any special actions. QEMU Q35 is an emulated platform, not real hardware, so it doesn't brick itself. If something goes wrong simply rerun the QEMU command: qemu-system-x86_64 -machine q35,smm = on \\ -global driver = cfi.pflash01,property = secure,value = on \\ -drive if = pflash,format = raw,unit = 0 ,file = Build/OvmfX64/RELEASE_GCC5/FV/OVMF_CODE.fd,readonly = on \\ -drive if = pflash,format = raw,unit = 1 ,file = Build/OvmfX64/RELEASE_GCC5/FV/OVMF_VARS.fd \\ -debugcon file:debug.log -global isa-debugcon.iobase = 0x402 \\ -global ICH9-LPC.disable_s3 = 1 Or build a debug image, gather the logs in debug.log file qemu-system-x86_64 -machine q35,smm = on \\ -global driver = cfi.pflash01,property = secure,value = on \\ -drive if = pflash,format = raw,unit = 0 ,file = Build/OvmfX64/DEBUG_GCC5/FV/OVMF_CODE.fd,readonly = on \\ -drive if = pflash,format = raw,unit = 1 ,file = Build/OvmfX64/DEBUG_GCC5/FV/OVMF_VARS.fd \\ -debugcon file:debug.log -global isa-debugcon.iobase = 0x402 \\ -global ICH9-LPC.disable_s3 = 1 and report an issue with attached log.","title":"Recovery"},{"location":"variants/qemu_q35/releases/","text":"Release Notes Following Release Notes describe status of Open Source Firmware development for QEMU Q35 (Emulator). v0.1.0 - 2023-01-20 Added Enabled TPM Support. Secure Boot Support for Q35 machine. Option to reset Secure Boot keys to defaults. Dasharo System Features. Dasharo setup password. OPAL disk password support. SATA disk password support. SMM Feature enabled.","title":"Releases"},{"location":"variants/qemu_q35/releases/#release-notes","text":"Following Release Notes describe status of Open Source Firmware development for QEMU Q35 (Emulator).","title":"Release Notes"},{"location":"variants/qemu_q35/releases/#v010-2023-01-20","text":"","title":"v0.1.0 - 2023-01-20"},{"location":"variants/qemu_q35/test-matrix/","text":"Test matrix About The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary. Note, that the below-described test scope is used during Dasharo Certification Procedure for tested platform: QEMU Q35 Machine Module: Dasharo compatibility No. Supported test suite Test suite ID Supported test cases 1. UEFI compatible interface EFI All 2. UEFI Shell USH All 3. Display ports and LCD support DSP DSP001.001 4. Debian Stable and Ubuntu LTS support LBT LBT001.001, LBT001.002, LBT002.001, LBT002.002, LBT003.001, LBT003.002, LBT004.001, LBT004.002 5. Network boot PXE All 6. Windows booting WBT All 7. Qubes OS Support QBS QBS001.001, QBS001.002 8. CPU status CPU All 9. UEFI Setup password PSW All Module: Dasharo security No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001, TPM002.001 and TPM003.001 2. Secure Boot support SBO All","title":"Test matrix"},{"location":"variants/qemu_q35/test-matrix/#test-matrix","text":"","title":"Test matrix"},{"location":"variants/qemu_q35/test-matrix/#about","text":"The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary. Note, that the below-described test scope is used during Dasharo Certification Procedure for tested platform: QEMU Q35 Machine","title":"About"},{"location":"variants/qemu_q35/test-matrix/#module-dasharo-compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. UEFI compatible interface EFI All 2. UEFI Shell USH All 3. Display ports and LCD support DSP DSP001.001 4. Debian Stable and Ubuntu LTS support LBT LBT001.001, LBT001.002, LBT002.001, LBT002.002, LBT003.001, LBT003.002, LBT004.001, LBT004.002 5. Network boot PXE All 6. Windows booting WBT All 7. Qubes OS Support QBS QBS001.001, QBS001.002 8. CPU status CPU All 9. UEFI Setup password PSW All","title":"Module: Dasharo compatibility"},{"location":"variants/qemu_q35/test-matrix/#module-dasharo-security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001, TPM002.001 and TPM003.001 2. Secure Boot support SBO All","title":"Module: Dasharo security"},{"location":"variants/supermicro_x11_lga1151_series/building-manual/","text":"Supermicro X11 LGA1151 Series - building manual Please read the overview page first!","title":"Building manual"},{"location":"variants/supermicro_x11_lga1151_series/building-manual/#supermicro-x11-lga1151-series-building-manual","text":"Please read the overview page first!","title":"Supermicro X11 LGA1151 Series - building manual"},{"location":"variants/supermicro_x11_lga1151_series/faq/","text":"FAQ Please read the overview page first! How to identify my mainboard model? ~# dmidecode -t baseboard # dmidecode 3.0 Getting SMBIOS data from sysfs. SMBIOS 3 .0 present. Handle 0x0002, DMI type 2 , 15 bytes Base Board Information Manufacturer: Supermicro Product Name: X11SSH-TF Version: 1 .01 Serial Number: WM123S123456 Asset Tag: To be filled by O.E.M. Features: Board is a hosting board Board is replaceable Location In Chassis: To be filled by O.E.M. Chassis Handle: 0x0003 Type: Motherboard Contained Object Handles: 0 Handle 0x0026, DMI type 41 , 11 bytes Onboard Device Reference Designation: ASPEED Video AST2400 Type: Video Status: Enabled Type Instance: 1 Bus Address: 0000 :03:00.0 Handle 0x0027, DMI type 41 , 11 bytes Onboard Device Reference Designation: Intel LAN X550-AT2 #1 Type: Ethernet Status: Enabled Type Instance: 1 Bus Address: 0000 :04:00.0 Handle 0x0028, DMI type 41 , 11 bytes Onboard Device Reference Designation: Intel LAN X550-AT2 #2 Type: Ethernet Status: Enabled Type Instance: 2 Bus Address: 0000 :04:00.1 Handle 0x0029, DMI type 41 , 11 bytes Onboard Device Reference Designation: Avago SAS 3008 Type: SAS Controller Status: Disabled Type Instance: 1 Bus Address: 0000 :ff:00.0","title":"FAQ"},{"location":"variants/supermicro_x11_lga1151_series/faq/#faq","text":"Please read the overview page first!","title":"FAQ"},{"location":"variants/supermicro_x11_lga1151_series/faq/#how-to-identify-my-mainboard-model","text":"~# dmidecode -t baseboard # dmidecode 3.0 Getting SMBIOS data from sysfs. SMBIOS 3 .0 present. Handle 0x0002, DMI type 2 , 15 bytes Base Board Information Manufacturer: Supermicro Product Name: X11SSH-TF Version: 1 .01 Serial Number: WM123S123456 Asset Tag: To be filled by O.E.M. Features: Board is a hosting board Board is replaceable Location In Chassis: To be filled by O.E.M. Chassis Handle: 0x0003 Type: Motherboard Contained Object Handles: 0 Handle 0x0026, DMI type 41 , 11 bytes Onboard Device Reference Designation: ASPEED Video AST2400 Type: Video Status: Enabled Type Instance: 1 Bus Address: 0000 :03:00.0 Handle 0x0027, DMI type 41 , 11 bytes Onboard Device Reference Designation: Intel LAN X550-AT2 #1 Type: Ethernet Status: Enabled Type Instance: 1 Bus Address: 0000 :04:00.0 Handle 0x0028, DMI type 41 , 11 bytes Onboard Device Reference Designation: Intel LAN X550-AT2 #2 Type: Ethernet Status: Enabled Type Instance: 2 Bus Address: 0000 :04:00.1 Handle 0x0029, DMI type 41 , 11 bytes Onboard Device Reference Designation: Avago SAS 3008 Type: SAS Controller Status: Disabled Type Instance: 1 Bus Address: 0000 :ff:00.0","title":"How to identify my mainboard model?"},{"location":"variants/supermicro_x11_lga1151_series/firmware-update/","text":"Firmware update Please read the overview page first! Following documentation describe process of Dasharo open-source firmware distribution update.","title":"Firmware update"},{"location":"variants/supermicro_x11_lga1151_series/firmware-update/#firmware-update","text":"Please read the overview page first! Following documentation describe process of Dasharo open-source firmware distribution update.","title":"Firmware update"},{"location":"variants/supermicro_x11_lga1151_series/hardware-matrix/","text":"Hardware configuration matrix Please read the overview page first! The tables below contain information about current components of the testing environment for Supermicro X11 LGA1151 Series available in 3mdeb testing laboratory and in hands of community members. Supermicro X11SSH-TF (pietrushnic) Component Description CPU Intel Core iTBD CPU Cooler GPU N/A RAM TBD HDD TBD SSD TBD Flash memory TBD Network Local network wired connection Attached devices 1. TBD USB stick Power Supply TBD Power Control 1. Sonoff TBD Remote Testing Environment 1. RTE TBD","title":"Hardware Configuration Matrix"},{"location":"variants/supermicro_x11_lga1151_series/hardware-matrix/#hardware-configuration-matrix","text":"Please read the overview page first! The tables below contain information about current components of the testing environment for Supermicro X11 LGA1151 Series available in 3mdeb testing laboratory and in hands of community members.","title":"Hardware configuration matrix"},{"location":"variants/supermicro_x11_lga1151_series/hardware-matrix/#supermicro-x11ssh-tf-pietrushnic","text":"Component Description CPU Intel Core iTBD CPU Cooler GPU N/A RAM TBD HDD TBD SSD TBD Flash memory TBD Network Local network wired connection Attached devices 1. TBD USB stick Power Supply TBD Power Control 1. Sonoff TBD Remote Testing Environment 1. RTE TBD","title":"Supermicro X11SSH-TF (pietrushnic)"},{"location":"variants/supermicro_x11_lga1151_series/initial-deployment/","text":"Initial deployment We strongly recommend following these official instructions. The official guide has a lot of collaborative effort put into covering all of the edge cases and is regularly tested. Following these instructions to the letter without skipping, reordering or adding any steps will give you a proper Dasharo installation unless there's a hardware issue. We strongly recommend against following unofficial guides deviating in any way from the official instructions. If you have trouble with the installation process, ask for help on the official Dasharo chat channel . There are almost always people around willing to help with it. Before asking for help, make an attempt to follow the guide on your own and then ask for help with anything you get stuck on. Hardware preparation Please use Supermicro Quick Reference Guide for you mainboard e.g. X11SSH-TF . Find JPME2 and change its state to position 2-3, which means ME Manufacturing Mode enabled. Booting DTS over network For seamless and storageless deployment one can use BMC virtual floppy functionality to mount a floppy image containing iPXE. iPXE will allow to boot DTS over network without much effort. The image file can be downloaded from 3mdeb FTP server . If you wish to build the image, please follow instructions in Building iPXE floppy image section. To boot from the iPXE image, please do the following: Download or build the iPXE image on your host machine. Log in to the BMC dashboard. Select the floppy image through Browse button: Upload image to the BMC in the Virtual Media panel, by clicking Upload : Go to Remote Control -> iKVM/HTML5 and start iKVM/HTML5 remote control window. Use Power Control -> Set Power On Enter Boot Menu with F11. Select UEFI: ATEN Virtual Floppy 3000, Partition 1 . Wait for the embedded menu to show up (it may take up to 30 seconds for the UEFI protocols to execute during iPXE initialization - proprietary UEFI banzai...). Choose Dasharo Tools Suite from the menu: ------------------------ Dasharo Network Boot Menu ------------------------ Autoboot (DHCP) Dasharo Tools Suite OS installation (netboot.xyz official server) iPXE Shell Vendor BIOS backup Please follow DTS backup guide . Installing Dasharo with DTS TBD Building iPXE floppy image To create a floppy disk image for Supermicro BMC Virtual Media, you will need a Linux OS with docker installed. Then follow steps below: Compile iPXE (a sample revision has been taken from top of master branch on 25.01.2023, iPXE unfortunately stopped tagging the code in December 2020). Following set of commands will embed Dasharo iPXE menu script, enable HTTPS and EFI image support and provide custom build ID command to ensure build reproducibility: Clone iPXE repository: git clone https://github.com/ipxe/ipxe.git cd ipxe git checkout 4bffe0f0d9d0e1496ae5cfb7579e813277c29b0f NOTE : As mentioned above this is sample revision since iPXE code is not tagged. Get Dasharo menu for network booting. wget https://raw.githubusercontent.com/Dasharo/dasharo-blobs/46cc16f6d8f0ed9d057fdd20f15bb89ce5b8d212/dasharo/dasharo.ipxe Modify iPXE build configuration through general.h sed \"s|//#define\\s*IMAGE_SCRIPT.*|#define IMAGE_SCRIPT|\" src/config/general.h > src/config/general.h.tmp mv src/config/general.h.tmp src/config/general.h sed \"s|.*DOWNLOAD_PROTO_HTTPS|#define DOWNLOAD_PROTO_HTTPS|g\" src/config/general.h > src/config/general.h.tmp mv src/config/general.h.tmp src/config/general.h sed \"s|.*IMAGE_EFI|#define IMAGE_EFI|g\" src/config/general.h > src/config/general.h.tmp mv src/config/general.h.tmp src/config/general.h Use coreboot-sdk container to build iPXE binry: docker run --rm -it -v $PWD :/home/coreboot/ipxe -w /home/coreboot/ipxe \\ coreboot/coreboot-sdk:2022-12-18_3b32af950d /bin/bash Inside container: make sure you use correct cross-toolchain: export CROSS_COMPILE = \"x86_64-elf-\" Inside container: start compailation: make -C src bin-x86_64-efi-sb/ipxe.efi EMBED = $PWD /dasharo.ipxe BUILD_ID_CMD = \"echo 0x1234567890\" \\ EXTRA_CFLAGS = \"-Wno-address-of-packed-member -m64 -fuse-ld=bfd \\ -Wl,--build-id=none -fno-delete-null-pointer-checks -Wlogical-op -march=nocona \\ -malign-data=abi -mcmodel=large -mno-red-zone -fno-pic\" Exit docker container with exit command. Create image file: dd if = /dev/zero of = ipxe.img count = 1 bs = 1440K Make FAT filesystem on the image file: sudo mkfs.fat --mbr = y ipxe.img Mount the image file: sudo mount ipxe.img /mnt Copy the iPXE to the mounted image file: sudo mkdir -p /mnt/EFI/BOOT/ && \\ sudo cp src/bin-x86_64-efi-sb/ipxe.efi /mnt/EFI/BOOT/BOOTX64.EFI Unmount the image file: sudo umount /mnt The resulting ipxe.img file is now ready to be attached as Virtual Media on Supermicro BMC.","title":"Initial deployment"},{"location":"variants/supermicro_x11_lga1151_series/initial-deployment/#initial-deployment","text":"We strongly recommend following these official instructions. The official guide has a lot of collaborative effort put into covering all of the edge cases and is regularly tested. Following these instructions to the letter without skipping, reordering or adding any steps will give you a proper Dasharo installation unless there's a hardware issue. We strongly recommend against following unofficial guides deviating in any way from the official instructions. If you have trouble with the installation process, ask for help on the official Dasharo chat channel . There are almost always people around willing to help with it. Before asking for help, make an attempt to follow the guide on your own and then ask for help with anything you get stuck on.","title":"Initial deployment"},{"location":"variants/supermicro_x11_lga1151_series/initial-deployment/#hardware-preparation","text":"Please use Supermicro Quick Reference Guide for you mainboard e.g. X11SSH-TF . Find JPME2 and change its state to position 2-3, which means ME Manufacturing Mode enabled.","title":"Hardware preparation"},{"location":"variants/supermicro_x11_lga1151_series/initial-deployment/#booting-dts-over-network","text":"For seamless and storageless deployment one can use BMC virtual floppy functionality to mount a floppy image containing iPXE. iPXE will allow to boot DTS over network without much effort. The image file can be downloaded from 3mdeb FTP server . If you wish to build the image, please follow instructions in Building iPXE floppy image section. To boot from the iPXE image, please do the following: Download or build the iPXE image on your host machine. Log in to the BMC dashboard. Select the floppy image through Browse button: Upload image to the BMC in the Virtual Media panel, by clicking Upload : Go to Remote Control -> iKVM/HTML5 and start iKVM/HTML5 remote control window. Use Power Control -> Set Power On Enter Boot Menu with F11. Select UEFI: ATEN Virtual Floppy 3000, Partition 1 . Wait for the embedded menu to show up (it may take up to 30 seconds for the UEFI protocols to execute during iPXE initialization - proprietary UEFI banzai...). Choose Dasharo Tools Suite from the menu: ------------------------ Dasharo Network Boot Menu ------------------------ Autoboot (DHCP) Dasharo Tools Suite OS installation (netboot.xyz official server) iPXE Shell","title":"Booting DTS over network"},{"location":"variants/supermicro_x11_lga1151_series/initial-deployment/#vendor-bios-backup","text":"Please follow DTS backup guide .","title":"Vendor BIOS backup"},{"location":"variants/supermicro_x11_lga1151_series/initial-deployment/#installing-dasharo-with-dts","text":"TBD","title":"Installing Dasharo with DTS"},{"location":"variants/supermicro_x11_lga1151_series/overview/","text":"Overview Supermicro X11 LGA1151 Series are mainboards dedicated for servers and workstations. Most notable examples of this hardware are X11SSH-TF and X11SSH-F . Ideal motherboard for NAS servers, with a PCIE x16 slot to potentially accommodate a graphics card. To learn more about our motivation for the coreboot port and Dasharo compatible with Supermicro X11 LGA1151 Series please check references section. If you want to build, initially deploy, update or recover your setup please check documentation sections on the left. Status Dasharo compatible with Supermicro X11 LGA1151 Series is a community-driven effort. We work on this in our free time, since we have no sponsor for this project. To address the issue we organize virtual hackathon on Dasharo Matrix whenever we can. At this point two communinty members are engaged ( collector-ynh with X11SSH-F and pietrushnic with X11SSH-TF, we also have X11SSH-TF in 3mdeb lab). Feel free to conact us if you wan to talk about project status. Please note that Dasharo compatilbe with Supermicro X11 LGA1151 Series may work with various boards from this family, at this stage only X11SSH-F and X11SSH-TF can be treated as tested. This state can change when we will enter more mature state with transparent validation results published in Releases section and hardware configuration matrix used for testing. We may also consider CPU, DRAM and GPU HCL sections in documentation. If you are interested in this project, please consider joining the community-dirven effort or supporting us in other way . The most advanced code is on development branch . This code supports only Dasharo (coreboot+UEFI) . Work in progress documentation can be found here . NOTE : We decided to follow divide and conquer strategy, every piece of contribution which was verified and reviewed will be merged even if that is just small part of bigger documentation . Otherwise we will never move forward. References Mullvad: Open-source firmware is the future Green TekSolutions: The first motherboard for servers to use CoreBoot - X11SSH-TF coreboot: X11 LGA1151 Series documentation coreboot: Supermicro X11SSH-F/X11SSH-LN4F documentation","title":"Overview"},{"location":"variants/supermicro_x11_lga1151_series/overview/#overview","text":"Supermicro X11 LGA1151 Series are mainboards dedicated for servers and workstations. Most notable examples of this hardware are X11SSH-TF and X11SSH-F . Ideal motherboard for NAS servers, with a PCIE x16 slot to potentially accommodate a graphics card. To learn more about our motivation for the coreboot port and Dasharo compatible with Supermicro X11 LGA1151 Series please check references section. If you want to build, initially deploy, update or recover your setup please check documentation sections on the left.","title":"Overview"},{"location":"variants/supermicro_x11_lga1151_series/overview/#status","text":"Dasharo compatible with Supermicro X11 LGA1151 Series is a community-driven effort. We work on this in our free time, since we have no sponsor for this project. To address the issue we organize virtual hackathon on Dasharo Matrix whenever we can. At this point two communinty members are engaged ( collector-ynh with X11SSH-F and pietrushnic with X11SSH-TF, we also have X11SSH-TF in 3mdeb lab). Feel free to conact us if you wan to talk about project status. Please note that Dasharo compatilbe with Supermicro X11 LGA1151 Series may work with various boards from this family, at this stage only X11SSH-F and X11SSH-TF can be treated as tested. This state can change when we will enter more mature state with transparent validation results published in Releases section and hardware configuration matrix used for testing. We may also consider CPU, DRAM and GPU HCL sections in documentation. If you are interested in this project, please consider joining the community-dirven effort or supporting us in other way . The most advanced code is on development branch . This code supports only Dasharo (coreboot+UEFI) . Work in progress documentation can be found here . NOTE : We decided to follow divide and conquer strategy, every piece of contribution which was verified and reviewed will be merged even if that is just small part of bigger documentation . Otherwise we will never move forward.","title":"Status"},{"location":"variants/supermicro_x11_lga1151_series/overview/#references","text":"Mullvad: Open-source firmware is the future Green TekSolutions: The first motherboard for servers to use CoreBoot - X11SSH-TF coreboot: X11 LGA1151 Series documentation coreboot: Supermicro X11SSH-F/X11SSH-LN4F documentation","title":"References"},{"location":"variants/supermicro_x11_lga1151_series/recovery/","text":"Recovery Please read the overview page first! BIOS Update through BMC Following instruction was tested on: X11SSH-TF v1.01 For information how to identify your mainboard model pelase check faq . Following documentation describes the process of recovering hardware from brick state with through BMC BIOS Update feature. This feature can be used also for initial deployment and Firmware Update . Requirements License activation Without active license you can't use BIOS Update feature. License key can be generated using kasuganosoras scripts and entered through BMC web interface ( Miscellaneous->Activate License ). Up to date firmware Please make sure you using firmware revision 01.60 If not please follow IPMI Firmware Update_NEW.pdf instruction from package that you can download here . Unfortunately most efficient way to interact with proprietary BMC is to use Supermicro proprietary closed source tools: Supermicro Update Manager please download and unpack archive. Backup or Supermicro BIOS update please download and unpack archive.","title":"Recovery"},{"location":"variants/supermicro_x11_lga1151_series/recovery/#recovery","text":"Please read the overview page first!","title":"Recovery"},{"location":"variants/supermicro_x11_lga1151_series/recovery/#bios-update-through-bmc","text":"Following instruction was tested on: X11SSH-TF v1.01 For information how to identify your mainboard model pelase check faq . Following documentation describes the process of recovering hardware from brick state with through BMC BIOS Update feature. This feature can be used also for initial deployment and Firmware Update .","title":"BIOS Update through BMC"},{"location":"variants/supermicro_x11_lga1151_series/releases/","text":"Dasharo compatible with Supermicro X11 LGA1151 Series Please read the overview page first!","title":"Releases"},{"location":"variants/supermicro_x11_lga1151_series/releases/#dasharo-compatible-with-supermicro-x11-lga1151-series","text":"Please read the overview page first!","title":"Dasharo compatible with Supermicro X11 LGA1151 Series"},{"location":"variants/supermicro_x11_lga1151_series/test-matrix/","text":"Test matrix - MSI Z690-A WIFI DDR4 Please read the overview page first! About The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.","title":"Test matrix"},{"location":"variants/supermicro_x11_lga1151_series/test-matrix/#test-matrix-msi-z690-a-wifi-ddr4","text":"Please read the overview page first!","title":"Test matrix - MSI Z690-A WIFI DDR4"},{"location":"variants/supermicro_x11_lga1151_series/test-matrix/#about","text":"The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.","title":"About"},{"location":"variants/talos_2/building-manual/","text":"Building manual Building coreboot To build coreboot image, follow the steps below: Clone the coreboot repository: git clone --depth = 1 https://github.com/Dasharo/coreboot.git -b raptor-cs_talos-2/rel_v0.7.0 Get the submodules: cd coreboot git submodule update --init --recursive --checkout Start docker container: docker run --rm -it \\ -v $PWD :/home/coreboot/coreboot \\ -w /home/coreboot/coreboot \\ -u \" $( id -u ) : $( id -g ) \" \\ coreboot/coreboot-sdk:0ad5fbd48d /bin/bash Inside of the container, configure and start the build process: ( docker ) cp configs/config.raptor-cs-talos-2 .config ( docker ) make olddefconfig ( docker ) make Building heads Clone the heads repository: git clone --depth = 1 https://github.com/Dasharo/heads.git -b raptor-cs_talos-2/release Start docker container: cd heads docker run --rm -it -v $PWD : $PWD -w $PWD -u \" $( id -u ) : $( id -g ) \" 3mdeb/heads-docker:2.4.0 /bin/bash Build: make BOARD = talos-2","title":"Building manual"},{"location":"variants/talos_2/building-manual/#building-manual","text":"","title":"Building manual"},{"location":"variants/talos_2/building-manual/#building-coreboot","text":"To build coreboot image, follow the steps below: Clone the coreboot repository: git clone --depth = 1 https://github.com/Dasharo/coreboot.git -b raptor-cs_talos-2/rel_v0.7.0 Get the submodules: cd coreboot git submodule update --init --recursive --checkout Start docker container: docker run --rm -it \\ -v $PWD :/home/coreboot/coreboot \\ -w /home/coreboot/coreboot \\ -u \" $( id -u ) : $( id -g ) \" \\ coreboot/coreboot-sdk:0ad5fbd48d /bin/bash Inside of the container, configure and start the build process: ( docker ) cp configs/config.raptor-cs-talos-2 .config ( docker ) make olddefconfig ( docker ) make","title":"Building coreboot"},{"location":"variants/talos_2/building-manual/#building-heads","text":"Clone the heads repository: git clone --depth = 1 https://github.com/Dasharo/heads.git -b raptor-cs_talos-2/release Start docker container: cd heads docker run --rm -it -v $PWD : $PWD -w $PWD -u \" $( id -u ) : $( id -g ) \" 3mdeb/heads-docker:2.4.0 /bin/bash Build: make BOARD = talos-2","title":"Building heads"},{"location":"variants/talos_2/conferences/","text":"Conference materials OpenPOWER Summit, 2021 coreboot on POWER9 - Piotr Kr\u00f3l OpenPOWER Summit, 2020 POWER9 Support in coreboot - Micha\u0142 \u017bygowski Fosdem, 2021 Status of OpenPOWER support in coreboot - Micha\u0142 \u017bygowski Open Source Firmware Conference, 2020 POWER9 support in coreboot - Micha\u0142 \u017bygowski","title":"Conference materials"},{"location":"variants/talos_2/conferences/#conference-materials","text":"","title":"Conference materials"},{"location":"variants/talos_2/conferences/#openpower-summit-2021","text":"coreboot on POWER9 - Piotr Kr\u00f3l","title":"OpenPOWER Summit, 2021"},{"location":"variants/talos_2/conferences/#openpower-summit-2020","text":"POWER9 Support in coreboot - Micha\u0142 \u017bygowski","title":"OpenPOWER Summit, 2020"},{"location":"variants/talos_2/conferences/#fosdem-2021","text":"Status of OpenPOWER support in coreboot - Micha\u0142 \u017bygowski","title":"Fosdem, 2021"},{"location":"variants/talos_2/conferences/#open-source-firmware-conference-2020","text":"POWER9 support in coreboot - Micha\u0142 \u017bygowski","title":"Open Source Firmware Conference, 2020"},{"location":"variants/talos_2/firmware-update/","text":"Firmware update The following documentation describes the process of Dasharo open-source firmware update. Copy the binaries to the BMC: scp build/bootblock.signed.ecc root@<BMC_IP>:/tmp/bootblock.signed.ecc scp build/coreboot.rom.signed.ecc root@<BMC_IP>:/tmp/coreboot.rom.signed.ecc Flash the binaries by replacing the HBB partition (execute from BMC): pflash -e -P HBB -p /tmp/bootblock.signed.ecc pflash -e -P HBI -p /tmp/coreboot.rom.signed.ecc Log into the BMC GUI at https://<BMC_IP> . Enter the Server power operations ( https://<BMC_IP>/#/server-control/power-operations ) and invoke warm reboot . Go to Serial over LAN remote console ( https://<BMC_IP>/#/server-control/remote-console ). Enjoy the updated firmware running on Talos II.","title":"Firmware update"},{"location":"variants/talos_2/firmware-update/#firmware-update","text":"The following documentation describes the process of Dasharo open-source firmware update. Copy the binaries to the BMC: scp build/bootblock.signed.ecc root@<BMC_IP>:/tmp/bootblock.signed.ecc scp build/coreboot.rom.signed.ecc root@<BMC_IP>:/tmp/coreboot.rom.signed.ecc Flash the binaries by replacing the HBB partition (execute from BMC): pflash -e -P HBB -p /tmp/bootblock.signed.ecc pflash -e -P HBI -p /tmp/coreboot.rom.signed.ecc Log into the BMC GUI at https://<BMC_IP> . Enter the Server power operations ( https://<BMC_IP>/#/server-control/power-operations ) and invoke warm reboot . Go to Serial over LAN remote console ( https://<BMC_IP>/#/server-control/remote-console ). Enjoy the updated firmware running on Talos II.","title":"Firmware update"},{"location":"variants/talos_2/hardware-matrix/","text":"Hardware configuration matrix Introduction This document describes the hardware configuration used for validation of the coreboot port on the Talos II platform. Talos II Component Description 1st CPU IBM POWER9 \u201cSforza\u201d 02CY650 CPU Cooler 2nd CPU IBM POWER9 \u201cSforza\u201d 02CY650 CPU Cooler SSD Intel 670p 512 GB M26472-201 NVME RAM Crucial CT8G4RF88266 Flash memory Micron MT25QL512ABB8ESF-0SIT Network Local network wired connection Attached devices 1. SanDisk USB 3.2Gen1 16 GB 2. Logitech, Inc. Keyboard K120 Ethernet 2x Broadcom BCM5719 Power Supply Corsair TX550M Power Control Sonoff S20 switch Remote Control OpenBMC Note: for single CPU testing the 2nd CPU is dismantled. Following RAM configurations were tested and are proved to be properly initialized. MCS0, MCA0 DIMM0: 1Rx4 16GB PC4-2666V-RC2-12-PA0 DIMM1: not installed MCS0, MCA1 DIMM0: 1Rx8 8GB PC4-2666V-RD1-12 DIMM1: not installed MCS1, MCA0 DIMM0: 2Rx4 32GB PC4-2666V-RB2-12-MA0 DIMM1: not installed MCS1, MCA1 DIMM0: 2Rx8 16GB PC4-2666V-RE2-12 DIMM1: not installed All 3 major DRAM vendors are supported, namely Samsung, Micron and Hynix.","title":"Hardware configuration matrix"},{"location":"variants/talos_2/hardware-matrix/#hardware-configuration-matrix","text":"","title":"Hardware configuration matrix"},{"location":"variants/talos_2/hardware-matrix/#introduction","text":"This document describes the hardware configuration used for validation of the coreboot port on the Talos II platform.","title":"Introduction"},{"location":"variants/talos_2/hardware-matrix/#talos-ii","text":"Component Description 1st CPU IBM POWER9 \u201cSforza\u201d 02CY650 CPU Cooler 2nd CPU IBM POWER9 \u201cSforza\u201d 02CY650 CPU Cooler SSD Intel 670p 512 GB M26472-201 NVME RAM Crucial CT8G4RF88266 Flash memory Micron MT25QL512ABB8ESF-0SIT Network Local network wired connection Attached devices 1. SanDisk USB 3.2Gen1 16 GB 2. Logitech, Inc. Keyboard K120 Ethernet 2x Broadcom BCM5719 Power Supply Corsair TX550M Power Control Sonoff S20 switch Remote Control OpenBMC Note: for single CPU testing the 2nd CPU is dismantled. Following RAM configurations were tested and are proved to be properly initialized. MCS0, MCA0 DIMM0: 1Rx4 16GB PC4-2666V-RC2-12-PA0 DIMM1: not installed MCS0, MCA1 DIMM0: 1Rx8 8GB PC4-2666V-RD1-12 DIMM1: not installed MCS1, MCA0 DIMM0: 2Rx4 32GB PC4-2666V-RB2-12-MA0 DIMM1: not installed MCS1, MCA1 DIMM0: 2Rx8 16GB PC4-2666V-RE2-12 DIMM1: not installed All 3 major DRAM vendors are supported, namely Samsung, Micron and Hynix.","title":"Talos II"},{"location":"variants/talos_2/initial-deployment/","text":"Initial deployment coreboot installation Copy the binaries to the BMC (assuming in the coreboot root directory): scp build/bootblock.signed.ecc root@<BMC_IP>:/tmp/bootblock.signed.ecc scp build/coreboot.rom.signed.ecc root@<BMC_IP>:/tmp/coreboot.rom.signed.ecc If that file is not present, use coreboot.rom instead Backup the HBB partition (for faster later recovery) by invoking this command on BMC: pflash -P HBB -r /tmp/hbb.bin pflash -P HBI -r /tmp/hbi.bin Flash the binaries by replacing HBB partition (execute from BMC): pflash -e -P HBB -p /tmp/bootblock.signed.ecc pflash -e -P HBI -p /tmp/coreboot.rom.signed.ecc Again, if that file is not present, use coreboot.rom instead Answer yes to the prompt and wait for the process to finish. Log into the BMC GUI again at https://<BMC_IP> . Enter the Server power operations ( https://<BMC_IP>/#/server-control/power-operations ) and invoke warm reboot . Go to Serial over LAN remote console ( https://<BMC_IP>/#/server-control/remote-console ). Wait for a while until coreboot shows up: Enjoy the coreboot running on Talos II. Optional: In order to recovery the platform quickly to healthy state, flash the HBB partition back with: pflash -e -P HBB -p /tmp/hbb.bin pflash -e -P HBI -p /tmp/hbi.bin Heads installation Copy the Heads binary to the BMC (assuming in the Heads root directory): scp build/zImage.bundled root@<BMC_IP>:/tmp/zImage.bundled Log in to the BMC: ssh root@<BMC_IP> Flash the BOOTKERNEL partition with Heads: pflash -e -P BOOTKERNEL -p /tmp/zImage.bundled Answer yes to the prompt and wait for the process to finish. Log into the BMC GUI at https://<BMC_IP>/ . Enter the Server power operations ( https://<BMC_IP>/#/server-control/power-operations ) and invoke warm reboot . Go to Serial over LAN remote console ( https://<BMC_IP>/#/server-control/remote-console ). Wait for a while until Heads shows up: Enjoy the Heads running on Talos II. Testing firmware images without flashing BMC firmware v2.00+ allows testing new firmware images without flashing the physical flash device. This makes testing and switching between two versions (e.g. Hostboot and coreboot) much faster and safer. There are two ways of doing so, here's a more convenient one that uses mboxctl : Read original flash: For earlier versions of coreboot port it is required to read from system that booted at least once, since some of the partitions are modified on the first boot. this is no longer necessary since v0.5.0. root@talos:~# pflash -r /tmp/talos.pnor This file may also be copied out of BMC to a secure place and serve as a backup of whole flash contents. Keep in mind that tmpfs size is limited and exceeding that limit may result in unresponsive BMC, which in most severe cases requires hard power cycle. \"Flashing\" modified partition(s): This is similar to flashing real device with two changes: no need to erase the flash and target file must be specified. New command looks like this: root@talos:~# pflash -f -P <partition> -p <partition>.bin -F /tmp/talos.pnor Since the real flash device is not used, backup can be skipped. The rest is like above: # bootblock pflash -f -P HBB -p /tmp/bootblock.signed.ecc -F /tmp/talos.pnor # coreboot pflash -f -P HBI -p /tmp/coreboot.rom.signed.ecc -F /tmp/talos.pnor # Heads pflash -f -P BOOTKERNEL -p /tmp/zImage.bundled -F /tmp/talos.pnor Mount the file as flash device: root@talos:~# mboxctl --backend file:/tmp/talos.pnor Sometimes this command fails with timeout, in that case repeat it until it succeeds. Optionally, success can be tested with: root@talos:~# mboxctl --lpc-state LPC Bus Maps: BMC Memory BMC Memory tells that emulated flash is used instead of real one. Host doesn't see any difference (except maybe different access times and erase block size), it still reads and writes PNOR the same way as with physical device. Start the platform as described in previous sections and test it. To get back to using real PNOR: root@talos:~# mboxctl --backend vpnor Failed to post message: Connection timed out root@talos:~# mboxctl --lpc-state LPC Bus Maps: Flash Device Even though that command reports failure, it maps LPC back to flash device. This can be tested with mboxctl --lpc-state . (Optional) Flash tested image to permanent storage: root@talos:~# pflash -E -p /tmp/talos.pnor The other method is described on Raptor's wiki and requires starting mboxd manually (still needs BMC firmware v2.00+). It's worth to take a look there because sometimes mboxd stops working ( mboxctl errors every time) and that page shows how it can be started.","title":"Initial deployment"},{"location":"variants/talos_2/initial-deployment/#initial-deployment","text":"","title":"Initial deployment"},{"location":"variants/talos_2/initial-deployment/#coreboot-installation","text":"Copy the binaries to the BMC (assuming in the coreboot root directory): scp build/bootblock.signed.ecc root@<BMC_IP>:/tmp/bootblock.signed.ecc scp build/coreboot.rom.signed.ecc root@<BMC_IP>:/tmp/coreboot.rom.signed.ecc If that file is not present, use coreboot.rom instead Backup the HBB partition (for faster later recovery) by invoking this command on BMC: pflash -P HBB -r /tmp/hbb.bin pflash -P HBI -r /tmp/hbi.bin Flash the binaries by replacing HBB partition (execute from BMC): pflash -e -P HBB -p /tmp/bootblock.signed.ecc pflash -e -P HBI -p /tmp/coreboot.rom.signed.ecc Again, if that file is not present, use coreboot.rom instead Answer yes to the prompt and wait for the process to finish. Log into the BMC GUI again at https://<BMC_IP> . Enter the Server power operations ( https://<BMC_IP>/#/server-control/power-operations ) and invoke warm reboot . Go to Serial over LAN remote console ( https://<BMC_IP>/#/server-control/remote-console ). Wait for a while until coreboot shows up: Enjoy the coreboot running on Talos II. Optional: In order to recovery the platform quickly to healthy state, flash the HBB partition back with: pflash -e -P HBB -p /tmp/hbb.bin pflash -e -P HBI -p /tmp/hbi.bin","title":"coreboot installation"},{"location":"variants/talos_2/initial-deployment/#heads-installation","text":"Copy the Heads binary to the BMC (assuming in the Heads root directory): scp build/zImage.bundled root@<BMC_IP>:/tmp/zImage.bundled Log in to the BMC: ssh root@<BMC_IP> Flash the BOOTKERNEL partition with Heads: pflash -e -P BOOTKERNEL -p /tmp/zImage.bundled Answer yes to the prompt and wait for the process to finish. Log into the BMC GUI at https://<BMC_IP>/ . Enter the Server power operations ( https://<BMC_IP>/#/server-control/power-operations ) and invoke warm reboot . Go to Serial over LAN remote console ( https://<BMC_IP>/#/server-control/remote-console ). Wait for a while until Heads shows up: Enjoy the Heads running on Talos II.","title":"Heads installation"},{"location":"variants/talos_2/initial-deployment/#testing-firmware-images-without-flashing","text":"BMC firmware v2.00+ allows testing new firmware images without flashing the physical flash device. This makes testing and switching between two versions (e.g. Hostboot and coreboot) much faster and safer. There are two ways of doing so, here's a more convenient one that uses mboxctl : Read original flash: For earlier versions of coreboot port it is required to read from system that booted at least once, since some of the partitions are modified on the first boot. this is no longer necessary since v0.5.0. root@talos:~# pflash -r /tmp/talos.pnor This file may also be copied out of BMC to a secure place and serve as a backup of whole flash contents. Keep in mind that tmpfs size is limited and exceeding that limit may result in unresponsive BMC, which in most severe cases requires hard power cycle. \"Flashing\" modified partition(s): This is similar to flashing real device with two changes: no need to erase the flash and target file must be specified. New command looks like this: root@talos:~# pflash -f -P <partition> -p <partition>.bin -F /tmp/talos.pnor Since the real flash device is not used, backup can be skipped. The rest is like above: # bootblock pflash -f -P HBB -p /tmp/bootblock.signed.ecc -F /tmp/talos.pnor # coreboot pflash -f -P HBI -p /tmp/coreboot.rom.signed.ecc -F /tmp/talos.pnor # Heads pflash -f -P BOOTKERNEL -p /tmp/zImage.bundled -F /tmp/talos.pnor Mount the file as flash device: root@talos:~# mboxctl --backend file:/tmp/talos.pnor Sometimes this command fails with timeout, in that case repeat it until it succeeds. Optionally, success can be tested with: root@talos:~# mboxctl --lpc-state LPC Bus Maps: BMC Memory BMC Memory tells that emulated flash is used instead of real one. Host doesn't see any difference (except maybe different access times and erase block size), it still reads and writes PNOR the same way as with physical device. Start the platform as described in previous sections and test it. To get back to using real PNOR: root@talos:~# mboxctl --backend vpnor Failed to post message: Connection timed out root@talos:~# mboxctl --lpc-state LPC Bus Maps: Flash Device Even though that command reports failure, it maps LPC back to flash device. This can be tested with mboxctl --lpc-state . (Optional) Flash tested image to permanent storage: root@talos:~# pflash -E -p /tmp/talos.pnor The other method is described on Raptor's wiki and requires starting mboxd manually (still needs BMC firmware v2.00+). It's worth to take a look there because sometimes mboxd stops working ( mboxctl errors every time) and that page shows how it can be started.","title":"Testing firmware images without flashing"},{"location":"variants/talos_2/overview/","text":"Overview Releases - groups information about all releases. Building manual - describes how to build Dasharo for Talos II. Initial deployment - describes initial Dasharo deployment methods (i. e. flashing new firmware) for Talos II. Firmware update - explains supported Dasharo open-source firmware update methods. Recovery - gathers information on how to recover the platform from potential failure. Hardware configuration matrix - describes the platform's hardware configuration used during the Dasharo firmware validation procedure. Test matrix - describes validation scope used during Dasharo firmware validation procedure. Conferences - includes information from various conferences about POWER architecture support in coreboot. TPM connections and support - describes the methods of connecting dedicated TPM module to the board and how to validate it. Useful documents Board manual","title":"Overview"},{"location":"variants/talos_2/overview/#overview","text":"Releases - groups information about all releases. Building manual - describes how to build Dasharo for Talos II. Initial deployment - describes initial Dasharo deployment methods (i. e. flashing new firmware) for Talos II. Firmware update - explains supported Dasharo open-source firmware update methods. Recovery - gathers information on how to recover the platform from potential failure. Hardware configuration matrix - describes the platform's hardware configuration used during the Dasharo firmware validation procedure. Test matrix - describes validation scope used during Dasharo firmware validation procedure. Conferences - includes information from various conferences about POWER architecture support in coreboot. TPM connections and support - describes the methods of connecting dedicated TPM module to the board and how to validate it.","title":"Overview"},{"location":"variants/talos_2/overview/#useful-documents","text":"Board manual","title":"Useful documents"},{"location":"variants/talos_2/recovery/","text":"Recovery Prequisitions To proceed with the recovery procedure the backup with the vendor firmware will be necessary eg. talos.pnor . The backup file should be generated before making any changes in the device flash chip according to documentation in the first step in Testing firmware images without flashing section. Flashing using BMC Flash firmware by executing the following commands on BMC: pflash -E -p /tmp/talos.pnor Log into the BMC GUI at https://<BMC_IP> . Enter the Server power operations ( https://<BMC_IP>/#/server-control/power-operations ) and invoke warm reboot . After rebooting the vendor firmware will be restored. Restore Petitboot If you want to use Petitboot, and you have already installed system Heads, follow this procedure: Download the newest PNOR package from raptor wiki . Unzip downloaded file and find the talos.pnor file. Copy the file to the BMC: scp talos.pnor root@<BMC_IP>:/tmp/talos.pnor Modify partitions by executing the following commands on BMC (this is not necessary): pflash -P HBB -p /tmp/bootblock.signed.ecc -F /tmp/talos.pnor pflash -P HBI -p /tmp/coreboot.rom.signed.ecc -F /tmp/talos.pnor Flash firmware: pflash -E -p /tmp/talos.pnor Log into the BMC GUI at https://<BMC_IP> . Enter the Server power operations ( https://<BMC_IP>/#/server-control/power-operations ) and invoke warm reboot . Enjoy the Petitboot running on Talos II.","title":"Recovery"},{"location":"variants/talos_2/recovery/#recovery","text":"","title":"Recovery"},{"location":"variants/talos_2/recovery/#prequisitions","text":"To proceed with the recovery procedure the backup with the vendor firmware will be necessary eg. talos.pnor . The backup file should be generated before making any changes in the device flash chip according to documentation in the first step in Testing firmware images without flashing section.","title":"Prequisitions"},{"location":"variants/talos_2/recovery/#flashing-using-bmc","text":"Flash firmware by executing the following commands on BMC: pflash -E -p /tmp/talos.pnor Log into the BMC GUI at https://<BMC_IP> . Enter the Server power operations ( https://<BMC_IP>/#/server-control/power-operations ) and invoke warm reboot . After rebooting the vendor firmware will be restored.","title":"Flashing using BMC"},{"location":"variants/talos_2/recovery/#restore-petitboot","text":"If you want to use Petitboot, and you have already installed system Heads, follow this procedure: Download the newest PNOR package from raptor wiki . Unzip downloaded file and find the talos.pnor file. Copy the file to the BMC: scp talos.pnor root@<BMC_IP>:/tmp/talos.pnor Modify partitions by executing the following commands on BMC (this is not necessary): pflash -P HBB -p /tmp/bootblock.signed.ecc -F /tmp/talos.pnor pflash -P HBI -p /tmp/coreboot.rom.signed.ecc -F /tmp/talos.pnor Flash firmware: pflash -E -p /tmp/talos.pnor Log into the BMC GUI at https://<BMC_IP> . Enter the Server power operations ( https://<BMC_IP>/#/server-control/power-operations ) and invoke warm reboot . Enjoy the Petitboot running on Talos II.","title":"Restore Petitboot"},{"location":"variants/talos_2/releases/","text":"Release notes Following Release Notes describe status of Open Source Firmware development for Raptor Computing Systems Talos II For details about our release process please read Dasharo Standard Release Process . Subscribe to Release Newsletter Test results for this platform can be found here . v0.7.0 - 2023-07-26 Fixed CPU appears to be stuck on initial frequency No flashrom support 0.6 Release - Cannot boot if no TPM OS-level access to CBMEM TPM discovery and usage stability Dual CPU setup - Second fan at full speed Known issues Missing parts of Device Tree describing specific unit (VPD, serial numbers) No DIMM temperatures reported Binaries raptor-cs_talos-2_bootblock_v0.7.0.signed.ecc sha256 sha256.sig raptor-cs_talos-2_coreboot_v0.7.0.rom.signed.ecc sha256 sha256.sig raptor-cs_talos-2_zImage_v0.7.0.bundled sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on 4ed0a830b14d6e1841eae0dd3c2e6539a8dcf0a8 revision fc47236e skiboot based on 9858186353f2203fe477f316964e03609d12fd1d revision 1b14dd0b heads based on edf200e7913c62975a424cfb9dbd579747d0665c revision edf200e7913c62975a424cfb9dbd579747d0665c v0.6.0 - 2022-08-26 Added Optional support for Infineon I2C TPM1 chips Initial support for measured boot Fixed Heads console output only on BMC console, not VGA Startup on a single CPU configuration Startup on a single CPU configuration and support for older CPUs (without WOF tables and with different frequencies) CBMEM can no longer be accessed from OS Known issues Missing parts of Device Tree describing specific unit (VPD, serial numbers) CPU appears to be stuck on initial frequency Binaries raptor-cs_talos-2_zImage_v0.6.0.bundled sha256 sha256.sig raptor-cs_talos-2_coreboot_v0.6.0.rom.signed.ecc sha256 sha256.sig raptor-cs_talos-2_bootblock_v0.6.0.signed.ecc sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on 5621a1e revision 2207bbcc skiboot based on 7f90b9cd revision fa060c2c heads based on fdbd9b2 revision 66f0fce0870b729d v0.5.0 - 2022-04-12 Changed Add FSI initialization and functions for accessing devices behind FSI bus Cache MVPD between stages Initialize and train XBus links Change SCOM API to be able to access second CPU Initialize PCIe, MCS, OCC and TOD for second CPU Switch to ELF payload, clean up Device Tree generation Various boot time optimizations Fixed Only one CPU is started SPDs are not exposed in sysfs automatically Known issues Missing parts of Device Tree describing specific unit (VPD, serial numbers) CBMEM can no longer be accessed from OS Binaries raptor-cs_talos-2_bootblock_v0.5.0.signed.ecc sha256 sha256.sig raptor-cs_talos-2_coreboot_v0.5.0.rom.signed.ecc sha256 sha256.sig Heads was not modified in this release, its binary from previous releases can be used. To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on 5621a1e revision c92383f9 skiboot based on 04-16-2019 revision 98581863 v0.4.1 - 2022-01-10 Changed Simplify memlayout Replace PPC_SHIFT with PPC_PLACE macro Change SPR numbers definitions to decimal Print signing output to terminal Fixed Watchdog timing out Sporadic signing failure due to the tools not being built Building with cross compiler other than powerpc64-linux-gnu- Known issues Only one CPU is started SPDs are not exposed in sysfs automatically Missing parts of Device Tree describing specific unit (VPD, serial numbers) Binaries dasharo_talos_2_bootblock_v0.4.1.signed.ecc sha256 sha256.sig dasharo_talos_2_coreboot_v0.4.1.rom.signed.ecc sha256 sha256.sig dasharo_talos_2_zImage_v0.4.1.bundled sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on 5621a1e revision 13b58058 skiboot based on 04-16-2019 revision 98581863 heads based on 21e50681 revision 34c77951 v0.4.0 - 2021-10-29 Added OCC support XIVE support PCIe initialization IPMI block transfer interface Non-constant nodes in Device Tree are generated programmatically Known issues Only one CPU is started SPDs are not exposed in sysfs automatically Missing parts of Device Tree describing specific unit (VPD, serial numbers) Watchdog times out Binaries dasharo_talos_2_bootblock_v0.4.0.signed.ecc sha256 sha256.sig dasharo_talos_2_coreboot.rom.signed.ecc sha256 sha256.sig zImage_v0.4.0.bundled sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on 5621a1e revision b535763b skiboot based on 04-16-2019 revision 98581863 heads based on 21e50681 revision 34c77951","title":"Releases"},{"location":"variants/talos_2/releases/#release-notes","text":"Following Release Notes describe status of Open Source Firmware development for Raptor Computing Systems Talos II For details about our release process please read Dasharo Standard Release Process . Subscribe to Release Newsletter Test results for this platform can be found here .","title":"Release notes"},{"location":"variants/talos_2/releases/#v070-2023-07-26","text":"","title":"v0.7.0 - 2023-07-26"},{"location":"variants/talos_2/releases/#v060-2022-08-26","text":"","title":"v0.6.0 - 2022-08-26"},{"location":"variants/talos_2/releases/#v050-2022-04-12","text":"","title":"v0.5.0 - 2022-04-12"},{"location":"variants/talos_2/releases/#v041-2022-01-10","text":"","title":"v0.4.1 - 2022-01-10"},{"location":"variants/talos_2/releases/#v040-2021-10-29","text":"","title":"v0.4.0 - 2021-10-29"},{"location":"variants/talos_2/test-matrix/","text":"Test matrix About The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary. Module: Dasharo compatibility No. Supported test suite Test suite ID Supported test cases 1. coreboot base port CBP CBP001.001, CBP002.001, CBP004.001 2. Heads bootloader support HDS HDS001.001, HDS001.002 3. Device Tree DVT DVT001.001, DVT002.001 Module: Dasharo security No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM TPM001.001 and TPM002.001 Module: Dasharo performance No. Supported test suite Test suite ID Supported test cases 1. CPU frequency measure CPF CPF001.003","title":"Test matrix"},{"location":"variants/talos_2/test-matrix/#test-matrix","text":"","title":"Test matrix"},{"location":"variants/talos_2/test-matrix/#about","text":"The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.","title":"About"},{"location":"variants/talos_2/test-matrix/#module-dasharo-compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. coreboot base port CBP CBP001.001, CBP002.001, CBP004.001 2. Heads bootloader support HDS HDS001.001, HDS001.002 3. Device Tree DVT DVT001.001, DVT002.001","title":"Module: Dasharo compatibility"},{"location":"variants/talos_2/test-matrix/#module-dasharo-security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM TPM001.001 and TPM002.001","title":"Module: Dasharo security"},{"location":"variants/talos_2/test-matrix/#module-dasharo-performance","text":"No. Supported test suite Test suite ID Supported test cases 1. CPU frequency measure CPF CPF001.003","title":"Module: Dasharo performance"},{"location":"variants/talos_2/tpm-support/","text":"TPM connections and support The following documentation contains most important information about TPM 1.2 module dedicated to the Talos II mainboard. Connecting TPM to the Talos mainboard To properly connect TPM to the Talos II mainboard reproduce the following steps: Turn off the platform by using OpenBMC . Disconnect mainboard from the mains. Based on the documentation find TPM connector on the mainboard. Mount TPM module as shown in the graphics below: Connect mainboard to the mains. Additional information, i. e. TPM header pinout, might be found in the mainboard documentation . TPM module testing Turn on the platform and log into it by using obmc-console-client or KVM . Boot into Heads. Select the Exit to recovery shell option using the arrow keys and Enter. Execute the following command: cbmem -L Output of the above-described command should contains information about TPM logs. Example output: TPM2 log: Specification: 2 .00 Platform class: PC Client No vendor information provided TPM2 log entry 1 : PCR: 2 Event type: Action Digests: SHA1: f78a530fb5a70afcffdc86a98529abd24a90bac9 Event data: FMAP: FMAP TPM2 log entry 2 : PCR: 2 Event type: Action Digests: SHA1: 369155e6eab3b0a874140e591a4c0e992268b4b9 Event data: FMAP: BOOTBLOCK TPM2 log entry 3 : PCR: 2 Event type: Action Digests: SHA1: 5e785c080264aa6e169f70c80ac40b556066292b Event data: FMAP: COREBOOT CBFS: fallback/romstage TPM2 log entry 4 : PCR: 2 Event type: Action Digests: SHA1: ba2a5af955811fbac58a5198545539596eb38c3e Event data: FMAP: COREBOOT CBFS: fallback/ramstage TPM2 log entry 5 : PCR: 2 Event type: Action Digests: SHA1: ba35d4ce29d7b633b5644e2a3206c6069cf7f24d Event data: FMAP: COREBOOT CBFS: fallback/payload TPM2 log entry 6 : PCR: 2 Event type: Action Digests: SHA1: 47b49026133377e05193f8440c9a7cad239e883c Event data: FMAP: COREBOOT CBFS: 1 -cpu.dtb TPM2 log entry 7 : PCR: 3 Event type: Action Digests: SHA256: 6e7b06693452d997ac534e823b1ea79e5bb8ed19ba8a7af878abf10199c3d515 SHA1: 6e7b06693452d997ac534e823b1ea79e5bb8ed19 Event data: VERSION TPM2 log entry 8 : PCR: 2 Event type: Action Digests: SHA256: de73053377e1ae5ba5d2b637a4f5bfaeb410137722f11ef135e7a1be524e3092 SHA1: de73053377e1ae5ba5d2b637a4f5bfaeb4101377 Event data: IMA_CATALOG TPM2 log entry 9 : PCR: 4 Event type: Action Digests: SHA256: cd32830f83a4f74b75d7feac6c03bd3ad8d553f54a8cac4b4b5a4b175ccbce3e SHA1: cd32830f83a4f74b75d7feac6c03bd3ad8d553f5 Event data: BOOTKERNEL Additional information The Module is available at the official 3mdeb store . You can also buy the product by mailing us at: shopping@3mdeb.com .","title":"TPM connection and support"},{"location":"variants/talos_2/tpm-support/#tpm-connections-and-support","text":"The following documentation contains most important information about TPM 1.2 module dedicated to the Talos II mainboard.","title":"TPM connections and support"},{"location":"variants/talos_2/tpm-support/#connecting-tpm-to-the-talos-mainboard","text":"To properly connect TPM to the Talos II mainboard reproduce the following steps: Turn off the platform by using OpenBMC . Disconnect mainboard from the mains. Based on the documentation find TPM connector on the mainboard. Mount TPM module as shown in the graphics below: Connect mainboard to the mains. Additional information, i. e. TPM header pinout, might be found in the mainboard documentation .","title":"Connecting TPM to the Talos mainboard"},{"location":"variants/talos_2/tpm-support/#tpm-module-testing","text":"Turn on the platform and log into it by using obmc-console-client or KVM . Boot into Heads. Select the Exit to recovery shell option using the arrow keys and Enter. Execute the following command: cbmem -L Output of the above-described command should contains information about TPM logs. Example output: TPM2 log: Specification: 2 .00 Platform class: PC Client No vendor information provided TPM2 log entry 1 : PCR: 2 Event type: Action Digests: SHA1: f78a530fb5a70afcffdc86a98529abd24a90bac9 Event data: FMAP: FMAP TPM2 log entry 2 : PCR: 2 Event type: Action Digests: SHA1: 369155e6eab3b0a874140e591a4c0e992268b4b9 Event data: FMAP: BOOTBLOCK TPM2 log entry 3 : PCR: 2 Event type: Action Digests: SHA1: 5e785c080264aa6e169f70c80ac40b556066292b Event data: FMAP: COREBOOT CBFS: fallback/romstage TPM2 log entry 4 : PCR: 2 Event type: Action Digests: SHA1: ba2a5af955811fbac58a5198545539596eb38c3e Event data: FMAP: COREBOOT CBFS: fallback/ramstage TPM2 log entry 5 : PCR: 2 Event type: Action Digests: SHA1: ba35d4ce29d7b633b5644e2a3206c6069cf7f24d Event data: FMAP: COREBOOT CBFS: fallback/payload TPM2 log entry 6 : PCR: 2 Event type: Action Digests: SHA1: 47b49026133377e05193f8440c9a7cad239e883c Event data: FMAP: COREBOOT CBFS: 1 -cpu.dtb TPM2 log entry 7 : PCR: 3 Event type: Action Digests: SHA256: 6e7b06693452d997ac534e823b1ea79e5bb8ed19ba8a7af878abf10199c3d515 SHA1: 6e7b06693452d997ac534e823b1ea79e5bb8ed19 Event data: VERSION TPM2 log entry 8 : PCR: 2 Event type: Action Digests: SHA256: de73053377e1ae5ba5d2b637a4f5bfaeb410137722f11ef135e7a1be524e3092 SHA1: de73053377e1ae5ba5d2b637a4f5bfaeb4101377 Event data: IMA_CATALOG TPM2 log entry 9 : PCR: 4 Event type: Action Digests: SHA256: cd32830f83a4f74b75d7feac6c03bd3ad8d553f54a8cac4b4b5a4b175ccbce3e SHA1: cd32830f83a4f74b75d7feac6c03bd3ad8d553f5 Event data: BOOTKERNEL","title":"TPM module testing"},{"location":"variants/talos_2/tpm-support/#additional-information","text":"The Module is available at the official 3mdeb store . You can also buy the product by mailing us at: shopping@3mdeb.com .","title":"Additional information"},{"location":"variants/tuxedo_ibs15/building/","text":"Dasharo for Tuxedo IBS15 Gen6 - Building manual Intro This documents describes the procedure for compiling coreboot for Tuxedo IBS15. Requirements Docker follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux Git Procedure The easiest way to build coreboot is to use the official Docker image. Obtain the image: docker pull coreboot/coreboot-sdk:0ad5fbd48d Obtain coreboot source code for Tuxedo IBS15: git clone https://github.com/Dasharo/coreboot.git Navigate to the source code directory and checkout to the desired revision: Replace the REVISION with one of the: - tuxedo_ibs15/release for the latest released version - tuxedo_ibs15/vVERSION (e.g. v1.0.0 ) for the given release cd coreboot git checkout REVISION git submodule update --init --recursive --checkout ./build.sh build The resulting coreboot image will be placed in artifacts/dasharo_tuxedo_ibs15_VERSION.rom . Warning: Do not run ./build.sh as root. This command uses docker and should be executed as your current user. If you're having trouble running build.sh on your user account, follow the Docker instructions outlined in Requirements .","title":"Building manual"},{"location":"variants/tuxedo_ibs15/building/#dasharo-for-tuxedo-ibs15-gen6-building-manual","text":"","title":"Dasharo for Tuxedo IBS15 Gen6 - Building manual"},{"location":"variants/tuxedo_ibs15/building/#intro","text":"This documents describes the procedure for compiling coreboot for Tuxedo IBS15.","title":"Intro"},{"location":"variants/tuxedo_ibs15/building/#requirements","text":"Docker follow Install Docker Engine on Ubuntu follow Post-installation steps for Linux Git","title":"Requirements"},{"location":"variants/tuxedo_ibs15/building/#procedure","text":"The easiest way to build coreboot is to use the official Docker image. Obtain the image: docker pull coreboot/coreboot-sdk:0ad5fbd48d Obtain coreboot source code for Tuxedo IBS15: git clone https://github.com/Dasharo/coreboot.git Navigate to the source code directory and checkout to the desired revision: Replace the REVISION with one of the: - tuxedo_ibs15/release for the latest released version - tuxedo_ibs15/vVERSION (e.g. v1.0.0 ) for the given release cd coreboot git checkout REVISION git submodule update --init --recursive --checkout ./build.sh build The resulting coreboot image will be placed in artifacts/dasharo_tuxedo_ibs15_VERSION.rom . Warning: Do not run ./build.sh as root. This command uses docker and should be executed as your current user. If you're having trouble running build.sh on your user account, follow the Docker instructions outlined in Requirements .","title":"Procedure"},{"location":"variants/tuxedo_ibs15/hardware-matrix/","text":"Hardware configuration matrix - Tuxedo IBS15 Introduction This document describes the hardware configurations used for validation of the coreboot port on the Tuxedo IBS15 laptop. IBS15 #1 Component Description CPU Intel(R) Core(TM) i5-1135G7 Internal Cooling RAM Slot 1: KVR29S21S6/8 Slot 2: KVR29S21S6/4 SSD 1. Samsung 980 PRO NVMe 250 GB 2. Samsung 860 EVO SATA M.2 250 GB Flash memory GigaDevice 25B127DSIG 16 MB Network Local network wired connection Internal devices 1. 1920x1080 15 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Fingerprint scanner 5. Camera 6. Audio subsystem 7. Intel Wi-Fi 6 AX201 wireless card Attached devices 1. SanDisk Ultra USB 3.0 64 GB 2. SanDisk Ultra Flair USB 3.0 16 GB 3. Kingston DataTraveler 3.1Gen1 16 GB 4. SanDisk Ultra microSD HC I 16 GB + SD Adapter 5. DELL KB216 USB Keyboard 6. 4-port USB Type-C Hub Pro 7. HDMI 1920x1080p Display 8. Sony MDR-EX15AP headset Power Supply Chicony 65 W Power Control N/A Remote Testing Environment OpenSSH_8.2p1 OpenSSL 1.1.1f IBS15 #2 Component Description CPU Intel(R) Core(TM) i5-11300H Internal Cooling RAM Slot 1: KVR29S21S6/8 Slot 2: KVR29S21S6/4 SSD Toshiba KXG50NV256G NVMe 256GB Flash memory GigaDevice 25B127DSIG 16 MB Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Fingerprint scanner 5. Camera 6. Audio subsystem 7. Intel Wi-Fi 6 AX201 wireless card Attached devices 1. SanDisk Ultra USB 3.0 64 GB 2. SanDisk Ultra Flair USB 3.0 16 GB 3. Kingston DataTraveler 3.1Gen1 16 GB 4. SanDisk Ultra microSD HC I 16 GB + SD Adapter 5. DELL KB216 USB Keyboard 6. 4-port USB Type-C Hub Pro 7. HDMI 1920x1080p Display 8. Sony MDR-EX15AP headset Power Supply Chicony 65 W Power Control N/A Remote Testing Environment OpenSSH_8.2p1 OpenSSL 1.1.1f","title":"Hardware Configuration Matrix"},{"location":"variants/tuxedo_ibs15/hardware-matrix/#hardware-configuration-matrix-tuxedo-ibs15","text":"","title":"Hardware configuration matrix - Tuxedo IBS15"},{"location":"variants/tuxedo_ibs15/hardware-matrix/#introduction","text":"This document describes the hardware configurations used for validation of the coreboot port on the Tuxedo IBS15 laptop.","title":"Introduction"},{"location":"variants/tuxedo_ibs15/hardware-matrix/#ibs15-1","text":"Component Description CPU Intel(R) Core(TM) i5-1135G7 Internal Cooling RAM Slot 1: KVR29S21S6/8 Slot 2: KVR29S21S6/4 SSD 1. Samsung 980 PRO NVMe 250 GB 2. Samsung 860 EVO SATA M.2 250 GB Flash memory GigaDevice 25B127DSIG 16 MB Network Local network wired connection Internal devices 1. 1920x1080 15 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Fingerprint scanner 5. Camera 6. Audio subsystem 7. Intel Wi-Fi 6 AX201 wireless card Attached devices 1. SanDisk Ultra USB 3.0 64 GB 2. SanDisk Ultra Flair USB 3.0 16 GB 3. Kingston DataTraveler 3.1Gen1 16 GB 4. SanDisk Ultra microSD HC I 16 GB + SD Adapter 5. DELL KB216 USB Keyboard 6. 4-port USB Type-C Hub Pro 7. HDMI 1920x1080p Display 8. Sony MDR-EX15AP headset Power Supply Chicony 65 W Power Control N/A Remote Testing Environment OpenSSH_8.2p1 OpenSSL 1.1.1f","title":"IBS15 #1"},{"location":"variants/tuxedo_ibs15/hardware-matrix/#ibs15-2","text":"Component Description CPU Intel(R) Core(TM) i5-11300H Internal Cooling RAM Slot 1: KVR29S21S6/8 Slot 2: KVR29S21S6/4 SSD Toshiba KXG50NV256G NVMe 256GB Flash memory GigaDevice 25B127DSIG 16 MB Network Local network wired connection Internal devices 1. 1920x1080 14 inch screen 2. Internal keyboard with LED backlight 3. Touchpad 4. Fingerprint scanner 5. Camera 6. Audio subsystem 7. Intel Wi-Fi 6 AX201 wireless card Attached devices 1. SanDisk Ultra USB 3.0 64 GB 2. SanDisk Ultra Flair USB 3.0 16 GB 3. Kingston DataTraveler 3.1Gen1 16 GB 4. SanDisk Ultra microSD HC I 16 GB + SD Adapter 5. DELL KB216 USB Keyboard 6. 4-port USB Type-C Hub Pro 7. HDMI 1920x1080p Display 8. Sony MDR-EX15AP headset Power Supply Chicony 65 W Power Control N/A Remote Testing Environment OpenSSH_8.2p1 OpenSSL 1.1.1f","title":"IBS15 #2"},{"location":"variants/tuxedo_ibs15/installation/","text":"Dasharo for Tuxedo IBS15 Gen6 - Installation manual Intro Flashing coreboot can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 20.04. Build flashrom Please follow generic guide for Dasharo flashrom fork . Reading flash contents To read from the flash and save them to a file ( dump.rom ), execute the following command: flashrom -p internal -r dump.rom Installing Dasharo Initial Installation During the initial installation of Dasharo, you will need the supported Intel ME version (and configuration) to be present in the Dasharo firmware image. If you already have a Dasharo compatible ME firmware installed, then proceed with Updating Dasharo instructions . Publicly released binaries do not contain ME binary. If you need a Dasharo compatible Intel ME update for your device, contact us via already established commercial support channel. When flashing binaries with ME binary included, flashing of the whole chip is required. Follow the steps below: Power off the laptop While holding the Fn+M keys, power on the laptop - This unlocks the ME and allows for it to be overwritten. The fans will spin at 100% speed at this point Execute the following command, replacing [path] with the path to the full firmware image (containing ME firmware and flash descriptor) you want to flash: flashrom -p internal -w [ full_image ] Reboot the laptop The laptop will boot into Dasharo. After Dasharo has booted, it is safe to shut down the laptop to silence the fans Note: if you shut down the laptop instead of rebooting, it may be necessary to hold Fn+M for it to boot the first time after flashing. Updating Dasharo If Dasharo is currently installed, only the BIOS region of the flash needs to be updated. Flash it using the following command: flashrom -p internal -w [ path ] --ifd -i bios","title":"Installation manual"},{"location":"variants/tuxedo_ibs15/installation/#dasharo-for-tuxedo-ibs15-gen6-installation-manual","text":"","title":"Dasharo for Tuxedo IBS15 Gen6 - Installation manual"},{"location":"variants/tuxedo_ibs15/installation/#intro","text":"Flashing coreboot can be done from Linux using flashrom with the internal programmer. This document describes the process of building, installing and running flashrom on Ubuntu 20.04.","title":"Intro"},{"location":"variants/tuxedo_ibs15/installation/#build-flashrom","text":"Please follow generic guide for Dasharo flashrom fork .","title":"Build flashrom"},{"location":"variants/tuxedo_ibs15/installation/#reading-flash-contents","text":"To read from the flash and save them to a file ( dump.rom ), execute the following command: flashrom -p internal -r dump.rom","title":"Reading flash contents"},{"location":"variants/tuxedo_ibs15/installation/#installing-dasharo","text":"","title":"Installing Dasharo"},{"location":"variants/tuxedo_ibs15/post_install/","text":"Post-installation setup This document contains extra steps to perform after installing Dasharo in order to enable full functionality. Touchpad hotkey enablement (Linux) The touchpad hotkey needs extra setup to function correctly under Linux. To enable the touchpad hotkey to work under Linux, follow the steps below: Create a file /etc/udev/hwdb.d/60-keyboard.hwdb with the following contents: evdev:atkbd:dmi:bvn*:bvr*:svnNotebook:pnNS50MU:* KEYBOARD_KEY_f7 = 191 KEYBOARD_KEY_f8 = 191 Execute the following commands: sudo systemd-hwdb update sudo udevadm trigger After executing these steps, it should be possible to enable and disable the touchpad using the touchpad hotkey (Fn+F1) on the keyboard when using GNOME.","title":"Post-installation setup"},{"location":"variants/tuxedo_ibs15/post_install/#post-installation-setup","text":"This document contains extra steps to perform after installing Dasharo in order to enable full functionality.","title":"Post-installation setup"},{"location":"variants/tuxedo_ibs15/post_install/#touchpad-hotkey-enablement-linux","text":"The touchpad hotkey needs extra setup to function correctly under Linux. To enable the touchpad hotkey to work under Linux, follow the steps below: Create a file /etc/udev/hwdb.d/60-keyboard.hwdb with the following contents: evdev:atkbd:dmi:bvn*:bvr*:svnNotebook:pnNS50MU:* KEYBOARD_KEY_f7 = 191 KEYBOARD_KEY_f8 = 191 Execute the following commands: sudo systemd-hwdb update sudo udevadm trigger After executing these steps, it should be possible to enable and disable the touchpad using the touchpad hotkey (Fn+F1) on the keyboard when using GNOME.","title":"Touchpad hotkey enablement (Linux)"},{"location":"variants/tuxedo_ibs15/releases/","text":"Tuxedo IBS15 Dasharo Release Notes Following Release Notes describe status of Open Source Firmware development for Tuxedo IBS15 For details about our release process please read Dasharo Standard Release Process . Subscribe to Tuxedo IBS15 Dasharo Release Newsletter Test results for this platform can be found here . v1.0.0 - 2022-03-15 Added Support for Tuxedo InfinityBook S 15 Gen6 Support for EC firmware 1.07.02 Support for Intel ME version 15.0.30.1776 UEFI Boot Support Configurable boot order Configurable boot options UEFI Secure Boot support Tuxedo boot logo Known issues The touchpad ON/OFF switch Fn key is not functional Binaries tuxedo_ibs15_v1.0.0.rom sha256 sha256.sig To verify binary integrity with hash and signature please follow the instructions in Dasharo release signature verification using this key SBOM (Software Bill of Materials) coreboot based on 4.16 revision cf13d6c7 tianocore based on 9522071f7497a1a0b1077d2b0d5fcc97a126cfd0 revision 7f90b9cd","title":"Releases"},{"location":"variants/tuxedo_ibs15/releases/#tuxedo-ibs15-dasharo-release-notes","text":"Following Release Notes describe status of Open Source Firmware development for Tuxedo IBS15 For details about our release process please read Dasharo Standard Release Process . Subscribe to Tuxedo IBS15 Dasharo Release Newsletter Test results for this platform can be found here .","title":"Tuxedo IBS15 Dasharo Release Notes"},{"location":"variants/tuxedo_ibs15/releases/#v100-2022-03-15","text":"","title":"v1.0.0 - 2022-03-15"},{"location":"variants/tuxedo_ibs15/test-matrix/","text":"Test matrix - Tuxedo - Tuxedo IBS15 About The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary. Module: Dasharo compatibility No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports and LCD support DSP DSP001.001, DSP001.002, DSP001.003, DSP002.001, DSP002.002, DSP002.003 4. Embedded Controller and Super I/O initialization ECR Without ECR021.xxx - ECR024.xxx 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB All 9. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 10. UEFI Shell USH All 11. Windows booting WBT WBT001.001 12. Audio subsystem AUD All 13. USB-C support UTC All 14. Network boot PXE PXE007.001 15. M.2 WiFi/Bluetooth WLE All 16. SD card support SDC All 17. USB Camera verification CAM All 19. Fan speed measure FAN FAN001.001 20. SMBIOS DMI DMI002.001, DMI003.001, DMI005.001, DMI006.001, DMI007.001, DMI008.001 Module: Dasharo security No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO VBO006.002, VBO007.002, 3. Measured Boot support MBO All 4. Secure Boot support SBO Without SBO006.001, SBO007.001 and SBO008.001","title":"Test matrix"},{"location":"variants/tuxedo_ibs15/test-matrix/#test-matrix-tuxedo-tuxedo-ibs15","text":"","title":"Test matrix - Tuxedo - Tuxedo IBS15"},{"location":"variants/tuxedo_ibs15/test-matrix/#about","text":"The test matrix is used to determine the scope of tests which the DUT is subjected from before the release of the new binary.","title":"About"},{"location":"variants/tuxedo_ibs15/test-matrix/#module-dasharo-compatibility","text":"No. Supported test suite Test suite ID Supported test cases 1. Memory HCL HCL All 2. UEFI compatible interface EFI All 3. Display ports and LCD support DSP DSP001.001, DSP001.002, DSP001.003, DSP002.001, DSP002.002, DSP002.003 4. Embedded Controller and Super I/O initialization ECR Without ECR021.xxx - ECR024.xxx 5. NVMe support NVM All 6. Custom logo CLG All 7. Custom boot menu key CBK All 8. USB HID and MSC Support USB All 9. Debian Stable and Ubuntu LTS support LBT LBT003.001, LBT003.002, LBT004.001, LBT004.002 10. UEFI Shell USH All 11. Windows booting WBT WBT001.001 12. Audio subsystem AUD All 13. USB-C support UTC All 14. Network boot PXE PXE007.001 15. M.2 WiFi/Bluetooth WLE All 16. SD card support SDC All 17. USB Camera verification CAM All 19. Fan speed measure FAN FAN001.001 20. SMBIOS DMI DMI002.001, DMI003.001, DMI005.001, DMI006.001, DMI007.001, DMI008.001","title":"Module: Dasharo compatibility"},{"location":"variants/tuxedo_ibs15/test-matrix/#module-dasharo-security","text":"No. Supported test suite Test suite ID Supported test cases 1. TPM Support TPM Without TPM001.001 and TPM002.001 2. Verified Boot support VBO VBO006.002, VBO007.002, 3. Measured Boot support MBO All 4. Secure Boot support SBO Without SBO006.001, SBO007.001 and SBO008.001","title":"Module: Dasharo security"}]}